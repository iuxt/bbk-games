// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function($0) { { bayeFlushLcdBuffer($0); } },
 function() { { if (window.bayeStart) bayeStart(); } },
 function() { { if (window.bayeExit) bayeExit(); } },
 function($0) { { var key = UTF8ToString($0); var value = ""; var filename = "baye/" + key; if (window.bayeLoadFileContent) { value = window.bayeLoadFileContent(filename); } else { value = window.localStorage[filename]; } if (value) { var buffer = Module._bayeAlloc(value.length+1); Module.stringToUTF8(value, buffer, 1024*1024*10); return buffer; } return 0; } },
 function($0, $1) { { var key = UTF8ToString($0); var value = UTF8ToString($1); var filename = "baye/" + key; if (window.bayeSaveFileContent) { window.bayeSaveFileContent(filename, value); } else { window.localStorage[filename] = value; } } },
 function() { { if (window.baye == undefined) { window.baye = {}; } if (window.baye.hooks == undefined) { window.baye.hooks = {}; } window.baye.data = baye_bridge_value(_bayeGetGlobal()); } },
 function($0) { { var script = UTF8ToString($0); eval(script); } },
 function($0, $1) { { var name = UTF8ToString($0); var rv = 0; if (window.baye == undefined || window.baye.hooks == undefined || window.baye.hooks[name] == undefined) { rv = -1; } else { var cContext = $1; if (cContext != 0) { var jsContext = baye_bridge_value(cContext); rv = baye.callHook(name, jsContext); } else { rv = baye.callHook(name, undefined); } } return rv; } },
 function($0) { { return baye.callCallback($0); } },
 function($0) { { var name = UTF8ToString($0); if (window.baye && window.baye.hooks && window.baye.hooks[name]) { return 1; } else { return 0; } } },
 function($0) { { var now = new Date(); return now.getTime(); } }];

function _emscripten_asm_const_ii(code, a0) {
 return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iii(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_v(code) {
 return ASM_CONSTS[code]();
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 1303808;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([235,19,0,0,227,19,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,19,0,0,0,24,7,0,0,5,0,0,0,0,0,0,0,64,0,0,0,60,32,0,0,76,0,0,0,0,0,0,0,4,0,0,0,37,0,0,0,52,6,0,0,5,0,0,0,0,0,0,0,100,0,0,0,136,31,0,0,112,0,0,0,0,0,0,0,4,0,0,0,66,0,0,0,224,5,0,0,5,0,0,0,0,0,0,0,136,0,0,0,95,31,0,0,148,0,0,0,0,0,0,0,4,0,0,0,34,0,0,0,68,5,0,0,5,0,0,0,0,0,0,0,172,0,0,0,37,31,0,0,184,0,0,0,0,0,0,0,4,0,0,0,24,0,0,0,228,4,0,0,5,0,0,0,0,0,0,0,208,0,0,0,254,30,0,0,220,0,0,0,0,0,0,0,4,0,0,0,7,0,0,0,132,4,0,0,5,0,0,0,0,0,0,0,244,0,0,0,227,30,0,0,0,1,0,0,0,0,0,0,160,30,0,0,12,4,0,0,0,0,0,0,6,28,0,0,32,2,0,0,0,0,0,0,4,0,0,0,14,0,0,0,168,1,0,0,5,0,0,0,0,0,0,0,48,1,0,0,249,27,0,0,60,1,0,0,0,0,0,0,225,27,0,0,96,1,0,0,0,0,0,0,4,0,0,0,4,0,0,0,108,1,0,0,4,0,0,0,4,0,0,0,120,1,0,0,235,27,0,0,16,0,0,0,0,0,0,0,237,27,0,0,16,0,0,0,1,0,0,0,239,27,0,0,16,0,0,0,2,0,0,0,244,27,0,0,16,0,0,0,3,0,0,0,9,0,0,0,14,0,0,0,180,1,0,0,60,169,2,0,16,0,0,0,0,0,0,0,68,169,2,0,28,0,0,0,1,0,0,0,75,169,2,0,16,0,0,0,3,0,0,0,80,169,2,0,28,0,0,0,4,0,0,0,87,169,2,0,28,0,0,0,6,0,0,0,92,169,2,0,28,0,0,0,8,0,0,0,97,169,2,0,28,0,0,0,10,0,0,0,103,169,2,0,16,0,0,0,12,0,0,0,111,169,2,0,16,0,0,0,13,0,0,0,4,0,0,0,109,0,0,0,44,2,0,0,37,0,0,0,109,0,0,0,56,2,0,0,21,28,0,0,16,0,0,0,0,0,0,0,43,28,0,0,16,0,0,0,1,0,0,0,57,28,0,0,16,0,0,0,2,0,0,0,73,28,0,0,16,0,0,0,3,0,0,0,89,28,0,0,16,0,0,0,4,0,0,0,103,28,0,0,16,0,0,0,5,0,0,0,119,28,0,0,16,0,0,0,6,0,0,0,140,28,0,0,16,0,0,0,7,0,0,0,164,28,0,0,16,0,0,0,8,0,0,0,177,28,0,0,16,0,0,0,9,0,0,0,200,28,0,0,16,0,0,0,10,0,0,0,210,28,0,0,16,0,0,0,11,0,0,0,225,28,0,0,16,0,0,0,12,0,0,0,240,28,0,0,16,0,0,0,13,0,0,0,2,29,0,0,28,0,0,0,14,0,0,0,21,29,0,0,16,0,0,0,16,0,0,0,38,29,0,0,16,0,0,0,17,0,0,0,54,29,0,0,16,0,0,0,18,0,0,0,73,29,0,0,16,0,0,0,19,0,0,0,91,29,0,0,16,0,0,0,20,0,0,0,106,29,0,0,16,0,0,0,21,0,0,0,122,29,0,0,16,0,0,0,22,0,0,0,144,29,0,0,16,0,0,0,23,0,0,0,163,29,0,0,16,0,0,0,24,0,0,0,183,29,0,0,28,0,0,0,25,0,0,0,209,29,0,0,28,0,0,0,27,0,0,0,233,29,0,0,16,0,0,0,29,0,0,0,249,29,0,0,16,0,0,0,30,0,0,0,6,30,0,0,16,0,0,0,31,0,0,0,15,30,0,0,16,0,0,0,32,0,0,0,36,30,0,0,16,0,0,0,33,0,0,0,50,30,0,0,16,0,0,0,34,0,0,0,65,30,0,0,244,3,0,0,36,0,0,0,85,30,0,0,244,3,0,0,68,0,0,0,107,30,0,0,0,4,0,0,100,0,0,0,126,30,0,0,16,0,0,0,107,0,0,0,144,30,0,0,16,0,0,0,108,0,0,0,5,0,0,0,32,0,0,0,28,0,0,0,5,0,0,0,4,0,0,0,28,0,0,0,4,0,0,0,49,0,0,0,24,4,0,0,7,0,0,0,49,0,0,0,36,4,0,0,171,30,0,0,16,0,0,0,0,0,0,0,176,30,0,0,16,0,0,0,1,0,0,0,180,30,0,0,16,0,0,0,48,0,0,0,190,30,0,0,28,0,0,0,2,0,0,0,196,30,0,0,28,0,0,0,4,0,0,0,207,30,0,0,28,0,0,0,6,0,0,0,218,30,0,0,120,4,0,0,8,0,0,0,5,0,0,0,40,0,0,0,28,0,0,0,7,0,0,0,7,0,0,0,144,4,0,0,235,27,0,0,16,0,0,0,0,0,0,0,237,27,0,0,16,0,0,0,1,0,0,0,236,30,0,0,16,0,0,0,2,0,0,0,239,30,0,0,16,0,0,0,3,0,0,0,242,30,0,0,16,0,0,0,4,0,0,0,247,30,0,0,16,0,0,0,5,0,0,0,168,166,2,0,16,0,0,0,6,0,0,0,7,0,0,0,24,0,0,0,240,4,0,0,7,31,0,0,16,0,0,0,4,0,0,0,13,31,0,0,16,0,0,0,5,0,0,0,17,31,0,0,16,0,0,0,6,0,0,0,22,31,0,0,16,0,0,0,7,0,0,0,31,31,0,0,28,0,0,0,16,0,0,0,34,31,0,0,28,0,0,0,18,0,0,0,59,166,2,0,16,0,0,0,20,0,0,0,9,0,0,0,34,0,0,0,80,5,0,0,46,31,0,0,16,0,0,0,0,0,0,0,168,166,2,0,16,0,0,0,1,0,0,0,50,31,0,0,28,0,0,0,2,0,0,0,56,31,0,0,28,0,0,0,4,0,0,0,64,31,0,0,16,0,0,0,6,0,0,0,70,31,0,0,188,5,0,0,7,0,0,0,78,31,0,0,200,5,0,0,12,0,0,0,84,31,0,0,200,5,0,0,20,0,0,0,90,31,0,0,212,5,0,0,28,0,0,0,5,0,0,0,5,0,0,0,16,0,0,0,5,0,0,0,8,0,0,0,16,0,0,0,5,0,0,0,6,0,0,0,16,0,0,0,6,0,0,0,66,0,0,0,236,5,0,0,103,31,0,0,16,0,0,0,1,0,0,0,111,31,0,0,16,0,0,0,32,0,0,0,31,31,0,0,16,0,0,0,62,0,0,0,129,31,0,0,16,0,0,0,63,0,0,0,242,30,0,0,16,0,0,0,64,0,0,0,132,31,0,0,16,0,0,0,65,0,0,0,18,0,0,0,37,0,0,0,64,6,0,0,145,31,0,0,16,0,0,0,0,0,0,0,151,31,0,0,28,0,0,0,1,0,0,0,158,31,0,0,28,0,0,0,3,0,0,0,167,31,0,0,28,0,0,0,5,0,0,0,180,31,0,0,28,0,0,0,7,0,0,0,188,31,0,0,28,0,0,0,9,0,0,0,202,31,0,0,28,0,0,0,11,0,0,0,211,31,0,0,16,0,0,0,13,0,0,0,226,31,0,0,16,0,0,0,14,0,0,0,240,31,0,0,40,0,0,0,15,0,0,0,0,32,0,0,40,0,0,0,19,0,0,0,97,169,2,0,28,0,0,0,23,0,0,0,92,169,2,0,28,0,0,0,25,0,0,0,11,32,0,0,28,0,0,0,27,0,0,0,24,32,0,0,28,0,0,0,29,0,0,0,36,32,0,0,28,0,0,0,31,0,0,0,44,32,0,0,28,0,0,0,33,0,0,0,54,32,0,0,28,0,0,0,35,0,0,0,15,0,0,0,19,0,0,0,36,7,0,0,70,32,0,0,28,0,0,0,0,0,0,0,151,31,0,0,28,0,0,0,2,0,0,0,80,32,0,0,16,0,0,0,4,0,0,0,86,32,0,0,16,0,0,0,5,0,0,0,92,32,0,0,16,0,0,0,6,0,0,0,95,32,0,0,16,0,0,0,7,0,0,0,104,32,0,0,16,0,0,0,8,0,0,0,114,32,0,0,16,0,0,0,9,0,0,0,125,32,0,0,16,0,0,0,10,0,0,0,130,32,0,0,16,0,0,0,11,0,0,0,87,169,2,0,28,0,0,0,12,0,0,0,139,32,0,0,28,0,0,0,14,0,0,0,145,32,0,0,28,0,0,0,16,0,0,0,151,32,0,0,0,4,0,0,14,0,0,0,157,32,0,0,16,0,0,0,18,0,0,0,255,255,255,255,230,220,3,0,230,220,3,0,0,0,4,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,128,63,154,153,153,63,205,204,76,63,0,0,128,63,51,51,51,63,102,102,166,63,205,204,76,63,0,0,128,63,154,153,153,63,0,0,128,63,154,153,25,63,154,153,153,63,154,153,153,63,205,204,76,63,0,0,128,63,0,0,128,63,205,204,140,63,154,153,153,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,140,63,102,102,166,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,192,63,154,153,25,63,154,153,25,63,154,153,25,63,154,153,25,63,154,153,25,63,154,153,25,63,0,0,128,63,205,204,76,63,102,102,102,63,205,204,76,63,102,102,166,63,205,204,204,62,51,51,51,63,154,153,153,63,0,0,128,63,205,204,140,63,154,153,153,63,154,153,25,63,0,0,128,63,0,0,128,63,102,102,166,63,51,51,147,63,205,204,140,63,0,0,192,63,154,153,153,63,205,204,76,63,31,167,2,0,60,167,2,0,81,167,2,0,104,167,2,0,221,166,2,0,244,166,2,0,10,167,2,0,183,167,2,0,210,167,2,0,240,167,2,0,15,168,2,0,35,168,2,0,127,167,2,0,147,167,2,0,168,167,2,0,110,168,2,0,131,168,2,0,152,168,2,0,56,168,2,0,83,168,2,0,64,9,0,0,0,0,0,0,4,0,0,0,14,0,0,0,76,9,0,0,9,0,0,0,14,0,0,0,88,9,0,0,60,169,2,0,16,0,0,0,0,0,0,0,68,169,2,0,28,0,0,0,1,0,0,0,75,169,2,0,16,0,0,0,3,0,0,0,80,169,2,0,28,0,0,0,4,0,0,0,87,169,2,0,28,0,0,0,6,0,0,0,92,169,2,0,28,0,0,0,8,0,0,0,97,169,2,0,28,0,0,0,10,0,0,0,103,169,2,0,16,0,0,0,12,0,0,0,111,169,2,0,16,0,0,0,13,0,0,0,204,9,0,0,0,0,0,0,4,0,0,0,14,0,0,0,216,9,0,0,9,0,0,0,14,0,0,0,228,9,0,0,60,169,2,0,16,0,0,0,0,0,0,0,68,169,2,0,28,0,0,0,1,0,0,0,75,169,2,0,16,0,0,0,3,0,0,0,80,169,2,0,28,0,0,0,4,0,0,0,87,169,2,0,28,0,0,0,6,0,0,0,92,169,2,0,28,0,0,0,8,0,0,0,97,169,2,0,28,0,0,0,10,0,0,0,103,169,2,0,16,0,0,0,12,0,0,0,111,169,2,0,16,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,188,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,11,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,239,220,19,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,11,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,247,224,19,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,11,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,108,101,97,114,32,108,105,110,101,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,10,0,47,114,111,109,47,100,97,116,46,108,105,98,0,47,100,97,116,97,47,100,97,116,46,108,105,98,0,47,100,97,116,97,47,0,123,32,105,102,32,40,119,105,110,100,111,119,46,98,97,121,101,83,116,97,114,116,41,32,98,97,121,101,83,116,97,114,116,40,41,59,32,125,0,123,32,105,102,32,40,119,105,110,100,111,119,46,98,97,121,101,69,120,105,116,41,32,98,97,121,101,69,120,105,116,40,41,59,32,125,0,123,32,98,97,121,101,70,108,117,115,104,76,99,100,66,117,102,102,101,114,40,36,48,41,59,32,125,0,50,48,48,50,48,57,32,49,54,58,52,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,3,4,9,97,105,70,105,103,104,116,67,111,109,109,97,110,100,0,116,121,112,101,0,115,73,100,120,0,97,73,100,120,0,99,97,108,99,65,116,116,97,99,107,82,97,110,103,101,0,38,116,121,112,101,0,38,114,97,110,103,101,83,105,122,101,0,114,97,110,103,101,0,103,101,116,83,107,105,108,108,73,100,115,0,115,107,105,108,108,73,100,115,0,100,65,114,109,115,74,78,78,117,109,0,100,105,100,83,104,111,119,70,105,103,104,116,83,105,116,117,97,116,105,111,110,0,100,105,100,82,101,102,114,101,115,104,70,105,103,104,116,83,105,116,117,97,116,105,111,110,0,101,110,116,101,114,66,97,116,116,108,101,0,98,97,116,116,108,101,83,116,97,103,101,49,0,98,97,116,116,108,101,83,116,97,103,101,50,0,98,97,116,116,108,101,83,116,97,103,101,51,0,98,97,116,116,108,101,83,116,97,103,101,52,0,98,97,116,116,108,101,83,116,97,103,101,53,0,101,120,105,116,66,97,116,116,108,101,0,100,105,100,82,101,102,114,101,115,104,70,105,103,104,116,83,116,97,116,101,66,97,114,0,100,114,97,119,71,101,110,101,114,97,108,115,0,102,114,97,109,101,0,100,105,100,83,104,111,119,70,105,103,104,116,83,116,97,116,101,66,97,114,0,98,97,116,116,108,101,68,114,105,118,101,80,101,114,115,111,110,83,116,97,116,101,0,38,117,112,100,97,116,101,0,102,105,103,104,116,67,111,117,110,116,87,105,110,110,101,114,0,108,111,97,100,70,105,103,104,116,77,97,112,0,255,0,0,255,1,0,0,1,11,10,9,10,9,10,115,104,111,119,83,107,105,108,108,0,38,116,101,114,0,119,105,108,108,83,104,111,119,80,75,65,110,105,109,97,116,105,111,110,0,19,19,19,19,35,37,37,20,21,21,35,36,38,39,39,40,41,35,36,39,0,0,42,43,0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,11,0,0,0,10,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,7,7,0,20,17,17,7,7,14,7,7,7,7,7,7,7,0,0,7,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,33,33,0,0,0,33,33,0,33,33,33,33,33,33,33,0,0,33,33,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,104,111,119,83,116,97,116,101,67,104,97,110,103,101,100,0,38,115,116,97,116,101,0,100,105,100,83,104,111,119,80,75,65,110,105,109,97,116,105,111,110,0,102,105,103,104,116,87,105,108,108,83,104,111,119,72,101,108,112,0,103,101,116,70,105,103,104,116,101,114,73,110,102,111,0,105,110,102,111,0,38,103,101,110,101,114,97,108,73,110,100,101,120,0,103,101,116,84,101,114,114,97,105,110,73,110,102,111,0,100,74,78,83,112,101,73,100,0,100,74,78,83,112,101,83,70,114,109,0,100,74,78,83,112,101,69,70,114,109,0,100,74,78,83,112,101,83,88,0,100,74,78,77,111,100,101,0,200,171,190,252,179,183,205,203,0,102,105,103,104,116,77,101,110,117,0,38,111,118,101,114,0,1,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,202,154,59,115,112,101,32,37,100,32,37,100,32,110,111,116,32,102,111,117,110,100,10,0,119,105,108,108,79,112,101,110,77,101,110,117,0,119,105,108,108,67,104,97,110,103,101,77,101,110,117,83,101,108,101,99,116,105,111,110,0,100,105,100,67,104,97,110,103,101,77,101,110,117,83,101,108,101,99,116,105,111,110,0,119,105,108,108,67,108,111,115,101,77,101,110,117,0,103,101,116,77,97,120,65,114,109,115,0,38,109,97,120,65,114,109,115,0,119,105,108,108,84,97,107,101,79,102,102,84,111,111,108,0,100,105,100,83,104,111,119,77,97,105,110,77,97,112,0,115,104,111,119,77,105,110,105,77,97,112,0,115,104,111,119,77,97,105,110,72,101,108,112,0,86,101,114,32,37,115,0,79,112,101,110,32,37,115,32,102,97,105,108,101,100,10,0,85,115,105,110,103,32,99,117,115,116,111,109,32,108,105,98,10,0,67,97,110,32,110,111,116,32,108,111,97,100,32,108,105,98,10,0,116,114,105,101,100,58,10,0,37,115,10,0,100,97,116,46,108,105,98,0,102,111,110,116,46,98,105,110,0,102,111,110,116,73,109,97,103,101,70,111,114,67,104,97,114,0,38,99,111,100,101,0,38,105,110,100,101,120,0,103,97,109,84,114,97,99,101,80,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,10,20,0,0,0,0,6,0,45,0,73,0,63,0,83,0,45,0,151,0,63,0,6,0,70,0,73,0,88,0,83,0,71,0,151,0,88,0,0,0,24,0,78,0,56,0,0,0,62,0,78,0,93,0,81,0,24,0,158,0,56,0,81,0,62,0,158,0,93,0,31,0,33,0,38,12,9,0,0,108,111,97,100,32,108,105,98,32,102,97,105,108,101,100,0,105,110,105,116,32,101,110,118,32,102,97,105,108,101,100,0,100,105,100,79,112,101,110,78,101,119,71,97,109,101,0,115,104,111,119,65,98,111,117,116,0,119,105,108,108,83,97,118,101,71,97,109,101,0,47,0,100,105,100,76,111,97,100,71,97,109,101,0,183,181,187,216,0,99,104,111,111,115,105,110,103,65,99,116,111,114,85,112,100,97,116,101,0,69,114,114,111,114,58,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,105,118,101,84,111,111,108,0,38,116,111,111,108,73,110,100,101,120,0,38,114,101,115,117,108,116,0,116,97,107,101,79,102,102,84,111,111,108,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,0,112,101,114,115,111,110,80,114,111,112,101,114,116,105,101,115,68,105,115,112,108,97,121,87,105,116,100,104,0,8,10,4,4,4,4,4,4,4,5,4,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,4,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,11,116,111,111,108,80,114,111,112,101,114,116,105,101,115,68,105,115,112,108,97,121,87,105,116,100,104,0,112,101,114,115,111,110,80,114,111,112,101,114,116,105,101,115,67,111,117,110,116,0,116,111,111,108,80,114,111,112,101,114,116,105,101,115,67,111,117,110,116,0,99,105,116,121,80,114,111,112,101,114,116,105,101,115,67,111,117,110,116,0,103,95,117,105,67,102,103,0,103,101,116,84,111,111,108,80,114,111,112,101,114,116,121,86,97,108,117,101,0,112,114,111,112,101,114,116,121,73,110,100,101,120,0,118,97,108,117,101,0,103,101,116,84,111,111,108,80,114,111,112,101,114,116,121,84,105,116,108,101,0,116,105,116,108,101,0,103,101,116,80,101,114,115,111,110,78,97,109,101,0,38,112,101,114,115,111,110,73,110,100,101,120,0,110,97,109,101,0,103,101,116,80,101,114,115,111,110,80,114,111,112,101,114,116,121,86,97,108,117,101,0,103,101,116,80,101,114,115,111,110,80,114,111,112,101,114,116,121,84,105,116,108,101,0,103,101,116,67,105,116,121,80,114,111,112,101,114,116,121,68,105,115,112,108,97,121,0,100,105,115,112,108,97,121,0,119,105,108,108,83,104,111,119,67,105,116,121,73,110,102,111,0,38,99,105,116,121,0,116,97,99,116,105,99,83,116,97,103,101,49,0,116,97,99,116,105,99,83,116,97,103,101,85,115,101,114,0,116,97,99,116,105,99,83,116,97,103,101,50,0,116,97,99,116,105,99,83,116,97,103,101,51,0,116,97,99,116,105,99,83,116,97,103,101,52,0,116,97,99,116,105,99,83,116,97,103,101,53,0,200,183,182,168,205,203,179,246,0,200,183,182,168,0,215,238,180,243,0,200,161,207,251,0,1,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,78,111,116,32,105,109,112,108,101,109,101,110,116,100,10,0,103,95,101,110,103,105,110,101,86,101,114,115,105,111,110,0,99,95,82,101,70,108,97,103,0,99,95,83,120,0,99,95,83,121,0,99,95,69,120,0,99,95,69,121,0,103,95,115,99,114,101,101,110,87,105,100,116,104,0,103,95,115,99,114,101,101,110,72,101,105,103,104,116,0,103,95,70,108,105,112,68,114,97,119,105,110,103,0,103,95,77,101,110,117,84,111,117,99,104,67,111,109,102,105,114,109,0,103,95,101,114,114,111,114,83,116,114,105,110,103,0,38,103,95,97,115,121,110,99,65,99,116,105,111,110,73,68,0,103,95,97,115,121,110,99,65,99,116,105,111,110,80,97,114,97,109,115,0,103,95,97,115,121,110,99,65,99,116,105,111,110,83,116,114,105,110,103,80,97,114,97,109,0,103,95,97,115,121,110,99,65,99,116,105,111,110,83,116,114,105,110,103,80,97,114,97,109,65,114,114,97,121,0,103,95,97,115,121,110,99,65,99,116,105,111,110,85,49,54,80,97,114,97,109,65,114,114,97,121,0,103,95,86,105,115,83,99,114,0,103,95,70,105,103,104,116,77,97,112,68,97,116,97,0,103,95,70,105,103,104,116,77,97,112,0,103,95,70,105,103,104,116,80,97,116,104,0,103,95,70,103,116,65,116,107,82,110,103,0,103,95,84,105,108,101,73,100,0,103,95,69,110,101,84,109,112,80,114,111,118,0,103,95,77,97,112,87,105,100,0,103,95,77,97,112,72,103,116,0,103,95,70,111,117,99,115,88,0,103,95,70,111,117,99,115,89,0,103,95,77,97,112,83,88,0,103,95,77,97,112,83,89,0,103,95,80,97,116,104,83,88,0,103,95,80,97,116,104,83,89,0,103,95,80,85,115,101,83,88,0,103,95,80,85,115,101,83,89,0,103,95,66,97,107,85,112,88,0,103,95,66,97,107,85,112,89,0,103,95,67,105,116,121,88,0,103,95,67,105,116,121,89,0,103,95,70,103,116,79,118,101,114,0,103,95,70,103,116,87,101,97,116,104,101,114,0,103,95,70,103,116,66,111,117,116,67,110,116,0,103,95,77,97,105,110,71,101,110,73,100,120,0,103,95,76,111,111,107,69,110,101,109,121,0,103,95,76,111,111,107,77,111,118,105,101,0,103,95,77,111,118,101,83,112,101,101,100,0,103,95,80,108,97,121,101,114,75,105,110,103,0,103,95,89,101,97,114,68,97,116,101,0,103,95,77,111,110,116,104,68,97,116,101,0,103,95,80,73,100,120,0,103,95,65,117,116,111,85,112,100,97,116,101,77,97,112,88,89,0,103,95,80,101,114,115,111,110,115,81,117,101,117,101,0,38,103,95,71,111,111,100,115,81,117,101,117,101,0,70,73,71,72,84,69,82,83,95,73,68,88,0,70,73,71,72,84,69,82,83,0,103,95,67,105,116,121,80,111,115,0,120,0,121,0,115,101,116,120,0,115,101,116,121,0,103,95,79,114,100,101,114,81,117,101,117,101,0,103,95,101,110,103,105,110,101,67,111,110,102,105,103,0,101,110,97,98,108,101,84,111,111,108,65,116,116,97,99,107,82,97,110,103,101,0,102,105,120,67,105,116,121,79,102,102,115,101,116,0,102,105,120,84,104,101,119,79,118,101,114,70,108,111,119,0,102,105,120,70,111,111,100,79,118,101,114,70,108,111,119,0,102,105,120,79,118,101,114,70,108,111,119,49,54,0,102,105,120,67,111,110,115,117,109,101,77,111,110,101,121,0,102,105,120,70,105,103,104,116,77,111,118,101,79,117,116,82,97,110,103,101,0,101,110,97,98,108,101,49,54,98,105,116,67,111,110,115,117,109,101,77,111,110,101,121,0,101,110,97,98,108,101,83,99,114,105,112,116,0,102,105,120,65,108,105,101,110,97,116,101,67,111,109,115,117,109,101,84,104,101,119,0,100,105,115,97,98,108,101,83,76,0,97,105,76,101,118,101,108,85,112,83,112,101,101,100,0,100,105,115,97,98,108,101,65,103,101,71,114,111,119,0,101,110,97,98,108,101,67,117,115,116,111,109,82,97,116,105,111,0,114,97,116,105,111,79,102,65,114,109,115,84,111,76,101,118,101,108,0,114,97,116,105,111,79,102,65,114,109,115,84,111,65,103,101,0,114,97,116,105,111,79,102,65,114,109,115,84,111,73,81,0,114,97,116,105,111,79,102,65,114,109,115,84,111,70,111,114,99,101,0,114,97,116,105,111,79,102,65,116,116,84,111,70,111,114,99,101,0,114,97,116,105,111,79,102,65,116,116,84,111,73,81,0,114,97,116,105,111,79,102,65,116,116,84,111,65,103,101,0,114,97,116,105,111,79,102,68,101,102,101,110,99,101,84,111,70,111,114,99,101,0,114,97,116,105,111,79,102,68,101,102,101,110,99,101,84,111,73,81,0,114,97,116,105,111,79,102,68,101,102,101,110,99,101,84,111,65,103,101,0,114,97,116,105,111,79,102,70,111,111,100,84,111,65,114,109,115,80,101,114,77,111,117,116,104,0,114,97,116,105,111,79,102,70,111,111,100,84,111,65,114,109,115,80,101,114,68,97,121,0,97,114,109,115,80,101,114,68,101,118,111,116,105,111,110,0,97,114,109,115,80,101,114,77,111,110,101,121,0,109,97,120,76,101,118,101,108,0,114,101,115,112,111,110,115,101,78,111,116,101,79,102,66,101,116,116,108,101,0,97,105,68,101,102,101,110,99,101,77,111,100,101,0,97,105,65,116,116,97,99,107,77,101,116,104,111,100,0,109,97,105,110,77,101,110,117,66,117,116,116,111,110,82,101,99,116,115,0,112,101,114,105,111,100,77,101,110,117,66,117,116,116,111,110,82,101,99,116,115,0,115,97,118,101,70,97,99,101,76,105,115,116,65,110,99,104,111,114,0,100,105,115,97,98,108,101,69,120,112,71,114,111,119,105,110,103,0,104,105,100,101,82,105,103,104,116,66,111,114,100,101,114,0,103,95,70,103,116,80,97,114,97,109,0,77,111,100,101,0,87,97,121,0,67,105,116,121,73,110,100,101,120,0,77,97,112,73,100,0,77,80,114,111,118,101,110,100,101,114,0,69,80,114,111,118,101,110,100,101,114,0,71,101,110,65,114,114,97,121,0,103,95,71,101,110,80,111,115,0,104,112,0,109,112,0,109,111,118,101,0,97,99,116,105,118,101,0,103,95,71,101,110,65,116,116,0,99,97,110,110,121,0,116,101,114,0,98,105,108,101,0,97,114,109,115,84,121,112,101,0,97,116,0,100,102,0,103,95,83,107,105,108,108,115,0,97,105,109,0,112,111,119,101,114,0,100,101,115,116,114,111,121,0,117,115,101,77,112,0,119,101,97,116,104,101,114,0,101,108,97,110,100,0,111,108,97,110,100,0,101,97,114,109,0,103,95,84,111,111,108,115,0,117,115,101,102,108,97,103,0,99,104,97,110,103,101,65,116,116,97,99,107,82,97,110,103,101,0,105,113,0,97,114,109,0,103,95,67,105,116,105,101,115,0,83,116,97,116,101,0,66,101,108,111,110,103,0,83,97,116,114,97,112,73,100,0,70,97,114,109,105,110,103,76,105,109,105,116,0,70,97,114,109,105,110,103,0,67,111,109,109,101,114,99,101,76,105,109,105,116,0,67,111,109,109,101,114,99,101,0,80,101,111,112,108,101,68,101,118,111,116,105,111,110,0,65,118,111,105,100,67,97,108,97,109,105,116,121,0,80,111,112,117,108,97,116,105,111,110,76,105,109,105,116,0,80,111,112,117,108,97,116,105,111,110,0,77,111,116,104,98,97,108,108,65,114,109,115,0,80,101,114,115,111,110,81,117,101,117,101,0,80,101,114,115,111,110,115,0,84,111,111,108,81,117,101,117,101,0,84,111,111,108,115,0,103,95,80,101,114,115,111,110,115,0,79,108,100,66,101,108,111,110,103,0,76,101,118,101,108,0,70,111,114,99,101,0,73,81,0,68,101,118,111,116,105,111,110,0,67,104,97,114,97,99,116,101,114,0,69,120,112,101,114,105,101,110,99,101,0,84,104,101,119,0,65,114,109,115,84,121,112,101,0,84,111,111,108,49,0,84,111,111,108,50,0,69,113,117,105,112,0,65,103,101,0,208,0,128,0,47,114,111,109,47,0,47,100,97,116,97,47,0,123,32,118,97,114,32,107,101,121,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,59,32,118,97,114,32,118,97,108,117,101,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,49,41,59,32,118,97,114,32,102,105,108,101,110,97,109,101,32,61,32,34,98,97,121,101,47,34,32,43,32,107,101,121,59,32,105,102,32,40,119,105,110,100,111,119,46,98,97,121,101,83,97,118,101,70,105,108,101,67,111,110,116,101,110,116,41,32,123,32,119,105,110,100,111,119,46,98,97,121,101,83,97,118,101,70,105,108,101,67,111,110,116,101,110,116,40,102,105,108,101,110,97,109,101,44,32,118,97,108,117,101,41,59,32,125,32,101,108,115,101,32,123,32,119,105,110,100,111,119,46,108,111,99,97,108,83,116,111,114,97,103,101,91,102,105,108,101,110,97,109,101,93,32,61,32,118,97,108,117,101,59,32,125,32,125,0,37,48,50,88,0,123,32,118,97,114,32,107,101,121,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,59,32,118,97,114,32,118,97,108,117,101,32,61,32,34,34,59,32,118,97,114,32,102,105,108,101,110,97,109,101,32,61,32,34,98,97,121,101,47,34,32,43,32,107,101,121,59,32,105,102,32,40,119,105,110,100,111,119,46,98,97,121,101,76,111,97,100,70,105,108,101,67,111,110,116,101,110,116,41,32,123,32,118,97,108,117,101,32,61,32,119,105,110,100,111,119,46,98,97,121,101,76,111,97,100,70,105,108,101,67,111,110,116,101,110,116,40,102,105,108,101,110,97,109,101,41,59,32,125,32,101,108,115,101,32,123,32,118,97,108,117,101,32,61,32,119,105,110,100,111,119,46,108,111,99,97,108,83,116,111,114,97,103,101,91,102,105,108,101,110,97,109,101,93,59,32,125,32,105,102,32,40,118,97,108,117,101,41,32,123,32,118,97,114,32,98,117,102,102,101,114,32,61,32,77,111,100,117,108,101,46,95,98,97,121,101,65,108,108,111,99,40,118,97,108,117,101,46,108,101,110,103,116,104,43,49,41,59,32,77,111,100,117,108,101,46,115,116,114,105,110,103,84,111,85,84,70,56,40,118,97,108,117,101,44,32,98,117,102,102,101,114,44,32,49,48,50,52,42,49,48,50,52,42,49,48,41,59,32,114,101,116,117,114,110,32,98,117,102,102,101,114,59,32,125,32,114,101,116,117,114,110,32,48,59,32,125,0,47,114,111,109,47,102,111,110,116,46,98,105,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,64,6,0,32,0,0,0,0,0,0,0,0,0,0,0,192,18,1,32,12,0,0,0,0,0,0,0,0,0,0,0,12,0,192,0,0,0,0,0,0,0,0,0,0,0,0,31,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,5,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,152,25,128,0,0,0,0,0,0,0,0,0,144,27,1,32,36,0,0,0,0,0,0,0,0,0,0,0,8,0,192,24,1,8,63,194,24,65,0,32,20,0,192,6,0,32,0,0,0,0,0,0,0,7,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,34,100,65,128,0,0,0,0,0,0,0,5,0,80,5,0,80,5,0,80,5,0,80,5,0,80,5,0,80,0,0,0,0,0,0,102,102,102,0,0,0,0,0,0,0,0,0,0,0,4,0,128,12,0,192,0,0,0,0,0,0,0,0,0,0,0,3,0,48,2,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,36,4,128,108,6,192,0,0,0,0,0,0,0,0,0,0,0,3,96,54,2,64,72,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,128,16,1,0,16,1,0,16,1,0,8,0,64,0,0,1,0,8,0,64,4,0,64,4,0,64,4,0,128,16,0,0,0,0,2,0,64,8,1,0,32,1,0,8,0,64,2,0,0,0,0,2,0,16,0,128,4,0,32,4,0,128,16,2,0,0,0,0,0,0,36,2,64,72,4,128,144,4,128,72,2,64,36,0,0,0,0,1,32,18,0,144,9,0,72,9,0,144,18,1,32,0,0,0,0,0,14,0,128,8,0,128,8,0,128,8,0,0,0,0,0,0,0,0,0,0,0,128,8,0,128,8,0,128,8,0,128,56,0,0,0,0,0,3,224,34,2,224,40,2,128,40,2,128,40,3,128,0,0,1,192,20,1,64,20,1,64,20,7,64,68,7,192,0,0,0,0,0,62,2,64,40,2,128,40,2,128,40,2,128,36,3,224,0,0,3,224,18,0,160,10,0,160,10,0,160,10,1,32,62,0,0,0,0,62,3,192,56,3,0,48,3,0,48,3,128,60,3,224,0,0,3,224,30,0,224,6,0,96,6,0,96,14,1,224,62,0,0,0,0,0,2,0,32,31,192,32,2,0,0,0,1,252,0,0,0,0,0,0,16,64,136,5,0,32,5,0,136,16,64,0,0,0,0,0,0,0,6,0,96,0,3,252,0,0,96,6,0,0,0,0,0,0,0,0,0,0,192,12,0,0,0,0,192,12,0,0,0,0,0,0,0,32,5,0,80,8,128,136,16,65,4,32,34,2,0,0,0,0,4,4,64,66,8,32,129,16,17,0,160,10,0,64,0,0,0,0,0,0,63,193,132,12,0,96,2,0,64,8,1,4,63,192,0,0,3,252,25,129,152,25,129,152,25,129,152,25,129,152,25,128,0,0,2,4,32,66,4,32,66,4,32,66,4,16,128,240,0,0,0,0,0,240,16,130,4,32,66,4,32,66,4,32,66,4,0,0,0,0,0,28,6,0,128,16,1,252,16,0,128,6,0,28,0,0,0,0,0,0,0,1,152,25,128,0,0,1,152,25,128,0,0,0,0,0,16,2,0,64,8,0,128,16,2,2,32,20,0,128,0,0,0,0,0,32,2,0,32,2,0,32,2,0,32,2,3,254,0,0,0,4,128,72,4,128,144,9,0,144,18,1,32,36,2,64,36,0,0,0,0,2,0,64,8,1,0,32,4,0,128,16,3,254,0,0,0,0,0,0,0,0,0,15,1,8,32,66,4,0,0,0,0,0,0,0,0,0,15,1,8,32,66,100,38,66,4,16,128,240,0,0,0,0,0,16,2,128,32,2,0,32,2,0,32,2,0,160,4,0,0,1,128,36,2,0,112,10,128,168,10,128,112,2,1,32,12,0,0,0,0,0,63,192,0,0,3,252,0,0,0,63,192,0,0,0,0,0,0,0,16,194,50,36,33,132,0,3,254,0,3,254,0,0,0,0,0,0,48,36,196,3,131,2,76,64,56,0,0,0,0,0,0,0,0,0,0,2,28,66,36,34,68,35,132,0,0,0,0,0,0,0,0,0,0,1,143,37,4,32,66,2,80,24,240,0,0,0,0,0,0,16,1,3,252,2,0,64,63,192,128,8,1,0,0,0,0,4,0,76,7,0,192,52,4,64,52,0,192,7,0,76,4,0,0,0,3,32,14,0,48,2,192,34,2,192,48,14,3,32,0,0,0,0,192,48,12,3,0,64,3,0,76,3,48,12,192,48,0,192,0,48,0,192,3,0,12,0,32,12,3,32,204,51,0,192,48,0,0,0,0,0,24,194,82,66,20,33,37,33,140,0,0,0,0,0,0,0,0,0,0,3,12,48,192,0,0,0,0,6,0,96,0,0,0,0,0,0,6,0,96,0,0,0,0,3,12,48,192,0,0,0,0,2,0,32,7,0,168,2,0,32,7,0,136,8,128,136,7,0,0,0,0,112,8,128,136,8,128,112,2,0,32,15,128,32,2,0,0,0,1,128,36,2,64,24,0,0,0,0,0,0,0,0,0,0,0,0,0,64,12,1,128,16,2,0,0,0,0,0,0,0,0,0,0,0,1,32,54,2,64,72,0,0,0,0,0,0,0,0,0,0,0,32,5,58,36,96,130,8,0,128,8,0,129,4,32,60,0,0,0,2,0,244,18,193,36,30,0,240,3,192,46,34,97,172,15,128,32,0,2,2,23,64,136,16,65,4,16,64,136,23,66], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([2,0,0,0,0,64,248,16,195,20,50,3,32,52,3,132,24,129,112,32,0,0,3,128,100,6,0,96,31,128,96,6,1,224,38,34,126,25,192,0,16,66,136,41,2,160,20,0,128,20,66,170,74,160,170,4,64,0,6,0,144,8,0,96,9,0,144,9,0,96,1,0,144,6,0,0,32,131,16,57,3,146,45,82,213,45,82,117,39,34,48,67,112,0,2,0,32,5,0,80,120,242,2,16,64,136,8,129,116,24,194,2,2,0,32,7,0,112,127,243,254,31,192,248,15,193,206,24,98,1,0,0,240,16,130,4,64,36,2,64,36,2,32,65,8,15,0,0,0,0,112,31,193,252,63,227,254,63,225,252,31,192,112,0,0,0,0,0,248,16,66,114,40,162,138,40,162,114,16,64,248,0,0,0,2,0,80,8,129,4,32,36,1,32,33,4,8,128,80,2,0,0,2,0,112,15,129,252,63,231,255,63,225,252,15,128,112,2,0,0,0,3,254,32,34,2,32,34,2,32,34,2,32,35,254,0,0,0,0,3,254,63,227,254,63,227,254,63,227,254,63,227,254,0,0,0,0,0,32,5,0,80,8,128,136,16,65,4,32,39,255,0,0,0,0,0,32,7,0,112,15,128,248,31,193,252,63,231,255,0,0,0,0,2,98,22,64,136,5,3,38,53,96,136,22,66,98,0,0,0,0,0,0,0,0,16,0,199,255,0,192,16,0,0,0,0,0,0,0,0,0,0,0,64,24,7,255,24,0,64,0,0,0,0,0,0,2,0,32,7,0,112,10,128,32,2,0,32,2,0,32,2,0,0,2,0,32,2,0,32,2,0,32,10,128,112,7,0,32,2,0,0,0,0,0,127,247,255,0,0,0,127,247,255,0,0,0,0,0,0,0,15,254,127,195,248,63,129,240,31,0,224,14,0,64,0,0,0,0,15,254,64,66,8,32,129,16,17,0,160,10,0,64,0,0,0,0,0,96,15,1,248,63,195,252,15,0,240,15,0,240,15,0,0,0,0,240,15,0,240,15,0,240,63,195,252,31,128,240,6,0,0,64,6,0,88,4,96,65,132,4,65,132,96,88,6,0,64,0,0,0,32,6,1,160,98,24,34,2,24,32,98,1,160,6,0,32,0,0,7,252,64,100,6,64,101,246,64,100,6,64,103,254,63,224,0,0,0,64,4,0,224,27,3,24,96,205,246,96,129,240,4,0,0,31,2,72,68,72,66,132,44,66,130,44,42,81,66,72,31,0,0,0,1,240,32,132,4,64,68,4,64,68,4,32,129,240,0,0,0,0,0,0,3,0,40,126,68,2,64,39,228,2,128,48,0,0,0,0,0,0,4,0,96,7,0,120,7,0,96,4,0,0,0,0,0,0,0,24,1,128,24,1,128,152,25,131,248,63,1,128,8,0,0,0,1,240,32,132,228,95,69,244,95,68,228,32,129,240,0,0,0,0,0,0,96,100,2,64,36,2,64,36,2,64,38,6,0,0,0,0,0,0,96,100,18,65,36,34,82,36,194,68,38,6,0,0,0,0,0,32,2,0,32,2,0,32,2,0,32,2,0,36,0,0,0,0,0,224,17,1,16,1,0,32,4,0,128,16,1,244,0,0,0,0,0,96,9,0,144,1,0,32,1,0,144,9,0,100,0,0,0,0,0,32,6,0,96,10,0,160,18,1,240,2,0,36,0,0,0,0,1,240,16,1,0,30,1,16,1,0,16,17,0,228,0,0,0,0,0,32,4,0,128,16,1,96,25,1,16,17,1,20,14,0,0,0,1,240,17,0,16,2,0,32,4,0,64,4,0,68,0,0,0,0,0,224,17,1,16,10,0,64,10,1,16,17,1,20,14,0,0,0,0,224,17,1,16,17,1,48,13,0,16,2,0,68,0,0,0,0,2,48,36,130,72,36,130,72,36,130,72,36,130,50,0,0,0,0,2,32,34,2,32,34,2,32,34,2,32,34,66,32,0,0,0,0,2,48,36,130,72,32,130,16,34,2,32,36,2,122,0,0,0,0,2,48,36,130,72,32,130,16,32,130,72,36,130,50,0,0,0,0,2,16,35,2,48,37,2,80,41,2,248,33,2,18,0,0,0,0,2,120,36,2,64,39,2,72,32,130,8,36,130,50,0,0,0,0,2,32,36,2,128,43,2,200,40,130,136,40,130,114,0,0,0,0,2,124,96,66,8,32,130,16,33,2,16,33,2,18,0,0,0,0,2,112,104,130,136,37,2,32,37,2,136,40,130,138,39,0,0,0,2,112,104,130,136,40,130,152,38,130,8,33,2,34,0,0,0,0,3,24,74,68,164,10,65,36,18,66,36,66,71,153,0,0,0,16,66,34,34,36,33,66,20,33,66,20,33,34,34,34,16,64,0,16,66,98,41,36,145,65,20,33,68,20,65,40,34,242,16,64,0,16,66,98,41,36,145,65,20,33,65,20,145,41,34,98,16,64,0,16,66,18,35,36,49,69,20,81,73,20,249,33,34,18,16,64,0,16,66,2,39,164,65,68,20,113,64,148,9,36,162,50,16,64,0,16,66,34,36,36,129,72,20,225,73,20,145,41,34,98,16,64,0,16,66,2,47,164,9,65,20,17,66,20,33,34,34,34,16,64,0,16,66,98,41,36,145,73,20,97,73,20,145,41,34,98,16,64,0,16,66,114,40,164,137,72,148,153,70,148,9,33,34,34,16,64,0,16,66,146,42,164,169,74,148,169,74,148,169,42,162,146,16,64,0,16,66,2,40,164,137,72,148,137,72,148,137,40,162,138,16,64,0,16,66,2,51,37,73,84,149,9,81,21,33,52,35,122,16,64,0,16,66,2,41,164,165,72,84,153,72,84,133,42,98,154,16,64,0,16,66,2,40,164,153,73,148,169,74,148,189,40,162,138,16,64,0,16,66,2,55,165,65,84,21,113,80,149,9,52,163,50,16,64,0,16,66,2,49,37,33,84,21,113,84,149,73,52,163,50,16,64,0,16,66,2,55,165,9,81,21,17,82,21,33,50,35,34,16,64,0,16,66,2,51,37,73,84,149,49,84,149,73,52,163,50,16,64,0,16,66,2,51,37,73,84,149,73,83,149,9,49,35,34,16,64,0,16,66,2,44,165,53,83,84,85,73,85,21,61,98,10,16,64,0,7,1,140,34,34,34,66,20,33,66,18,34,34,33,140,7,0,0,7,1,140,38,34,146,65,20,33,68,18,130,47,33,140,7,0,0,7,1,140,38,34,146,65,20,33,65,18,146,38,33,140,7,0,0,7,1,140,33,34,50,69,20,81,79,146,18,33,33,140,7,0,0,7,1,140,47,34,130,78,20,17,65,18,146,38,33,140,7,0,0,7,1,140,34,34,66,72,20,225,73,18,146,38,33,140,7,0,0,7,1,140,47,34,18,66,20,33,68,18,66,36,33,140,7,0,0,7,1,140,38,34,146,73,20,97,73,18,146,38,33,140,7,0,0,7,1,140,38,34,146,73,20,113,65,18,34,36,33,140,7,0,0,7,1,140,41,34,170,74,148,169,74,146,170,41,33,140,7,0,0,34,3,254,84,36,80,207,229,144,111,228,144,79,228,144,79,224,0,2,128,36,255,224,40,243,9,100,145,143,116,0,163,54,204,32,0,16,66,2,32,36,1,64,21,253,64,20,1,32,34,2,16,64,0,16,66,2,32,36,249,64,20,1,64,21,253,32,34,2,16,64,0,16,66,2,47,36,1,64,20,241,64,20,1,63,162,2,16,64,0,16,66,2,32,37,253,85,85,85,89,213,5,63,226,2,16,64,0,16,66,2,63,164,65,68,21,249,72,148,137,63,226,2,16,64,0,16,66,66,34,36,1,95,212,1,69,20,137,48,98,2,16,64,0,16,66,2,36,36,65,68,20,121,92,20,65,36,162,58,16,64,0,16,66,2,33,36,145,73,20,137,72,149,5,32,34,2,16,64,0,16,66,2,36,36,65,95,20,81,69,20,149,48,226,2,16,64,0,16,66,2,34,36,33,66,21,253,66,20,33,34,34,2,16,64,0,33,2,254,176,11,124,164,66,252,32,130,16,47,226,16,39,0,0,56,2,62,253,40,82,81,74,148,124,140,136,120,132,148,122,32,0,0,0,112,2,0,32,2,0,32,2,0,32,2,0,112,0,0,0,0,3,184,17,1,16,17,1,16,17,1,16,17,3,184,0,0,0,0,7,119,34,34,34,34,34,34,34,34,34,34,39,119,0,0,0,0,7,230,36,66,68,36,66,40,34,130,40,33,7,16,0,0,0,0,3,142,16,65,4,8,128,136,8,128,80,5,0,32,0,0,0,0,7,126,34,66,36,34,65,68,20,65,68,8,64,142,0,0,0,0,6,127,34,162,42,34,161,74,20,161,74,20,160,159,0,0,0,0,6,255,37,82,85,37,82,149,41,82,149,17,81,63,0,0,0,0,7,103,34,34,20,33,66,8,33,66,20,34,39,119,0,0,0,0,1,220,8,128,80,5,0,32,5,0,80,8,129,220,0,0,0,0,7,119,34,33,66,20,32,130,20,33,66,34,39,119,0,0,0,0,6,127,34,161,74,20,160,138,20,161,74,34,167,127,0,0,0,0,1,0,16,3,128,56,5,64,16,1,0,16,1,0,0,0,0,0,0,224,49,130,72,78,68,68,0,67,136,49,130,224,0,0,0,0,1,128,24,1,128,24,1,128,0,0,0,24,1,128,0,0,0,0,0,80,5,0,80,0,0,0,0,0,0,0,0,0,0,0,0,4,128,72,4,131,252,9,0,144,9,3,252,18,1,32,18,0,0,0,3,220,24,128,208,13,0,96,63,192,96,6,0,96,15,0,0,0,1,130,36,66,72,37,1,160,5,128,164,18,66,36,1,128,0,0,0,192,18,1,32,20,0,156,20,130,40,33,2,41,28,96,0,0,1,0,16,2,0,64,0,0,0,0,0,0,0,0,0,0,0,0,64,8,0,128,16,1,0,16,1,0,16,0,128,8,0,64,0,16,0,128,8,0,64,4,0,64,4,0,64,8,0,128,16,0,0,0,0,32,2,1,36,10,128,112,5,0,136,16,64,0,0,0,0,0,0,0,2,0,32,2,1,252,2,0,32,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,128,8,1,0,0,0,0,0,0,0,0,0,0,0,1,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,128,0,0,0,0,0,2,0,64,8,1,0,32,4,0,128,16,2,0,0,0,0,0,0,112,8,129,4,16,65,4,16,65,4,8,128,112,0,0,0,2,0,96,14,0,96,6,0,96,6,0,96,6,0,240,0,0,0,0,0,240,25,129,24,1,128,48,6,0,192,24,1,248,0,0,0,0,0,112,9,128,24,1,0,32,1,0,24,9,128,112,0,0,0,0,128,24,3,128,120,5,128,216,25,129,254,1,128,24,0,0,0,0,1,248,24,1,128,30,0,48,1,128,24,19,0,224,0,0,0,0,0,32,4,0,128,24,1,240,25,129,152,25,128,240,0,0,0,0,1,248,17,129,24,3,0,48,6,0,96,6,0,96,0,0,0,0,0,112,13,128,216,13,128,112,13,128,216,13,128,112,0,0,0,0,0,112,13,128,216,13,128,216,7,128,48,2,0,64,0,0,0,0,0,0,0,0,0,24,1,128,0,0,0,24,1,128,0,0,0,0,0,0,0,1,128,24,0,0,24,1,128,8,1,0,0,0,0,0,0,6,1,128,96,24,2,0,24,0,96,1,128,6,0,0,0,0,0,0,0,0,0,31,192,0,31,192,0,0,0,0,0,0,0,0,3,0,12,0,48,0,192,2,0,192,48,12,3,0,0,0,0,12,1,32,51,3,48,6,0,192,12,0,192,0,0,192,12,0,0,31,2,8,78,69,36,82,69,36,82,68,216,32,65,248,0,0,0,0,0,32,7,0,80,9,128,248,17,129,12,32,192,0,0,0,0,0,3,240,25,129,152,31,1,152,25,129,152,63,0,0,0,0,0,0,0,116,8,193,132,24,1,128,24,0,132,7,128,0,0,0,0,0,3,240,24,129,140,24,193,140,24,193,152,63,0,0,0,0,0,0,3,252,24,65,144,31,1,144,24,1,132,63,192,0,0,0,0,0,3,252,24,65,144,31,1,144,24,1,128,60,0,0,0,0,0,0,0,116,12,193,132,24,1,128,24,224,196,7,192,0,0,0,0,0,3,222,24,193,140,31,193,140,24,193,140,61,224,0,0,0,0,0,0,240,6,0,96,6,0,96,6,0,96,15,0,0,0,0,0,0,0,120,3,0,48,3,0,48,3,0,176,6,0,0,0,0,0,0,7,152,49,3,32,52,3,192,54,3,48,121,192,0,0,0,0,0,3,192,24,1,128,24,1,128,24,65,140,63,192,0,0,0,0,0,6,3,48,99,142,61,99,102,50,99,6,120,240,0,0,0,0,0,7,30,56,195,76,50,195,28,48,195,12,120,64,0,0,0,0,0,0,240,25,131,12,48,195,12,48,193,152,15,0,0,0,0,0,0,7,224,51,3,48,51,3,224,48,3,0,120,0,0,0,0,0,0,0,240,25,131,12,48,195,12,48,193,152,15,0,12,0,0,0,0,3,240,25,129,152,25,129,240,30,1,176,57,192,0,0,0,0,0,0,112,12,128,192,6,0,48,1,128,152,7,0,0,0,0,0,0,3,252,38,64,96,6,0,96,6,0,96,15,0,0,0,0,0,0,3,222,24,193,140,24,193,140,24,192,136,7,0,0,0,0,0,0,3,206,24,65,132,12,128,200,7,0,112,2,0,0,0,0,0,0,7,119,50,35,50,55,35,92,29,193,136,8,128,0,0,0,0,0,3,220,24,128,208,6,0,112,9,129,12,57,224,0,0,0,0,0,3,142,24,64,200,7,0,48,3,0,48,7,128,0,0,0,0,0,3,252,33,128,48,6,0,192,12,1,132,63,192,0,0,0,0,0,0,14,0,128,8,0,128,8,0,128,8,0,128,14,0,0,0,0,2,0,16,0,128,4,0,32,1,0,8,0,64,2,0,0,0,0,7,0,16,1,0,16,1,0,16,1,0,16,7,0,0,0,0,0,0,32,5,0,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,240,0,0,0,0,1,128,12,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,240,17,1,16,15,128,16,0,0,0,0,0,128,8,0,128,15,0,136,8,128,136,15,0,0,0,0,0,0,0,0,0,0,112,8,128,128,8,0,136,7,0,0,0,0,0,0,0,8,0,128,8,7,128,136,8,128,156,6,128,0,0,0,0,0,0,0,0,0,112,8,128,248,8,0,136,7,0,0,0,0,0,0,0,24,2,64,32,15,192,32,2,0,32,2,0,32,0,0,0,0,0,0,0,64,120,8,128,112,4,0,248,8,128,112,0,0,0,0,0,128,8,0,176,12,128,136,8,128,136,8,128,0,0,0,0,0,0,32,0,0,32,2,0,32,2,0,32,2,0,0,0,0,0,0,0,32,0,0,32,6,0,32,2,0,32,18,0,192,0,0,0,0,0,128,8,0,128,9,0,160,12,0,160,9,0,0,0,0,0,0,0,32,2,0,32,2,0,32,2,0,32,2,0,0,0,0,0,0,0,0,0,0,208,10,128,168,10,128,168,10,128,0,0,0,0,0,0,0,0,0,224,9,0,144,9,0,144,9,0,0,0,0,0,0,0,0,0,0,192,18,2,16,33,1,32,12,0,0,0,0,0,0,0,0,0,0,240,8,128,136,8,128,240,8,0,128,8,0,0,0,0,0,0,0,120,8,128,136,8,128,120,0,128,8,0,128,0,0,0,0,0,0,176,4,128,64,4,0,64,4,0,0,0,0,0,0,0,0,0,0,96,9,0,128,6,0,16,9,0,96,0,0,0,0,0,32,2,0,112,2,0,32,2,0,40,1,0,0,0,0,0,0,0,0,0,0,144,9,0,144,9,0,152,7,0,0,0,0,0,0,0,0,0,2,8,32,129,16,17,0,160,4,0,0,0,0,0,0,0,0,0,2,34,34,33,84,21,64,136,8,128,0,0,0,0,0,0,0,0,1,152,9,0,96,6,0,144,25,128,0,0,0,0,0,0,0,0,3,24,17,0,160,6,0,64,8,0,128,16,0,0,0,0,0,0,1,248,17,0,32,4,0,136,31,128,0,0,0,0,0,32,4,0,64,4,0,64,8,0,64,4,0,64,4,0,32,0,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,0,32,1,0,16,1,0,16,0,128,16,1,0,16,1,0,32,0,0,127,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,0,32,2,0,32,2,0,0,2,0,0,0,0,0,2,128,80,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,2,128,252,2,128,80,15,192,80,5,0,0,0,0,0,2,0,120,10,128,160,6,0,48,2,128,168,15,0,32,0,0,0,0,0,72,10,128,176,5,0,40,3,64,84,4,128,0,0,0,0,0,0,32,5,0,80,7,0,168,10,128,144,6,192,0,0,0,0,4,0,64,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,16,2,0,32,2,0,32,2,0,32,1,0,8,0,0,0,4,0,32,1,0,16,1,0,16,1,0,16,2,0,64,0,0,0,0,0,0,2,0,168,7,0,112,10,128,32,0,0,0,0,0,0,0,0,32,2,0,32,15,128,32,2,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,64,8,0,0,0,0,0,0,0,0,15,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,128,16,1,0,16,2,0,32,4,0,64,4,0,128,0,0,0,0,0,112,8,128,136,8,128,136,8,128,136,7,0,0,0,0,0,0,0,32,6,0,32,2,0,32,2,0,32,7,0,0,0,0,0,0,0,112,8,128,8,1,0,32,4,0,128,15,128,0,0,0,0,0,0,112,8,128,8,3,0,8,0,128,136,7,0,0,0,0,0,0,0,16,3,0,80,5,0,144,7,128,16,1,128,0,0,0,0,0,0,248,8,0,128,15,0,8,0,128,136,7,0,0,0,0,0,0,0,112,9,0,128,15,0,136,8,128,136,7,0,0,0,0,0,0,0,248,9,0,16,2,0,32,2,0,32,2,0,0,0,0,0,0,0,112,8,128,136,7,0,136,8,128,136,7,0,0,0,0,0,0,0,112,8,128,136,8,128,120,0,128,72,7,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,32,0,0,0,0,128,16,2,0,64,8,0,64,2,0,16,0,128,0,0,0,0,0,0,0,0,0,248,0,0,0,15,128,0,0,0,0,0,0,0,4,0,32,1,0,8,0,64,8,1,0,32,4,0,0,0,0,0,0,0,112,8,128,136,1,0,32,2,0,0,2,0,0,0,0,0,0,0,112,8,128,152,10,128,168,11,128,128,7,128,0,0,0,0,0,0,32,2,0,48,5,0,80,7,128,72,12,192,0,0,0,0,0,0,240,4,128,72,7,0,72,4,128,72,15,0,0,0,0,0,0,0,120,8,128,128,8,0,128,8,0,136,7,0,0,0,0,0,0,0,240,4,128,72,4,128,72,4,128,72,15,0,0,0,0,0,0,0,248,4,128,80,7,0,80,4,0,72,15,128,0,0,0,0,0,0,248,4,128,80,7,0,80,4,0,64,14,0,0,0,0,0,0,0,56,4,128,128,8,0,156,8,128,72,3,0,0,0,0,0,0,0,204,4,128,72,7,128,72,4,128,72,12,192,0,0,0,0,0,0,248,2,0,32,2,0,32,2,0,32,15,128,0,0,0,0,0,0,124,1,0,16,1,0,16,1,0,16,9,0,224,0,0,0,0,0,236,4,128,80,6,0,80,5,0,72,14,192,0,0,0,0,0,0,224,4,0,64,4,0,64,4,0,68,15,192,0,0,0,0,0,0,216,13,128,216,13,128,168,10,128,168,10,128,0,0,0,0,0,0,220,4,128,104,6,128,88,5,128,72,14,128,0,0,0,0,0,0,112,8,128,136,8,128,136,8,128,136,7,0,0,0,0,0,0,0,240,4,128,72,7,0,64,4,0,64,14,0,0,0,0,0,0,0,112,8,128,136,8,128,136,14,128,152,7,0,24,0,0,0,0,0,240,4,128,72,7,0,80,4,128,72,14,192,0,0,0,0,0,0,120,8,128,128,6,0,16,0,128,136,15,0,0,0,0,0,0,0,248,10,128,32,2,0,32,2,0,32,7,0,0,0,0,0,0,0,204,4,128,72,4,128,72,4,128,72,3,0,0,0,0,0,0,0,204,4,128,72,5,0,80,3,0,32,2,0,0,0,0,0,0,0,168,10,128,168,7,0,80,5,0,80,5,0,0,0,0,0,0,0,216,5,0,80,2,0,32,5,0,80,13,128,0,0,0,0,0,0,216,5,0,80,2,0,32,2,0,32,7,0,0,0,0,0,0,0,248,9,0,16,2,0,32,4,0,72,15,128,0,0,0,0,3,128,32,2,0,32,2,0,32,2,0,32,2,0,56,0,0,0,4,0,64,4,0,32,2,0,16,1,0,16,0,128,0,0,0,0,7,0,16,1,0,16,1,0,16,1,0,16,1,0,112,0,0,0,2,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,192,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,72,3,128,72,3,192,0,0,0,0,0,0,192,4,0,64,7,0,72,4,128,72,7,0,0,0,0,0,0,0,0,0,0,0,3,128,72,4,0,64,3,128,0,0,0,0,0,0,24,0,128,8,3,128,72,4,128,72,3,192,0,0,0,0,0,0,0,0,0,0,3,0,72,7,128,64,3,128,0,0,0,0,0,0,28,2,0,32,7,128,32,2,0,32,7,128,0,0,0,0,0,0,0,0,0,0,3,192,72,3,0,64,7,128,68,3,128,0,0,0,192,4,0,64,7,0,72,4,128,72,14,192,0,0,0,0,0,0,32,0,0,0,6,0,32,2,0,32,7,0,0,0,0,0,0,0,16,0,0,0,3,0,16,1,0,16,1,0,16,14,0,0,0,0,192,4,0,64,5,192,80,7,0,72,14,192,0,0,0,0,0,0,224,2,0,32,2,0,32,2,0,32,15,128,0,0,0,0,0,0,0,0,0,0,15,0,168,10,128,168,10,128,0,0,0,0,0,0,0,0,0,0,15,0,72,4,128,72,14,192,0,0,0,0,0,0,0,0,0,0,3,0,72,4,128,72,3,0,0,0,0,0,0,0,0,0,0,0,15,0,72,4,128,72,7,0,64,14,0,0,0,0,0,0,0,0,3,128,72,4,128,72,3,128,8,1,192,0,0,0,0,0,0,0,13,128,96,4,0,64,14,0,0,0,0,0,0,0,0,0,0,0,7,128,64,3,0,8,7,128,0,0,0,0,0,0,0,2,0,32,7,0,32,2,0,32,1,128,0,0,0,0,0,0,0,0,0,0,13,128,72,4,128,72,3,192,0,0,0,0,0,0,0,0,0,0,14,192,72,5,0,48,2,0,0,0,0,0,0,0,0,0,0,0,10,128,168,7,0,80,5,0,0,0,0,0,0,0,0,0,0,0,13,128,80,2,0,80,13,128,0,0,0,0,0,0,0,0,0,0,14,192,72,5,0,48,2,0,32,12,0,0,0,0,0,0,0,0,7,128,16,2,0,32,7,128,0,0,0,0,1,128,16,1,0,16,2,0,16,1,0,16,1,0,24,0,0,16,1,0,16,1,0,16,1,0,16,1,0,16,1,0,16,1,0,0,6,0,32,2,0,32,1,0,32,2,0,32,2,0,96,0,0,64,10,64,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,128,4,5,128,32,2,0,64,4,0,128,0,0,0,0,0,0,63,128,4,5,128,32,2,0,32,4,0,64,8,0,0,0,0,0,1,0,16,2,0,96,10,1,32,2,0,32,0,0,0,0,0,16,1,0,32,6,0,160,18,0,32,2,0,32,2,0,0,0,0,32,2,1,252,16,65,8,0,128,16,2,0,64,0,0,0,0,0,32,2,1,254,16,32,4,0,64,8,1,0,32,0,0,0,0,0,0,0,1,248,2,0,32,2,1,252,0,0,0,0,0,0,0,0,0,0,1,252,2,0,32,2,0,32,63,224,0,0,0,0,0,0,32,2,3,248,6,0,160,18,2,32,10,0,64,0,0,0,0,0,32,2,0,32,63,192,96,10,1,32,34,0,96,2,0,0,0,0,64,4,1,248,4,128,72,8,128,136,18,130,16,0,0,0,0,64,66,4,65,250,4,128,72,8,128,136,18,130,16,0,0,0,0,1,0,16,0,184,60,0,120,60,0,32,2,0,16,0,0,0,0,65,2,16,64,242,56,0,64,7,3,192,2,0,32,1,0,0,0,0,64,4,0,124,8,128,136,17,0,32,4,0,128,0,0,0,0,64,66,4,64,122,4,128,136,17,0,32,4,0,128,0,0,0,0,0,128,8,0,252,17,2,16,2,0,32,4,0,128,0,0,0,0,64,130,8,64,250,17,2,16,2,0,32,4,0,128,0,0,0,0,0,0,0,0,248,0,128,8,0,129,252,0,0,0,0,0,0,0,64,2,0,64,250,0,128,8,1,1,248,0,0,0,0,0,0,0,0,16,9,0,144,63,224,144,9,0,32,2,0,64,0,0,0,0,64,18,9,64,146,9,3,254,9,0,144,10,0,32,4,0,0,0,0,0,8,0,64,16,0,136,1,0,32,4,1,128,0,0,0,0,65,2,8,64,2,16,0,136,1,0,96,24,0,0,0,0,0,0,0,0,31,128,8,1,0,32,6,0,144,16,128,0,0,0,0,0,64,2,0,65,250,0,128,16,2,0,80,8,129,4,0,0,0,0,0,128,8,0,128,63,128,144,10,0,136,8,128,120,0,0,0,0,64,130,8,64,130,15,7,136,9,0,128,8,128,120,0,0,0,0,0,0,0,65,4,8,128,72,1,0,32,4,0,128,0,0,0,0,64,2,1,66,18,17,0,160,2,0,64,4,0,128,16,0,0,4,0,64,7,128,136,8,129,80,3,0,32,4,0,128,16,0,0,0,64,130,15,64,146,17,2,160,6,0,64,8,1,0,0,0,0,0,0,24,30,0,32,2,3,254,4,0,64,8,0,128,16,0,0,0,64,2,3,65,194,4,0,64,127,192,64,8,0,128,16,0,0,0,0,0,0,0,64,18,128,136,1,0,32,4,0,128,16,0,0,0,0,0,4,0,40,16,128,144,1,0,32,4,0,128,16,0,0,0,64,2,8,66,82,17,0,32,2,0,64,8,1,0,32,0,0,0,0,248,0,0,0,63,224,32,2,0,64,4,0,128,16,0,0,0,64,2,31,64,2,0,7,252,4,0,64,8,0,128,16,0,0,0,0,128,8,0,128,12,0,176,9,128,136,8,0,128,8,0,0,8,64,130,8,64,194,11,0,152,8,128,128,8,0,128,8,0,0,0,0,32,2,1,252,2,0,32,4,0,64,8,1,0,0,0,0,0,0,0,0,1,248,0,0,0,0,3,254,0,0,0,0,0,0,0,0,0,15,192,4,4,128,40,1,0,40,4,128,128,0,0,0,4,0,32,0,1,240,2,0,112,10,129,32,2,0,32,2,0,0,0,0,0,0,128,8,1,0,16,2,0,32,4,0,128,0,0,0,0,0,0,0,0,16,4,128,68,8,33,2,32,0,0,0,0,0,0,64,2,0,64,18,4,128,68,8,33,2,32,0,0,0,0,0,0,32,5,0,80,18,4,128,68,8,33,2,32,0,0,0,0,0,0,0,0,8,0,144,10,0,192,8,0,128,7,128,0,0,0,0,0,64,2,0,64,2,18,1,64,24,1,0,16,0,240,0,0,0,0,64,10,0,161,4,18,1,64,24,1,0,16,0,248,0,0,0,0,0,0,63,128,8,1,0,16,2,0,64,8,1,0,0,0,0,0,64,2,0,67,250,0,128,16,2,0,64,8,1,0,0,0,0,0,32,5,0,83,242,1,0,32,2,0,64,8,1,0,0,0,0,0,0,0,0,0,0,0,0,192,19,0,15,0,0,0,0,0,0,0,64,2,0,64,2,0,1,192,35,0,15,0,0,0,0,0,0,0,0,6,0,144,9,0,97,128,38,0,31,0,0,0,0,0,0,0,0,32,2,3,252,2,0,168,10,65,36,6,0,32,0,0,0,0,64,34,2,64,34,63,224,32,18,129,36,38,64,32,0,0,0,0,96,41,2,96,32,63,224,32,18,129,36,34,64,96,2,0,0,0,0,0,0,1,252,0,64,8,5,0,32,1,0,16,0,0,0,0,0,96,1,129,136,6,0,32,0,1,192,3,128,8,0,0,0,0,0,0,2,0,32,4,0,64,9,0,136,19,195,196,0,0,0,0,0,0,0,128,8,5,0,48,3,128,72,8,1,0,0,0,0,0,0,16,30,0,64,7,227,192,4,0,64,4,0,60,0,0,0,0,0,0,0,0,128,8,3,252,4,64,72,2,0,32,1,0,0,16,1,0,8,0,128,63,192,68,2,128,32,1,0,16,0,0,0,0,0,0,0,0,0,15,128,8,0,128,16,31,224,0,0,0,0,0,0,0,15,192,4,0,64,8,0,131,255,0,0,0,0,0,0,0,0,0,0,0,0,31,192,4,31,192,4,31,192,0,0,0,0,0,0,0,0,1,248,0,128,8,31,128,8,0,129,248,0,0,0,0,0,240,0,0,0,31,128,8,1,0,16,2,0,64,0,0,0,0,0,16,9,0,144,9,0,144,9,0,16,2,0,32,4,0,0,0,0,0,1,0,144,9,1,16,17,2,18,65,64,24,0,0,0,0,0,0,0,1,0,16,129,16,18,1,64,24,1,0,0,0,0,0,0,0,31,129,8,16,129,16,17,1,248,16,0,0,0,0,0,0,0,0,31,129,8,0,128,16,1,0,32,4,0,128,0,0,0,0,0,0,31,193,4,16,128,8,1,0,16,2,0,64,0,0,0,0,0,32,2,1,248,18,1,32,127,224,32,2,0,32,0,0,0,0,0,0,31,128,16,2,0,32,2,3,254,0,0,0,0,0,0,0,0,0,31,192,4,31,224,8,0,128,16,1,0,32,4,0,0,0,1,0,8,32,68,0,128,16,2,0,64,24,0,0,0,0,0,0,64,130,8,67,242,33,2,16,2,0,32,4,0,128,16,0,0,0,0,32,2,0,248,2,128,40,4,128,72,9,128,0,0,0,0,0,0,0,8,0,128,15,193,16,1,0,32,4,0,128,0,0,0,65,2,254,241,1,124,33,2,16,127,234,146,33,34,22,33,0,0,17,225,146,37,36,20,185,64,20,125,36,82,69,39,214,69,0,0,1,15,16,66,132,68,248,36,72,68,132,72,116,140,72,8,128,0,1,15,36,183,235,40,244,75,162,179,207,68,2,128,16,14,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,7,0,80,9,128,248,16,129,12,32,192,0,0,0,0,0,3,240,25,129,152,31,1,152,25,129,152,63,0,0,0,0,0,0,3,252,24,65,128,24,1,128,24,1,128,60,0,0,0,0,0,0,0,32,7,0,112,9,128,152,16,193,12,63,224,0,0,0,0,0,3,252,24,65,144,31,1,144,24,1,132,63,192,0,0,0,0,0,1,252,16,192,24,3,0,96,12,65,132,31,192,0,0,0,0,0,3,222,24,193,140,31,193,140,24,193,140,61,224,0,0,0,0,0,0,240,16,130,148,47,66,148,32,65,8,15,0,0,0,0,0,0,0,240,6,0,96,6,0,96,6,0,96,15,0,0,0,0,0,0,7,152,49,3,32,52,3,192,54,3,48,121,192,0,0,0,0,0,0,32,7,0,80,9,128,140,16,193,6,56,240,0,0,0,0,0,6,7,48,99,142,61,99,118,50,99,6,120,240,0,0,0,0,0,6,30,48,195,140,52,195,44,49,195,12,120,64,0,0,0,0,0,1,252,16,64,136,15,128,136,0,1,4,31,192,0,0,0,0,0,0,240,25,131,12,48,195,12,48,193,152,15,0,0,0,0,0,0,3,254,24,193,140,24,193,140,24,193,140,61,224,0,0,0,0,0,3,240,25,129,152,25,129,240,24,1,128,60,0,0,0,0,0,0,3,252,24,64,192,6,0,64,8,65,4,63,192,0,0,0,0,0,3,252,38,64,96,6,0,96,6,0,96,15,0,0,0,0,0,0,1,152,6,64,96,6,0,96,6,0,96,15,0,0,0,0,0,0,0,240,6,1,248,38,66,100,31,128,96,15,0,0,0,0,0,0,3,206,12,64,104,3,0,56,4,192,134,28,240,0,0,0,0,0,2,121,19,33,50,19,32,252,3,0,48,7,128,0,0,0,0,0,0,112,8,129,140,24,193,140,8,130,218,61,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,65,40,17,1,16,19,0,204,0,0,0,0,0,0,0,0,96,9,0,160,9,0,136,12,128,176,8,0,128,0,0,0,0,0,0,0,1,132,12,64,76,5,128,48,2,0,32,0,0,0,6,0,144,4,0,32,5,0,136,8,128,136,7,0,0,0,0,0,0,0,0,7,0,128,8,0,112,8,0,128,8,128,112,0,0,0,0,0,64,3,128,56,4,0,128,8,0,128,7,0,8,1,0,0,0,0,0,11,1,72,4,128,72,4,128,8,0,128,8,0,0,0,0,0,112,8,128,136,8,128,248,8,128,136,8,128,112,0,0,0,0,0,0,2,0,96,2,0,32,2,0,48,2,0,0,0,0,0,0,0,0,8,129,144,10,0,192,10,0,144,8,128,0,0,0,0,0,3,0,8,0,64,10,0,144,17,1,10,32,96,0,0,0,0,0,0,0,8,128,136,8,128,136,9,128,234,8,192,128,0,0,0,0,0,0,0,3,8,16,128,144,9,0,96,4,0,0,0,0,0,0,0,128,7,0,128,7,0,64,8,0,128,7,0,8,1,0,0,0,0,0,6,0,144,16,129,8,16,128,144,6,0,0,0,0,0,0,0,0,31,192,144,9,0,144,9,1,8,0,0,0,0,0,0,0,0,0,6,0,144,16,129,8,24,129,112,16,1,0,0,0,0,0,0,0,7,192,144,16,129,8,16,128,144,6,0,0,0,0,0,0,0,0,0,0,252,18,0,32,2,0,40,3,0,0,0,0,0,0,0,0,9,1,136,8,128,136,8,128,136,7,0,0,0,0,0,0,0,32,2,0,32,15,129,36,18,65,36,15,128,32,2,0,0,0,0,0,0,1,132,4,128,80,2,0,80,9,1,12,0,0,0,0,0,32,2,2,40,82,65,36,18,64,248,2,0,32,0,0,0,0,0,0,0,0,136,18,65,36,18,65,36,13,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,7,0,80,9,128,248,17,129,12,57,224,0,0,0,0,0,3,248,24,129,128,31,1,152,25,129,152,63,0,0,0,0,0,0,3,240,25,129,152,31,1,152,25,129,152,63,0,0,0,0,0,0,3,252,24,193,132,24,1,128,24,1,128,60,0,0,0,0,0,0,1,254,4,192,76,4,192,76,8,193,254,16,32,0,0,0,0,0,3,252,24,65,144,31,1,144,24,1,132,63,192,0,0,0,0,8,128,0,63,193,132,25,1,240,25,1,132,63,192,0,0,0,0,0,4,242,38,66,100,22,128,248,30,195,102,111,48,0,0,0,0,0,1,120,24,193,12,3,0,8,0,193,12,15,128,0,0,0,0,0,7,158,48,195,28,50,195,76,56,195,12,121,224,0,0,0,0,9,0,96,121,227,28,50,195,76,56,195,12,121,224,0,0,0,0,0,3,206,24,129,144,31,1,152,24,193,142,60,0,0,0,0,0,0,1,252,9,128,152,9,128,152,9,132,152,51,192,0,0,0,0,0,6,3,48,99,142,61,99,102,50,99,6,120,240,0,0,0,0,0,7,158,48,195,12,63,195,12,48,195,12,121,224,0,0,0,0,0,0,240,25,131,12,48,195,12,48,193,152,15,0,0,0,0,0,0,3,254,24,193,140,24,193,140,24,193,140,61,224,0,0,0,0,0,3,248,24,193,140,24,193,248,24,1,128,60,0,0,0,0,0,0,0,116,8,193,132,24,1,128,24,0,132,7,128,0,0,0,0,0,3,252,38,64,96,6,0,96,6,0,96,15,0,0,0,0,0,0,3,198,24,64,200,6,128,48,2,2,64,24,0,0,0,0,0,0,0,240,6,1,248,54,195,108,31,128,96,15,0,0,0,0,0,0,3,220,24,128,208,6,0,112,9,129,12,57,224,0,0,0,0,0,3,222,24,193,140,24,193,140,24,193,140,63,224,2,0,0,0,0,3,222,24,193,140,24,192,252,0,192,12,1,224,0,0,0,0,0,3,108,54,195,108,54,195,108,54,195,108,127,224,0,0,0,0,0,3,108,54,195,108,54,195,108,54,195,108,127,240,1,0,0,0,0,3,240,38,0,96,7,192,102,6,96,100,15,128,0,0,0,0,0,3,206,24,65,132,30,65,148,25,65,148,62,224,0,0,0,0,0,3,192,24,1,128,31,129,140,24,193,140,63,128,0,0,0,0,0,1,112,24,129,76,7,192,76,0,193,8,15,0,0,0,0,0,0,7,152,50,67,102,62,99,102,50,67,24,120,0,0,0,0,0,0,0,254,24,193,140,15,192,108,12,193,140,61,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,1,16,15,1,16,17,0,244,1,128,0,0,0,0,0,128,240,16,1,0,30,1,16,17,1,16,14,0,0,0,0,0,0,0,0,30,0,144,9,0,224,9,0,144,30,0,0,0,0,0,0,0,0,31,128,136,8,0,128,8,0,128,28,0,0,0,0,0,0,0,0,15,192,72,4,128,72,4,128,72,15,193,2,0,0,0,0,0,0,0,0,240,16,129,248,16,1,8,15,0,0,0,0,0,0,1,8,6,0,144,16,129,248,16,1,8,15,0,0,0,0,0,0,0,0,18,64,168,10,128,112,10,128,168,18,64,0,0,0,0,0,0,0,7,0,136,0,128,48,0,128,136,7,0,0,0,0,0,0,0,0,59,129,16,19,1,80,25,1,16,59,128,0,0,0,0,9,0,96,57,193,8,17,129,40,20,129,136,57,192,0,0,0,0,0,0,0,29,128,144,10,0,192,10,0,144,29,128,0,0,0,0,0,0,0,15,192,72,4,128,72,4,128,72,25,192,0,0,0,0,0,0,0,48,97,140,24,193,84,21,65,36,56,224,0,0,0,0,0,0,0,29,192,136,8,128,248,8,128,136,29,192,0,0,0,0,0,0,0,6,0,144,16,129,8,16,128,144,6,0,0,0,0,0,0,0,0,31,192,136,8,128,136,8,128,136,29,192,0,0,0,0,0,0,0,15,1,136,8,128,136,8,128,240,8,0,128,28,0,0,0,0,0,6,0,144,16,1,0,16,128,144,6,0,0,0,0,0,0,0,0,31,193,36,2,0,32,2,0,32,7,0,0,0,0,0,0,0,0,25,192,136,8,128,80,5,0,32,36,1,128,0,0,0,2,0,96,2,0,248,18,65,36,18,65,36,15,128,32,7,0,0,0,0,0,29,192,136,5,0,32,5,0,136,57,192,0,0,0,0,0,0,0,29,192,136,8,128,136,8,128,136,31,192,4,0,0,0,0,0,0,51,129,16,17,0,240,1,0,16,3,128,0,0,0,0,0,0,0,55,97,36,18,65,36,18,65,36,63,224,0,0,0,0,0,0,0,55,97,36,18,65,36,18,65,36,63,224,2,0,0,0,0,0,0,56,2,128,8,0,240,8,128,136,15,0,0,0,0,0,0,0,0,56,225,4,16,65,228,17,65,20], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([30,224,0,0,0,0,0,0,0,24,0,128,8,0,240,8,128,136,15,0,0,0,0,0,0,0,0,15,1,8,0,128,120,0,129,8,15,0,0,0,0,0,0,0,0,57,129,36,18,65,228,18,65,36,57,128,0,0,0,0,0,0,0,7,128,136,8,128,120,2,128,72,29,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,240,0,0,0,15,1,16,17,1,16,17,0,240,0,0,0,1,0,32,4,0,240,17,1,16,17,1,16,15,0,0,0,0,0,17,0,160,4,0,240,17,1,16,17,1,16,15,0,0,0,0,0,8,0,64,2,0,240,17,1,16,17,1,16,15,0,0,0,0,0,0,0,248,0,0,112,8,128,248,8,0,136,7,0,0,0,0,0,1,0,32,4,0,112,8,128,248,8,0,136,7,0,0,0,0,0,8,128,80,2,0,112,8,128,248,8,0,136,7,0,0,0,0,0,4,0,32,1,0,112,8,128,248,8,0,136,7,0,0,0,0,0,0,0,248,0,0,32,2,0,32,2,0,32,2,0,0,0,0,0,1,0,32,4,0,32,2,0,32,2,0,32,2,0,0,0,0,0,8,128,80,2,0,0,2,0,32,2,0,32,2,0,0,0,0,0,4,0,32,1,0,32,2,0,32,2,0,32,2,0,0,0,0,0,0,0,248,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,1,0,32,4,0,112,8,128,136,8,128,136,7,0,0,0,0,0,8,128,80,2,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,0,32,1,0,112,8,128,136,8,128,136,7,0,0,0,0,0,0,0,248,0,0,136,8,128,136,8,128,152,6,128,0,0,0,0,1,0,32,4,0,136,8,128,136,8,128,152,6,128,0,0,0,0,8,128,80,2,0,136,8,128,136,8,128,152,6,128,0,0,0,0,4,0,32,1,0,136,8,128,136,8,128,152,6,128,0,0,0,0,1,0,32,8,128,0,8,128,136,8,128,152,6,128,0,0,0,0,5,0,32,8,128,0,8,128,136,8,128,152,6,128,0,0,0,0,4,0,32,8,128,0,8,128,136,8,128,152,6,128,0,0,0,0,0,0,0,8,128,0,8,128,136,8,128,152,6,128,0,0,0,0,2,0,80,8,128,112,8,128,248,8,0,136,7,0,0,0,0,0,0,0,0,0,0,120,8,128,136,8,128,136,7,128,0,0,0,0,2,0,64,0,1,88,26,65,36,18,65,36,18,64,0,0,0,0,1,0,32,0,0,176,12,128,136,8,128,136,8,128,0,0,0,0,5,0,32,0,0,176,12,128,136,8,128,136,8,128,0,0,0,0,2,0,16,0,0,176,12,128,136,8,128,136,8,128,0,0,0,0,2,0,240,16,128,240,4,0,248,16,65,4,15,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,16,3,252,0,64,4,0,64,4,0,64,40,1,0,0,0,0,64,8,1,252,0,64,8,2,128,16,2,128,64,8,0,0,0,0,0,0,1,252,16,65,4,16,65,4,16,64,0,0,0,0,0,0,0,63,225,0,16,1,0,16,1,0,16,0,254,0,0,0,0,0,128,8,1,252,2,64,36,4,64,68,8,65,40,33,0,0,0,0,32,2,1,252,2,0,32,4,0,136,31,192,4,0,0,0,0,1,248,1,0,32,7,192,4,0,64,4,0,64,40,1,0,0,0,0,32,10,0,160,31,192,36,4,64,68,8,65,20,32,128,0,0,0,0,2,64,72,9,1,32,18,0,144,4,128,36,0,0,0,0,0,0,63,224,64,8,0,248,0,64,4,0,64,40,1,0,0,0,0,0,31,225,0,16,1,0,16,1,0,32,2,0,64,0,0,0,0,8,8,128,136,8,128,152,10,128,200,0,128,8,0,128,0,0,0,32,2,0,64,8,1,0,8,0,64,2,0,32,0,0,0,0,0,0,63,224,32,2,0,32,2,0,32,2,0,32,0,0,0,0,0,32,18,65,36,18,65,36,31,192,32,2,3,254,0,0,0,0,0,16,2,0,64,9,1,32,6,0,160,18,0,32,2,0,0,0,0,0,31,192,4,31,193,0,16,1,0,32,2,0,64,0,0,0,0,0,15,128,136,8,128,200,10,128,136,8,128,248,0,0,0,0,0,0,15,128,136,8,128,136,10,128,144,8,0,128,8,0,0,0,0,32,2,3,254,4,0,128,15,128,4,0,64,40,1,0,0,0,0,32,2,0,32,4,0,64,8,0,136,31,192,4,0,0,0,0,1,4,8,128,80,2,0,32,2,0,32,2,0,32,2,0,0,0,0,0,31,192,32,2,0,224,16,1,0,16,0,248,0,0,0,0,0,32,2,3,254,2,0,224,16,1,0,16,64,248,0,0,0,0,0,0,9,0,144,127,224,144,9,0,160,8,0,124,0,0,0,0,0,0,31,192,32,18,3,248,4,64,68,8,65,40,1,0,0,0,0,0,28,0,64,4,0,64,2,0,32,1,0,12,0,0,0,0,0,64,4,128,136,9,1,224,4,0,144,31,128,8,0,0,0,0,0,0,31,128,4,0,128,136,5,0,32,5,0,136,16,0,0,0,1,248,8,128,144,17,1,252,0,64,4,0,128,8,1,0,0,0,0,128,8,0,128,8,0,252,0,64,4,0,128,8,0,0,0,0,0,64,4,0,64,63,224,64,5,0,144,9,1,14,0,0,0,0,0,0,2,0,32,4,0,64,8,1,0,31,192,0,0,0,0,0,0,0,9,0,144,9,0,144,9,1,17,17,18,15,0,0,0,0,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,0,0,0,0,0,129,8,8,128,80,3,0,48,4,129,132,0,0,0,0,0,0,0,65,4,16,65,4,16,65,252,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,255,127,240,0,0,0,0,0,0,0,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,6,0,96,6,0,96,6,0,96,6,0,96,6,0,96,6,0,96,0,0,0,0,0,0,0,7,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,119,119,112,0,0,0,0,0,0,0,2,0,32,2,0,0,2,0,32,2,0,0,2,0,32,2,0,0,6,0,96,6,0,0,6,0,96,6,0,0,6,0,96,6,0,0,0,0,0,0,0,0,0,7,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,119,119,0,0,0,0,0,0,0,0,0,2,0,32,2,0,0,2,0,32,2,0,0,2,0,32,2,0,0,3,0,48,3,0,0,3,0,48,3,0,0,3,0,48,3,0,0,0,0,0,0,0,0,0,0,63,2,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,0,63,3,240,32,2,0,32,2,0,32,0,0,0,0,0,0,0,0,63,3,0,48,3,0,48,3,0,48,0,0,0,0,0,0,0,0,63,3,240,48,3,0,48,3,0,48,0,0,0,0,0,0,0,7,224,2,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,224,126,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,224,6,0,96,6,0,96,6,0,96,0,0,0,0,0,0,0,7,224,126,0,96,6,0,96,6,0,96,2,0,32,2,0,32,2,0,63,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,3,240,63,0,0,0,0,0,0,0,0,0,3,0,48,3,0,48,3,0,63,0,0,0,0,0,0,0,0,0,3,0,48,3,0,48,3,240,63,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,224,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,126,7,224,0,0,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,224,0,0,0,0,0,0,0,0,0,6,0,96,6,0,96,126,7,224,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,0,63,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,63,3,240,32,2,0,32,2,0,32,3,0,48,3,0,48,3,0,63,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,63,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,0,63,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,240,63,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,63,3,240,48,3,0,48,3,0,48,3,0,48,3,0,48,3,0,63,3,240,48,3,0,48,3,0,48,2,0,32,2,0,32,2,7,224,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,224,126,0,32,2,0,32,2,0,32,3,0,48,3,0,48,3,7,240,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,240,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,240,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,127,7,240,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,224,127,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,240,127,0,48,3,0,48,3,0,48,0,0,0,0,0,0,0,7,255,2,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,255,126,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,255,3,240,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,255,127,240,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,255,3,0,48,3,0,48,3,0,48,0,0,0,0,0,0,0,7,255,126,0,96,6,0,96,6,0,96,0,0,0,0,0,0,0,7,255,3,240,48,3,0,48,3,0,48,0,0,0,0,0,0,0,7,255,127,240,48,3,0,48,3,0,48,2,0,32,2,0,32,2,7,255,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,255,126,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,255,3,240,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,255,127,240,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,255,0,0,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,255,124,0,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,255,7,240,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,255,127,240,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,255,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,126,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,3,240,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,127,240,32,2,0,32,2,0,32,3,0,48,3,0,48,3,7,255,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,255,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,255,126,0,32,2,0,32,2,0,32,3,0,48,3,0,48,3,7,255,3,240,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,127,0,48,3,0,48,3,0,48,2,0,32,2,0,32,2,7,255,3,240,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,255,127,240,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,127,240,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,255,127,0,48,3,0,48,3,0,48,6,0,96,6,0,96,6,7,255,7,240,96,6,0,96,6,0,96,3,0,48,3,0,48,3,7,255,127,240,48,3,0,48,3,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,3,248,115,199,188,251,239,190,251,231,28,127,195,248,14,0,0,14,3,248,113,198,236,254,239,30,239,230,12,127,195,248,14,0,0,14,3,248,113,198,236,249,239,238,238,231,28,127,195,248,14,0,0,14,3,248,121,199,156,245,238,222,224,231,220,127,195,248,14,0,0,14,3,248,96,198,252,225,239,238,238,231,28,127,195,248,14,0,0,14,3,248,113,198,252,225,238,238,238,231,28,127,195,248,14,0,0,14,3,248,96,198,220,251,239,190,251,231,188,127,195,248,14,0,0,14,3,248,115,198,220,237,239,62,237,230,220,115,195,248,14,0,0,14,3,248,113,198,236,238,239,14,254,231,28,127,195,248,14,0,0,14,3,248,127,197,204,155,109,182,219,101,180,76,195,248,14,0,0,14,3,248,110,196,204,238,238,238,238,228,68,127,195,248,14,0,0,14,3,248,108,196,180,239,110,206,235,228,4,127,195,248,14,0,0,14,0,144,127,197,20,171,171,226,139,167,204,75,67,24,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,3,24,64,68,4,128,43,250,128,36,4,64,67,24,14,0,0,14,3,24,64,69,244,128,40,2,128,39,252,64,67,24,14,0,0,14,3,24,64,69,244,128,41,226,128,39,252,64,67,24,14,0,0,14,3,24,127,196,172,202,173,170,227,164,12,127,195,24,14,0,0,14,3,24,95,196,68,159,40,82,137,39,252,64,67,24,14,0,0,14,3,24,72,68,68,191,168,2,146,37,20,96,195,24,14,0,0,14,3,24,80,69,52,156,47,2,144,37,20,95,67,24,14,0,0,14,3,24,68,69,68,148,41,66,162,36,20,64,67,24,14,0,0,14,3,152,72,71,228,138,41,42,146,165,60,96,67,24,14,0,0,14,3,24,76,69,60,254,170,138,186,166,172,88,195,152,14,0,0,14,3,184,74,68,164,186,42,34,186,36,164,74,67,24,14,0,0,14,3,56,95,197,84,183,169,18,159,165,20,111,195,24,14,0,0,161,10,254,169,78,254,137,14,254,173,43,126,181,43,126,181,42,84,34,3,34,39,228,66,121,74,16,247,66,84,41,34,18,51,2,0,67,231,170,147,239,128,171,234,170,251,234,170,251,224,8,59,236,8,95,224,130,191,169,18,191,168,2,191,170,10,191,170,10,191,168,4,254,136,168,170,248,186,254,168,170,138,170,170,138,207,233,10,19,31,241,1,40,148,73,254,176,40,64,247,193,144,223,225,16,82,130,198,71,228,66,71,231,66,87,232,62,197,44,82,74,165,66,103,164,6,33,7,128,87,234,66,249,74,254,250,138,168,250,128,16,57,12,108,33,7,254,89,10,254,249,42,254,249,42,254,249,64,152,53,108,50,32,130,127,37,66,127,165,91,127,167,82,100,39,117,104,134,0,159,75,239,200,73,7,190,74,39,170,74,175,234,2,165,20,202,32,192,17,7,190,74,71,212,64,136,54,31,129,8,31,129,8,31,129,8,18,15,254,18,2,18,245,66,80,249,135,68,168,167,74,33,79,162,255,232,2,255,232,0,145,235,240,193,9,254,228,74,130,164,74,68,4,5,255,80,21,85,241,21,125,81,21,85,65,7,255,194,136,68,56,142,8,34,175,220,112,138,148,34,32,64,255,232,66,132,168,68,32,135,158,32,143,190,81,79,190,81,79,190,0,15,190,81,69,150,255,232,64,255,202,72,213,72,162,145,15,254,32,2,74,160,137,248,15,1,248,62,198,206,234,254,175,234,254,135,110,227,252,31,128,240,16,1,2,95,229,42,254,160,62,150,41,96,174,12,96,253,224,0,39,255,213,39,255,73,32,143,62,112,134,191,233,10,32,36,34,255,39,255,213,39,255,36,37,111,116,39,119,84,111,90,214,167,66,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,15,254,41,15,252,8,7,104,255,224,8,248,136,136,248,128,48,65,68,127,65,79,127,65,15,63,68,159,255,84,151,127,68,148,79,32,130,20,170,42,193,175,250,136,175,250,200,186,170,44,192,136,127,34,35,255,66,167,20,162,34,65,251,226,0,39,242,65,52,18,127,0,128,63,248,136,191,168,138,255,170,26,191,170,18,63,82,24,163,23,195,36,226,66,40,243,2,40,42,79,34,34,34,52,66,132,32,8,1,222,233,42,148,189,138,148,191,78,146,9,32,146,17,193,16,2,15,255,16,14,254,136,44,254,129,13,255,133,65,146,104,200,195,18,1,252,34,3,254,2,5,20,81,71,223,146,65,4,255,241,4,32,47,204,33,15,194,136,207,144,80,103,232,0,15,254,37,4,204,18,69,100,58,81,62,250,67,164,54,69,36,146,193,53,18,32,0,64,3,126,16,40,2,138,42,130,169,40,170,140,171,58,128,40,14,23,225,16,249,193,20,49,67,164,82,73,36,18,65,124,16,65,62,64,43,252,164,132,25,127,229,40,159,96,163,63,226,36,63,196,44,2,3,223,4,78,78,190,74,78,190,74,95,232,64,132,16,66,4,15,255,165,47,82,146,79,36,165,250,69,248,80,69,63,80,71,127,248,196,48,49,15,144,169,202,176,249,10,158,255,10,144,169,26,143,79,255,20,79,250,49,165,42,144,243,2,255,51,142,84,41,50,145,8,7,238,8,175,235,131,7,223,33,23,202,84,71,228,2,175,169,17,15,255,17,0,255,64,132,126,100,36,126,68,38,126,66,128,68,2,15,255,0,3,252,32,79,255,160,90,245,41,66,244,32,66,12,0,0,0,255,224,0,0,15,254,0,0,0,0,15,254,0,0,0,65,39,255,137,73,127,253,90,213,254,58,255,252,16,127,60,28,0,15,240,129,239,250,129,175,250,84,238,154,14,170,90,239,224,10,165,5,78,84,189,106,84,161,10,254,161,10,16,255,234,16,1,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,68,68,68,78,68,68,68,74,70,164,154,104,169,17,34,16,193,7,0,144,16,1,96,25,1,8,16,128,144,6,0,0,6,0,96,20,146,73,71,244,24,242,130,127,68,143,254,4,129,126,228,128,127,65,2,127,34,175,190,17,66,127,113,74,255,35,98,88,33,98,51,2,130,40,47,226,170,191,234,170,63,242,72,38,66,66,40,50,2,64,4,223,69,15,16,65,5,144,105,12,48,69,6,144,73,12,159,32,130,63,2,159,191,16,130,127,104,11,63,42,18,41,34,146,20,103,226,80,7,240,72,228,82,99,32,2,126,36,34,126,80,8,255,4,0,64,4,0,64,4,0,64,4,0,64,4,2,64,20,0,128,13,240,164,254,136,159,233,88,149,233,90,181,172,78,138,149,26,97,253,242,138,17,255,245,51,245,68,81,249,4,144,225,4,81,242,0,0,7,158,0,0,0,0,7,158,0,0,0,0,7,158,0,0,0,65,5,255,66,14,40,68,132,255,88,150,137,200,152,141,0,160,8,0,14,0,16,0,128,4,0,32,1,0,8,0,64,3,0,0,0,32,130,127,37,26,146,162,139,42,38,194,168,42,66,172,35,50,34,242,2,63,34,20,65,72,95,109,213,93,109,84,87,125,64,16,6,0,207,144,39,242,65,68,20,127,246,61,85,84,149,85,86,23,66,0,0,63,240,137,8,151,233,18,145,47,18,145,32,18,7,240,0,31,224,40,226,138,40,162,138,40,226,138,72,4,144,137,8,145,7,1,0,30,1,0,255,233,26,156,171,42,191,170,14,255,170,1,63,34,162,127,170,170,128,175,250,201,168,154,190,186,172,42,130,192,8,73,244,145,255,21,42,114,173,74,84,68,132,84,69,106,213,21,33,16,7,222,68,167,202,68,175,254,146,175,234,146,175,234,40,172,159,36,34,52,32,207,146,38,34,136,55,230,8,34,162,73,162,132,16,40,66,68,241,82,21,41,66,164,48,86,69,164,82,198,37,196,96,65,4,255,242,148,254,66,132,254,98,141,255,73,37,125,65,9,255,2,128,36,255,224,32,122,4,160,74,7,144,1,0,9,240,80,3,4,15,255,36,130,72,85,72,226,255,244,68,66,228,48,72,231,4,241,9,255,145,15,148,151,41,149,251,137,16,146,143,68,4,32,129,2,36,20,79,228,146,239,228,146,79,228,16,95,246,16,193,0,16,32,159,42,34,130,76,49,54,34,164,82,37,36,162,17,162,4,64,32,132,127,124,24,127,244,2,123,244,210,105,36,146,173,56,146,18,34,68,255,112,136,255,240,130,255,36,159,255,32,2,127,36,19,127,2,0,63,252,10,255,170,26,191,250,26,190,173,90,149,170,95,203,132,47,254,8,15,254,18,6,152,255,226,64,127,128,64,127,192,64,18,97,88,8,99,3,40,90,45,48,164,209,130,15,255,7,0,168,24,78,8,35,255,177,170,90,162,171,250,129,171,251,1,32,82,3,33,4,63,66,9,72,240,162,46,67,175,234,2,195,169,194,16,31,16,162,9,56,132,127,120,137,28,18,175,170,20,145,73,16,129,136,240,137,127,144,137,80,243,218,42,37,91,156,160,138,255,176,140,8,2,4,255,72,30,255,77,94,255,207,236,162,75,228,154,75,68,211,69,6,188,73,1,184,41,12,190,64,3,252,16,128,144,6,3,158,8,14,95,160,26,129,235,218,145,235,218,145,171,222,129,168,88,130,127,244,16,65,228,16,95,245,17,81,197,113,83,249,36,162,90,67,0,7,248,64,132,8,64,132,8,127,132,8,64,4,0,64,3,254,251,224,162,234,32,170,234,170,170,170,174,136,169,136,153,10,145,71,32,2,126,36,47,194,39,231,66,108,10,127,164,18,65,39,242,65,93,245,81,245,21,81,84,167,74,200,164,68,74,69,26,97,28,97,70,116,170,79,254,170,95,244,170,111,244,170,207,244,34,65,204,99,2,7,255,74,5,46,82,37,174,82,37,254,72,72,72,131,0,204,136,47,254,1,79,255,129,11,212,129,107,244,144,139,85,210,91,67,252,130,20,57,162,165,79,228,162,171,225,162,19,226,42,34,68,58,255,240,16,169,250,148,170,74,164,168,72,132,16,65,4,32,68,12,224,10,254,160,14,0,191,250,16,225,10,84,165,42,146,169,27,17,2,0,32,18,1,32,18,1,32,18,1,32,18,1,32,2,0,32,64,68,4,68,68,68,68,68,68,68,68,68,68,68,68,64,68,4,16,1,128,35,2,32,20,0,224,17,1,16,17,1,16,14,0,0,33,74,127,161,79,138,167,242,20,42,35,85,97,74,127,33,66,36,226,130,36,175,250,82,165,207,83,21,197,145,153,97,24,83,19,79,65,7,190,148,34,4,255,250,201,255,250,148,249,64,20,58,92,71,32,15,128,71,245,20,145,79,148,17,67,148,210,65,37,20,81,67,68,246,233,138,174,234,74,196,236,232,164,137,74,148,205,72,166,8,4,241,233,82,149,239,82,159,233,80,245,105,84,151,177,153,17,35,32,15,158,137,47,158,137,47,158,146,42,68,255,240,224,21,6,72,35,242,36,170,74,191,170,90,165,170,90,165,170,91,201,196,152,146,47,242,162,47,202,164,175,250,238,171,90,181,169,10,222,181,13,255,254,0,30,125,4,92,125,64,20,255,202,180,255,73,60,146,89,99,255,248,173,137,221,169,168,138,148,174,186,176,217,204,64,131,144,7,5,2,72,63,244,80,197,36,146,73,68,152,75,4,208,81,22,15,68,71,252,0,7,254,4,3,252,4,15,254,17,15,255,33,2,16,233,58,84,191,250,56,229,74,147,181,30,64,191,250,200,227,138,70,127,20,149,255,212,149,127,80,133,127,84,149,127,210,37,28,22,57,64,135,8,64,248,8,243,244,33,66,31,63,66,4,64,68,6,128,32,242,8,255,242,190,104,151,190,170,170,190,41,2,255,41,19,35,16,7,248,68,132,72,127,132,72,68,143,254,64,136,8,128,136,48,136,143,248,0,7,248,0,135,248,0,143,255,36,65,80,36,140,199,67,228,34,254,168,106,42,162,42,178,170,148,165,66,85,38,86,67,47,242,149,105,84,255,194,4,126,68,36,162,73,37,20,80,132,16,4,0,127,234,10,168,163,202,32,163,202,32,233,26,133,24,64,124,16,1,192,16,15,224,149,255,145,144,171,202,164,75,196,164,175,241,2,15,255,34,4,190,68,95,200,83,69,79,89,21,106,120,68,12,32,130,63,36,34,0,248,202,184,168,250,184,248,130,73,60,158,39,33,64,127,253,65,127,32,7,62,170,34,162,35,226,34,34,34,62,64,7,191,162,18,33,250,18,63,170,26,132,169,47,161,140,16,0,64,133,255,242,84,252,66,77,255,69,68,186,81,20,84,201,32,48,4,49,252,228,138,136,170,142,175,175,174,42,191,170,42,226,170,42,32,135,239,161,65,34,32,18,63,250,2,191,50,38,34,36,46,130,37,242,113,101,29,234,68,165,68,86,68,108,69,36,99,84,36,128,245,66,255,37,71,84,79,248,145,209,35,124,37,68,84,133,128,16,4,15,255,34,7,254,132,7,255,33,140,68,10,35,20,224,131,134,16,14,255,40,18,255,252,162,170,124,58,168,171,226,200,47,242,136,73,32,254,33,10,255,33,4,254,73,40,146,143,232,17,129,248,225,127,128,64,255,234,82,63,66,80,63,1,4,127,224,65,54,4,254,34,2,63,68,36,132,192,132,255,64,20,255,64,20,1,64,20,255,36,2,255,57,20,85,71,220,37,76,36,127,65,20,85,71,212,19,33,2,31,34,43,68,160,138,127,32,18,1,39,242,1,32,18,127,36,2,255,41,18,85,183,218,37,172,34,127,33,18,85,39,210,19,79,244,149,73,94,255,66,69,231,98,76,230,66,69,231,66,72,36,121,4,255,73,7,144,79,244,160,127,244,130,72,68,164,73,137,140,244,34,4,47,116,76,247,117,90,85,37,95,89,37,149,125,85,168,7,238,66,167,234,82,161,10,255,169,26,169,234,88,197,8,80,130,15,255,4,145,169,41,156,143,8,47,251,8,164,250,72,180,140,255,34,95,230,38,199,181,34,82,35,248,130,255,40,131,136,32,130,8,61,244,132,144,143,223,129,31,213,165,91,85,169,90,21,168,171,9,81,207,162,85,23,36,39,239,128,175,122,145,253,82,51,253,210,51,32,1,254,129,4,255,66,129,40,34,142,40,36,146,135,40,0,0,144,5,255,10,171,255,10,163,255,80,43,255,162,169,82,137,249,2,0,131,255,160,10,64,167,242,149,113,90,37,36,148,145,82,24,65,248,2,3,255,215,9,170,82,22,80,136,179,170,23,59,170,22,63,245,73,255,145,15,255,154,89,126,157,47,126,149,41,126,144,2,127,242,137,254,145,47,18,159,233,144,255,249,49,149,25,149,145,43,16,225,2,16,175,234,18,161,47,18,31,241,16,82,137,36,20,38,129,0,0,0,1,0,32,6,0,192,24,3,128,48,0,0,0,0,0,243,225,34,147,233,34,147,233,0,255,240,168,106,248,168,45,129,15,1,15,255,68,20,127,73,168,84,250,45,125,88,5,127,121,68,50,65,7,223,146,65,252,4,47,255,9,3,40,76,99,17,6,1,140,1,64,255,241,66,127,37,82,127,112,13,127,84,21,127,116,20,127,32,130,127,168,138,255,171,106,225,169,10,191,174,47,148,136,128,22,32,2,195,53,228,66,116,42,139,46,175,42,42,242,64,43,3,15,34,162,28,127,248,156,126,69,120,126,37,94,126,32,62,170,42,126,33,15,145,33,111,24,39,255,148,41,66,146,57,34,16,33,66,24,40,66,132,67,245,4,204,68,68,68,164,73,69,20,96,74,5,31,33,2,254,41,4,127,66,76,126,89,4,254,73,4,255,85,4,63,33,2,126,37,35,126,175,226,68,63,243,85,63,242,84,38,115,253,64,132,62,251,41,42,34,34,164,251,240,129,251,208,129,8,95,130,65,7,254,146,37,126,126,34,126,66,7,255,171,95,181,34,164,68,255,249,4,254,73,4,252,76,84,253,76,84,168,73,196,161,76,8,15,128,128,255,232,132,190,136,140,191,234,82,213,40,162,181,40,134,33,196,20,125,76,84,165,66,148,41,65,21,41,84,98,129,0,15,80,133,127,80,135,24,17,193,44,242,165,74,80,149,137,144,137,8,4,78,68,68,68,68,228,68,68,70,164,154,104,169,17,34,16,193,34,132,16,134,143,255,36,4,144,159,238,146,9,34,146,201,160,148,33,3,16,65,9,254,249,34,146,73,40,254,249,32,146,121,40,254,128,20,255,128,26,73,164,157,85,205,88,225,255,152,65,255,216,3,47,248,129,159,26,33,255,152,73,191,216,73,191,152,65,148,24,131,64,135,127,144,138,126,249,10,255,250,42,255,250,32,62,58,44,62,2,15,255,128,19,254,0,15,255,42,68,67,63,130,72,11,3,14,8,129,255,8,142,80,175,235,144,175,238,144,175,250,72,3,1,207,0,79,136,11,241,33,98,31,191,10,25,33,83,242,33,80,8,255,65,4,127,122,41,36,255,250,201,255,250,144,169,239,146,2,170,196,36,68,68,116,72,68,244,114,116,36,79,68,36,67,85,38,82,67,64,135,191,146,146,42,250,138,191,170,31,178,170,207,164,4,207,147,64,132,127,121,40,140,151,255,201,175,255,136,168,239,146,1,47,102,16,15,255,16,79,228,0,207,206,133,95,212,72,79,228,132,79,223,9,15,254,9,9,254,66,132,254,10,170,254,223,244,80,73,101,52,33,79,128,175,250,148,169,74,255,169,74,148,169,66,36,34,66,68,142,43,4,2,242,169,148,211,139,82,135,239,72,27,237,136,25,67,34,79,175,34,223,251,170,154,170,250,243,41,170,250,73,36,146,146,46,66,136,248,242,245,106,103,164,170,74,164,42,162,169,42,147,57,66,7,126,68,40,126,244,36,126,64,143,234,66,197,75,104,164,48,4,0,124,4,7,254,64,39,254,2,15,255,130,24,81,152,158,3,64,230,240,72,0,128,15,252,136,72,132,136,72,132,136,112,133,8,69,36,81,249,37,28,99,4,255,212,20,127,68,20,127,68,24,127,0,0,0,0,52,108,108,108,60,12,12,28,0,0,0,108,56,48,47,242,16,63,245,17,141,206,16,63,244,32,239,240,169,42,156,130,244,130,79,63,18,128,73,247,229,218,101,180,83,71,52,85,196,70,7,240,1,243,249,1,151,249,2,159,249,34,241,41,18,0,32,12,98,148,41,146,158,41,34,148,41,130,159,41,2,151,41,132,144,73,32,130,127,32,143,127,36,23,0,107,250,2,160,66,255,32,66,28,40,64,68,3,248,4,160,67,196,68,168,73,133,8,192,146,8,31,244,185,42,146,201,255,248,26,189,42,91,165,171,218,161,184,92,130,18,142,40,42,143,106,98,138,44,182,170,170,50,130,73,36,146,135,71,247,4,68,72,68,247,244,12,241,68,20,66,68,68,105,68,8,50,252,117,106,82,117,242,146,109,83,41,16,55,245,16,18,130,70,8,143,255,18,65,58,46,36,30,255,224,64,127,248,160,17,130,4,32,130,255,40,20,126,64,136,126,228,162,126,68,175,126,1,79,34,32,129,63,255,24,169,34,146,37,254,36,191,72,19,61,40,20,66,255,249,16,151,206,68,167,234,169,191,217,6,159,201,4,159,200,80,136,143,255,136,128,248,208,71,117,85,103,119,64,4,36,105,38,73,2,0,32,226,138,76,164,138,144,177,11,32,162,46,79,171,144,192,16,133,158,80,133,63,253,64,63,149,74,255,180,13,126,253,88,39,2,3,255,33,10,255,105,18,156,111,42,255,172,2,255,76,9,127,65,7,158,162,66,136,127,226,136,47,130,0,255,240,40,10,65,34,145,6,16,103,233,82,23,227,82,87,233,16,17,194,41,172,84,3,39,232,2,191,168,162,191,170,170,191,168,66,191,168,66,191,168,4,63,242,164,79,248,8,239,242,2,79,232,2,239,224,145,116,41,62,2,128,255,224,4,255,72,36,124,241,4,124,65,4,24,113,72,254,5,161,108,245,132,164,81,37,255,80,31,254,65,4,252,97,73,255,73,37,36,9,40,127,132,20,127,0,4,255,200,156,255,136,8,127,1,15,255,168,170,255,200,170,191,170,156,191,138,152,191,138,153,43,255,251,217,173,89,57,156,154,149,139,251,203,170,155,253,128,31,255,34,47,255,33,69,127,149,95,213,21,81,99,60,29,127,20,17,127,63,2,16,255,11,191,225,27,242,164,175,228,170,75,234,171,47,225,145,6,44,68,58,253,24,7,113,149,81,117,21,81,117,165,84,82,32,66,31,121,148,149,145,87,209,5,32,95,124,16,93,4,23,194,33,5,104,71,232,129,247,228,90,247,229,255,90,158,255,90,222,130,148,198,10,223,227,84,214,115,66,223,129,72,19,129,255,0,23,246,66,15,191,69,7,190,148,133,127,41,39,248,73,135,255,0,31,246,4,15,255,4,2,72,36,133,84,85,41,65,10,1,16,32,132,6,79,244,129,236,84,165,73,150,137,201,148,165,72,84,129,72,88,130,79,244,129,236,84,165,73,158,137,201,148,165,72,20,129,72,84,130,252,8,127,197,10,208,253,9,92,213,77,92,253,72,85,133,216,87,248,130,127,68,42,128,51,229,0,159,243,8,82,161,73,112,130,16,64,4,0,64,4,0,64,2,0,32,1,0,8,0,98,1,160,6,66,132,254,242,132,126,242,132,126,245,37,126,85,38,255,68,36,76,64,255,116,69,74,84,165,79,84,37,39,82,37,146,149,43,226,148,34,2,63,244,130,127,240,153,79,247,128,0,63,226,146,41,47,255,136,133,8,248,130,8,39,255,136,32,143,191,34,18,33,66,24,63,17,15,255,17,0,30,254,0,32,255,240,32,127,228,2,127,228,2,227,226,34,163,234,42,160,143,127,20,145,85,85,25,97,84,18,66,39,228,66,135,238,82,33,4,255,137,30,169,12,82,129,200,80,130,255,248,1,17,34,8,68,67,252,4,7,254,4,3,252,4,7,254,0,143,4,23,241,64,244,8,64,132,14,64,36,2,128,168,5,0,79,242,129,47,240,145,137,20,253,9,18,153,41,92,255,72,20,255,0,65,255,0,14,255,168,26,255,169,26,41,164,106,194,245,26,96,241,65,20,151,121,20,145,73,119,249,64,148,111,120,148,9,67,20,65,71,255,164,186,105,45,212,255,84,5,127,86,26,127,182,16,191,129,4,254,5,65,255,164,74,0,47,228,130,201,40,146,130,200,194,64,135,136,131,239,8,32,130,127,248,130,8,37,66,162,52,18,128,16,63,252,18,149,85,184,2,191,68,42,4,63,244,68,184,70,200,19,241,8,253,8,126,34,175,234,74,164,170,48,130,148,78,56,65,16,143,255,16,131,252,73,8,96,61,252,66,127,240,64,36,132,132,34,170,255,170,170,136,175,250,201,171,234,170,186,172,42,130,192,8,252,225,10,96,161,49,172,4,128,189,242,169,72,88,134,8,67,27,255,248,1,255,248,100,138,107,28,150,136,156,150,186,74,155,136,16,127,244,1,64,23,255,64,4,0,95,245,1,144,25,1,159,241,1,4,79,240,4,255,240,65,116,192,100,119,240,68,116,165,81,126,21,8,79,228,148,127,228,148,73,223,129,27,241,164,169,138,148,74,42,255,240,64,10,0,144,16,130,70,68,56,65,4,0,64,4,0,64,15,207,36,146,121,65,153,89,18,159,255,56,147,72,82,9,16,17,23,206,36,34,127,65,100,22,21,185,42,255,163,130,52,37,34,209,0,15,159,0,0,0,0,15,255,0,0,0,0,15,255,0,0,0,36,71,255,133,47,255,33,143,255,34,2,255,36,18,127,36,19,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,7,159,146,68,32,39,241,73,135,244,73,23,244,40,199,244,8,0,15,255,0,0,0,0,15,159,0,0,0,0,15,159,0,0,0,2,79,47,159,153,13,245,184,89,143,175,40,210,253,241,114,213,35,255,72,79,135,152,77,191,154,157,170,171,200,170,250,205,170,157,51,248,129,72,23,242,72,120,134,255,169,194,172,42,130,202,56,146,9,17,15,254,17,2,127,185,10,62,254,162,42,170,161,8,33,76,98,34,131,164,74,68,255,242,2,62,242,34,82,37,67,136,41,67,99,93,36,76,116,152,130,253,212,84,254,53,223,100,172,68,100,169,145,85,71,84,132,249,249,245,149,213,87,95,86,85,37,85,84,151,81,36,68,100,85,249,4,236,66,74,68,159,81,133,19,64,203,249,0,15,255,146,4,64,255,241,4,255,66,10,62,150,79,88,152,128,22,0,142,191,8,144,63,224,149,159,74,186,156,170,175,168,149,0,63,80,133,239,84,207,50,79,230,16,95,252,4,95,244,36,64,76,12,68,5,255,228,68,248,73,244,241,105,92,245,73,85,234,75,25,17,14,3,248,105,198,236,233,238,238,238,230,156,127,195,248,14,0,0,68,4,127,245,84,85,251,93,105,67,85,210,64,148,138,106,37,30,79,255,81,149,31,127,149,31,127,149,31,122,52,69,78,148,51,113,11,242,169,227,27,255,170,90,229,171,154,233,171,95,243,34,82,2,1,15,159,34,34,84,64,132,22,246,157,8,87,245,72,119,245,8,47,242,1,134,24,145,136,153,241,160,24,241,137,24,241,137,88,3,71,244,65,71,247,65,151,250,32,71,244,201,85,54,127,64,20,6,64,2,63,60,64,136,137,248,145,41,84,213,81,84,10,65,20,96,255,17,9,16,146,41,254,152,41,130,159,233,130,152,33,130,31,231,47,242,129,255,242,129,47,243,146,101,74,255,34,130,73,168,149,7,36,143,40,34,130,255,32,147,17,97,90,19,34,18,65,168,85,2,0,143,255,34,146,63,124,132,127,132,12,191,18,145,45,33,36,33,15,254,129,75,216,165,235,218,161,41,210,129,168,22,2,88,0,127,240,65,63,144,73,127,144,79,255,8,128,144,105,248,177,45,17,31,8,40,239,82,160,191,4,44,138,80,132,255,65,132,44,68,182,137,31,129,0,16,1,96,25,0,8,0,129,16,14,0,0,6,0,96,32,15,255,37,85,127,144,15,255,18,17,63,49,77,53,29,33,25,34,34,127,66,39,255,128,143,127,36,159,127,36,146,127,50,66,66,255,241,33,34,159,233,170,155,169,170,155,169,171,79,245,130,80,6,34,130,38,98,68,255,194,132,42,66,164,76,68,132,152,74,149,7,87,255,18,64,196,127,68,151,127,212,149,127,84,149,74,72,8,255,32,132,20,118,56,190,240,2,241,41,95,245,41,82,245,41,19,182,32,79,199,0,72,68,75,255,225,1,47,202,132,72,74,133,31,224,32,130,144,37,235,18,173,234,80,37,227,82,77,228,80,74,8,31,34,143,255,36,130,254,52,134,126,164,130,127,178,52,38,37,129,134,72,79,255,72,4,159,255,25,63,254,25,34,255,240,4,68,72,76,37,34,250,37,79,143,47,151,9,110,166,173,174,170,13,34,146,25,16,133,20,82,39,193,144,1,127,24,131,8,215,241,8,16,129,127,17,14,34,39,255,144,47,247,36,100,42,17,166,66,136,35,18,70,2,14,126,68,68,136,79,228,18,239,244,18,79,228,16,101,8,32,78,175,9,159,234,40,171,132,168,171,83,254,32,34,34,37,32,140,56,140,10,73,27,17,72,79,10,41,31,255,33,31,209,49,20,223,247,233,18,145,47,18,145,41,62,241,41,18,145,47,18,151,240,0,32,130,127,52,42,128,163,234,0,39,242,8,34,162,75,40,146,16,8,143,255,8,128,30,63,2,0,63,242,0,47,194,132,72,68,252,5,14,80,165,75,86,173,138,88,173,79,86,165,64,145,17,18,15,68,14,255,8,31,1,8,145,85,242], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([81,85,248,219,253,160,30,2,65,7,167,146,95,165,170,90,189,250,90,165,251,80,38,56,76,4,33,2,255,37,79,255,40,22,124,114,10,124,170,66,255,35,130,86,249,64,62,1,79,148,143,255,128,139,225,34,155,230,34,59,236,34,241,18,10,35,242,37,67,247,165,107,250,165,40,66,255,56,66,132,67,39,71,143,153,37,4,34,161,35,226,36,41,66,8,51,98,193,4,15,254,128,47,190,10,14,190,43,111,170,43,111,190,42,30,127,71,119,85,135,127,40,39,242,72,247,226,72,39,242,34,49,194,227,71,247,18,128,143,255,34,175,255,38,50,93,37,82,93,52,82,66,191,243,36,42,74,68,191,242,73,53,99,244,164,74,132,209,170,97,32,143,136,203,250,137,168,153,9,255,240,136,41,76,146,42,17,64,241,225,18,145,233,18,145,233,0,255,240,136,106,248,168,85,130,143,241,1,16,151,233,18,145,41,18,249,32,255,9,6,168,140,67,2,16,143,255,16,129,248,16,143,255,48,205,251,16,129,248,16,130,24,66,135,164,66,15,255,138,15,160,138,79,148,169,130,16,251,146,70,1,3,255,32,74,132,172,70,4,189,242,68,68,68,84,134,64,68,35,242,41,250,154,191,170,159,169,171,242,8,40,130,72,60,140,8,82,151,189,148,155,189,41,86,165,159,209,37,18,80,97,9,19,10,240,129,4,31,255,0,135,248,65,247,249,8,20,161,137,144,134,48,17,15,254,75,36,114,130,164,164,43,241,1,43,210,65,196,16,6,32,143,254,35,47,170,34,175,226,138,79,191,136,31,189,136,24,130,34,242,117,250,82,245,114,150,6,167,130,8,47,242,8,47,242,8,16,15,191,16,159,149,18,47,255,33,1,160,6,1,144,32,140,4,66,14,63,66,4,254,64,38,254,192,36,254,65,4,159,77,9,63,95,244,68,68,78,170,95,244,0,111,236,130,79,228,130,72,40,254,15,242,34,50,36,85,79,127,0,31,242,65,247,240,65,164,21,127,47,244,129,136,30,129,43,212,165,138,94,189,8,18,129,200,96,0,65,7,159,166,67,254,36,67,240,36,130,56,63,226,162,85,72,176,68,4,79,68,20,129,233,21,241,66,20,65,73,23,249,192,16,6,1,5,255,64,4,255,234,148,255,64,4,254,64,7,255,201,64,146,95,246,40,66,137,255,242,149,41,146,159,85,25,51,33,208,81,2,254,18,9,62,150,73,152,146,1,196,51,248,40,131,254,0,47,228,2,7,255,72,135,255,93,198,170,127,244,57,93,104,56,141,64,32,4,7,254,80,135,255,80,133,248,162,171,252,164,75,252,132,27,255,4,7,252,255,250,73,63,162,72,63,129,2,127,240,80,52,132,255,47,4,160,91,249,233,234,146,234,74,169,164,251,64,234,50,172,51,1,15,254,134,47,210,133,47,202,132,79,255,40,31,129,39,157,130,126,4,166,127,143,232,171,239,232,167,243,200,36,147,201,36,159,231,255,224,2,0,32,2,0,32,2,0,32,2,0,32,2,0,160,4,8,0,128,8,0,128,12,0,160,9,0,136,8,128,128,8,0,128,63,2,16,33,2,16,33,2,16,33,2,16,32,164,10,64,104,2,0,7,248,64,132,8,64,132,136,68,132,48,64,4,2,64,55,254,8,0,254,16,33,2,32,68,4,128,128,16,2,0,64,8,3,0,255,232,2,64,66,4,16,128,136,5,0,32,3,0,72,8,67,2,0,0,0,8,72,70,102,68,72,0,0,0,0,0,0,0,0,0,4,0,64,4,2,68,52,38,81,68,152,68,4,96,64,20,0,128,64,2,0,128,4,0,0,14,0,32,2,0,32,2,0,80,8,254,0,15,252,0,64,4,0,71,252,0,64,4,0,79,255,0,64,0,0,0,64,132,40,66,132,47,254,4,0,128,8,1,0,32,12,0,0,7,254,64,36,2,95,164,2,64,36,2,95,164,2,0,0,0,0,0,124,56,0,128,8,0,128,255,224,128,8,0,128,127,224,0,63,194,4,32,67,252,32,66,4,63,194,4,32,66,20,32,128,0,63,128,0,0,15,252,4,0,64,36,130,72,36,130,72,36,0,64,4,3,248,4,135,254,4,131,248,4,3,252,4,0,64,4,0,64,0,1,248,0,128,80,2,0,32,11,128,160,10,0,184,14,1,128,34,3,191,84,132,132,136,64,0,0,0,0,0,0,0,0,0,0,8,96,72,127,240,32,127,224,64,255,240,128,16,1,0,32,4,0,32,129,136,17,7,254,4,3,252,4,15,255,0,0,0,0,0,0,63,130,8,32,131,248,32,131,248,32,2,64,35,2,24,38,199,134,127,196,4,64,68,4,127,192,64,36,2,126,36,2,64,39,239,128,127,224,64,255,248,65,53,192,64,53,192,0,0,0,0,0,0,0,34,9,52,84,79,247,129,71,164,9,241,17,126,161,4,80,162,17,0,7,254,4,0,64,63,192,64,4,15,255,4,0,64,4,0,64,127,192,32,127,192,64,255,240,128,16,2,0,64,8,0,0,0,0,2,128,36,2,79,255,2,0,64,4,0,128,8,1,0,32,4,0,31,193,4,18,65,20,16,79,255,16,65,68,19,66,4,32,68,8,4,0,64,8,3,200,202,193,48,103,9,172,98,56,33,20,0,128,4,0,64,12,33,35,34,70,24,161,2,8,32,130,4,40,55,1,0,4,128,72,68,140,69,4,32,65,5,12,224,52,1,0,0,0,0,0,0,2,0,80,24,134,20,134,65,132,96,72,136,5,0,32,0,0,64,127,196,68,68,71,252,4,15,255,4,0,64,4,0,64,63,194,4,63,194,4,63,194,4,63,194,4,32,79,255,0,0,0,0,1,0,16,1,0,16,1,0,31,129,0,16,1,0,16,1,0,0,0,0,4,0,64,36,2,120,36,2,64,84,8,192,3,224,0,4,0,124,4,3,255,32,2,0,32,2,0,32,2,0,64,4,0,4,3,254,36,34,68,36,2,0,32,2,0,32,2,0,64,4,0,0,32,4,248,128,176,9,1,8,16,130,4,32,100,3,128,16,0,4,8,68,100,99,68,36,128,64,255,224,0,0,0,0,0,0,0,144,68,134,108,66,108,36,128,16,255,240,0,0,0,0,0,0,0,0,0,0,8,64,132,8,64,132,16,65,4,32,68,4,0,64,0,0,4,146,73,36,146,73,36,146,73,36,146,73,32,0,0,0,0,0,0,0,255,234,74,149,41,66,255,224,0,0,0,0,0,0,0,63,242,33,34,19,255,32,2,0,32,2,0,64,4,0,64,8,0,9,0,145,137,20,146,41,67,148,41,128,144,9,0,144,0,0,0,0,0,144,9,4,148,105,36,145,145,17,17,33,2,16,69,8,32,16,0,128,126,0,32,4,0,128,24,6,128,8,0,128,8,0,128,16,1,248,16,130,16,63,230,34,162,34,34,63,226,34,34,35,254,34,1,64,8,1,128,36,4,64,4,0,64,4,0,64,40,1,0,0,0,0,0,2,72,36,130,72,36,130,72,68,148,73,132,112,0,0,0,128,8,1,240,17,3,48,42,6,64,148,0,128,16,2,0,7,199,128,64,4,0,64,4,0,64,4,0,72,5,0,96,4,0,0,0,72,4,128,136,9,1,16,34,4,64,136,1,0,32,12,0,4,0,64,0,15,255,0,128,12,64,130,16,49,1,16,18,0,32,0,8,4,96,99,8,33,0,2,255,240,0,0,0,0,0,0,0,32,3,223,69,26,138,24,197,4,32,36,1,128,0,0,0,0,0,8,0,128,24,3,16,67,15,224,8,129,12,103,143,128,64,0,0,16,1,0,16,1,8,31,194,8,32,130,8,32,135,248,32,128,8,0,1,0,16,1,0,31,1,0,16,1,16,18,1,64,24,1,0,8,0,64,255,240,0,63,130,8,63,128,0,0,0,0,0,0,0,8,0,64,255,224,128,8,15,252,8,15,252,8,0,128,255,224,0,3,199,192,4,15,255,14,1,88,100,120,193,0,0,0,0,0,0,3,207,192,4,15,252,8,15,255,16,2,0,64,8,0,0,0,0,16,1,0,32,3,255,64,8,0,0,15,255,0,0,0,0,0,0,0,0,56,124,4,0,64,7,254,66,4,32,66,4,32,0,0,0,0,7,254,68,36,66,68,36,66,68,39,254,0,0,0,0,0,0,0,0,8,64,195,16,34,0,0,2,1,16,224,196,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,4,124,242,132,126,162,143,124,37,67,84,229,66,56,44,64,0,34,15,190,42,38,214,177,168,190,113,41,58,85,98,18,208,96,0,67,228,34,243,228,34,163,239,0,39,243,95,229,82,85,47,240,0,40,4,94,149,33,20,41,68,82,253,36,82,69,103,208,69,0,0,17,231,210,57,39,243,68,3,30,125,33,18,56,197,82,18,16,0,143,196,132,15,200,0,175,228,146,73,44,254,72,4,130,111,224,0,0,0,0,0,0,0,0,0,0,0,1,128,36,2,64,24,0,0,60,4,96,255,232,3,170,185,87,170,185,87,170,185,87,255,247,255,127,132,12,94,165,239,64,21,221,64,21,221,64,21,221,64,23,255,39,197,16,143,239,84,39,207,84,39,203,16,103,195,16,207,224,0,0,7,0,128,7,6,8,183,23,130,228,92,43,130,240,78,3,0,0,7,0,128,7,6,8,183,23,130,228,92,43,130,240,78,3,0,127,132,4,65,36,58,69,36,162,84,165,146,80,164,178,68,39,243], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([7,0,8,7,0,64,7,128,0,5,0,80,5,0,120,1,0,0,7,0,8,7,0,64,7,128,0,7,0,8,7,0,8,7,0,112,0,128,112,4,0,120,15,128,0,7,0,8,7,0,8,7,0,32,2,0,32,2,0,0,15,128,0,7,0,8,7,0,8,7,0,32,2,0,32,2,0,0,15,128,0,7,0,8,7,0,64,7,128,0,0,0,0,0,0,0,0,0,0,3,128,8,1,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,30,0,0,0,0,15,254,0,0,0,0,15,30,0,0,0,33,66,73,165,91,127,250,38,81,113,234,162,165,74,8,35,98,67,0,15,30,0,0,0,0,15,30,0,0,0,0,15,254,0,0,0,0,3,240,34,2,32,4,0,64,8,0,128,8,0,0,12,0,192,0,7,252,0,0,0,0,7,252,0,0,0,0,7,28,0,0,0,251,120,165,138,93,187,168,10,191,186,155,191,170,156,127,130,0,31,0,7,252,0,0,0,0,7,28,0,0,0,0,7,252,0,0,0,0,14,238,170,74,220,169,74,212,171,78,188,170,64,196,9,64,136,0,7,126,80,69,116,101,69,84,85,69,116,80,70,4,65,68,8,33,2,32,36,66,254,244,34,124,41,2,16,55,238,40,68,64,130,33,2,16,34,79,126,34,2,188,53,14,16,47,226,16,162,132,68,8,142,136,191,234,136,160,10,136,168,138,80,229,10,32,5,1,140,1,0,32,228,138,252,164,74,120,170,10,32,255,202,32,5,0,136,8,0,64,127,192,0,63,130,8,63,128,162,25,66,136,202,96,192,33,4,84,245,73,124,144,9,124,240,73,124,148,9,64,244,64,60,2,3,254,32,2,124,164,70,124,110,234,170,46,228,16,73,40,254,9,15,254,9,4,60,34,64,60,226,66,62,37,34,234,55,162,6,64,196,112,113,10,254,35,130,86,249,2,126,34,69,36,81,136,102,17,15,254,17,0,0,17,1,16,10,0,160,4,0,160,49,12,12,7,207,68,39,194,68,71,199,0,215,197,8,95,231,72,82,128,24,7,135,128,40,129,80,127,196,132,63,129,0,31,2,144,70,1,152,8,142,80,175,202,0,196,138,132,160,11,252,213,73,84,191,232,0,81,15,136,87,231,66,33,15,144,175,239,164,34,79,152,33,66,98,127,196,0,191,128,0,127,128,136,255,137,24,126,162,74,24,102,98,4,7,254,64,40,132,8,15,254,17,1,144,6,0,216,240,96,0,18,1,32,47,198,80,170,131,254,42,130,248,42,130,250,34,34,30,34,2,16,47,239,130,34,3,32,239,226,72,36,130,48,162,196,196,2,14,16,175,234,68,162,142,254,160,10,124,164,78,124,4,64,124,4,4,68,127,192,0,63,194,0,47,130,32,95,196,32,130,0,32,113,5,8,87,231,66,81,5,16,119,229,36,82,69,24,81,75,98,4,15,254,136,39,252,17,0,224,113,128,68,255,225,80,36,132,68,2,7,16,87,197,0,112,5,56,82,135,40,82,165,42,82,107,64,63,130,8,63,130,8,63,129,0,103,196,68,68,69,84,100,128,64,4,0,64,63,130,72,255,224,160,49,140,6,63,130,168,42,143,254,0,7,188,74,68,164,74,68,164,78,68,4,64,71,252,64,64,0,16,129,8,252,129,30,125,65,52,253,66,20,57,68,136,73,73,162,33,15,144,35,231,36,37,79,148,64,135,148,78,41,128,37,68,82,32,15,182,137,47,210,139,175,150,33,47,182,85,170,146,113,34,54,64,2,6,243,129,8,32,130,190,112,138,136,33,66,20,34,66,66,40,130,136,92,140,158,93,68,180,125,69,20,92,133,84,101,68,226,8,7,252,85,68,228,127,197,84,96,192,64,255,224,160,49,140,6,66,5,252,90,199,116,223,197,116,90,196,32,127,228,32,69,5,140,130,5,252,26,193,116,159,197,116,58,196,32,223,228,32,77,131,6,17,15,254,17,0,0,63,130,72,36,131,248,32,2,4,32,65,252,64,36,226,74,174,170,78,164,74,100,173,234,74,164,170,82,46,102,32,2,16,37,15,80,37,2,80,53,14,72,36,130,132,168,69,2,1,7,80,85,5,80,85,5,80,84,135,72,68,128,132,8,65,2,0,7,124,85,69,84,85,69,84,87,199,64,84,32,66,3,224,0,66,7,188,165,0,0,127,132,72,68,135,248,64,36,2,63,224,0,2,0,48,18,1,32,18,1,16,17,1,16,32,130,8,64,72,2,4,0,32,63,234,0,111,226,146,105,42,254,40,4,130,72,40,126,0,3,248,36,130,72,36,130,72,63,130,0,32,34,2,31,224,0,34,130,36,34,15,126,34,2,60,53,78,84,40,130,148,178,68,66,113,69,18,81,7,126,34,2,62,187,42,84,165,75,136,225,64,34,80,15,190,82,167,42,34,175,190,170,15,160,34,47,162,33,226,0,32,2,124,37,79,84,37,66,124,52,14,64,36,34,66,163,228,0,32,2,124,245,66,84,117,66,84,247,194,64,116,42,194,35,226,0,32,2,124,36,66,84,253,66,84,37,66,84,57,14,40,68,64,130,63,128,64,255,234,82,20,133,60,250,69,60,114,66,60,250,66,76,0,7,252,74,71,252,4,7,252,4,15,254,8,1,8,127,194,4,18,2,16,82,128,192,51,12,12,63,2,144,63,2,0,32,129,248,4,0,128,63,130,8,32,130,8,63,130,8,32,130,8,63,130,8,33,2,32,39,207,68,36,71,68,111,202,68,164,66,68,39,194,68,0,7,252,4,0,128,63,130,8,32,131,248,32,130,8,63,130,8,32,2,254,42,175,254,33,2,124,49,14,254,34,2,68,175,228,66,16,1,126,33,2,32,103,202,68,36,66,124,36,66,68,39,194,68,1,15,144,137,8,190,170,74,212,169,74,148,168,130,20,82,72,194,59,238,8,32,130,62,248,130,62,32,131,136,227,226,8,64,136,8,17,6,32,39,194,84,247,194,84,119,202,160,37,2,254,33,2,16,0,14,156,68,133,248,66,142,168,75,196,72,106,140,168,17,192,0,4,14,92,68,133,72,84,142,92,68,132,72,120,140,190,16,0,0,68,4,156,93,79,84,94,37,92,125,77,84,92,133,84,102,76,194,32,194,112,36,15,64,39,194,212,53,78,84,36,130,148,170,69,66,16,2,56,122,132,168,108,101,128,251,132,168,106,133,144,74,137,198,16,5,124,81,5,124,140,64,84,245,69,84,85,69,16,146,131,68,32,194,112,36,15,64,39,199,84,109,74,84,36,130,84,41,67,34,16,197,112,84,5,64,125,196,84,117,69,84,84,133,84,89,73,34,32,130,40,34,143,68,36,66,130,55,206,36,34,66,68,165,68,136,33,2,146,37,79,16,39,194,16,49,14,254,33,2,16,161,4,16,17,1,146,21,66,16,47,230,16,161,2,254,33,2,16,33,2,16,130,132,196,234,224,160,170,160,176,234,228,164,234,229,68,85,74,116,4,2,72,21,0,64,127,192,64,4,15,254,4,0,64,4,0,64,8,0,128,8,7,240,9,4,148,73,36,146,145,33,16,37,4,32,33,2,16,73,37,84,241,2,124,65,15,16,15,227,16,193,0,16,16,1,30,253,33,18,121,65,18,17,47,218,17,66,16,33,4,16,17,231,210,17,67,146,17,167,212,33,4,32,63,226,34,34,96,32,36,2,94,47,47,82,47,71,84,101,42,242,165,162,84,41,3,16,33,2,254,36,79,40,47,230,146,119,202,160,163,194,36,36,66,140,1,7,124,84,69,40,127,229,162,81,7,124,82,5,60,82,75,76,68,4,78,142,170,76,206,132,76,132,174,234,4,163,76,200,129,8,33,2,124,33,15,124,34,7,254,100,74,146,167,194,16,47,226,16,1,15,126,34,66,24,71,231,66,209,5,124,82,5,60,114,64,76,33,2,16,39,207,144,169,10,188,169,15,144,39,226,144,249,0,144,33,2,126,114,72,24,119,226,66,249,2,124,34,3,60,34,64,76,17,1,254,36,66,40,111,234,162,33,2,254,34,2,60,36,66,140,1,4,254,36,64,40,239,226,162,33,2,254,34,3,60,34,64,76,17,15,252,17,2,0,63,132,8,190,130,40,62,130,26,32,33,254,2,7,32,87,197,132,119,69,84,85,71,116,84,69,76,84,43,62,32,2,0,127,132,8,188,130,72,36,131,200,33,162,2,31,224,0,4,15,252,21,2,112,98,11,252,39,2,168,38,33,148,104,128,198,124,64,84,125,64,84,255,65,20,149,69,148,57,69,68,145,67,8,17,15,254,17,8,36,95,232,168,79,130,168,95,236,136,68,128,24,63,128,64,127,197,84,36,3,248,64,139,200,36,131,216,32,33,254,16,1,124,36,66,68,103,202,16,47,226,16,35,130,84,41,34,16,47,132,136,207,132,32,95,196,168,82,64,64,127,192,64,255,224,0,68,4,124,116,73,244,21,68,84,71,68,76,84,6,66,67,224,0,4,0,32,127,196,4,0,3,248,4,0,64,63,128,80,4,135,252,36,2,124,40,79,116,37,66,212,55,78,76,36,2,66,163,228,0,32,2,124,36,79,84,36,130,64,55,206,84,37,66,72,165,68,98,63,130,8,63,130,8,127,193,16,255,194,72,85,72,226,53,0,200,18,2,32,235,197,68,32,69,36,153,66,148,216,66,132,201,67,8,65,7,144,147,226,66,251,170,170,251,170,166,250,0,34,26,46,30,39,194,68,47,195,68,175,234,40,175,226,68,41,37,84,83,136,84,32,2,126,32,143,136,33,3,16,107,74,82,41,34,16,33,2,16,1,15,160,39,194,84,71,199,84,215,197,16,82,135,126,80,128,8,10,7,188,10,3,184,10,7,188,10,0,128,4,69,82,81,40,240,4,0,128,63,130,72,63,130,136,63,129,0,34,15,254,2,0,32,18,1,32,18,65,36,242,129,48,18,1,32,50,45,34,17,225,0,17,15,30,17,15,94,21,7,252,10,1,248,2,7,254,2,0,32,18,79,40,19,3,34,209,227,248,32,131,248,32,131,248,32,130,24,0,3,248,32,130,72,36,130,72,36,130,72,36,128,160,49,140,4,64,4,124,116,72,84,117,66,84,117,66,84,33,3,40,36,64,130,18,1,16,47,194,0,104,74,72,63,226,0,47,194,132,40,66,252,16,9,124,84,66,84,85,73,84,21,67,84,81,9,40,84,66,130,16,3,248,81,0,224,49,140,6,63,130,72,63,130,72,63,130,8,63,133,16,14,3,24,255,226,72,63,130,72,63,128,68,82,168,250,34,2,16,175,235,68,162,138,254,32,2,124,84,68,196,135,192,68,64,130,8,247,225,74,36,134,252,181,66,212,36,130,84,37,66,162,4,0,128,127,193,16,36,141,246,4,1,16,127,193,16,17,2,16,17,15,254,17,0,64,255,224,224,21,2,72,223,96,64,4,0,64,4,0,64,4,7,252,14,1,80,21,2,72,68,105,240,4,0,64,66,7,188,165,1,8,4,7,252,14,1,80,36,141,246,4,0,64,4,4,68,127,192,0,123,196,164,123,196,164,123,196,164,76,73,140,64,4,238,138,170,170,206,228,170,138,174,238,10,163,170,203,33,102,255,224,96,28,142,68,0,3,248,36,131,248,36,131,248,36,132,88,0,15,252,16,3,248,208,129,248,4,7,100,21,130,72,212,96,128,0,135,74,87,229,0,126,226,170,190,234,170,174,235,170,203,33,102,72,66,72,32,0,252,228,130,72,63,226,72,36,130,136,95,232,0,159,196,0,79,128,136,223,197,36,95,197,36,95,196,0,191,224,0,8,3,248,32,131,248,32,135,252,68,71,252,68,79,254,17,2,16,66,4,32,66,4,36,122,132,48,66,4,160,82,38,34,65,224,0,124,4,78,124,161,10,254,193,10,254,170,170,170,171,172,130,143,232,33,3,222,82,128,132,7,199,192,7,131,192,7,207,194,4,32,62,17,2,16,79,232,146,25,2,252,106,74,164,42,130,144,50,130,70,1,7,188,18,67,188,18,71,188,0,7,254,8,3,252,200,64,252,17,15,254,21,3,248,42,130,72,42,131,248,34,67,168,35,35,158,9,15,254,9,1,8,148,133,158,253,73,116,189,77,72,149,72,226,66,4,36,122,132,48,82,38,94,4,15,254,4,0,64,4,0,64,66,71,168,67,39,30,0,15,254,34,3,164,74,138,178,18,38,30,34,2,36,58,130,48,42,35,30,8,1,84,82,37,74,143,131,0,0,0,60,124,0,64,4,7,252,68,68,68,68,68,84,4,128,64,4,0,32,63,226,0,41,2,146,41,66,248,41,4,146,73,40,206,2,3,252,32,10,248,106,130,248,106,138,248,32,5,252,69,8,144,64,2,252,2,68,36,95,196,100,74,69,36,66,68,164,68,68,12,16,137,40,84,129,30,253,73,116,189,77,84,148,137,84,133,72,226,16,137,72,89,239,212,151,75,212,212,137,118,17,15,254,17,2,16,0,0,136,4,128,80,17,5,36,82,37,66,152,1,4,47,196,0,2,7,16,87,197,0,116,68,40,71,231,144,111,202,144,57,0,16,120,132,190,121,68,62,120,138,156,56,128,72,127,192,64,255,224,0,120,132,190,121,68,62,120,138,156,56,131,248,32,131,248,32,130,24,0,137,220,84,1,84,220,133,28,94,133,188,106,132,232,64,139,254,233,10,148,175,140,144,169,42,206,160,12,32,143,136,32,130,9,254,82,15,190,84,135,126,44,175,126,164,175,126,38,143,216,36,130,86,2,4,32,47,192,36,226,66,36,36,66,84,40,133,0,143,224,0,66,4,252,136,74,252,200,4,254,138,174,170,15,226,170,202,161,6,0,111,184,136,138,132,168,10,190,168,42,132,32,133,16,74,232,0,4,0,32,63,194,4,63,194,0,63,195,84,95,197,84,148,65,12,16,1,126,33,2,124,101,74,124,37,66,124,37,2,32,37,2,142,4,7,252,9,2,148,73,32,144,127,193,8,9,0,96,9,7,14,8,0,64,0,15,254,4,0,96,5,0,76,4,64,64,4,0,64,68,130,68,255,224,64,85,66,200,247,226,72,117,194,72,36,132,136,73,2,72,243,224,0,93,66,72,247,226,72,245,194,104,36,132,8,69,0,72,235,224,128,173,68,72,235,228,232,225,196,40,76,136,8,2,9,252,80,65,252,208,5,254,90,165,254,106,164,134,64,11,254,32,2,124,32,15,0,39,231,16,105,10,84,169,35,18,37,2,32,16,1,194,16,199,224,82,39,204,82,4,226,64,69,216,84,42,126,119,229,40,87,231,42,87,229,0,119,197,0,95,229,84,89,43,48,4,0,64,127,192,64,63,128,64,255,224,160,25,66,136,202,96,192,85,3,158,127,69,72,125,69,242,34,7,248,164,131,248,36,143,254,16,137,72,89,239,212,151,75,200,213,72,98,8,133,68,81,72,240,0,71,196,69,68,84,125,65,20,125,65,84,37,66,68,85,72,136,2,3,254,164,6,252,42,66,148,111,202,72,40,69,82,70,72,60,36,34,68,36,143,240,36,35,100,109,139,82,36,34,68,36,130,80,64,130,236,0,175,136,87,229,40,82,66,164,91,196,164,159,160,2,8,10,190,108,130,190,126,40,170,90,162,234,74,169,40,33,64,34,130,5,252,17,72,224,72,2,248,73,12,144,95,196,0,73,1,8,4,7,252,65,65,224,16,1,248,18,1,32,127,192,0,17,2,8,33,2,254,40,47,8,39,3,64,231,194,80,47,226,0,164,68,130,1,129,224,16,1,0,31,193,32,18,1,32,255,224,0,16,130,4,2,8,32,66,0,50,59,64,168,42,132,168,210,70,36,74,36,64,32,2,126,33,15,144,39,231,82,109,42,82,166,162,66,36,162,68,0,15,254,4,0,64,127,196,68,68,68,164,81,68,4,65,68,8,3,131,192,4,7,252,4,3,248,4,143,254,4,131,248,21,6,76,68,68,40,112,9,124,34,128,40,79,228,40,82,134,72,68,128,136,32,2,126,33,10,144,183,234,82,37,34,106,84,101,66,132,32,70,2,0,16,63,226,0,175,230,16,47,230,146,170,164,198,72,168,132,32,129,16,0,7,252,17,1,16,255,225,16,17,2,16,33,4,16,1,14,16,79,228,146,73,14,252,74,68,164,106,141,16,18,130,70,17,15,254,17,4,16,47,232,146,79,192,164,74,73,24,18,130,70,32,194,112,245,66,254,35,131,84,105,42,124,37,66,124,165,68,124,33,2,84,37,15,126,34,2,60,51,78,84,37,66,72,169,68,34,65,4,16,113,8,126,113,2,56,245,66,148,35,163,16,33,0,16,65,2,16,31,233,18,81,1,252,52,69,68,210,133,16,82,130,198,66,132,36,95,228,164,239,196,164,79,196,164,64,133,254,68,132,24,16,129,8,124,129,30,254,168,42,124,160,138,17,39,210,18,163,68,33,66,18,47,239,84,39,194,84,55,206,84,32,130,254,164,132,24,64,132,16,115,232,34,114,34,34,251,226,34,42,35,34,35,224,34,66,7,190,162,129,68,65,2,32,135,197,68,39,204,68,71,196,68,17,1,32,39,194,68,100,74,68,39,194,68,36,66,68,39,194,68,8,3,248,32,131,248,32,131,248,4,7,252,68,68,84,68,128,64,16,130,16,123,196,164,106,69,164,251,196,164,106,69,164,75,201,164,1,7,16,87,197,16,119,197,68,83,135,8,81,5,124,81,11,48,1,71,18,95,229,84,119,197,84,87,199,84,80,133,254,84,139,24,136,132,136,62,128,158,62,170,42,92,160,74,72,171,210,9,33,166,1,4,32,47,192,132,136,68,132,15,194,132,72,76,132,79,196,132,4,71,40,17,5,40,84,69,0,122,64,164,42,140,144,42,129,70,33,66,18,47,239,16,39,194,84,55,206,84,39,194,84,165,68,76,8,0,128,8,0,128,10,0,144,9,128,136,8,0,128,8,0,128,1,64,18,239,234,16,175,234,146,175,234,146,239,234,146,9,32,150,33,1,16,1,7,144,9,129,20,53,37,146,149,1,16,17,1,16,34,2,124,36,66,124,244,2,124,36,66,124,49,14,254,65,0,16,0,7,252,2,0,64,4,0,208,20,130,76,68,64,64,4,0,64,8,0,128,255,193,64,36,7,248,164,130,72,36,130,88,4,0,64,4,0,64,39,194,64,36,15,254,4,1,72,37,4,32,12,7,0,66,7,188,164,128,36,95,226,168,143,132,168,31,196,16,137,0,48,64,2,30,253,32,20,73,131,20,253,32,18,121,164,148,121,0,16,34,2,32,47,235,80,169,11,126,37,34,82,37,34,86,33,2,16,33,2,254,40,47,108,42,163,68,235,163,0,47,226,84,169,36,48,17,9,254,81,2,124,81,9,254,52,69,124,148,65,124,84,66,76,17,71,210,17,15,254,33,1,20,253,67,20,106,138,74,53,98,34,16,65,4,16,79,222,16,67,140,85,73,36,20,65,4,17,65,8,2,0,32,2,7,252,6,0,160,18,2,32,66,8,32,10,0,64,0,79,132,136,74,190,168,74,140,169,74,164,36,69,4,73,72,8,0,206,240,162,42,148,228,10,16,175,238,56,165,74,146,225,0,16,0,199,112,82,5,20,116,130,48,57,10,126,163,139,84,201,32,16,1,131,224,8,2,72,17,0,64,127,192,224,21,2,72,68,64,64,12,71,4,32,137,80,72,65,4,252,131,144,84,41,4,17,129,32,17,15,252,17,7,224,8,130,80,20,15,254,21,2,72,196,96,64,33,15,254,33,3,156,41,69,8,183,66,2,95,200,32,18,66,98,19,193,196,81,71,136,149,70,178,148,131,246,209,1,244,18,129,222,8,1,16,63,128,136,255,225,16,38,141,134,7,3,128,3,135,192,63,128,128,255,225,16,36,140,70,63,130,72,63,128,72,127,194,4,1,79,146,33,226,112,57,4,158,79,11,20,17,130,18,66,168,198,68,36,92,95,6,80,73,13,94,95,68,84,95,68,84,69,68,100,66,4,72,79,198,36,95,236,72,73,69,98,65,132,96,65,196,224,33,2,16,41,11,84,165,74,84,37,66,84,37,69,124,80,72,0,17,15,254,17,0,64,10,1,24,63,109,16,19,65,4,15,192,0,17,2,16,122,132,198,104,5,188,250,68,164,107,69,168,74,41,158,4,0,160,10,1,16,32,133,246,145,1,16,21,1,36,16,64,252,66,2,32,5,8,136,80,96,240,41,12,144,75,4,132,71,192,0,17,15,254,17,75,254,160,142,248,42,174,250,169,170,252,42,100,250,39,130,72,39,143,0,46,226,170,62,238,16,47,226,56,165,68,146,32,130,40,171,231,72,32,143,62,44,7,92,101,74,92,36,2,190,34,130,254,34,143,254,42,166,254,122,170,254,164,66,124,36,66,124,10,15,254,10,7,252,74,71,252,74,71,252,32,131,248,32,131,248,17,15,254,17,3,248,32,131,248,32,131,248,4,15,254,4,0,64,0,7,254,64,5,226,82,165,170,90,165,170,74,165,74,146,34,38,65,7,222,146,128,64,127,192,64,127,196,68,78,195,88,196,96,64,32,34,2,94,173,42,82,165,170,90,165,170,74,164,130,84,38,38,0,3,184,42,130,168,42,143,254,42,130,168,42,132,168,76,137,152,0,43,226,98,162,42,170,166,170,42,162,170,106,168,130,20,162,36,0,3,252,32,67,252,32,2,248,32,3,254,36,4,136,95,200,4,4,79,40,159,233,146,253,98,186,185,42,254,164,75,124,196,64,124,32,194,112,241,2,254,33,2,80,57,110,146,45,98,146,175,228,130,0,15,252,40,66,68,36,129,8,17,0,160,4,0,160,49,140,6,17,15,254,17,0,128,255,193,0,34,6,248,162,2,32,63,226,0,17,15,254,17,1,80,10,3,24,196,99,248,4,2,72,84,64,128,4,15,254,21,2,72,68,67,248,32,131,248,32,131,248,0,7,254,1,15,254,37,66,146,71,199,68,215,197,68,87,199,0,79,224,0,36,66,254,36,79,84,34,131,84,233,34,124,33,2,84,169,36,48,4,15,252,160,67,184,106,141,16,46,132,6,191,129,80,36,128,192,18,1,32,33,4,8,191,225,8,16,130,88,68,2,72,36,131,248,17,0,160,127,192,64,63,192,128,255,225,0,63,196,32,130,3,254,2,4,16,47,224,130,233,194,112,33,2,30,47,3,16,33,32,14,32,194,112,36,15,64,39,226,72,53,142,76,36,162,72,168,132,8,17,1,18,93,69,24,93,47,14,4,15,254,21,2,72,196,96,64,32,133,72,136,133,126,33,141,24,42,141,168,44,140,136,42,129,16,36,2,124,40,143,124,37,66,124,50,142,74,42,98,16,166,4,24,34,2,72,47,207,36,47,227,72,233,67,98,33,130,96,160,196,240,34,34,20,35,239,170,171,234,170,251,226,8,43,227,136,232,128,8,68,4,120,120,133,124,149,64,124,66,164,70,65,133,4,99,4,12,4,4,120,40,128,124,229,66,124,34,162,70,33,130,132,51,0,12,65,4,254,136,10,190,202,164,190,138,174,190,8,130,190,200,129,62,65,4,8,119,232,0,114,66,24,39,239,64,36,3,64,36,0,128,4,0,32,63,192,0,16,128,144,63,194,0,32,2,0,64,8,0,159,197,20,10,69,244,85,69,244,85,69,244,68,69,244,68,68,76,32,15,190,0,143,144,139,235,162,170,175,170,82,167,42,1,79,162,63,130,8,63,130,8,63,128,0,127,196,4,127,196,4,127,196,4,39,194,68,167,196,68,167,194,0,111,234,130,47,226,130,175,228,130,32,2,124,32,130,16,250,2,126,34,162,42,52,174,146,66,160,68,4,2,72,21,7,252,64,65,240,0,7,252,8,1,8,63,193,4,36,129,80,127,196,4,31,1,16,31,0,64,127,196,68,68,192,64,16,1,16,18,1,64,24,15,252,18,1,32,17,1,8,20,97,128,17,1,84,35,130,254,104,42,124,32,2,254,34,2,72,47,194,68,0,7,124,80,133,16,114,5,126,82,167,74,89,37,34,148,163,4,0,3,252,32,2,0,32,2,0,32,2,0,32,4,0,64,8,0,33,10,144,113,2,62,250,72,212,185,74,148,168,139,136,137,73,162,32,2,124,248,138,144,170,15,254,170,170,170,250,162,74,41,34,38,7,142,72,167,138,72,167,138,0,175,206,132,175,192,132,15,192,132,23,193,68,39,198,68,167,194,0,47,226,130,47,226,130,47,226,130,16,1,124,122,65,36,250,193,64,83,197,164,83,197,0,191,224,0,33,2,16,33,15,84,37,35,82,233,34,16,33,66,8,163,4,192,65,4,16,113,8,84,117,34,82,41,47,16,33,66,136,51,2,192,32,15,188,34,79,164,139,207,164,138,79,188,34,79,164,36,66,140,4,0,238,228,170,234,170,234,234,170,170,238,228,170,234,4,160,86,136,5,220,9,73,212,85,195,212,85,77,220,73,69,212,73,64,172,36,132,144,36,131,248,36,131,248,36,131,248,4,15,254,21,6,76,1,0,16,113,5,84,85,37,146,81,5,18,113,69,8,3,0,192,33,2,16,41,11,84,165,42,82,41,2,16,81,68,136,67,8,192,8,0,128,127,129,0,36,3,248,4,0,64,255,224,64,4,0,64,33,2,16,33,15,16,37,226,80,53,14,80,37,2,80,175,228,0,72,133,200,72,143,94,93,68,52,125,77,84,92,133,84,93,77,98,80,71,212,145,71,212,85,65,12,63,0,64,63,128,64,255,224,192,32,4,158,136,162,138,78,175,138,72,164,170,77,36,146,66,164,68,136,133,200,8,137,94,93,66,52,93,77,84,92,133,84,93,65,98,36,2,78,36,175,234,36,194,106,117,170,202,36,162,76,36,130,72,0,3,252,36,2,64,63,130,8,32,131,248,36,2,64,63,192,0,0,3,252,32,2,248,32,3,252,42,34,148,72,132,164,140,32,128,4,2,72,36,68,66,132,32,0,4,7,252,4,0,64,255,224,0,31,129,8,31,129,8,63,226,0,47,130,0,63,196,146,136,192,198,34,2,32,50,10,252,170,74,32,37,2,80,37,34,146,48,226,0,128,5,252,16,73,4,71,2,80,69,12,80,73,36,146,16,226,0,2,14,32,175,202,64,197,10,144,175,234,16,197,72,82,137,40,48,17,1,16,122,129,36,253,33,40,81,5,164,81,135,32,159,224,0,64,130,8,0,143,126,16,130,136,114,138,152,32,130,8,34,130,16,41,34,84,47,239,170,35,130,4,55,142,16,47,226,16,165,4,32,18,14,32,35,226,66,249,66,16,117,70,82,169,34,16,37,2,32,32,162,8,47,239,136,40,130,234,42,163,172,234,133,106,17,98,34,32,162,236,42,175,68,47,199,2,103,138,72,167,130,132,36,130,252,2,128,36,63,226,32,34,3,212,37,66,84,36,133,74,73,104,34,0,3,248,32,130,8,63,128,0,127,192,64,63,128,64,255,224,0,1,131,224,4,79,254,21,7,84,21,131,82,206,225,80,100,192,64,24,14,124,36,66,68,247,194,0,119,198,144,167,194,16,47,226,0,32,4,254,145,2,80,101,202,80,47,226,0,4,5,36,80,168,250,1,11,212,84,128,138,31,74,2,95,129,8,95,137,8,9,3,252,129,68,18,15,236,144,73,4,234,74,164,170,106,197,106,17,98,34,63,128,16,6,15,84,31,130,80,47,4,72,95,136,68,20,32,128,143,132,136,15,128,0,223,196,32,79,132,32,95,228,0,191,224,0,1,15,124,21,69,124,85,69,124,120,0,254,41,12,188,40,65,24,16,14,124,33,2,84,243,130,16,119,234,144,33,2,16,33,2,16,4,14,64,175,234,128,176,10,124,160,142,16,162,0,66,4,32,62,4,0,32,63,226,128,174,231,74,36,167,250,164,162,74,74,233,16,33,2,16,39,207,16,47,226,8,55,238,72,34,130,8,162,132,16,122,4,160,122,68,168,123,0,32,254,65,36,93,197,0,191,224,0,66,2,32,10,8,184,78,131,168,10,130,184,202,36,130,71,224,0,71,194,68,36,64,68,231,194,80,36,130,132,48,34,0,95,232,0,113,1,16,21,7,92,71,68,212,117,65,92,21,1,66,83,226,0,0,143,8,18,133,46,83,165,106,122,160,174,42,140,162,41,225,0,0,143,200,72,135,168,74,231,168,74,132,232,122,140,254,8,0,128,4,2,124,36,2,64,255,224,64,68,68,164,81,68,4,127,192,0,18,1,60,36,66,168,97,10,104,41,226,34,37,66,8,35,2,192,0,3,248,32,130,8,63,130,64,36,2,32,34,4,16,64,136,6,4,0,64,63,128,64,255,224,160,42,132,164,146,33,34,42,4,64,46,194,36,242,66,180,118,197,108,91,66,36,43,69,72,143,224,0,1,131,224,32,2,0,63,226,32,34,2,96,67,4,40,130,0,32,32,2,120,172,139,72,164,138,72,39,130,0,85,5,72,136,64,0,8,0,64,255,193,0,33,7,248,18,129,32,18,34,34,33,228,0,1,8,16,65,0,254,41,34,146,73,44,254,65,4,16,65,0,16,4,0,64,63,130,72,36,130,72,63,128,64,4,128,124,124,64,0,4,2,72,63,128,64,127,228,2,31,128,0,127,194,72,68,64,192,8,0,64,127,196,164,9,7,252,18,1,40,35,34,34,69,232,128,33,2,16,39,207,84,37,66,84,55,206,84,37,66,84,167,196,68,2,47,170,34,175,170,175,234,170,218,168,170,250,168,170,250,32,66,0,143,190,168,138,188,169,15,254,170,74,190,170,79,212,132,64,140,1,7,126,81,5,124,113,2,126,162,75,62,164,75,84,200,64,12,16,6,254,41,34,186,249,34,254,120,38,186,170,162,186,40,35,6,8,131,10,18,199,168,20,131,148,81,65,34,4,5,36,80,168,250,66,7,188,165,0,128,63,128,128,255,225,8,31,226,72,34,132,24,18,1,32,34,2,248,98,138,40,34,130,40,34,162,74,36,98,128,64,4,254,137,42,186,233,36,254,136,46,186,10,162,186,200,33,6,2,142,200,164,171,234,229,202,232,180,142,72,165,74,84,230,32,64,0,7,248,8,128,136,8,135,248,16,129,8,16,129,8,255,224,0,8,3,248,32,131,248,32,131,248,32,131,248,5,7,252,10,3,24,64,2,0,7,207,36,18,66,164,114,74,164,34,66,68,37,66,136,4,0,64,36,130,72,36,131,248,4,4,68,68,68,68,127,192,4,32,2,254,40,79,244,40,230,244,121,202,244,173,66,164,55,66,12,0,3,254,32,67,228,33,226,228,43,66,236,32,68,164,95,72,12,2,135,126,82,133,16,119,162,20,183,234,40,183,142,168,3,128,0,64,132,232,122,136,190,126,162,170,46,175,170,43,162,234,49,34,38,66,132,36,119,233,72,44,143,126,20,135,126,20,143,72,23,224,64,57,10,144,106,131,68,168,38,184,41,3,124,97,10,84,41,34,48,1,14,40,164,74,130,199,202,16,175,234,16,197,72,146,133,8,32,17,7,188,17,3,184,85,65,16,127,192,68,39,2,64,95,224,0,1,15,16,37,68,84,117,77,124,81,5,84,85,71,84,71,192,0,33,2,18,87,204,24,119,229,32,85,197,20,85,197,148,81,196,0,4,7,252,4,3,248,32,130,72,255,225,16,123,196,164,74,79,254,33,2,254,34,79,120,34,66,126,48,46,124,37,66,124,165,68,124,64,135,8,144,130,62,250,170,170,250,170,190,248,138,138,171,225,130,1,2,16,33,3,216,69,68,146,169,1,16,41,4,64,131,224,0,33,2,146,41,47,254,32,2,254,50,14,254,42,162,170,170,164,134,0,2,4,36,66,68,36,66,68,36,66,68,36,68,68,64,72,4,4,7,252,81,66,8,31,0,32,34,3,252,6,1,160,98,0,96,35,130,72,39,143,16,47,231,32,109,138,58,45,66,52,45,34,48,17,1,16,39,194,16,97,10,254,34,2,124,32,66,40,33,2,8,16,2,60,122,68,164,106,100,192,251,196,164,106,69,164,75,201,164,1,0,146,233,42,254,160,11,254,162,10,254,234,170,170,10,160,134,4,0,64,63,130,72,63,128,64,127,196,68,68,71,252,4,0,64,4,0,32,63,226,32,165,6,140,55,166,72,165,130,64,68,72,60,4,15,252,146,66,16,16,7,248,72,132,232,82,134,200,82,135,248,32,130,62,249,74,254,170,170,190,170,170,190,168,139,190,32,130,126,4,0,32,63,194,32,34,3,252,34,2,112,42,133,36,66,8,32,64,2,252,0,69,228,66,69,36,95,68,20,93,68,84,66,68,12,16,66,132,69,72,52,125,68,84,69,69,84,72,68,36,62,64,12,2,0,32,114,5,126,84,37,148,81,5,16,114,133,40,4,64,130,34,2,32,42,11,124,164,74,136,162,2,32,34,5,80,68,136,132,32,194,112,241,2,254,53,66,84,111,234,84,37,66,254,161,4,124,32,194,120,113,4,254,133,71,84,47,239,84,37,66,254,49,2,124,1,131,224,4,7,252,36,130,72,255,226,72,36,135,252,4,3,248,4,7,252,4,3,248,8,15,254,17,3,248,209,97,240,17,1,240,33,2,254,33,15,124,34,6,254,116,138,252,180,162,120,36,130,120,0,143,190,32,15,188,170,74,188,216,8,156,248,72,190,248,136,152,63,194,0,47,130,0,63,194,144,40,164,164,76,41,248,16,129,248,65,2,254,0,8,124,68,65,124,32,4,124,192,132,254,65,4,48,66,4,32,159,206,32,74,136,168,239,128,40,50,44,34,1,224,0,4,7,252,8,15,254,49,141,246,49,143,254,170,175,190,32,143,190,237,2,84,181,38,208,181,226,176,93,12,148,92,132,138,127,100,34,33,2,28,73,15,124,36,68,124,244,64,124,49,12,254,1,0,16,4,0,32,63,226,0,162,134,42,42,198,184,170,130,170,75,169,198,17,15,254,17,8,64,71,192,68,42,140,32,69,4,80,72,129,6,4,79,40,47,226,36,66,71,72,212,165,108,82,71,74,86,224,34,41,66,144,42,234,164,174,75,174,170,74,174,186,78,228,10,224,32,18,6,16,47,226,68,242,130,254,33,7,16,87,197,16,113,0,16,32,129,16,255,226,16,74,71,56,41,71,188,4,5,36,80,168,250,132,4,124,42,68,32,133,0,136,255,225,0,31,2,148,37,67,204,0,4,252,32,64,116,224,66,116,37,66,84,39,67,4,33,64,8,17,1,16,17,37,20,93,133,16,81,5,16,93,47,18,64,224,0,16,65,4,125,65,20,125,69,84,93,65,20,57,69,68,145,65,8,3,207,164,139,202,164,171,202,144,171,234,214,162,165,42,85,40,38,130,4,32,39,224,66,37,66,144,65,12,16,66,132,40,68,64,130,4,79,168,87,197,68,116,69,124,113,5,10,90,47,100,27,193,0,17,15,254,17,3,248,106,129,232,102,129,152,4,5,84,81,40,240,8,1,0,127,196,132,79,69,20,106,68,68,74,69,4,127,196,4,32,2,0,63,196,164,170,65,164,22,66,36,197,64,132,49,64,8,17,1,16,17,1,16,17,2,168,42,130,168,68,68,68,136,32,0,17,1,16,17,1,16,18,130,168,42,68,68,136,32,0,127,224,0,2,9,252,66,0,248,36,5,252,72,141,116,98,36,248,69,0,136,32,2,60,170,71,36,35,207,164,34,71,60,170,66,36,39,226,0,2,79,164,39,239,164,170,74,254,216,8,188,250,72,188,250,72,188,66,7,188,149,4,64,39,207,160,67,135,80,95,197,16,146,131,68,16,1,124,36,66,68,103,202,16,37,2,94,37,2,80,43,227,0,1,7,254,90,165,84,119,194,84,183,202,16,167,203,84,231,192,16,66,7,188,148,128,0,63,130,72,63,129,0,255,226,72,73,97,240,4,15,254,160,164,68,63,130,72,63,128,64,127,196,68,127,192,64,33,2,146,47,239,72,39,226,200,55,238,72,39,226,72,167,228,64,4,4,68,127,193,32,63,198,32,175,130,32,47,130,32,63,194,0,17,1,146,47,226,72,111,235,72,39,226,72,39,226,72,39,226,64,4,7,124,88,133,126,116,5,94,85,39,86,85,5,82,84,235,128,2,3,254,33,10,254,100,66,68,106,170,16,47,228,16,129,0,16,34,10,144,119,194,0,250,130,40,117,74,144,47,226,16,33,2,16,68,2,32,159,196,0,8,130,136,85,78,32,95,228,32,66,0,32,243,197,20,48,197,20,4,7,252,17,2,168,4,15,254,4,0,64,32,130,8,32,143,126,32,130,72,114,138,168,32,130,8,34,130,16,8,0,128,255,225,0,23,194,8,33,6,254,161,2,16,37,2,32,2,0,32,2,7,252,2,2,32,18,1,32,2,0,32,10,0,64,4,79,40,47,226,16,71,199,16,223,229,32,83,231,72,68,128,190,71,196,68,71,206,68,95,228,160,110,236,170,78,164,180,94,76,42,40,66,72,47,207,32,47,194,32,63,238,64,39,194,144,177,4,254,34,130,40,39,207,40,47,226,0,55,206,68,39,194,68,167,196,68,33,2,16,37,79,84,37,66,186,49,14,124,33,2,16,175,228,0,66,135,40,71,200,40,119,226,0,247,194,68,39,195,68,39,192,68,36,66,254,36,79,16,34,131,68,235,162,0,39,194,68,167,196,68,65,2,16,33,0,254,225,2,40,34,66,66,40,34,0,95,232,0,66,7,188,164,128,68,10,3,24,223,96,0,63,130,8,63,128,0,2,3,254,164,135,254,36,134,32,173,131,118,32,4,248,72,136,248,32,2,0,47,239,16,33,2,144,49,14,16,33,2,16,165,4,32,4,0,64,4,0,64,127,192,64,10,0,160,17,1,16,32,132,4,0,3,248,32,130,8,63,128,64,255,224,224,21,2,72,196,96,64,0,7,252,8,0,128,15,129,8,24,130,80,3,0,32,12,7,0,34,2,252,66,5,248,196,7,254,72,133,36,106,164,112,74,132,96,17,7,212,17,15,254,85,7,212,41,71,200,40,175,234,41,100,66,21,1,80,127,193,80,0,15,254,132,35,248,36,130,72,37,128,64,0,143,200,33,3,148,75,228,130,176,1,60,34,68,36,131,192,36,18,129,36,34,2,60,110,10,32,34,2,36,33,66,20,32,194,4,18,130,36,97,234,240,32,162,6,63,162,72,36,130,168,17,6,8,18,130,60,110,10,20,40,194,64,255,193,64,50,141,16,20,193,128,17,2,16,71,201,16,47,230,8,175,226,72,34,130,8,34,130,16,130,4,252,2,65,254,194,68,252,66,4,168,71,5,168,70,75,254,8,1,0,32,135,252,0,67,248,32,131,248,4,5,36,80,168,248,1,15,144,81,5,126,117,37,148,113,5,40,90,143,42,20,161,134,32,2,124,36,79,68,39,194,68,52,78,124,32,2,0,175,228,0,0,3,248,32,130,136,36,130,8,255,226,8,32,132,8,66,136,16,32,129,16,63,130,72,63,130,72,63,128,64,255,224,64,4,0,64,68,2,158,125,37,84,125,69,88,125,65,18,253,161,20,17,1,16,36,66,40,39,207,84,39,194,84,55,206,16,47,226,16,161,4,16,0,7,0,83,197,36,114,69,60,82,71,36,83,197,0,87,235,0,0,3,248,32,130,8,63,130,8,32,131,248,0,0,0,255,224,0,63,196,0,191,0,0,127,130,168,76,129,40,104,162,170,20,102,34,16,1,124,36,70,68,167,194,68,36,66,124,32,2,0,47,226,0,36,66,40,55,202,212,167,202,84,39,194,16,47,226,16,33,2,16,2,4,164,42,129,32,133,133,132,2,2,164,210,132,80,72,133,6,128,101,184,8,128,136,208,229,40,74,134,168,91,230,128,87,226,0,4,71,40,23,193,84,119,196,84,71,199,16,31,225,16,81,2,16,127,192,68,39,2,64,95,232,64,63,194,68,63,192,68,255,224,2,4,2,72,21,0,64,127,128,8,0,131,248,0,128,8,127,128,8,33,2,146,37,79,16,47,226,2,48,46,126,32,34,2,175,228,2,4,2,72,21,7,252,64,65,240,17,1,240,10,0,164,18,70,28,17,15,254,17,4,248,33,8,32,79,194,76,89,76,36,77,68,8,33,2,146,37,79,16,47,231,2,104,42,126,160,34,2,47,226,0,0,0,0,127,128,136,8,128,136,16,129,8,32,130,8,66,136,16,34,2,124,36,79,84,36,66,72,55,238,34,42,162,250,160,164,4,0,199,112,82,5,84,114,130,0,38,203,68,166,203,68,231,192,0,32,35,242,68,164,170,223,164,74,95,164,74,71,165,202,72,36,6,8,3,240,41,2,80,33,2,32,63,192,132,73,71,244,1,64,8,65,2,254,241,1,124,34,6,254,180,66,126,42,67,20,32,66,12,63,194,4,63,194,0,32,33,254,1,15,254,33,1,16,5,0,32,0,71,196,17,66,84,125,65,84,17,71,212,17,65,196,113,66,8,16,102,120,33,34,84,250,2,16,118,234,194,38,98,66,39,226,0,33,2,30,49,10,124,164,74,124,164,66,124,33,2,254,33,2,16,2,132,254,33,0,124,228,66,124,36,66,124,36,66,124,80,8,254,68,2,124,10,66,32,197,4,140,64,3,248,42,130,168,255,224,0,34,5,252,130,3,252,85,77,252,64,5,252,68,69,34,104,164,248,23,194,68,71,201,68,39,198,0,167,194,8,47,226,72,32,130,24,17,2,16,123,196,164,76,71,164,73,68,148,72,71,148,72,128,0,14,167,172,86,165,68,119,194,130,183,202,68,167,203,68,194,128,254,32,2,0,43,235,8,160,138,8,160,130,8,80,132,136,74,136,16,250,68,152,49,34,12,95,72,2,63,130,8,63,129,16,10,7,252,66,7,188,165,0,64,127,192,64,255,224,16,127,193,16,9,0,48,30,175,44,172,170,132,239,203,2,175,206,132,175,202,132,228,129,254,121,66,136,31,162,4,223,161,8,31,128,144,255,225,16,17,34,14,0,15,188,10,72,168,83,5,40,34,69,36,75,72,40,2,0,32,39,194,68,39,194,68,247,194,0,47,226,16,53,206,80,75,224,0,16,1,12,47,2,144,105,10,254,41,2,138,42,162,198,41,34,8,130,5,252,8,136,80,95,195,36,95,205,36,87,69,84,87,65,12,130,4,32,15,128,168,202,132,248,74,132,168,79,132,0,191,224,0,25,14,16,33,2,62,250,66,100,34,79,168,137,8,168,252,72,130,33,3,222,82,136,132,4,0,64,63,130,72,63,130,72,63,130,8,1,9,16,81,34,84,85,137,80,25,3,16,82,137,40,84,66,130,68,2,124,12,137,48,68,129,166,34,13,252,66,4,168,82,64,96,247,133,40,49,133,40,47,198,32,175,130,32,47,130,32,63,194,0,65,4,254,68,78,40,175,234,146,171,170,146,75,164,170,171,160,134,32,98,120,36,143,200,39,226,72,52,142,74,38,162,70,161,36,8,4,7,252,64,4,56,94,5,32,95,197,32,81,69,140,146,64,16,33,2,16,37,66,94,247,66,212,37,66,92,53,14,66,67,224,0,17,15,254,21,7,252,17,0,160,255,232,66,63,130,72,37,128,64,66,7,188,149,0,0,127,128,72,127,132,64,127,192,196,52,204,64,4,7,252,32,129,16,127,228,66,132,67,248,36,130,72,37,128,64,32,129,16,127,128,72,63,132,64,127,192,196,20,66,84,196,128,64,8,136,80,95,192,36,223,197,32,95,196,100,75,69,40,66,11,254,33,2,124,68,69,40,239,226,146,71,207,84,5,67,92,193,0,16,16,7,190,32,135,190,74,39,170,74,167,170,74,175,200,49,68,162,34,2,16,47,239,128,41,2,158,57,14,144,43,194,164,170,69,60,130,5,252,2,8,248,72,130,248,72,140,248,72,133,252,69,0,136,5,15,80,47,194,84,69,71,252,213,69,84,95,231,0,68,128,132,8,0,128,15,192,128,8,7,248,64,132,8,127,128,0,84,136,164,10,0,160,63,130,168,42,131,248,42,130,168,255,224,0,17,2,8,33,15,124,36,71,0,39,207,144,81,7,92,85,7,80,91,229,0,34,2,32,247,130,40,54,174,42,37,102,130,4,7,252,4,15,254,8,0,128,127,4,144,73,7,240,73,4,144,127,0,132,8,64,124,16,1,0,47,226,146,105,42,146,47,226,146,41,34,146,47,226,130,16,1,0,63,196,4,190,66,164,62,66,164,62,66,4,1,64,8,4,0,32,63,194,32,34,2,60,34,2,252,40,68,132,79,200,132,34,2,16,47,235,144,169,10,158,169,2,144,43,194,164,50,66,60,32,129,16,127,192,160,63,130,168,51,130,232,36,143,254,9,3,8,66,2,16,15,200,132,64,0,252,34,4,32,203,196,160,74,5,126,0,7,220,69,71,212,66,101,64,127,197,84,127,68,8,85,74,34,0,15,126,37,34,122,69,39,126,212,37,122,86,167,186,72,33,6,0,0,0,119,197,4,80,69,12,81,69,36,116,69,4,1,64,8,0,135,212,87,231,212,85,71,222,69,69,222,85,69,212,69,232,208,0,1,252,146,69,116,18,67,252,80,77,116,85,69,116,16,66,12,0,0,0,63,128,8,2,128,72,8,129,8,96,128,8,5,0,32,33,2,30,33,15,124,36,66,124,52,78,124,33,2,254,161,4,16,0,3,248,32,130,8,63,128,64,127,196,68,68,68,84,68,128], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+34077);
/* memory initializer */ allocate([64,65,4,16,114,8,60,116,66,132,34,79,148,32,66,132,49,66,8,0,9,252,82,65,116,210,69,252,80,69,116,117,69,116,16,66,12,1,7,16,85,5,124,117,2,144,47,235,16,162,139,168,228,64,130,33,5,40,12,3,48,200,227,96,20,129,144,231,193,196,5,131,224,1,79,84,47,226,84,69,199,64,215,197,16,95,231,56,69,64,146,33,66,84,47,239,84,165,202,64,247,194,16,47,227,184,229,64,146,1,4,80,39,192,144,225,2,254,33,2,40,36,66,130,95,232,0,10,137,254,74,128,184,200,4,252,66,5,254,103,4,168,18,64,32,63,1,16,14,3,16,123,196,164,49,132,164,255,233,18,21,7,252,0,0,0,127,192,64,4,0,64,4,0,64,4,0,64,20,0,128,0,7,126,80,133,8,112,133,8,80,135,8,80,133,8,114,128,16,0,0,126,112,133,8,80,133,8,80,133,8,112,133,8,2,128,16,64,4,0,123,232,8,120,130,8,32,143,136,32,130,136,50,130,16,0,15,126,33,2,124,36,66,84,37,66,84,37,74,40,68,64,130,31,1,16,95,69,20,95,68,4,123,192,160,251,194,164,42,68,164,65,4,8,119,232,66,112,2,126,33,15,94,37,3,80,43,225,0,8,0,64,127,196,4,0,3,248,4,2,64,39,194,64,84,8,254,0,4,0,39,224,8,224,130,8,32,130,8,40,131,8,34,128,16,1,131,224,4,0,64,63,128,64,4,15,254,8,1,8,63,192,4,8,0,128,255,193,0,20,2,64,127,192,64,37,4,72,148,64,128,32,3,248,64,138,16,18,0,192,51,12,14,12,0,48,56,0,112,17,15,254,17,0,252,244,3,248,36,131,248,36,135,252,4,15,254,34,130,254,50,138,30,175,10,84,39,194,84,39,194,16,47,226,0,1,7,16,1,0,126,249,34,18,65,37,18,138,47,162,4,160,132,34,2,32,47,239,32,37,7,80,111,234,16,165,66,82,41,34,48,16,1,254,40,34,130,107,166,130,171,162,170,42,162,186,40,34,134,32,2,254,40,35,130,171,170,130,171,162,170,42,162,186,40,34,134,1,4,16,47,192,32,21,2,144,79,236,16,73,68,146,81,32,48,0,4,254,40,40,186,72,33,186,42,172,170,75,164,130,72,160,132,2,2,76,78,68,164,110,196,164,78,70,12,18,1,34,34,36,30,32,130,72,34,143,8,36,130,40,48,238,248,32,130,8,160,132,8,2,2,32,18,0,32,34,1,32,3,239,224,2,0,32,2,0,32,1,7,16,87,197,16,111,229,16,85,5,94,101,4,176,81,228,0,0,7,252,0,3,248,32,130,8,63,128,0,32,129,16,255,224,0,64,2,254,32,0,124,228,66,124,32,2,68,34,130,254,80,8,254,2,3,252,160,6,248,32,6,248,168,130,248,32,4,136,69,9,252,16,1,46,122,161,74,254,193,10,124,170,74,60,162,76,60,128,8,16,1,222,17,47,212,56,133,84,146,35,252,32,67,252,32,67,252,4,7,252,4,7,254,0,3,248,36,143,254,72,132,72,127,192,24,33,2,124,161,15,126,162,34,24,52,142,40,39,226,8,33,66,34,17,9,16,81,2,124,85,73,84,53,69,124,145,1,20,87,226,2,1,4,16,39,192,16,15,238,66,42,130,72,39,226,136,49,66,98,33,2,18,39,207,24,47,226,32,39,194,164,51,206,36,67,192,36,1,7,18,87,197,24,127,229,32,87,199,164,83,197,36,115,192,36,1,15,144,143,170,148,175,234,144,171,202,228,35,197,36,139,192,0,33,2,16,33,15,144,39,199,16,105,10,16,161,2,254,32,2,0,64,132,126,117,72,126,117,66,92,36,15,124,37,67,84,40,129,54,121,4,144,73,7,144,73,4,252,121,4,144,73,4,144,111,233,0,2,3,252,37,3,252,37,2,112,32,2,240,73,4,96,137,3,12,1,4,254,42,136,252,74,129,184,40,12,188,74,69,24,82,66,66,33,2,8,32,15,190,74,36,162,147,229,32,34,5,32,132,0,128,1,4,146,41,32,254,240,0,254,161,10,254,170,163,170,202,160,134,64,4,254,112,10,124,36,66,68,247,194,0,84,69,40,143,224,0,68,4,156,121,72,212,10,110,192,73,206,212,89,68,136,105,68,162,19,198,36,66,71,70,64,7,124,66,69,36,98,140,16,66,132,198,16,37,92,185,9,16,253,233,20,185,77,84,145,79,212,2,64,68,4,4,156,73,72,212,233,100,160,141,238,146,13,67,136,201,64,162,34,130,36,36,2,254,244,130,126,36,130,126,52,142,72,71,224,64,33,1,32,0,3,240,33,2,16,33,3,240,18,1,34,34,36,30,1,7,144,73,4,144,81,4,144,74,134,168,82,132,68,68,68,130,0,64,4,248,64,190,136,69,4,82,66,20,80,68,132,129,64,8,68,69,244,78,68,174,238,164,26,78,164,42,100,173,228,4,160,210,2,14,32,191,202,32,170,138,168,170,142,248,162,32,34,1,224,0,2,135,124,81,5,124,117,66,108,180,74,124,184,142,126,2,128,24,16,143,200,1,7,158,75,71,212,1,71,148,16,143,148,18,67,66,32,2,62,248,130,62,34,42,170,170,175,170,34,162,148,50,34,66,0,7,252,68,69,244,68,69,84,95,68,68,69,68,52,64,71,252,65,7,16,143,224,16,117,66,84,253,66,124,33,3,18,32,224,0,1,195,224,34,3,254,34,2,252,40,66,252,40,68,252,72,72,252,1,201,240,81,1,254,209,5,124,84,69,124,84,70,124,64,11,254,64,5,220,85,78,136,85,68,34,96,13,220,85,68,136,85,78,34,2,14,56,164,138,208,162,74,72,185,238,34,165,64,8,3,0,192,8,0,240,17,2,32,85,0,188,52,76,200,19,0,96,24,14,0,4,0,64,127,192,160,49,140,6,1,15,254,33,1,16,5,0,32,32,2,120,36,130,72,244,98,144,33,2,254,51,142,84,73,32,16,32,7,184,74,135,168,76,103,144,79,239,144,27,130,212,201,33,144,31,1,16,17,2,12,68,0,64,255,225,80,36,132,68,4,0,64,3,135,40,82,133,40,116,98,16,57,10,124,163,139,84,233,32,16,33,7,8,87,231,66,82,15,36,82,135,48,82,37,34,145,227,0,0,67,132,41,66,148,77,65,20,253,67,20,89,69,84,144,65,12,34,2,252,53,10,124,168,11,124,164,66,124,36,66,124,36,66,76,113,5,254,82,6,124,90,69,60,98,68,44,4,7,252,4,15,254,33,130,106,34,143,168,175,234,168,251,162,108,42,131,186,234,96,98,33,130,106,34,138,168,175,234,168,171,170,236,186,174,186,2,96,98,48,141,30,85,37,26,253,37,20,117,237,130,81,231,66,76,172,68,19,1,212,37,34,80,127,234,80,39,66,216,53,34,106,36,98,194,35,239,136,137,4,62,122,36,170,178,164,170,134,167,136,73,71,162,133,4,80,9,44,148,89,134,144,75,4,208,73,38,146,72,224,128,33,130,106,34,143,40,95,229,40,83,165,108,42,133,42,147,96,98,0,7,252,17,5,20,49,129,16,255,224,64,2,69,34,80,168,248,0,3,254,32,2,248,40,130,136,42,130,144,40,68,132,71,200,0,32,2,254,40,15,188,42,66,164,59,78,168,42,34,162,169,229,0,159,133,8,31,129,8,223,132,128,95,198,36,85,69,244,64,139,254,238,234,170,238,160,10,124,192,10,254,162,10,124,160,76,20,128,136,65,135,106,146,130,40,15,228,40,67,164,234,82,198,42,75,96,66,63,130,72,63,130,72,42,131,24,63,128,128,4,133,4,81,72,240,0,15,254,4,0,128,127,196,164,74,68,164,74,68,164,73,68,8,18,1,32,18,1,32,18,1,32,18,1,32,34,34,34,65,232,0,0,7,252,17,1,240,17,1,240,17,1,16,31,238,16,1,0,16,32,2,0,63,228,2,132,64,64,36,130,68,68,72,66,20,32,128,64,4,254,116,137,72,71,132,72,71,132,72,68,230,248,64,128,8,64,2,254,4,72,68,71,193,68,39,204,68,68,100,252,64,64,4,0,0,0,63,128,0,0,0,0,0,0,0,0,15,254,0,0,0,1,79,254,1,7,208,1,7,208,1,7,208,68,165,74,40,100,66,9,4,136,72,7,254,16,1,248,20,130,72,37,4,32,133,1,140,0,7,252,74,71,252,64,2,4,2,78,36,34,66,164,48,66,12,66,7,188,162,129,68,34,134,62,190,2,36,33,130,18,34,162,70,18,129,36,34,2,62,110,10,32,34,66,40,33,34,50,36,162,134,0,227,240,4,0,32,127,192,8,3,0,192,16,2,128,71,224,0,159,228,2,10,169,34,179,173,226,146,169,50,146,169,90,144,168,6,65,2,16,7,200,16,65,1,254,34,12,72,72,69,254,72,32,0,1,15,16,33,2,124,33,15,16,47,226,16,58,14,68,79,224,66,17,15,254,17,72,248,82,67,254,138,133,252,10,164,248,138,128,248,32,2,56,250,138,168,170,138,184,170,138,168,186,162,74,36,98,128,3,199,192,36,129,80,255,226,72,68,75,250,36,131,248,36,131,248,24,14,54,169,39,18,253,166,182,165,47,150,171,175,210,169,47,182,42,130,72,251,226,168,117,202,170,37,128,64,255,224,160,17,6,12,0,15,120,36,130,72,68,135,104,213,133,74,84,167,74,72,97,0,64,4,120,116,136,72,116,130,104,245,130,72,36,163,74,40,97,0,64,143,232,85,239,234,84,167,228,8,163,242,8,131,252,21,66,200,0,1,240,17,1,16,25,1,80,21,1,16,17,34,18,32,228,0,32,2,254,41,11,32,167,202,68,37,66,84,85,69,40,132,64,130,1,195,224,32,2,0,63,130,136,40,130,80,69,4,32,141,3,12,64,194,112,36,0,124,228,66,100,37,130,72,41,67,36,80,8,254,17,15,254,17,4,0,47,136,136,72,129,168,41,44,130,71,228,0,0,111,184,138,8,160,171,234,170,170,170,170,170,162,36,84,200,146,0,9,124,84,66,68,84,73,84,52,133,64,148,33,66,83,226,0,64,100,120,116,9,64,71,228,82,69,36,82,85,70,136,73,65,98,64,194,240,2,8,16,95,192,8,17,2,32,196,4,160,81,224,0,34,2,16,47,226,32,250,2,60,34,66,36,58,78,68,69,64,136,17,7,252,17,0,64,2,7,254,8,0,252,8,65,4,33,68,8,8,0,64,0,15,252,16,1,0,31,129,8,16,130,8,34,132,16,2,7,16,95,229,32,114,5,60,82,71,36,84,69,68,153,67,8,4,0,32,63,194,4,63,194,32,63,194,64,39,196,68,73,73,8,2,7,16,80,5,126,98,5,32,83,197,36,98,68,68,69,68,136,66,4,16,64,15,124,82,5,32,147,197,36,34,69,68,133,64,136,18,1,16,32,2,254,98,10,32,35,194,36,34,66,68,37,66,136,2,4,16,32,0,254,226,2,32,35,194,36,42,67,68,37,64,136,34,4,16,79,234,32,226,4,60,130,79,36,2,67,68,197,64,136,65,2,16,2,15,190,70,68,164,122,68,164,73,132,152,170,65,66,17,15,254,17,0,160,251,224,160,123,192,160,251,224,160,10,0,160,18,1,32,243,193,32,18,15,60,18,1,32,243,193,32,18,1,32,2,128,40,238,234,40,162,138,238,162,138,40,238,234,40,2,128,40,0,15,224,2,64,40,3,0,40,2,64,32,1,32,18,0,160,6,0,7,124,85,69,84,117,69,124,84,7,64,84,37,66,83,235,0,0,7,252,74,4,160,123,196,160,123,132,160,123,196,160,74,7,254,66,130,40,14,224,40,226,130,238,34,130,40,46,227,40,34,128,40,2,0,40,226,74,32,175,234,32,165,10,80,232,138,136,16,66,2,1,7,16,95,229,16,119,197,84,85,71,84,85,69,92,145,3,16,2,3,254,32,130,164,42,2,252,36,2,120,74,132,144,146,130,68,133,4,80,63,224,82,159,229,80,63,228,82,201,36,150,81,2,16,10,7,252,74,71,254,18,46,44,63,130,72,36,128,176,240,192,0,17,15,254,17,0,160,17,2,8,192,99,248,16,129,8,34,132,16,0,143,168,34,79,164,172,42,128,223,200,164,250,72,164,250,64,76,4,142,72,168,74,132,176,42,248,164,142,72,164,128,136,18,130,16,32,3,248,64,11,240,0,15,248,36,132,40,253,162,74,36,100,194,2,1,32,17,2,16,32,133,246,137,0,144,17,1,16,37,4,32,33,4,80,84,137,72,232,66,2,79,142,72,4,130,136,202,129,16,33,2,8,32,2,126,250,66,36,34,130,40,57,14,40,68,65,130,17,1,16,255,195,184,85,73,146,1,2,68,36,132,160,49,140,6,65,2,80,132,132,136,16,66,2,79,140,72,68,132,136,74,129,16,32,130,40,170,71,68,36,47,128,39,199,36,170,66,36,37,66,136,4,0,64,255,224,160,49,140,6,63,130,72,63,130,72,63,130,8,17,1,80,36,130,136,112,74,2,47,130,72,36,130,136,42,131,16,17,1,16,32,133,244,137,32,144,21,2,32,4,69,34,80,168,248,33,2,254,49,10,68,175,234,68,175,226,130,41,34,146,34,130,196,36,129,80,255,225,80,36,129,16,127,193,16,255,224,0,17,2,8,4,0,64,127,192,64,4,3,248,4,0,64,255,224,64,4,0,64,16,65,4,124,65,30,252,65,36,17,71,212,16,65,196,241,68,8,32,2,248,40,143,136,45,134,168,122,138,218,168,162,134,48,34,0,33,2,28,34,79,216,169,74,170,249,194,8,41,195,136,235,224,8,34,2,60,37,74,136,169,74,170,169,202,136,187,238,136,11,224,8,66,4,60,118,72,24,118,66,146,39,207,16,39,194,144,55,226,16,0,3,248,32,131,24,42,130,168,36,130,170,42,165,10,64,104,2,4,0,32,63,226,0,175,134,136,109,138,168,42,164,218,72,105,2,34,2,188,54,74,24,166,74,146,39,194,16,39,197,16,79,232,16,136,4,248,20,128,48,196,133,166,79,132,32,95,196,32,191,224,0,128,4,248,32,128,72,4,130,72,199,196,4,95,68,4,65,64,8,82,4,188,133,78,8,91,104,136,233,192,136,43,236,136,23,226,0,128,4,248,8,140,136,77,132,168,74,132,218,104,164,138,16,98,2,4,7,252,4,3,248,8,15,254,36,133,244,132,35,248,4,0,64,0,3,248,32,130,8,46,130,40,42,130,74,68,164,170,145,96,2,37,2,80,95,196,84,223,197,80,95,228,82,69,36,150,81,4,16,0,15,254,4,0,208,52,140,68,4,3,248,32,130,8,63,130,8,4,0,64,4,3,248,4,0,64,127,192,64,10,1,16,32,132,4,20,143,232,16,135,222,87,71,212,85,79,244,32,131,212,37,68,226,1,7,16,81,5,124,113,5,16,95,231,16,82,133,40,148,67,130,32,36,236,170,10,170,238,74,174,170,46,228,169,226,132,72,72,140,33,2,16,33,15,124,33,2,144,55,238,16,34,130,40,164,68,130,34,130,40,47,239,42,47,226,168,63,238,42,34,162,78,164,132,136,39,194,0,247,196,68,167,207,0,39,195,84,231,194,84,39,194,68,32,2,62,32,15,190,170,42,190,168,10,190,186,162,62,34,162,62,32,3,252,64,11,248,40,143,232,42,143,234,168,175,246,41,36,176,66,7,190,164,129,4,16,130,8,111,234,72,34,130,8,34,130,16,18,1,40,34,66,32,127,234,32,37,2,80,40,130,136,48,66,0,16,225,240,34,34,148,100,10,252,32,130,16,47,226,16,37,2,32,0,7,126,84,37,74,116,69,126,85,39,84,84,133,84,153,67,34,64,226,248,2,40,148,68,1,124,32,142,16,47,226,16,37,0,32,66,2,248,0,8,136,69,1,252,32,4,248,200,132,136,79,128,136,64,2,124,240,1,124,36,71,124,168,2,124,37,66,124,37,66,124,66,130,40,4,207,74,28,130,126,108,139,72,45,66,84,37,66,98,18,1,32,255,193,36,127,201,32,255,193,36,35,66,40,66,8,32,5,0,72,127,192,64,63,130,72,63,130,72,63,130,72,36,130,24,32,2,124,33,15,144,33,2,254,50,142,40,34,130,74,164,164,134,33,66,18,247,228,16,167,207,84,39,195,84,231,194,84,37,66,76,34,2,16,95,229,0,210,69,68,93,229,68,85,69,76,84,70,76,17,2,8,73,64,96,25,142,6,31,0,64,127,194,72,21,15,254,33,5,40,12,3,48,194,227,192,32,3,248,36,4,64,68,8,64,1,71,16,95,229,16,119,197,84,87,199,84,87,197,84,85,75,76,1,7,8,87,229,64,117,37,82,86,231,82,85,101,82,149,35,150,4,0,32,63,226,36,36,66,222,52,66,84,68,196,68,133,64,72,2,7,254,68,132,190,88,134,168,95,197,36,85,69,36,149,65,12,17,1,16,125,1,24,17,79,210,17,5,208,81,5,16,191,224,0,124,64,4,125,68,84,125,64,20,125,69,84,125,69,68,125,68,72,255,224,160,127,196,164,127,194,72,71,137,72,39,134,200,163,2,204,0,143,140,139,168,136,175,234,168,171,138,168,171,162,234,80,104,130,63,194,0,95,129,8,31,129,8,31,128,128,31,130,144,6,3,156,34,131,252,66,5,252,210,69,252,82,68,8,95,228,136,68,132,24,16,129,8,32,130,254,96,138,72,34,130,40,32,130,8,34,130,16,8,3,240,33,3,240,32,3,248,32,131,248,4,15,254,4,0,64,17,2,8,64,65,16,17,0,160,10,0,64,10,1,32,33,4,12,119,229,64,91,197,36,115,197,36,83,199,64,87,197,164,81,139,102,16,3,240,34,4,64,191,130,8,36,130,72,36,128,160,17,6,8,4,15,254,128,39,252,0,3,248,32,135,252,68,71,252,68,71,252,2,4,32,34,0,48,226,130,36,34,34,34,42,3,32,34,0,32,2,71,36,84,69,94,108,69,68,85,69,76,100,68,68,69,68,72,32,2,124,32,79,4,80,69,124,80,69,4,32,69,124,136,0,0,65,68,254,129,10,254,233,36,254,137,46,4,15,227,68,194,64,12,2,71,36,84,69,222,84,69,68,85,71,76,84,64,68,5,64,72,4,129,254,228,138,252,170,74,252,164,10,254,249,42,170,15,160,6,31,238,32,175,202,132,175,202,132,175,202,72,231,201,234,1,160,102,132,4,32,31,236,32,68,68,250,65,69,104,105,4,40,12,67,4,2,15,32,18,1,126,116,68,164,66,68,40,81,6,40,68,64,130,64,5,222,84,79,84,93,71,94,220,69,8,88,197,84,89,69,38,64,4,126,113,8,16,117,194,80,37,15,126,32,34,130,48,162,4,32,129,16,127,192,64,63,128,64,255,224,0,63,130,168,42,143,254,128,5,222,20,73,84,93,67,94,84,77,200,88,197,84,90,65,70,0,0,0,63,128,64,4,0,64,255,224,64,4,0,64,4,0,64,17,1,16,17,15,254,17,1,16,31,1,16,17,1,16,31,1,16,32,2,0,39,207,16,33,7,16,111,234,16,33,2,16,33,2,16,34,66,36,34,79,126,34,71,36,107,202,36,162,66,60,34,66,0,33,2,16,123,233,72,8,67,248,4,0,64,255,224,64,4,0,64,0,7,0,87,197,16,113,5,16,95,231,16,81,5,16,81,11,16,16,1,62,124,129,8,252,129,62,80,133,200,80,133,8,191,224,0,1,71,254,65,5,240,65,69,212,84,169,214,8,36,72,81,73,244,24,14,124,33,2,16,249,2,126,113,10,144,33,2,16,33,2,16,1,7,16,17,15,222,74,71,164,77,71,148,76,143,148,9,64,162,34,15,188,86,79,152,86,103,28,80,135,62,34,47,170,33,66,34,0,7,252,64,69,20,74,68,68,74,69,20,64,68,4,65,68,8,0,71,196,69,68,84,109,69,84,85,70,212,68,68,68,85,68,136,64,4,126,116,40,66,6,167,82,37,39,106,36,34,194,52,162,68,64,7,192,83,233,8,16,143,200,16,133,72,84,133,254,116,0,0,0,7,128,75,228,136,120,132,136,72,135,136,72,132,190,104,9,0,64,4,254,72,41,202,234,164,146,138,174,198,8,35,130,200,160,132,4,4,68,127,192,0,127,197,20,74,68,68,74,69,20,64,68,12,133,5,252,5,11,254,73,1,8,47,108,144,79,68,132,71,192,0,32,2,0,39,207,16,33,7,16,105,10,16,161,2,254,32,2,0,65,7,158,162,128,64,127,193,16,31,0,0,127,197,20,95,68,12,8,3,248,32,131,248,32,131,248,8,15,254,17,2,72,223,96,64,4,15,254,0,1,248,16,135,254,64,37,242,81,37,242,64,224,0,4,7,248,0,3,240,33,15,252,128,67,240,33,3,240,33,2,48,32,129,16,127,192,64,4,3,248,4,0,64,255,224,0,42,68,82,36,66,40,175,231,16,33,15,124,33,7,16,175,226,0,42,162,170,33,2,254,32,15,124,36,66,124,48,14,254,40,34,186,170,164,186,65,4,254,96,8,124,228,68,124,224,4,254,72,38,186,74,160,186,17,6,254,32,2,124,244,66,124,112,10,254,40,34,186,42,162,186,4,2,64,63,132,64,4,15,254,0,3,248,32,130,8,63,130,8,127,192,16,61,2,80,61,0,0,255,224,8,60,130,72,60,128,24,126,128,72,117,5,94,118,32,74,254,128,72,116,133,84,117,64,226,40,2,94,42,47,186,42,162,210,58,174,198,43,162,170,171,164,134,9,0,136,8,0,190,252,0,68,4,128,50,2,32,210,48,224,2,34,2,120,84,132,232,132,135,80,7,199,4,95,69,4,113,64,8,2,7,60,86,69,168,113,5,40,84,103,188,82,69,36,83,203,0,4,0,32,63,234,64,103,194,128,119,202,8,33,4,32,68,72,124,16,47,226,146,167,202,16,167,202,16,175,234,16,39,194,68,167,196,17,7,252,17,1,240,4,3,248,36,131,248,4,7,252,4,0,64,17,15,254,17,3,248,32,131,248,32,135,252,68,74,164,63,64,12,34,2,60,36,79,168,33,7,108,104,42,124,164,66,68,39,194,68,33,2,16,34,143,164,172,42,188,168,15,188,34,66,164,251,192,164,64,2,252,8,68,228,90,70,68,74,71,20,78,68,164,78,68,12,239,234,0,167,204,68,167,202,0,175,234,170,201,40,186,137,40,150,66,4,60,116,72,164,114,130,24,34,79,194,35,194,164,50,66,60,4,0,64,10,1,16,36,140,70,4,0,64,4,0,64,4,0,64,16,1,248,48,132,144,6,1,152,96,97,248,16,129,8,31,129,8,33,2,40,66,137,68,232,34,124,64,15,124,4,67,68,199,192,68,32,2,124,36,79,124,36,71,124,109,10,82,164,194,72,37,66,98,119,197,68,87,199,68,39,194,80,181,42,84,164,139,68,197,32,96,34,130,40,250,130,124,250,130,40,250,130,126,114,138,168,34,130,72,0,15,254,4,3,248,36,131,248,36,131,248,36,1,128,14,7,30,4,0,32,63,194,32,47,130,40,63,226,40,47,130,32,37,4,140,17,7,252,4,15,254,42,132,4,17,7,254,4,15,254,10,7,28,47,226,16,39,207,84,39,194,84,39,195,144,229,4,32,5,129,134,0,143,200,72,164,170,122,196,168,124,132,136,93,78,148,9,64,162,32,2,254,33,15,124,37,71,124,109,74,124,169,2,80,35,2,206,0,7,252,4,0,64,4,0,64,4,0,64,4,15,254,0,0,0,1,0,16,242,2,62,36,66,164,34,66,40,57,14,40,68,65,130,2,0,32,242,2,252,34,66,36,34,67,164,228,68,68,9,65,8,17,1,16,127,193,16,255,225,16,40,132,132,141,34,168,74,129,128,9,0,136,127,193,80,38,69,188,145,7,252,17,15,254,33,4,8,20,129,72,36,130,252,100,138,72,36,131,254,32,2,72,40,67,2,32,7,188,72,71,132,73,199,144,74,15,190,40,36,130,169,65,8,18,1,32,33,2,72,68,104,128,8,1,16,32,135,252,32,64,0,4,0,32,127,196,4,31,1,16,31,0,0,63,130,8,32,131,248,0,7,248,0,128,8,63,130,0,64,7,252,0,64,4,2,128,16,0,15,120,36,130,72,36,130,104,37,131,200,228,164,138,8,97,0,0,3,248,4,0,64,255,224,64,246,65,88,37,4,72,148,96,128,34,130,40,34,143,124,34,130,40,50,142,254,32,2,40,164,68,130,63,128,64,4,15,254,0,3,248,32,130,72,36,130,168,17,6,8,17,1,16,17,7,252,17,1,16,17,15,254,0,1,16,32,132,4,66,4,32,115,200,68,114,66,36,37,79,116,33,66,132,49,66,8,32,2,0,63,196,4,72,72,132,16,66,68,126,66,36,1,64,8,68,2,64,15,200,132,82,64,68,36,68,148,223,68,20,66,128,16,17,7,252,17,2,0,127,200,4,62,66,36,34,67,228,1,64,8,18,9,32,84,2,124,88,73,116,53,69,84,151,65,4,81,66,8,32,98,120,36,2,64,247,226,64,36,2,94,53,46,146,73,225,18,34,2,32,35,239,66,41,38,34,116,170,250,164,162,2,32,162,4,2,15,160,139,234,194,169,42,146,170,42,170,171,162,2,80,168,132,65,4,30,122,72,216,9,78,168,173,74,162,237,64,136,41,1,96,4,7,252,4,3,248,32,131,248,17,15,254,4,3,248,4,0,64,17,15,254,17,2,8,32,143,190,72,132,190,82,34,34,83,232,162,1,0,16,113,5,254,81,5,16,87,197,68,116,69,68,7,192,68,66,7,190,148,130,0,47,239,136,43,227,170,234,162,174,168,132,254,17,1,16,33,2,254,97,10,16,39,194,68,36,66,68,39,194,68,66,2,32,2,9,252,66,1,32,47,140,136,72,132,136,79,128,136,0,15,12,31,130,168,42,131,168,234,130,164,42,66,170,171,133,8,33,2,16,33,2,254,241,5,16,87,197,68,84,66,68,87,200,68,16,131,136,19,231,200,3,195,148,41,67,148,68,130,148,26,70,66,4,0,64,4,15,254,4,0,64,63,130,8,32,130,8,63,130,8,4,0,64,63,130,72,63,128,68,255,224,2,63,130,168,42,143,254,31,1,16,29,1,80,127,197,20,31,1,16,31,1,16,21,1,32,18,1,16,36,132,64,10,3,24,192,97,240,17,1,16,31,1,16,0,7,120,84,133,72,120,101,0,95,199,68,82,133,16,82,139,70,34,2,32,34,15,188,36,130,168,114,133,40,81,7,40,68,64,130,0,7,222,64,133,200,85,229,82,93,165,26,81,169,72,25,64,34,127,196,68,68,71,252,68,69,244,81,69,20,95,68,4,127,196,4,2,3,254,32,35,254,36,130,190,56,130,190,40,132,190,136,128,190,12,71,4,17,65,20,125,65,20,17,71,212,69,68,68,125,68,72,1,131,224,41,2,144,41,2,144,40,130,136,74,68,148,143,32,16,124,36,66,68,167,202,16,175,234,146,170,170,198,168,34,138,168,68,4,7,252,64,67,248,8,3,248,36,143,254,32,133,244,9,1,48,33,2,16,39,207,144,33,2,126,49,14,16,39,194,16,161,4,254,68,130,72,14,142,72,47,133,76,238,165,72,71,133,200,64,132,8,3,131,224,4,15,254,21,1,84,245,129,82,53,45,78,4,0,64,32,2,120,36,143,72,39,131,32,111,202,36,34,66,68,165,68,136,32,2,252,36,75,40,169,10,40,173,98,16,39,194,16,33,2,254,34,2,16,47,239,130,39,199,68,111,202,64,167,194,68,39,194,64,32,129,16,0,7,252,4,0,64,255,224,64,10,1,16,32,140,6,8,0,64,127,196,4,31,1,16,31,1,0,31,129,8,31,129,0,0,15,254,128,163,136,3,231,200,42,130,136,42,164,146,135,224,0,0,0,124,244,65,84,149,69,84,85,66,84,81,5,34,132,161,142,66,7,188,165,7,252,64,65,240,17,1,240,16,1,248,16,129,248,65,4,8,119,229,66,131,194,36,35,194,32,43,227,34,35,224,0,66,68,254,114,74,126,37,47,126,33,74,190,174,75,190,234,64,190,39,194,84,47,235,84,167,202,0,39,194,68,37,66,84,34,130,196,8,139,254,72,129,220,149,69,220,36,132,190,216,134,190,72,132,190,63,130,72,255,226,72,63,128,0,63,130,72,36,130,168,17,6,8,4,4,68,36,129,80,4,15,254,9,0,144,17,33,18,32,228,0,4,0,32,0,3,254,32,2,0,32,2,0,32,4,0,64,8,0,148,4,190,20,140,72,79,229,72,100,132,126,84,4,128,191,224,0,2,15,64,47,130,168,47,143,168,47,130,36,54,142,108,74,33,30,32,2,124,244,66,84,37,79,212,37,66,16,82,164,170,132,96,128,4,0,64,63,128,64,4,15,254,4,0,64,63,128,64,4,15,254,1,15,144,39,194,16,79,231,16,209,5,124,81,7,16,79,224,0,16,1,0,151,201,4,144,73,4,147,201,4,144,66,4,39,196,0,16,1,240,34,4,64,191,130,72,63,130,72,63,128,66,4,32,62,64,2,252,4,69,244,68,71,252,68,69,244,68,71,252,64,68,12,66,4,32,242,4,120,162,143,40,34,131,40,226,162,74,36,98,128,4,0,128,127,132,72,127,132,136,127,128,144,22,1,122,36,164,62,132,4,120,8,129,16,207,228,128,75,196,164,90,198,160,74,33,30,2,7,164,74,131,18,17,66,8,95,72,66,63,128,160,17,6,8,33,2,16,39,207,16,47,231,16,105,10,124,161,2,16,47,226,0,32,2,124,36,15,192,39,199,68,108,74,124,164,2,64,39,194,0,2,7,60,84,69,136,119,226,64,181,234,82,181,110,80,9,33,14,4,3,248,36,131,248,4,15,254,0,3,248,36,130,72,27,6,8,16,65,4,41,68,84,131,67,148,1,79,212,32,68,132,125,64,72,64,4,124,244,68,124,164,79,124,32,131,74,230,194,72,37,162,102,130,5,254,4,136,132,66,1,72,47,204,48,70,164,164,83,32,32,32,2,124,36,79,124,36,70,124,112,10,74,166,194,72,36,162,102,64,4,124,116,72,68,119,194,16,47,239,146,42,162,198,56,34,134,16,15,222,1,39,148,73,135,148,1,39,146,9,175,212,17,3,16,255,200,4,191,72,132,191,72,132,138,72,148,255,200,4,255,192,0,0,3,248,36,131,248,36,131,248,4,15,254,21,2,72,196,96,64,4,7,252,36,131,248,36,131,248,4,15,254,76,73,170,41,4,204,64,130,8,47,224,8,228,130,40,32,130,40,33,5,0,143,224,0,1,0,16,226,138,68,168,42,124,160,10,124,228,74,68,7,192,68,113,5,8,119,229,16,249,8,164,119,133,16,114,69,72,113,69,98,2,15,16,31,226,16,34,66,72,55,14,34,44,66,8,163,68,194,136,4,252,16,8,248,72,129,168,63,236,168,72,132,252,64,128,48,63,130,0,127,136,136,126,129,8,36,135,138,18,166,74,28,102,34,8,0,64,127,192,64,9,1,228,4,129,144,98,0,80,24,134,4,4,7,254,68,43,248,4,3,248,4,15,254,4,3,248,32,131,248,1,14,8,39,234,16,162,72,120,241,33,36,244,129,20,82,34,66,2,79,164,34,79,164,175,234,164,218,72,188,250,72,164,251,200,164,57,0,144,125,226,164,57,66,136,125,64,162,8,5,68,81,40,240,72,4,158,73,47,212,73,68,152,121,68,146,73,167,148,73,0,16,17,7,144,23,231,144,75,199,144,79,231,146,17,175,212,17,1,16,4,0,160,17,2,72,66,99,248,1,0,32,63,130,8,32,131,248,64,2,252,0,136,146,77,97,186,41,44,186,77,100,146,79,224,0,4,7,254,73,43,248,9,7,254,9,1,8,102,96,16,14,0,16,0,3,240,2,4,68,85,68,228,68,68,228,85,68,196,127,192,4,0,160,8,239,234,136,174,138,138,174,170,172,238,138,154,18,98,2,0,7,254,145,34,8,64,67,248,4,0,64,255,224,64,4,0,64,33,15,168,36,79,130,151,207,36,155,79,108,38,207,180,34,66,108,64,164,8,95,239,8,94,165,12,126,173,182,94,37,16,106,173,58,32,2,124,36,79,124,36,66,124,48,6,124,161,2,254,161,4,16,63,130,8,63,130,8,63,128,0,63,128,64,255,224,64,4,0,64,65,4,20,95,229,16,125,77,24,93,37,106,92,101,34,109,69,114,39,194,68,39,203,68,167,202,0,167,194,16,47,226,16,33,2,16,39,194,68,47,203,68,167,202,0,39,194,16,47,229,16,73,8,16,64,2,124,1,8,16,65,0,254,17,6,16,33,2,16,33,0,16,128,5,248,8,136,136,72,129,80,37,12,32,69,4,136,80,98,0,4,0,64,255,224,160,17,2,72,196,99,248,4,128,136,18,130,16,34,2,16,47,239,0,39,135,72,108,138,72,36,162,74,40,98,0,18,2,16,127,228,128,107,132,168,250,132,168,106,164,170,76,105,128,66,5,254,64,4,120,228,133,254,80,36,252,98,12,218,3,64,210,1,0,254,224,10,124,164,74,254,168,42,124,226,10,212,3,128,86,4,7,252,0,1,240,17,7,252,64,67,248,12,3,52,6,129,164,4,7,252,17,1,240,0,7,252,67,67,192,7,131,194,7,39,190,16,1,30,125,33,20,17,143,244,41,38,210,171,162,148,73,9,144,32,2,124,32,143,16,81,5,254,81,5,16,33,5,16,77,8,32,32,194,112,249,2,16,113,194,112,249,2,30,119,10,146,33,34,14,0,3,248,32,131,248,0,15,254,16,3,248,0,128,8,5,0,32,1,8,144,73,0,254,145,4,16,31,226,0,199,196,68,68,68,124,0,1,254,224,138,232,170,138,168,170,138,232,224,138,8,2,128,16,7,192,68,119,197,68,87,197,32,87,229,146,117,37,106,7,160,6,17,15,254,17,0,0,23,226,4,103,74,84,39,66,4,33,66,8,16,143,254,16,128,0,79,226,4,135,69,84,21,70,116,32,66,12,34,2,16,47,239,16,34,71,120,104,138,18,166,66,136,35,66,194,3,131,192,4,0,64,255,224,224,21,2,72,196,96,64,4,0,64,0,0,192,112,1,30,17,47,210,17,35,146,85,233,18,16,1,0,16,1,0,39,226,4,96,74,116,37,66,84,39,66,4,33,66,8,4,0,160,17,2,8,64,107,248,0,3,248,32,130,8,63,130,8,4,0,160,31,2,8,223,97,16,31,0,0,63,130,168,42,143,254,17,6,158,162,37,84,40,141,148,42,45,128,43,236,162,43,225,34,128,5,254,4,41,250,132,40,146,154,168,210,178,40,210,177,40,6,64,2,254,0,72,116,85,65,84,39,76,84,64,68,4,65,64,8,79,226,146,9,40,254,73,33,186,42,172,170,75,164,130,79,224,130,17,1,16,123,193,16,255,226,168,110,202,170,42,164,168,76,137,152,71,194,68,247,193,68,39,198,160,183,226,146,37,34,106,39,162,6,16,143,208,167,197,36,123,77,44,122,5,62,120,37,58,124,164,4,32,15,188,42,68,164,171,193,0,63,130,8,36,128,64,27,6,8,15,206,164,174,202,180,175,202,32,175,206,32,159,224,0,21,66,82,63,130,72,53,130,232,63,128,64,63,128,64,127,192,0,84,136,164,2,3,254,32,10,252,104,66,252,104,74,252,42,34,148,72,136,198,16,2,124,68,73,124,36,70,124,165,2,82,36,194,72,37,66,98,16,9,124,100,70,124,148,65,124,53,37,84,148,129,72,86,66,66,32,2,124,36,67,124,172,74,124,165,34,84,36,130,72,37,66,98,2,0,252,224,10,120,164,138,120,160,10,252,224,138,16,5,0,32,4,7,252,0,1,240,17,1,240,0,3,248,1,0,32,2,0,96,34,130,124,242,130,254,97,7,124,173,74,124,37,66,124,34,130,68,40,4,240,146,227,240,85,237,244,85,69,244,68,69,244,74,69,28,32,2,254,32,11,124,164,74,124,164,66,68,39,194,0,47,226,0,8,7,252,20,3,248,4,15,254,4,7,188,10,66,168,17,6,172,4,128,72,228,138,252,164,138,72,164,139,254,224,10,72,8,65,2,34,130,40,42,139,124,162,138,40,162,130,254,32,5,40,76,72,0,32,2,0,35,239,136,168,138,136,248,130,8,40,131,200,231,224,0,129,4,124,60,65,84,148,197,64,23,227,2,87,169,130,48,160,4,68,130,72,4,137,254,68,129,72,36,133,254,192,4,72,72,69,2,4,0,32,127,228,66,132,7,252,8,0,144,18,1,72,47,196,68,0,143,8,16,129,8,241,8,16,129,15,32,18,65,66,87,226,2,32,2,0,71,201,16,225,2,16,65,15,144,1,1,144,231,224,0,4,0,92,232,74,190,186,10,190,172,138,136,235,234,136,9,64,162,16,1,120,32,130,254,100,10,124,41,2,16,47,226,40,36,66,130,36,2,92,168,68,254,186,2,190,108,138,136,43,226,136,169,68,162,0,129,232,226,138,72,164,138,88,166,138,200,244,168,74,20,160,134,63,226,132,47,194,132,47,194,0,39,194,8,33,4,254,65,8,48,16,1,28,40,66,190,105,10,158,42,130,136,43,226,136,33,66,34,1,131,224,32,2,0,63,194,0,32,2,248,40,132,136,79,136,136,0,224,240,225,10,146,165,74,16,175,234,16,225,10,16,5,0,32,3,199,192,4,2,72,21,0,64,255,224,64,4,0,64,20,0,128,16,1,0,63,194,164,74,65,36,36,192,0,4,69,34,144,160,248,4,14,78,68,164,234,68,238,74,78,164,174,74,166,234,193,32,38,4,7,252,4,3,248,0,7,254,138,34,168,27,0,160,255,224,0,17,15,254,17,2,0,35,207,164,35,199,36,83,197,36,114,64,76,32,2,60,34,79,164,35,194,36,114,69,60,82,71,68,69,64,136,36,2,78,36,175,234,164,234,74,174,175,174,42,163,234,233,32,38,32,10,28,78,134,168,170,130,168,106,138,168,42,66,164,171,165,8,36,2,78,164,167,234,36,239,74,46,231,170,170,162,234,33,34,38,8,8,156,73,65,212,137,196,148,61,69,92,213,69,212,66,64,76,0,14,28,46,130,168,234,136,168,138,142,168,42,66,164,171,165,8,7,0,64,127,228,66,95,4,68,67,196,0,79,4,144,73,41,14,1,192,16,239,234,146,175,202,146,168,234,128,235,137,40,18,162,70,33,2,8,35,239,162,34,35,62,98,10,32,34,2,64,164,4,128,0,7,252,8,0,128,31,129,8,16,130,8,63,0,16,1,7,254,1,4,8,39,232,66,68,33,126,36,12,64,68,4,128,72,1,0,4,0,32,0,3,252,32,66,4,63,194,0,32,4,0,64,8,0,17,15,254,17,0,0,10,1,40,51,5,32,150,33,162,17,225,0,2,128,42,228,202,200,181,170,106,164,106,16,239,234,16,1,0,16,18,1,36,34,134,48,166,66,164,33,192,64,255,224,64,4,0,64,39,194,68,167,68,84,175,226,130,103,202,68,39,194,68,164,68,76,71,194,68,7,72,84,95,225,2,39,204,68,71,196,68,71,192,68,0,15,254,0,5,244,85,69,244,85,69,84,95,68,4,127,192,4,40,66,68,33,67,212,225,66,84,41,65,20,49,76,164,6,64,44,18,1,32,34,66,40,99,10,32,38,2,162,34,34,34,33,226,0,0,196,112,33,0,16,239,226,16,33,2,124,36,67,196,36,64,124,33,2,32,39,207,84,39,199,84,111,202,36,163,130,92,37,34,158,32,4,254,136,33,186,42,166,170,170,162,186,40,34,254,40,34,0,32,2,254,32,139,16,169,10,52,165,34,146,33,2,16,33,2,16,69,2,136,15,225,144,169,4,254,41,4,254,201,4,144,79,224,128,32,2,254,32,130,16,249,2,52,37,34,18,57,14,16,65,0,16,2,0,32,251,224,162,140,69,8,80,130,8,81,69,20,138,64,66,0,15,190,32,130,8,33,15,52,37,34,146,57,46,16,65,0,16,32,2,0,47,239,0,39,199,68,103,202,68,39,194,0,47,226,0,64,2,126,32,128,16,227,66,82,41,34,16,33,2,0,95,232,0,32,228,240,73,73,72,239,196,32,143,238,64,7,194,164,209,128,102,34,2,60,36,143,144,39,195,84,101,74,254,33,2,40,164,68,130,4,3,248,36,131,248,4,7,252,68,71,252,4,2,132,101,41,240,2,0,60,116,133,144,87,197,84,85,69,84,95,231,16,66,128,198,2,3,254,164,6,120,41,2,124,101,74,84,47,226,16,66,136,198,36,129,80,127,192,128,255,225,8,63,76,130,20,130,112,10,131,100,34,2,160,55,202,72,169,10,124,165,66,84,47,229,16,74,136,70,68,2,120,8,137,16,71,193,84,37,76,84,95,228,16,66,128,198,8,0,64,127,196,4,63,130,64,63,130,8,63,130,64,36,3,252,32,2,0,71,197,4,144,78,4,32,68,4,72,79,196,69,64,8,16,143,254,20,128,32,127,226,0,63,192,0,36,130,74,36,164,70,68,69,254,100,68,16,223,228,128,79,196,0,74,132,168,74,165,38,17,7,252,17,15,254,4,3,248,36,131,248,36,131,248,17,2,8,2,143,124,34,130,254,65,7,124,213,69,124,85,71,124,82,128,68,32,130,62,34,47,190,170,42,190,248,2,62,40,131,190,232,128,62,65,7,190,149,71,252,17,15,254,36,131,248,36,131,248,17,2,8,8,3,248,32,131,248,32,131,248,0,7,252,4,3,248,4,15,254,63,130,72,46,130,168,46,130,168,63,130,72,46,164,74,95,104,2,33,2,124,36,75,124,172,74,124,160,2,124,33,2,124,33,2,254,33,2,124,44,75,124,164,74,124,160,2,254,33,5,124,65,8,254,63,130,8,63,130,8,63,128,64,36,129,80,127,192,160,18,38,30,35,194,36,251,202,164,171,202,144,173,74,184,175,235,168,34,162,70,33,2,16,41,43,84,161,10,254,162,130,40,34,162,74,36,162,134,4,137,254,68,128,16,223,228,128,79,196,0,74,134,168,74,161,38,8,0,128,255,224,128,9,1,82,21,65,88,41,2,40,68,64,130,32,2,252,42,79,32,47,195,32,101,10,124,33,2,254,161,4,16,39,226,82,169,7,126,33,15,168,83,229,8,87,229,136,144,128,8,36,69,84,149,67,254,73,173,42,92,164,138,95,68,100,85,166,210,34,2,32,47,227,32,162,138,74,166,194,168,40,131,20,33,66,34,32,2,62,34,47,162,171,170,170,250,162,58,42,35,162,235,224,0,0,7,248,64,132,8,94,133,40,82,133,232,82,132,8,127,132,8,64,9,188,138,77,164,140,111,128,3,207,164,34,131,144,226,128,70,36,3,126,40,10,124,164,74,84,191,226,164,41,66,254,32,66,24,17,7,188,17,7,188,17,15,254,0,135,248,4,5,36,80,168,248,4,0,64,127,192,64,21,1,16,255,225,16,17,1,16,33,4,16,4,7,252,36,131,248,36,131,248,4,47,254,4,5,36,80,168,250,4,14,126,168,11,124,164,78,84,191,234,164,169,78,254,0,64,24,0,143,136,139,234,144,171,234,210,169,234,146,169,229,18,73,168,20,24,142,42,34,162,62,248,130,30,114,38,212,160,194,8,35,2,192,4,0,160,17,2,8,223,96,0,0,7,252,8,1,16,63,129,8,33,2,40,180,74,130,167,202,0,47,226,32,84,68,254,132,32,0,64,2,126,4,8,64,84,1,64,36,12,64,68,4,64,71,224,0,2,8,32,95,224,32,239,194,32,47,226,34,42,35,42,34,64,32,4,4,126,40,0,124,228,66,84,47,226,100,37,67,126,33,64,8,65,4,40,84,73,130,231,196,0,128,15,126,1,3,36,199,224,2,17,15,254,17,7,254,72,43,248,20,3,248,4,7,252,4,0,64,3,135,192,68,7,252,66,5,20,96,195,248,32,131,248,32,131,248,32,194,112,37,15,126,84,133,102,80,37,124,36,69,124,132,64,124,4,14,248,10,128,248,234,132,248,68,72,104,171,78,188,18,34,30,128,5,254,18,40,32,95,192,64,41,4,252,193,5,254,65,0,16,0,4,252,40,64,252,136,68,252,16,2,146,205,68,152,73,36,206,32,15,148,170,39,80,33,135,36,36,47,188,34,71,36,83,199,36,64,194,112,1,8,16,79,225,16,33,12,124,68,68,68,71,192,68,17,1,16,33,2,82,101,74,88,41,2,16,34,130,40,36,66,130,4,0,64,4,66,72,37,2,64,68,0,160,10,1,16,32,132,6,18,15,254,18,8,148,81,34,16,223,227,16,82,137,40,84,66,130,2,128,36,255,224,32,114,5,36,82,71,24,13,47,42,68,96,2,1,79,254,1,7,148,73,71,136,13,175,38,68,33,68,81,40,242,127,192,64,127,234,74,18,35,252,98,11,252,34,3,252,34,3,254,20,130,80,102,74,68,43,194,0,63,130,8,36,130,72,11,7,8,64,2,124,244,65,68,39,199,16,175,226,146,42,162,198,40,34,134,4,0,64,127,192,64,4,15,254,4,4,68,68,68,68,127,192,0,32,2,254,36,79,72,37,226,66,44,35,100,229,68,136,9,65,34,17,7,252,17,1,240,17,1,240,17,15,254,36,133,244,132,39,252,32,2,120,36,143,72,36,135,72,108,138,72,36,162,138], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+44317);
/* memory initializer */ allocate([48,98,0,1,15,144,175,202,144,170,143,254,168,74,188,170,207,188,136,64,12,50,78,254,34,130,74,248,226,88,118,38,190,164,66,124,36,66,124,24,14,60,34,66,36,250,66,36,115,202,128,32,2,36,36,34,0,65,7,222,162,129,16,127,193,16,31,1,16,17,15,254,17,2,8,0,7,184,74,132,168,122,132,168,74,135,170,74,164,170,108,105,0,64,4,120,116,137,72,4,132,72,68,132,72,84,166,74,72,161,6,4,8,32,95,192,80,205,133,84,69,68,144,83,4,0,191,224,0,16,139,200,101,3,222,39,75,212,73,67,212,80,137,212,37,68,226,0,4,120,36,128,72,228,130,72,36,130,200,52,130,74,8,161,6,2,0,120,244,129,104,149,133,64,87,194,4,87,69,4,129,64,8,32,2,124,37,15,80,87,197,68,148,69,124,37,5,80,79,200,0,33,2,254,65,9,124,225,2,254,64,15,124,5,67,84,194,128,68,39,132,72,87,137,0,239,196,72,135,143,72,7,131,78,207,128,8,4,0,64,255,224,64,4,7,252,0,0,0,63,130,8,32,131,248,32,2,124,34,79,168,34,231,34,106,42,52,165,66,72,41,66,34,32,130,8,251,226,8,251,234,170,186,226,8,113,202,170,32,130,8,35,194,36,251,196,0,103,234,36,251,194,36,59,206,38,39,194,4,65,7,222,146,130,36,247,226,36,119,226,36,251,199,36,171,194,36,20,2,32,127,138,64,63,2,64,63,128,64,127,193,80,100,192,64,0,7,248,16,129,8,17,1,28,36,66,72,34,132,16,70,137,134,16,3,240,66,11,252,0,67,252,0,67,252,4,5,36,80,168,248,4,0,32,63,226,0,164,6,124,41,6,16,175,226,16,66,136,198,64,2,252,4,136,80,85,193,68,36,140,168,73,5,40,100,68,130,0,7,128,75,199,164,74,71,164,66,70,36,82,70,172,66,0,32,33,2,8,39,239,64,85,5,220,86,137,200,87,226,72,85,72,162,32,2,252,68,77,72,37,4,92,244,64,104,58,140,144,18,130,70,34,2,16,47,207,72,35,2,72,56,110,72,36,130,72,164,132,136,0,1,240,17,1,16,17,1,16,17,1,16,17,34,18,32,228,0,36,129,80,42,129,16,32,133,246,17,1,240,17,1,240,17,1,48,0,7,240,1,0,16,1,7,240,64,4,0,64,68,4,63,192,0,32,143,254,32,135,196,137,71,212,85,71,212,85,71,196,1,79,232,33,2,16,47,239,16,33,2,252,52,78,68,34,130,16,162,132,198,10,79,168,11,35,162,201,227,248,36,131,248,36,143,254,17,2,8,3,131,192,4,7,252,21,14,78,31,0,32,255,224,64,20,0,128,17,2,16,63,230,16,175,194,68,36,66,40,33,2,40,44,98,0,34,3,188,106,77,24,32,133,244,128,35,248,4,2,80,84,128,128,32,33,2,254,164,74,40,161,10,44,172,42,40,162,130,40,164,132,32,194,112,49,10,254,163,138,84,171,162,8,47,226,16,37,2,32,66,2,16,15,232,68,66,129,16,34,140,198,68,132,72,68,128,136,4,7,252,68,75,248,10,1,16,127,192,16,61,2,80,61,0,48,4,0,32,127,229,2,157,193,20,125,65,20,88,137,72,17,67,34,1,4,16,33,0,16,239,226,16,33,2,16,41,3,16,33,0,16,64,2,124,0,64,4,231,194,64,36,2,64,44,35,66,35,224,0,0,15,124,145,15,80,149,15,126,129,10,16,178,173,42,132,160,134,63,128,8,63,130,0,32,65,252,0,0,68,82,37,10,143,128,0,0,7,60,80,5,0,87,230,16,81,5,84,101,36,146,69,4,32,33,2,16,47,239,16,81,5,124,82,69,36,34,133,16,130,128,198,32,130,72,70,165,92,228,130,126,69,207,106,4,131,72,199,224,0,32,2,124,64,73,4,224,66,124,68,15,64,4,35,66,195,224,0,4,15,254,4,7,252,32,131,248,17,15,254,32,15,188,74,73,188,72,4,128,232,229,234,74,166,170,218,164,170,74,164,174,82,166,96,4,0,64,127,192,64,36,129,80,4,15,254,10,1,16,32,140,6,18,1,32,47,130,32,98,11,252,34,2,32,47,130,32,34,3,252,4,7,252,64,75,248,8,1,68,106,129,48,102,128,166,50,0,192,32,2,0,35,207,164,42,66,164,42,66,164,74,68,188,170,65,0,17,15,254,17,0,64,127,192,64,36,129,80,255,224,160,49,140,6,32,2,62,248,130,16,171,231,34,34,175,170,34,165,42,73,72,34,127,192,160,127,196,164,127,192,0,63,130,8,36,130,72,11,3,8,0,7,252,68,68,68,127,196,68,68,71,252,4,0,64,4,0,64,32,2,62,122,168,42,115,226,42,250,162,62,40,131,8,32,128,8,16,1,238,42,34,162,110,234,128,46,226,138,46,162,132,40,194,146,26,14,16,47,226,130,247,194,32,117,74,184,37,130,52,45,34,48,17,1,16,34,130,68,104,42,40,34,130,40,34,130,72,36,130,136,32,15,188,42,68,164,155,192,64,255,224,224,21,2,72,68,64,64,32,15,188,42,66,164,75,200,0,63,1,16,31,192,4,127,64,12,34,2,16,47,239,130,87,197,32,86,69,184,37,133,180,133,32,176,0,15,156,39,3,144,73,4,144,183,225,16,33,4,16,129,0,16,18,5,60,85,5,136,80,128,0,63,130,168,42,130,168,255,224,0,16,5,124,82,69,40,81,5,40,20,96,64,63,128,64,255,224,0,4,1,80,20,130,68,68,64,0,4,15,254,10,1,16,32,132,6,66,7,190,164,128,36,9,0,252,120,0,254,120,128,80,6,35,158,64,2,252,64,68,4,95,69,20,95,69,20,95,68,4,64,68,12,32,129,16,255,228,136,122,132,168,122,132,136,88,128,24,82,72,146,17,15,254,10,7,252,10,71,254,10,71,252,27,2,168,74,96,160,2,3,254,32,35,254,32,2,252,40,66,252,72,68,252,136,64,140,0,0,124,244,65,124,148,69,124,85,2,84,84,132,200,133,64,98,32,2,0,39,207,16,81,5,16,95,229,16,33,3,16,73,8,16,33,66,18,79,233,152,238,130,136,78,174,172,14,131,154,202,97,2,17,15,254,17,0,64,63,130,72,36,131,248,4,0,72,127,192,4,33,2,16,34,143,68,40,39,124,96,10,162,165,66,0,47,226,0,4,15,254,4,7,252,85,68,228,127,192,224,21,2,72,68,96,64,0,175,136,39,226,72,71,135,72,215,69,86,87,71,76,85,96,130,1,15,144,34,130,68,72,39,124,210,5,84,82,71,8,87,224,0,34,2,32,47,207,32,47,2,80,55,206,16,37,66,146,165,36,32,33,2,16,34,143,68,40,34,124,50,14,20,36,66,40,175,228,0,33,7,190,148,130,252,80,68,244,73,68,244,73,68,244,64,192,0,17,1,16,34,130,68,104,42,124,34,2,148,36,66,8,47,226,0,17,15,254,40,131,168,42,131,136,42,128,16,127,192,132,17,66,8,0,160,8,191,230,8,46,130,8,110,170,172,174,138,26,162,100,2,32,143,254,32,128,128,255,225,0,39,134,16,175,194,16,37,2,32,66,132,168,74,238,180,74,38,32,223,197,84,85,69,84,127,228,0,18,5,124,89,1,72,11,3,8,223,96,64,63,130,72,21,7,252,2,15,40,147,201,224,242,2,60,190,10,36,161,139,50,236,160,6,2,15,168,139,202,224,171,202,224,170,138,168,33,5,18,74,168,70,0,3,248,32,130,72,36,130,72,36,130,168,10,33,34,33,228,0,65,4,124,97,73,254,5,78,188,69,14,124,89,6,254,85,2,62,66,7,190,148,130,20,18,15,254,72,135,168,74,135,136,74,133,144,17,1,16,37,2,124,101,10,144,33,2,254,33,2,16,33,2,16,33,2,124,89,68,254,209,69,124,73,4,252,105,5,126,105,4,126,16,2,124,116,69,84,117,69,84,245,69,16,114,133,42,146,163,70,16,65,4,41,68,84,189,64,20,21,69,84,40,65,196,225,64,8,66,132,36,114,9,60,46,4,60,78,4,40,81,38,50,76,160,6,136,100,152,31,8,144,85,225,244,37,76,116,93,68,84,70,64,68,0,171,232,98,226,56,42,234,184,106,162,172,8,132,154,150,98,34,72,2,94,0,40,186,74,161,186,42,172,186,74,164,130,72,160,132,2,14,248,34,131,254,66,134,248,34,10,248,162,4,252,162,1,254,47,130,0,79,140,168,79,132,168,95,196,168,79,132,168,95,196,0,32,129,16,127,224,64,63,192,64,127,224,128,255,225,16,14,7,30,34,2,60,36,74,168,97,2,104,47,230,8,164,130,40,32,130,24,18,5,60,54,67,24,81,1,96,4,79,104,21,2,72,84,96,128,64,2,248,2,8,32,82,1,32,34,12,32,66,5,252,64,0,0,15,239,84,23,207,84,143,239,0,95,239,84,87,207,84,31,230,0,16,143,254,18,128,60,150,69,152,19,3,72,95,233,8,20,129,24,18,5,60,52,69,168,147,1,64,255,224,224,21,2,72,68,96,64,18,5,60,52,65,104,57,5,32,20,0,64,127,192,160,17,6,12,4,132,72,36,128,252,228,130,72,63,226,72,36,131,72,40,129,8,0,7,252,64,4,24,78,4,128,79,196,144,73,5,16,64,7,252,18,5,60,54,133,16,22,15,254,9,7,252,81,70,220,64,71,252,114,5,60,86,69,24,98,69,210,87,197,16,101,4,126,65,4,16,17,15,254,21,2,32,127,138,64,63,130,64,63,194,0,84,136,164,68,4,78,70,175,74,68,166,234,212,164,106,85,70,76,85,36,162,2,143,36,39,226,72,79,231,72,215,229,72,87,231,64,74,161,42,18,1,16,63,194,32,127,202,32,63,194,32,63,226,0,82,72,146,1,7,8,87,229,0,114,69,66,80,7,40,82,133,16,82,139,70,8,0,64,255,224,0,17,2,8,81,64,160,4,0,160,49,140,6,32,1,30,253,32,20,73,132,84,129,34,146,17,162,148,69,8,16,66,2,60,30,8,40,65,33,110,32,13,252,69,4,82,73,33,14,0,207,112,81,5,254,82,133,68,120,32,168,58,140,168,42,129,72,32,194,112,33,2,254,242,133,68,90,165,40,34,133,40,138,128,72,15,238,84,175,234,170,175,234,4,174,234,164,239,74,204,10,64,204,34,34,146,244,66,254,40,35,124,100,74,84,37,66,16,162,164,198,34,2,16,119,228,0,244,66,130,34,143,40,34,130,144,50,130,68,64,196,112,113,10,16,39,239,168,36,66,170,82,132,168,130,128,72,18,1,60,46,2,40,97,74,236,32,3,254,37,2,80,37,34,142,4,7,78,94,165,74,116,165,234,84,167,74,90,229,232,82,139,8,18,9,16,95,226,0,82,137,68,56,37,40,146,129,16,82,130,68,16,3,240,66,15,252,68,71,252,68,71,252,68,68,68,69,72,8,65,4,254,112,9,40,4,68,130,66,132,40,81,6,40,68,65,130,36,130,232,74,142,238,43,36,234,132,173,234,8,174,228,18,194,114,34,2,16,79,239,0,36,68,130,242,128,40,1,3,40,196,64,130,84,74,132,85,71,212,85,71,212,85,71,212,17,79,244,84,73,44,17,7,208,25,15,222,34,71,164,77,73,20,28,135,8,17,67,34,1,15,186,33,79,254,169,10,188,218,72,200,251,232,136,250,128,16,32,194,112,241,4,254,98,138,68,250,162,40,58,142,40,36,130,136,34,2,16,247,228,0,66,74,66,250,130,40,57,14,40,36,66,130,0,64,4,242,73,36,146,73,36,146,201,52,242,73,4,0,64,4,4,15,254,145,34,72,20,3,248,68,15,254,0,3,248,32,131,248,39,194,68,39,207,68,39,195,32,103,234,146,53,34,106,167,164,6,34,2,16,47,239,68,34,130,254,50,14,252,36,130,72,163,4,206,66,69,40,99,5,162,97,224,128,63,130,8,63,130,8,63,130,8,25,14,16,47,226,16,249,2,124,112,6,252,164,66,68,39,194,68,40,4,156,188,4,128,253,228,136,92,132,136,78,135,136,66,132,16,1,7,16,82,133,68,104,38,72,84,133,72,84,134,72,72,133,8,17,7,212,17,15,254,49,4,148,253,69,24,125,37,42,124,100,2,17,1,16,125,1,60,17,79,212,33,68,148,250,68,164,5,64,136,17,15,254,17,0,0,127,128,136,8,128,136,10,128,144,8,0,128,33,2,16,47,239,16,33,7,124,104,10,124,36,66,68,39,194,68,4,0,64,255,224,224,21,2,72,196,96,64,0,5,36,137,32,0,33,2,254,33,15,124,33,66,254,49,78,124,33,2,92,165,4,190,1,14,254,161,10,124,225,74,254,161,78,124,161,10,92,229,0,190,71,194,68,7,207,68,7,197,32,87,229,146,37,35,106,199,160,6,130,4,32,31,200,32,66,0,248,32,4,248,200,132,136,79,132,136,33,2,16,79,229,16,225,2,124,64,15,124,4,67,68,199,192,68,32,3,190,73,41,38,124,5,84,125,229,100,125,229,68,84,72,196,32,2,120,36,143,72,87,133,72,84,133,120,36,133,72,143,192,0,2,0,40,2,79,254,2,2,160,42,71,228,42,130,146,74,168,134,17,15,254,17,2,40,247,226,40,127,226,68,247,199,68,172,66,124,17,15,254,17,0,64,10,3,16,192,225,20,17,1,16,33,4,16,63,130,72,63,130,72,63,128,160,49,141,22,17,1,16,33,4,16,20,129,72,47,198,72,191,226,0,47,194,132,47,194,132,47,194,132,4,0,160,17,2,8,192,97,16,17,1,16,17,1,16,33,4,16,4,0,32,63,234,32,101,2,136,112,106,72,36,132,72,72,137,8,0,200,10,95,224,8,202,132,168,95,164,172,74,134,170,73,97,34,0,7,252,64,71,252,66,4,32,95,197,36,95,197,36,95,201,4,4,0,64,4,7,252,68,68,68,68,68,68,69,68,72,4,0,64,66,7,190,148,128,16,121,4,188,121,68,148,121,68,164,74,73,204,0,0,28,62,2,0,32,3,252,34,2,32,34,4,32,66,8,32,4,0,160,17,2,14,223,64,64,63,128,64,36,129,80,255,224,0,4,0,160,17,2,8,200,96,64,0,3,252,0,128,16,2,0,64,66,2,248,2,137,254,66,128,248,34,4,248,194,5,252,66,0,32,68,130,254,244,129,220,38,166,128,179,194,128,47,226,84,41,34,48,23,133,72,83,5,200,18,96,192,63,1,8,127,192,68,37,4,200,65,4,124,244,64,124,228,68,124,241,4,254,73,38,146,73,96,16,16,1,0,47,194,68,100,74,68,36,130,40,33,2,40,36,98,128,132,68,254,4,64,124,193,4,254,73,36,254,65,6,254,65,0,254,137,4,144,95,192,144,201,7,252,73,4,144,81,6,0,159,224,0,80,79,184,82,7,32,35,207,168,170,143,168,34,143,168,36,130,136,0,7,252,10,4,164,42,143,254,0,3,248,32,131,248,32,131,248,17,15,254,59,133,84,145,32,0,127,128,0,255,226,72,68,64,192,0,196,112,36,0,126,228,130,72,36,130,72,40,131,0,95,232,0,32,2,124,172,75,68,167,202,72,36,130,100,85,36,128,139,0,8,79,194,4,7,200,4,79,194,0,95,237,2,79,196,72,67,1,206,0,3,252,32,67,252,33,2,16,44,130,40,32,68,194,131,0,16,1,7,144,9,1,62,41,36,82,185,33,18,17,33,226,114,160,68,40,79,228,41,64,20,125,66,148,41,79,244,41,66,132,73,72,136,33,2,16,247,194,16,247,201,68,247,198,40,106,135,42,164,160,134,17,15,254,17,0,0,127,128,16,6,1,152,224,99,248,4,7,252,1,14,254,161,10,124,225,10,254,164,78,124,164,74,124,228,64,76,63,130,8,63,130,8,63,128,0,251,232,162,251,232,162,251,232,162,65,7,8,151,226,0,251,234,162,251,234,136,250,192,74,48,140,24,8,0,64,255,224,0,63,130,8,63,128,64,21,2,72,68,64,192,34,2,16,47,234,0,183,202,68,167,194,16,37,66,146,33,34,48,33,10,254,113,2,124,241,2,254,116,74,124,36,66,124,36,66,76,32,10,254,113,2,124,245,66,124,117,74,124,41,2,80,34,2,222,32,2,124,64,137,16,226,130,68,72,47,124,1,3,16,207,224,0,17,1,16,17,7,252,17,1,16,255,225,16,17,2,16,33,4,16,17,15,254,33,7,222,214,69,84,116,128,212,2,15,254,32,131,248,63,130,8,63,130,8,63,128,64,255,226,8,63,128,64,36,132,196,0,15,126,16,130,16,83,232,162,114,162,42,34,163,136,225,64,34,34,15,188,36,79,136,39,207,148,7,239,148,143,207,144,137,9,176,65,4,254,68,68,40,239,228,68,71,196,68,119,204,40,4,160,134,41,2,144,253,2,158,67,71,212,133,71,84,84,135,72,85,64,162,65,4,254,116,72,40,15,238,68,71,207,68,71,196,40,100,164,134,32,4,252,128,129,16,34,134,68,168,34,124,33,2,16,47,226,0,4,0,32,63,234,0,111,194,8,99,74,194,39,194,16,65,8,254,65,2,124,1,15,124,1,5,254,80,5,124,36,67,124,196,64,76,4,7,252,17,0,160,255,226,8,63,130,8,63,128,160,18,70,28,4,7,252,17,0,160,255,224,0,63,130,8,63,128,162,18,38,30,4,8,120,72,129,16,15,194,36,95,236,36,79,196,32,74,0,64,32,2,126,44,43,66,167,170,106,166,162,122,84,37,66,132,160,68,4,7,254,80,163,244,5,7,252,9,3,240,16,2,248,72,128,248,34,130,200,36,143,74,37,194,232,52,142,72,46,131,84,165,68,98,4,0,32,127,228,146,144,130,132,8,3,240,9,0,146,17,34,14,16,33,2,37,34,146,121,33,18,33,103,218,1,32,194,112,32,2,2,15,160,35,194,36,36,71,72,40,130,16,58,142,68,72,32,0,10,7,188,10,0,160,123,192,160,10,7,188,10,0,160,255,224,0,16,1,0,31,130,8,33,4,16,2,0,32,5,0,144,16,134,6,32,3,240,66,0,80,24,206,4,4,2,72,37,4,160,49,140,6,8,0,128,8,3,240,9,0,144,9,1,18,17,34,18,64,224,0,0,11,254,69,1,252,149,69,84,56,197,4,223,197,4,95,193,4,0,7,254,64,5,254,84,133,232,87,229,200,80,133,90,90,169,70,32,130,136,33,15,222,34,74,164,117,71,20,168,130,24,162,68,66,0,4,252,72,68,132,72,68,252,72,68,132,72,68,252,72,64,0,0,1,128,99,196,4,64,68,4,123,196,4,64,68,4,127,196,4,123,196,4,123,196,4,127,194,72,63,130,72,127,192,132,17,70,8,33,2,16,125,132,84,169,1,16,111,232,0,63,130,8,32,131,248,66,2,40,250,64,32,119,229,40,114,130,40,114,170,170,36,166,134,4,0,32,63,226,64,164,6,120,40,134,144,177,2,40,68,72,130,82,15,190,84,39,214,35,175,254,169,47,186,37,111,146,32,162,4,34,2,32,251,226,66,32,35,58,98,170,42,35,162,2,161,68,8,16,9,124,84,66,68,87,201,68,52,69,124,148,65,68,95,226,0,2,3,252,32,10,248,104,130,136,111,138,136,47,132,136,72,139,254,0,3,252,32,67,252,34,2,32,63,194,32,47,132,136,72,136,248,2,15,32,83,229,66,88,37,58,122,160,170,59,172,130,40,161,4,17,15,254,81,7,252,136,66,164,28,71,244,28,66,164,73,64,140,0,3,248,32,131,248,32,3,252,32,66,244,41,68,244,65,72,8,0,0,124,116,69,68,87,197,68,84,71,124,84,64,68,15,224,0,64,4,62,122,10,32,35,226,34,250,34,62,34,5,32,83,232,128,8,4,72,33,15,254,17,2,72,196,99,248,4,7,252,4,0,64,64,2,124,4,72,68,87,193,68,36,76,124,68,68,68,79,224,0,252,4,190,121,68,200,249,64,240,60,33,100,109,129,72,100,96,64,32,2,126,36,15,64,39,194,68,52,78,124,36,2,64,167,228,0,32,2,126,36,47,126,36,130,72,55,238,72,39,226,162,170,37,62,0,3,252,32,2,0,63,130,8,32,131,248,32,2,0,63,192,0,31,129,8,31,129,8,31,129,8,31,129,8,127,224,0,16,130,4,60,2,94,37,3,208,17,225,18,29,37,30,81,5,208,241,224,0,0,7,126,84,37,126,116,130,72,55,234,72,187,238,162,19,226,34,64,4,126,116,40,126,116,130,72,247,226,72,45,227,82,41,33,30,16,1,124,36,66,124,100,74,124,36,66,124,36,66,254,34,130,68,16,1,0,63,194,4,64,65,228,18,65,36,30,65,4,1,64,8,39,194,68,55,202,196,167,202,68,167,194,68,47,226,0,36,66,130,16,1,62,86,5,160,83,201,36,18,65,60,42,2,96,67,224,0,0,7,228,66,71,228,73,68,148,127,68,148,93,69,68,157,65,72,32,2,124,36,79,124,32,2,124,52,70,124,164,66,124,164,68,76,1,7,188,74,71,180,2,199,160,75,231,130,75,167,130,72,165,132,32,2,124,36,79,124,80,5,124,84,66,124,36,69,124,132,64,76,17,1,84,35,130,252,98,11,254,36,130,252,52,162,88,36,66,60,36,129,80,4,7,252,8,15,254,17,131,244,209,33,240,17,1,240,36,129,80,127,192,128,255,225,16,32,133,244,145,33,48,16,64,252,32,2,124,68,73,124,240,2,124,68,79,124,4,67,124,196,64,76,64,5,254,80,143,168,84,229,242,116,13,84,95,69,68,100,172,146,46,226,170,46,239,170,46,227,72,111,235,72,39,226,36,161,132,230,33,2,16,33,15,124,33,66,20,49,78,254,33,2,40,164,68,130,64,5,252,80,79,252,81,7,84,213,69,124,81,5,84,85,78,124,16,1,254,40,34,254,104,138,170,42,162,190,40,130,170,42,163,62,3,199,200,21,7,252,74,71,252,112,133,126,112,132,40,80,134,152,8,2,72,17,7,254,128,35,248,32,130,72,36,128,162,18,38,30,2,4,32,34,0,252,34,66,36,95,236,32,69,4,72,72,65,2,2,4,32,34,0,252,226,66,36,47,226,32,37,3,72,40,65,2,34,2,60,68,137,144,231,194,84,69,79,124,4,3,66,196,32,62,34,2,32,39,194,132,244,66,36,32,66,20,58,78,68,65,64,8,17,15,254,17,7,252,66,69,196,68,71,252,78,69,84,68,71,252,34,2,32,59,196,68,136,71,36,33,79,148,34,66,132,50,130,16,0,7,252,72,64,128,127,1,0,36,3,248,4,7,252,4,0,64,0,3,248,8,143,254,8,131,248,16,3,248,80,137,8,31,128,0,32,130,16,34,42,190,169,74,162,169,10,158,186,46,212,0,128,118,18,1,68,47,226,42,100,74,162,39,194,68,42,130,16,34,130,198,65,2,36,247,224,36,84,37,32,83,194,36,54,142,144,66,128,198,68,2,136,31,200,84,72,129,68,39,132,136,213,4,32,69,1,140,0,7,222,37,47,244,37,135,212,65,43,210,37,162,84,61,2,80,1,15,36,23,229,36,85,36,16,123,192,228,58,140,144,42,129,70,2,14,16,191,235,66,167,202,168,161,10,108,232,42,124,4,64,124,8,0,128,232,235,234,170,170,170,170,174,170,170,160,174,18,162,96,8,0,128,15,0,128,8,15,254,8,0,160,9,128,136,8,0,128,2,0,32,231,202,68,170,138,16,162,142,198,151,128,72,4,128,120,0,0,0,127,193,16,17,1,16,255,225,16,17,2,16,33,4,16,40,130,138,46,207,136,46,162,134,50,14,252,40,66,252,168,68,252,36,130,74,38,207,72,36,167,102,105,10,124,164,66,124,36,66,124,32,10,184,170,143,168,2,143,168,10,143,168,130,137,74,164,172,134,64,5,222,84,135,216,86,141,254,80,133,152,85,165,170,84,100,0,0,71,196,17,65,20,17,79,244,17,65,20,17,65,4,17,65,8,34,66,254,34,66,60,242,66,60,34,66,254,53,78,98,68,0,126,36,135,232,36,131,222,36,163,202,36,175,234,84,166,42,125,32,38,34,2,32,34,2,62,244,34,84,41,2,16,57,14,40,68,65,130,1,15,144,35,226,34,68,71,16,209,5,16,82,135,40,68,64,130,7,135,192,4,3,248,8,15,254,16,131,248,80,137,248,16,129,248,4,0,32,127,228,40,95,196,40,95,132,164,70,132,176,82,136,100,65,5,254,113,5,124,209,69,254,81,69,124,85,37,60,85,70,178,34,10,16,127,226,148,255,226,148,127,198,210,171,194,180,45,35,48,32,2,0,39,207,16,33,3,16,97,10,16,33,2,254,160,4,0,34,2,16,47,239,0,32,2,120,52,142,72,36,130,138,168,165,6,8,0,64,255,224,0,31,1,16,17,1,16,17,34,18,32,228,0,34,2,16,47,234,128,176,10,120,164,130,72,84,132,202,132,160,134,8,0,136,127,0,160,255,224,128,63,140,64,15,128,8,5,0,32,33,2,18,39,207,24,47,227,32,103,202,160,51,194,4,161,68,8,33,2,18,39,203,24,175,234,32,39,194,160,83,196,132,130,64,24,36,3,252,68,15,254,32,131,248,10,7,188,10,7,188,10,0,160,32,2,126,32,79,4,39,66,84,37,67,212,231,68,4,1,64,8,17,7,252,17,0,0,127,224,8,60,130,72,60,128,8,2,128,16,32,2,126,32,79,4,39,71,84,101,74,116,165,66,4,33,66,8,32,2,124,37,79,124,37,71,124,105,10,254,163,130,84,41,34,16,1,15,124,33,2,254,65,7,36,215,229,2,87,199,84,69,64,254,0,15,190,168,143,190,170,47,170,34,175,170,114,170,136,33,66,34,12,135,8,20,129,40,252,129,40,56,229,120,144,129,8,16,129,8,4,7,252,4,3,248,0,7,254,128,33,240,17,1,18,33,36,14,2,0,16,239,234,32,164,138,248,161,42,36,236,138,16,6,129,132,0,7,254,0,131,200,36,130,72,36,131,200,36,128,8,2,128,16,79,130,136,143,132,136,15,130,64,79,205,36,74,68,212,79,64,12,4,0,64,127,192,64,63,130,8,32,131,248,10,0,162,18,38,30,32,65,4,254,65,20,37,71,148,17,66,84,201,65,4,41,76,72,8,0,64,127,197,4,159,2,16,82,0,192,51,141,246,17,1,240,7,196,84,39,192,84,231,194,16,47,226,16,43,131,84,41,32,16,4,2,120,36,15,254,0,3,248,32,131,248,32,131,248,32,130,24,1,0,92,229,10,254,160,10,124,164,74,124,228,74,124,4,64,76,63,130,8,63,130,8,63,130,34,41,67,72,4,99,248,4,7,252,63,130,8,63,130,8,63,130,36,41,131,8,4,101,32,80,168,250,34,2,16,47,226,0,247,130,72,36,130,72,52,172,138,8,161,6,2,0,16,239,234,0,167,138,72,164,138,72,228,170,74,8,161,6,8,0,64,127,228,2,145,2,8,64,67,248,4,0,64,4,7,252,7,143,72,38,130,88,60,174,74,8,97,0,4,69,42,144,160,248,1,7,208,5,0,144,17,1,208,241,5,16,17,33,18,80,226,0,34,2,16,47,239,130,36,66,130,55,206,16,33,2,16,175,228,0,32,2,0,39,239,64,38,34,84,52,142,84,38,34,64,167,228,0,0,0,0,63,130,8,32,130,8,32,130,8,32,131,248,32,128,0,16,1,0,19,199,164,18,65,164,50,69,36,19,193,36,80,2,0,8,0,64,255,232,18,113,192,16,7,207,164,82,133,16,82,168,254,33,2,16,33,15,126,33,7,16,111,202,68,164,66,68,39,194,68,0,7,188,74,68,164,123,192,80,4,143,254,4,0,160,17,6,12,4,15,254,160,167,252,160,163,248,34,2,168,47,130,32,82,73,252,17,15,254,17,0,64,4,15,254,4,3,248,32,130,8,63,130,8,0,143,168,35,239,168,172,138,190,216,8,188,250,72,164,251,200,164,4,0,32,63,226,32,63,194,64,41,2,252,33,5,254,65,8,16,66,2,16,15,238,136,43,229,144,106,142,190,88,132,190,72,133,8,4,7,252,10,3,24,223,96,0,127,192,128,31,128,8,5,0,32,66,5,254,69,4,136,247,100,0,79,196,32,103,204,4,2,128,16,33,2,254,34,143,68,43,163,0,111,234,32,39,194,4,162,132,16,1,7,126,82,133,68,123,162,0,55,202,32,167,203,132,226,128,16,1,7,124,82,133,68,123,165,0,87,199,32,83,197,4,81,75,8,34,2,32,34,2,252,242,66,36,34,66,254,50,14,80,72,129,6,66,7,188,148,128,0,34,2,248,178,138,40,175,226,32,37,2,140,18,1,32,37,2,136,112,106,248,32,3,252,34,2,72,47,194,68,34,2,32,50,10,252,162,74,36,191,226,32,37,2,72,40,67,2,2,7,254,128,33,16,127,193,16,63,130,8,36,130,74,26,38,30,16,143,232,17,7,222,1,35,170,0,135,200,17,69,84,146,67,66,0,7,252,64,5,252,66,4,248,66,4,32,95,196,0,127,224,0,66,7,188,148,131,252,32,2,248,34,2,248,34,2,248,32,3,252,16,9,124,81,2,16,81,9,124,49,5,16,145,1,16,87,194,0,32,2,126,36,15,92,36,135,92,108,138,72,165,226,64,39,226,0,1,15,136,32,2,126,68,7,64,212,5,64,116,5,64,8,1,0,0,7,126,84,5,92,116,133,92,84,135,72,87,229,64,119,224,0,1,0,8,112,5,126,84,7,64,84,5,64,116,4,128,8,1,0,0,8,252,72,64,132,40,66,252,68,140,72,68,132,138,72,161,6,0,3,248,0,0,0,255,224,128,16,1,252,0,64,4,2,128,16,16,15,252,16,1,40,43,2,160,69,8,136,63,130,168,42,143,254,4,4,68,68,71,252,16,5,124,80,69,4,87,197,4,16,66,124,8,0,64,127,229,10,160,69,62,58,65,52,123,65,24,42,164,70,17,15,254,17,15,164,73,131,10,47,76,66,63,128,64,11,3,8,4,15,254,17,2,72,223,96,64,63,128,64,31,0,64,127,192,0,16,66,20,124,197,84,124,197,70,125,193,36,52,67,116,73,40,126,18,1,64,47,194,148,111,202,164,47,194,36,34,130,94,41,35,14,65,4,124,117,73,124,1,4,254,64,4,124,84,70,84,66,128,68,34,2,64,47,203,148,175,202,164,175,194,34,37,66,94,41,35,14,65,2,124,5,73,124,81,2,254,32,12,124,69,68,84,66,128,68,33,2,16,39,194,84,245,66,124,37,66,84,55,206,16,65,0,16,0,3,248,32,131,248,32,131,248,2,2,36,58,130,48,42,35,30,32,2,254,41,47,146,47,226,146,59,174,214,41,34,146,175,228,130,127,196,68,68,69,244,68,68,228,85,70,76,68,68,68,127,196,4,32,194,112,33,15,16,47,226,16,49,14,124,36,66,68,167,196,68,33,2,8,39,239,64,36,3,64,100,10,64,36,2,64,168,5,0,2,7,254,72,7,238,84,165,202,64,197,202,68,165,236,72,137,136,47,193,4,65,70,100,82,68,116,98,69,116,69,69,84,103,68,12,34,2,16,32,2,252,240,2,72,36,130,80,49,14,32,79,192,0,33,2,8,32,15,126,32,2,68,52,78,36,34,130,8,167,228,0,4,46,66,191,42,74,191,171,90,191,170,74,238,169,82,36,32,70,34,66,36,39,239,164,175,234,128,251,202,36,43,195,164,235,192,36,2,135,40,87,197,40,127,229,0,87,199,68,87,197,68,87,203,68,65,2,16,247,224,16,87,194,84,247,194,16,251,130,84,41,36,16,8,128,132,232,11,222,168,10,146,173,43,148,232,72,136,43,225,0,17,15,254,17,0,64,127,194,72,21,15,254,14,3,88,196,96,64,4,0,64,127,192,64,36,129,80,255,224,224,21,2,72,196,96,64,33,2,30,250,34,68,251,234,162,250,163,42,106,170,20,34,34,66,16,143,254,16,128,160,43,194,208,40,128,0,127,196,164,74,79,254,33,2,16,247,199,56,173,66,18,8,15,252,17,0,224,17,6,12,32,2,68,34,143,0,47,231,0,104,10,124,160,2,0,47,226,0,32,2,68,34,143,0,39,227,0,96,10,124,32,2,0,175,228,0,66,7,188,164,129,32,83,197,80,24,128,0,127,196,164,74,79,254,159,228,66,63,168,66,191,170,74,181,170,234,191,169,82,164,168,70,0,2,8,17,0,32,127,192,0,0,3,248,0,0,0,255,224,0,39,233,34,79,162,34,175,166,170,47,162,170,111,170,114,42,162,38,147,228,130,17,33,254,213,37,122,85,37,126,83,167,86,89,33,22,34,130,168,42,239,180,42,34,124,52,78,84,37,66,40,164,164,142,18,5,60,85,5,136,16,3,248,32,130,72,36,128,162,50,44,30,72,132,142,127,36,132,126,238,162,126,164,138,92,166,168,73,68,162,34,130,174,75,73,162,234,2,124,68,79,84,5,67,40,196,160,134,32,2,68,34,138,128,183,202,0,160,2,124,80,4,128,143,224,0,133,5,80,21,233,104,84,66,68,64,13,252,85,69,84,127,224,0,2,15,144,39,194,68,39,207,196,39,194,82,61,78,72,70,64,66,40,2,78,46,175,170,46,199,170,110,170,138,172,194,168,45,130,136,18,5,16,39,197,68,151,193,68,55,197,82,149,65,72,86,66,66,2,7,254,72,5,220,85,69,212,85,133,212,81,69,88,91,9,16,32,1,30,125,36,84,125,68,82,125,36,26,73,68,208,85,6,16,64,2,60,250,72,164,251,200,164,250,74,60,146,74,164,197,64,136,4,8,32,79,128,136,143,132,136,31,130,164,202,132,144,72,132,198,34,66,126,34,79,0,47,226,130,50,14,124,34,66,68,165,68,136,17,7,252,17,0,0,127,196,132,8,3,248,8,129,8,18,130,16,8,0,64,127,196,68,164,3,248,68,0,64,127,192,64,4,0,64,8,0,136,127,0,160,255,192,128,25,2,160,76,72,132,7,192,0,17,1,16,39,162,20,97,139,254,34,2,104,43,3,34,33,226,0,33,2,18,39,239,20,81,133,254,82,9,104,91,34,34,81,232,128,1,15,144,35,239,162,173,74,152,218,72,194,251,200,164,250,72,188,34,2,190,180,42,164,161,138,36,36,34,60,82,68,164,131,192,36,132,133,254,4,136,0,95,225,34,34,4,252,194,68,36,69,68,136,40,143,232,40,131,190,16,167,202,84,167,202,17,47,210,18,161,68,3,131,192,32,2,64,36,3,252,4,2,72,68,72,66,20,0,128,63,128,64,255,232,66,53,128,0,63,130,72,63,130,72,63,130,8,71,199,16,79,232,146,117,66,0,247,194,84,39,195,84,39,192,0,16,143,254,20,135,254,132,39,92,0,3,248,36,131,248,36,131,248,127,192,128,31,131,8,95,128,0,251,226,16,123,234,210,57,226,146,63,194,68,63,194,68,63,193,16,62,128,132,127,226,72,204,96,0,23,193,84,39,198,84,167,194,0,47,226,170,47,226,170,47,226,130,8,1,8,63,192,4,33,5,36,251,224,130,4,7,252,4,15,254,39,194,16,47,239,146,37,66,0,55,206,84,39,194,84,167,196,68,0,135,136,72,132,190,120,164,138,73,39,146,73,36,162,106,169,68,36,129,80,255,225,80,36,132,68,0,0,64,255,224,160,17,6,12,64,2,126,4,40,66,87,225,66,36,46,126,36,34,66,39,224,66,33,2,124,241,2,254,36,71,162,99,202,100,170,130,16,34,130,198,32,2,254,42,175,254,34,7,16,111,234,32,163,194,68,37,66,136,2,8,80,72,129,38,1,2,0,79,204,4,68,132,48,65,0,8,63,194,0,47,130,168,47,130,168,47,130,32,79,132,32,159,192,0,12,71,20,17,79,212,56,69,76,20,15,254,14,1,80,100,192,64,56,65,20,125,67,148,84,65,12,36,3,252,68,15,254,4,0,64,125,1,30,253,163,170,85,33,74,10,67,88,213,96,224,21,130,200,65,7,158,162,64,128,255,226,168,36,130,168,127,196,68,74,69,236,16,9,124,101,66,124,85,73,124,49,5,124,145,1,16,95,226,0,4,15,254,17,4,228,81,71,252,4,7,252,74,69,244,65,68,12,130,5,252,133,5,36,21,67,252,194,5,252,85,69,244,81,65,8,0,15,124,37,66,124,37,79,124,33,2,124,57,14,16,79,224,0,4,0,64,127,192,224,53,140,70,31,0,32,127,192,64,20,0,128,0,3,248,36,131,248,36,131,248,4,0,64,63,128,64,255,224,0,64,7,62,146,162,62,250,170,190,248,138,190,248,128,8,27,238,0,66,2,32,250,0,160,18,3,160,86,9,32,18,33,34,17,225,0,17,15,254,17,0,196,113,65,20,253,67,148,85,73,4,17,65,8,32,143,254,32,128,128,127,129,8,35,129,16,251,194,148,73,73,172,4,15,254,4,3,248,36,130,72,63,130,64,20,0,192,19,6,14,0,7,252,10,7,252,74,71,252,4,15,254,14,1,80,100,192,64,0,15,254,0,7,188,74,68,164,107,69,172,74,68,164,90,192,0,0,3,254,32,2,0,63,226,64,39,194,68,36,68,68,73,73,8,0,135,200,64,135,200,81,229,202,84,165,74,84,165,82,173,96,32,0,207,112,36,2,80,69,7,126,209,5,84,85,39,146,85,0,32,0,3,254,32,2,32,34,2,252,34,66,36,66,68,68,133,64,136,0,65,196,241,65,20,17,79,212,17,67,148,84,73,4,17,65,8,32,3,252,69,5,252,213,69,252,66,5,252,71,4,168,82,68,32,32,35,226,72,164,138,206,165,42,82,166,170,68,36,130,80,166,4,32,34,50,92,164,74,223,164,74,78,165,90,100,164,66,68,164,68,4,0,32,63,234,32,108,34,74,127,170,74,46,163,90,36,36,70,8,0,64,127,128,0,33,1,16,18,1,32,4,7,252,0,0,0,33,2,8,168,7,126,32,15,164,34,71,40,168,130,16,39,226,0,0,4,254,41,8,144,75,192,148,41,76,148,74,69,36,85,66,136,4,0,64,63,128,72,255,224,72,63,132,68,46,129,80,36,132,198,8,0,128,8,7,248,8,128,136,8,128,136,16,129,8,34,132,16,2,15,254,68,133,50,244,165,254,66,5,254,114,45,74,23,161,6,0,0,124,117,69,124,85,69,124,81,5,124,113,4,16,15,224,0,16,1,254,34,130,40,111,234,170,42,162,170,45,98,130,40,162,132,4,79,168,80,7,124,81,7,16,87,229,144,241,1,40,20,65,130,17,7,252,17,8,64,95,192,160,239,130,32,63,194,32,82,8,254,130,4,32,95,224,64,9,14,252,33,2,254,33,2,16,81,8,254,65,6,254,138,128,254,234,132,254,234,164,254,74,166,254,86,194,170,2,3,252,40,131,252,37,2,252,37,67,254,37,69,252,141,129,84,33,2,16,50,138,68,170,42,16,175,194,4,32,130,80,34,2,16,128,133,8,11,232,16,90,128,190,40,132,254,200,132,136,76,129,62,8,0,64,255,233,18,36,128,64,127,196,68,68,68,84,68,128,64,17,2,144,69,232,36,125,66,20,21,68,84,40,128,212,114,64,66,113,5,40,84,71,130,87,197,0,114,69,20,85,69,40,95,235,0,64,135,8,131,224,144,226,133,190,72,142,190,72,134,136,87,226,0,8,0,64,255,225,32,82,133,36,146,64,0,4,65,34,80,168,248,33,2,16,175,203,32,175,10,80,39,194,16,85,68,82,137,32,48,32,132,126,145,14,32,47,132,72,231,224,8,50,204,74,10,160,16,33,10,124,116,66,124,252,66,124,117,42,84,36,130,84,38,32,0,2,9,252,64,0,248,40,130,248,66,12,168,82,70,34,74,0,64,79,202,36,74,66,166,196,133,152,4,7,252,21,2,72,196,96,0,159,4,152,153,68,208,82,10,72,21,15,254,21,2,72,68,64,64,8,7,240,65,7,240,65,7,240,80,132,176,68,5,160,97,192,0,0,15,252,10,0,160,127,196,164,74,69,84,96,196,4,65,68,8,32,2,254,242,132,40,175,239,170,42,163,170,237,98,130,40,162,132,63,130,8,63,130,8,255,226,72,63,130,72,63,128,64,255,224,0,2,14,16,175,234,0,167,206,68,167,202,16,165,78,82,9,32,48,4,15,254,0,3,248,32,131,248,0,7,252,64,73,240,17,38,14,4,8,32,95,192,0,207,132,136,79,132,32,106,133,36,42,64,64,33,2,254,241,2,170,39,195,198,103,202,68,39,194,84,169,36,48,1,15,174,84,165,74,116,165,74,116,165,106,90,239,40,18,129,72,34,3,254,85,68,248,216,198,250,72,132,248,66,4,168,82,68,96,2,0,16,31,229,0,55,193,4,48,133,16,17,2,16,37,4,32,34,2,252,181,74,248,184,202,250,40,130,248,82,4,168,146,64,96,4,15,254,128,39,188,74,66,148,78,67,48,204,227,16,6,3,128,128,4,252,0,128,16,225,2,16,33,2,80,34,5,0,143,224,0,130,7,254,21,72,248,88,194,250,40,140,248,66,4,168,82,64,96,0,7,248,1,0,32,4,0,64,4,0,64,4,0,64,20,0,128,39,194,84,39,207,84,39,195,72,235,2,72,56,98,120,164,132,120,66,7,254,138,78,216,95,198,138,239,132,136,79,134,168,82,64,96,2,7,254,64,5,220,85,68,204,87,68,208,114,132,198,129,128,224,16,65,4,85,67,140,18,79,212,16,99,156,84,73,4,16,65,4,0,79,196,33,67,212,37,68,84,169,65,148,16,66,4,65,72,8,126,65,20,29,66,84,88,65,20,100,143,254,10,33,148,42,132,198,0,79,196,33,67,212,69,74,148,16,66,20,192,128,0,82,72,146,4,2,72,69,72,98,24,14,64,4,7,248,8,128,136,18,130,16,18,137,40,87,194,40,95,233,0,55,197,68,151,193,68,87,194,68,4,142,72,68,133,254,68,142,232,85,196,74,100,140,72,4,128,72,17,1,16,17,7,188,17,3,184,53,69,148,145,33,16,17,1,16,9,47,84,47,226,56,69,103,148,214,229,172,87,71,94,72,65,4,63,128,64,255,232,66,53,129,16,127,193,16,59,141,86,17,1,16,18,1,32,83,229,80,88,133,0,87,197,84,85,65,84,23,193,0,17,225,18,41,68,88,145,64,146,125,32,90,9,66,144,17,0,144,65,7,84,175,239,56,165,111,148,166,239,164,7,227,68,200,65,4,9,8,144,73,3,254,137,5,216,27,130,212,201,36,144,73,0,144,2,11,254,85,65,116,16,67,252,64,12,248,64,5,252,74,129,100,17,130,224,98,11,254,34,2,248,0,3,252,36,66,100,9,131,4,8,0,64,255,226,16,18,0,192,51,140,6,63,130,8,32,131,248,33,2,16,250,130,68,42,35,16,231,194,4,32,130,80,162,4,16,1,15,144,34,130,68,41,47,8,39,194,4,58,142,16,65,128,8,32,143,254,36,135,252,4,15,254,40,132,244,145,34,160,6,7,158,127,192,64,127,232,66,53,128,160,49,140,70,63,0,32,28,0,48,33,10,16,186,138,68,249,34,8,171,205,132,136,143,176,8,128,4,33,2,40,58,132,68,137,39,8,39,207,132,32,130,176,48,130,8,18,1,32,37,2,136,114,106,0,47,130,8,37,2,32,33,2,16,137,5,16,34,143,68,41,39,0,39,207,4,34,130,16,64,136,8,2,8,248,66,1,254,40,133,68,111,173,72,69,4,32,69,129,134,0,7,252,0,67,252,0,71,252,4,2,72,69,0,160,49,140,6,113,5,124,81,6,254,84,69,162,83,198,68,74,132,16,66,132,198,33,2,16,34,138,68,169,42,128,171,202,132,186,140,144,8,128,8,32,2,254,81,8,252,68,66,84,245,65,84,165,68,40,36,64,130,63,130,8,32,131,248,4,0,64,127,192,132,8,65,4,34,132,16,4,0,160,17,2,136,196,96,0,63,128,16,18,0,192,4,0,32,132,5,188,17,73,84,90,194,0,95,205,36,95,197,36,95,193,4,2,14,16,79,196,32,68,142,252,64,68,168,106,140,170,18,162,6,34,2,222,40,175,170,45,103,0,111,234,146,175,226,146,47,226,130,1,15,126,33,2,32,68,71,254,218,165,168,90,135,170,74,161,6,66,4,222,120,170,170,13,100,0,79,228,146,79,230,146,79,224,130,24,6,60,65,69,20,106,192,0,127,196,68,127,196,68,127,196,4,32,65,4,1,79,212,9,68,148,41,65,20,40,68,68,129,64,8,2,3,254,34,10,222,104,162,170,109,106,254,41,34,254,73,40,254,130,5,252,4,8,136,95,193,4,42,140,168,74,164,170,18,98,0,34,2,206,42,175,170,42,167,170,106,170,234,170,226,40,34,130,72,8,0,64,4,0,0,127,192,0,0,1,16,16,130,4,64,64,0,8,0,144,8,143,254,16,1,72,37,2,96,68,68,196,147,192,0,9,7,252,26,2,200,87,128,0,127,193,16,31,1,30,127,0,16,4,142,68,191,234,80,165,10,84,165,142,146,139,33,82,32,224,0,33,3,222,82,128,68,17,15,254,16,1,32,18,130,50,46,36,30,4,7,254,160,164,68,247,165,200,99,5,108,90,6,248,66,5,252,114,5,60,86,70,152,86,101,80,95,198,16,71], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+54557);
/* memory initializer */ allocate([196,16,79,228,0,9,0,136,127,225,64,21,2,100,76,73,60,4,3,248,4,15,254,34,2,40,34,79,32,47,226,80,53,78,88,41,2,178,181,36,14,114,5,40,82,70,254,85,5,84,85,134,146,75,37,82,96,228,0,33,2,84,243,130,254,117,70,146,177,10,254,34,66,24,34,66,66,36,129,80,127,193,80,36,132,68,8,7,252,9,0,96,25,134,4,41,34,84,241,2,254,35,131,84,233,34,32,47,226,68,163,132,198,66,7,190,164,129,80,127,193,80,36,128,128,127,193,16,14,3,16,159,229,2,31,233,0,95,225,16,31,229,218,171,98,218,75,96,150,224,10,126,160,140,190,170,170,170,171,108,162,138,104,128,143,232,0,16,143,254,20,128,32,63,194,4,63,194,0,32,2,0,64,8,0,4,0,126,4,3,252,32,66,4,63,194,0,32,2,0,64,8,0,32,2,62,56,130,16,123,228,162,74,167,170,66,164,8,65,72,34,2,0,16,63,226,32,33,2,252,40,66,252,40,4,128,80,10,0,33,2,8,43,235,34,162,42,62,162,2,32,34,5,64,68,8,128,33,194,16,39,239,82,37,130,114,52,238,72,37,226,74,165,36,166,4,0,126,4,7,252,81,68,164,68,68,164,81,68,4,127,196,4,7,128,64,63,226,68,39,3,196,35,194,64,63,196,68,73,73,8,32,3,240,66,11,248,36,131,248,36,143,254,17,1,240,17,1,240,17,15,254,59,133,84,21,7,254,74,135,248,82,69,168,83,41,158,0,15,124,32,66,124,64,71,126,209,5,84,83,135,84,73,32,48,63,128,64,127,234,82,18,135,188,78,71,152,18,69,254,82,79,188,2,7,60,84,69,164,113,130,40,60,106,60,162,75,164,227,192,0,1,15,158,138,42,212,168,138,148,170,42,156,33,69,20,73,72,156,4,7,254,73,7,252,73,71,252,81,5,20,93,133,16,85,41,142,129,5,220,22,73,84,92,128,148,46,38,156,169,66,212,113,192,0,71,194,4,243,193,4,39,231,16,165,66,56,37,66,146,37,2,32,63,128,8,63,128,8,255,226,72,21,0,224,21,6,72,20,96,128,113,5,16,87,198,16,81,5,254,81,6,84,69,68,84,71,196,4,1,14,212,37,11,94,111,11,80,45,68,84,144,134,154,18,102,66,1,15,8,19,229,34,82,37,62,122,0,160,234,0,160,42,1,64,0,1,248,16,129,8,31,128,0,63,194,4,32,66,4,63,194,4,64,4,124,116,72,68,119,194,0,119,194,68,44,67,68,39,192,0,16,1,120,36,130,72,103,138,0,47,194,132,40,66,252,40,66,0,66,2,60,244,4,140,71,7,80,85,5,84,84,133,72,86,75,66,127,228,2,127,229,32,107,229,100,123,197,16,83,197,100,81,137,102,63,226,2,63,226,168,63,226,168,50,67,254,68,132,48,134,193,130,33,2,84,67,137,254,229,66,146,66,15,126,2,67,68,195,128,198,4,0,124,4,7,254,68,68,112,92,68,60,66,4,20,84,170,120,127,196,0,191,128,40,126,128,40,127,128,138,74,162,202,74,97,130,33,4,124,145,65,254,33,70,124,161,2,124,33,2,254,33,2,16,4,15,252,8,9,36,94,128,64,74,137,244,5,15,254,4,0,64,66,2,60,130,5,254,18,35,248,82,77,28,82,5,20,86,162,184,47,194,4,71,201,4,239,226,16,69,79,56,5,66,146,197,0,32,8,0,64,255,225,16,81,73,18,17,0,64,68,68,68,127,192,0,4,7,252,42,132,164,7,3,192,4,7,248,4,15,252,4,0,192,4,7,252,10,2,168,74,67,240,2,0,64,127,128,64,20,0,128,130,5,252,5,8,216,85,64,80,34,5,252,199,4,168,82,68,32,16,6,60,74,70,180,90,196,164,90,70,180,18,129,32,34,4,32,13,7,16,17,1,16,255,1,16,17,7,208,69,4,82,125,36,78,33,2,254,32,15,124,36,66,68,55,206,16,37,66,146,165,4,32,2,15,188,170,74,212,169,143,164,172,42,188,170,79,164,139,192,36,33,2,16,34,143,68,40,34,32,50,78,40,35,34,34,161,228,0,33,2,16,242,132,68,168,42,32,250,66,40,59,46,34,33,226,0,18,1,32,37,2,136,112,106,64,36,130,80,38,66,68,35,194,0,4,0,160,17,2,8,192,97,16,18,1,64,24,65,4,15,192,0,66,2,32,133,4,136,20,98,72,197,4,96,68,68,68,67,192,0,33,2,16,82,137,68,232,34,32,66,79,40,3,35,34,193,224,0,65,2,16,2,142,68,40,34,64,36,130,80,38,67,68,35,192,0,17,15,254,17,7,252,74,71,252,8,1,248,105,0,96,24,6,0,35,226,42,251,234,170,171,239,144,35,194,136,59,238,172,4,160,24,0,7,252,74,68,164,127,192,64,15,129,136,37,0,32,12,7,0,64,2,254,42,160,254,98,2,60,36,66,168,33,2,96,88,8,126,64,4,254,106,168,170,239,228,32,243,196,68,74,132,16,102,5,128,66,7,190,148,135,252,74,71,252,8,1,248,33,5,32,12,7,0,7,207,84,23,197,84,87,197,40,121,64,254,41,44,184,45,65,48,64,2,124,245,65,124,45,71,124,169,2,126,35,130,84,41,34,16,17,15,254,21,4,120,44,137,48,68,130,134,71,140,72,68,132,120,132,4,124,8,73,72,67,1,72,40,109,120,68,132,72,71,128,72,2,15,60,18,69,68,90,133,24,122,64,254,42,76,164,43,193,0,34,2,60,66,73,68,234,130,24,70,111,188,2,65,164,227,192,0,32,2,120,32,143,40,82,133,40,83,197,4,39,69,4,137,64,8,4,0,32,127,196,144,73,7,252,73,5,248,109,68,146,73,8,144,0,7,120,32,130,40,34,135,40,35,194,4,55,78,4,65,64,8,0,15,120,32,130,40,66,135,40,211,197,4,87,71,4,65,64,8,32,2,124,32,79,164,170,74,164,251,226,2,43,227,194,228,160,4,127,128,8,16,129,16,33,3,252,0,79,244,0,64,4,3,128,0,59,130,168,59,128,0,63,0,16,17,1,252,0,71,228,1,64,8,2,1,254,240,11,72,180,139,254,182,139,220,246,169,72,36,132,72,0,0,124,112,69,36,82,69,36,83,229,2,119,165,2,0,160,4,32,2,124,37,66,124,253,66,124,33,2,124,49,14,16,79,224,0,127,192,4,18,128,160,34,1,32,2,15,254,2,0,80,24,198,4,4,7,252,4,3,248,4,15,254,16,1,240,41,4,96,25,142,6,4,3,248,4,15,254,16,32,164,34,1,32,127,224,80,24,198,2,64,2,252,34,0,32,3,206,36,34,66,68,37,66,136,80,8,254,2,7,16,80,5,112,113,37,244,83,135,84,85,69,146,85,11,32,4,78,254,164,74,0,239,234,40,175,238,170,170,170,214,232,32,134,71,196,68,119,201,68,47,228,170,79,228,0,79,229,68,99,132,198,4,7,252,10,2,168,74,64,64,63,130,72,63,128,72,127,192,4,136,133,252,8,139,254,69,1,252,53,77,84,90,197,4,81,65,8,17,15,254,17,3,248,36,135,252,74,71,252,17,1,16,14,7,28,31,1,16,31,1,16,127,196,164,127,192,0,127,129,16,14,7,28,39,194,68,39,203,68,175,234,170,175,226,0,47,226,68,35,130,198,71,194,68,135,196,68,15,226,170,79,236,0,79,228,68,67,128,198,15,136,136,79,128,136,31,205,84,95,196,0,95,198,136,71,1,140,17,15,254,17,0,64,2,15,254,32,2,0,32,2,0,63,192,0,16,143,254,16,132,32,33,9,254,72,2,128,200,4,128,79,192,0,4,15,254,32,3,248,0,3,248,32,131,248,32,131,248,32,131,248,0,4,126,36,32,126,244,132,72,71,228,72,68,135,74,6,96,66,32,2,16,48,138,128,175,234,64,164,2,64,36,2,64,39,194,0,18,15,254,18,128,132,255,225,8,41,76,146,63,192,144,17,2,16,18,137,40,95,226,40,80,9,124,53,69,84,151,193,84,85,66,124,17,15,254,17,3,248,9,0,96,127,224,162,50,76,32,10,0,64,66,132,40,119,232,40,112,2,124,245,66,84,39,195,84,37,64,124,7,135,128,8,0,248,120,0,128,15,207,128,8,32,130,7,224,0,63,192,8,13,0,32,1,7,254,10,33,36,34,12,32,10,0,64,66,4,206,106,168,170,234,164,170,234,164,234,74,198,40,68,128,136,8,7,60,66,68,164,74,68,164,90,70,180,74,129,32,18,2,32,17,15,254,17,0,72,4,67,254,36,130,80,34,68,84,72,200,4,127,196,4,95,68,4,95,64,0,63,130,8,63,130,8,63,130,8,32,2,126,36,47,218,168,10,188,170,74,188,186,66,60,34,66,60,17,14,32,87,194,68,215,195,68,215,195,40,210,161,42,84,98,128,24,6,60,81,69,20,106,192,0,63,130,8,36,130,72,11,3,8,4,0,64,8,1,16,34,4,64,8,1,16,32,135,252,32,64,0,2,15,160,36,2,126,42,71,36,34,130,40,57,14,40,68,65,130,17,1,16,17,7,222,18,67,164,53,69,20,80,137,20,17,65,34,36,2,126,40,15,124,36,71,84,111,234,84,164,66,126,33,66,8,250,2,62,252,10,188,170,77,180,143,239,172,138,72,190,248,72,140,63,128,64,127,233,82,32,3,254,64,9,252,20,71,254,34,67,252,36,66,254,36,74,252,180,74,124,33,2,254,83,132,84,137,32,16,71,130,72,4,136,134,64,1,124,36,76,68,66,132,16,66,128,198,0,3,252,34,67,252,32,2,252,40,66,252,40,68,252,72,72,252,34,130,254,34,143,56,82,133,56,81,5,254,35,133,84,137,32,16,68,68,40,119,200,16,7,199,16,39,207,16,47,226,16,50,130,68,64,7,252,128,3,248,40,130,72,255,228,136,68,135,252,0,128,48,16,128,144,127,192,64,63,128,64,255,224,64,127,192,160,49,140,6,2,14,32,175,138,32,226,11,254,167,10,168,234,65,34,2,0,32,4,15,254,145,37,16,87,199,16,31,239,16,83,133,84,153,33,16,33,2,16,39,207,16,81,5,254,145,5,56,37,69,146,145,0,16,32,2,126,36,175,126,84,5,94,85,37,94,37,37,94,133,32,158,64,2,252,64,68,4,64,68,4,64,68,4,64,68,4,65,68,8,64,2,254,0,40,66,130,40,42,136,106,146,201,40,114,128,168,4,20,1,46,32,34,66,100,42,66,36,34,66,36,34,66,36,162,68,17,15,254,17,0,60,122,68,188,122,68,188,122,64,68,4,64,140,17,7,252,17,7,252,64,65,240,0,7,252,12,131,112,10,131,102,34,130,254,34,143,254,40,38,124,114,10,212,163,130,84,41,34,48,3,195,164,43,195,164,43,195,164,4,192,0,63,194,148,41,71,254,79,132,16,98,9,252,226,4,160,228,5,252,85,71,84,95,224,0,39,194,8,161,4,254,161,2,80,98,10,254,42,162,170,191,228,0,17,7,188,17,3,184,85,73,18,4,0,252,16,130,144,6,7,128,63,128,16,2,7,252,4,1,64,8,3,248,42,130,168,42,143,254,1,14,16,169,42,84,225,10,254,161,14,56,165,74,146,225,0,16,248,130,42,253,202,136,171,237,156,142,175,168,138,136,160,253,224,128,2,7,254,72,135,222,93,198,170,69,5,220,69,7,222,69,8,80,2,7,254,72,135,254,93,198,170,82,68,168,127,228,168,146,64,32,1,4,146,37,64,16,239,226,56,37,66,146,33,5,16,143,224,0,1,8,148,69,129,16,199,197,144,75,132,212,73,6,144,72,1,126,2,7,32,19,225,66,117,68,144,65,7,84,21,33,146,85,2,32,4,0,64,36,129,80,4,7,252,14,1,80,36,132,68,4,0,64,24,14,32,33,66,4,250,66,40,118,166,178,162,2,36,37,194,128,3,199,192,8,130,80,16,3,248,36,130,72,36,128,162,18,38,30,130,4,16,4,73,68,84,130,72,45,77,82,70,68,68,75,193,0,4,7,254,69,41,32,85,73,242,100,3,248,36,131,248,4,71,254,4,7,254,72,40,80,50,69,74,15,131,0,4,2,72,36,131,248,127,229,10,159,129,8,31,128,128,255,226,72,127,202,74,37,128,64,33,2,124,36,79,124,36,71,124,97,10,254,169,34,154,41,66,16,0,14,252,168,74,252,233,10,144,175,206,144,169,42,138,234,96,194,33,4,124,148,78,124,36,68,124,241,0,254,57,44,154,9,64,16,127,196,4,95,69,4,31,2,32,127,194,68,63,192,160,18,38,30,16,1,248,33,4,32,191,130,72,36,131,248,10,1,34,34,44,30,33,2,16,59,196,148,145,71,212,85,69,84,125,65,44,40,36,126,34,2,60,36,66,136,247,197,84,85,69,124,81,2,42,84,168,134,32,2,254,65,9,32,239,226,170,75,175,170,11,163,170,207,224,130,0,15,254,4,0,128,127,196,164,78,68,164,78,68,164,127,196,4,17,15,254,17,0,0,63,130,72,36,131,248,36,130,72,63,128,0,34,130,40,47,239,40,32,2,124,53,78,84,39,194,84,165,68,124,2,135,254,82,133,0,119,197,84,85,71,124,85,69,84,119,192,68,17,15,254,34,13,124,84,78,124,52,77,124,50,141,42,84,162,134,25,14,16,37,66,82,245,34,144,113,10,146,32,66,8,35,2,192,0,139,136,104,131,172,42,171,202,104,130,138,56,68,24,134,1,128,4,0,32,63,226,16,33,2,254,41,34,146,47,228,146,73,40,254,33,2,16,33,15,84,85,37,146,81,5,18,32,69,24,70,9,128,17,15,254,17,7,252,74,71,252,2,131,254,34,67,24,73,168,38,0,15,254,0,0,64,36,66,72,37,4,160,10,1,16,32,140,6,127,132,8,64,135,248,68,4,64,127,196,32,66,69,20,96,196,4,47,194,132,40,79,252,41,3,144,239,194,144,41,34,138,172,100,130,0,0,0,63,130,168,42,130,168,42,130,168,42,130,168,255,224,0,32,135,200,129,7,222,103,69,84,253,69,84,76,135,212,5,65,162,40,2,94,48,42,162,169,42,254,170,162,170,41,34,170,40,34,134,64,2,252,4,68,68,95,69,84,85,69,244,68,68,116,93,68,12,7,207,68,148,73,124,244,73,68,151,207,68,148,64,68,9,65,8,39,226,66,35,207,164,171,202,164,251,194,16,47,227,128,234,64,66,1,7,124,84,69,84,84,197,64,87,229,2,119,160,2,1,64,8,33,2,16,123,228,34,245,66,8,33,15,190,37,34,18,41,227,18,8,0,128,31,131,8,73,0,96,24,2,248,200,128,136,8,128,248,4,0,160,17,2,8,223,96,0,123,196,164,74,71,180,2,128,32,30,228,170,38,96,170,227,34,72,41,67,98,33,131,100,33,128,96,34,130,254,34,143,124,36,66,124,52,78,124,33,2,254,162,132,198,17,15,254,17,3,248,36,143,254,17,2,232,196,99,248,4,0,192,16,143,254,18,135,254,72,135,222,93,198,170,72,133,254,70,73,188,34,130,254,34,143,124,36,71,124,108,74,124,161,2,254,34,130,198,114,133,254,82,135,124,84,69,124,116,69,124,81,5,254,82,139,70,2,7,254,73,7,254,91,134,212,73,5,252,68,4,252,84,72,124,4,7,254,73,7,252,91,134,214,67,133,224,66,7,254,66,8,96,4,7,252,73,7,252,91,134,212,95,133,72,95,132,168,83,42,30,33,2,16,47,239,16,33,2,124,49,14,56,37,66,146,161,4,16,4,0,64,255,224,64,4,7,252,14,1,80,36,140,70,4,0,64,17,15,254,17,3,248,32,131,248,32,131,248,4,7,252,10,3,24,127,197,84,127,192,64,127,192,64,255,229,20,4,3,248,4,15,254,124,133,72,124,165,72,127,225,8,124,129,8,29,78,20,10,74,66,130,4,32,31,200,32,66,0,248,34,4,112,202,133,36,66,0,32,136,133,252,8,137,252,80,65,252,48,77,252,66,7,254,69,1,140,4,7,254,145,39,252,32,131,248,32,131,248,4,7,252,10,3,24,112,5,254,81,5,32,103,197,68,84,69,124,100,68,68,71,196,68,4,68,254,36,64,124,228,66,124,33,2,254,51,130,84,9,32,16,8,1,16,63,128,72,20,3,252,68,0,64,255,224,64,4,0,64,17,7,252,17,1,240,17,1,240,4,15,254,14,1,80,100,192,64,32,2,124,38,79,84,36,66,254,54,78,84,36,66,126,160,68,24,17,5,16,81,7,144,151,193,144,49,13,16,17,1,126,16,1,0,8,0,64,255,224,0,63,130,72,36,131,248,36,130,72,63,128,0,32,2,124,38,79,84,84,69,254,86,69,84,84,66,126,80,72,152,31,129,72,18,129,8,255,226,72,34,130,8,63,192,8,5,0,32,17,15,254,17,3,248,36,131,248,8,15,254,21,2,232,196,99,248,17,15,254,17,3,248,36,143,254,49,133,244,145,33,240,17,1,240,17,15,254,17,3,248,36,131,248,8,15,254,36,135,252,164,162,88,17,15,254,17,3,248,36,131,248,8,15,254,36,141,244,9,33,48,17,15,254,17,3,248,36,131,248,8,15,254,32,133,84,166,160,208,4,0,64,4,15,254,14,1,80,21,2,72,68,72,66,4,0,64,0,3,248,32,130,8,63,130,8,32,131,248,32,130,8,63,130,8,1,7,16,87,197,16,127,229,68,89,39,16,87,197,16,113,0,254,17,1,16,81,7,190,146,65,100,26,71,40,17,1,40,20,65,130,26,14,124,36,66,124,252,66,124,113,6,84,168,162,48,32,194,112,4,0,160,49,141,246,17,1,240,1,131,224,4,7,252,4,0,192,0,1,238,234,170,170,190,170,172,170,171,234,234,168,172,18,130,104,1,0,16,239,234,146,169,42,146,170,170,198,232,42,130,8,160,132,65,4,16,113,8,124,117,66,84,37,79,108,36,66,196,53,66,72,251,194,164,42,143,168,43,2,168,250,66,164,75,68,168,170,1,32,64,5,238,74,174,170,190,170,172,170,171,234,74,166,172,146,130,104,33,2,16,65,9,124,229,68,84,133,79,108,4,67,68,197,64,72,32,3,252,64,11,248,0,143,200,36,130,136,46,164,42,74,104,66,0,7,248,16,129,16,18,1,60,16,65,4,32,66,4,66,136,16,32,2,254,34,47,36,82,133,46,82,37,34,36,37,66,137,65,8,0,79,228,17,226,4,254,74,180,170,202,164,170,74,36,138,72,76,4,7,252,10,1,16,32,141,246,0,7,252,4,2,72,84,64,128,4,15,254,8,7,252,81,68,164,95,68,68,127,196,68,69,68,8,0,3,248,36,131,248,36,131,248,8,7,252,8,65,4,33,68,8,2,128,36,247,225,72,156,133,126,84,130,126,36,133,72,135,224,64,4,15,254,21,15,254,170,163,184,10,7,252,10,3,20,212,129,134,34,2,62,46,15,40,33,2,42,52,110,254,34,130,42,164,164,134,2,7,16,95,229,0,116,69,108,85,71,84,86,197,68,87,203,4,34,2,16,47,235,0,160,10,170,169,34,146,42,162,130,47,226,0,64,2,252,68,71,252,68,69,244,85,69,84,87,68,68,69,68,8,66,2,60,2,8,248,88,130,248,40,140,248,66,5,252,66,0,32,0,0,252,232,74,252,168,10,160,170,78,168,147,1,34,34,36,30,64,228,240,114,9,148,20,132,32,95,228,72,68,133,48,100,132,134,4,0,64,4,7,252,68,68,68,74,69,20,96,68,4,65,68,8,68,132,72,95,142,78,191,75,84,191,74,84,174,133,84,165,73,98,34,68,168,251,0,34,121,228,128,122,68,168,123,36,162,105,229,0,32,2,126,36,47,126,84,5,82,85,69,88,37,37,82,132,224,128,63,128,64,255,233,82,4,3,152,32,131,184,32,131,250,18,38,30,16,1,32,44,194,132,108,202,132,47,194,80,37,2,82,41,35,14,64,2,252,8,72,132,79,193,128,42,76,168,75,4,162,82,34,30,0,3,252,32,66,4,63,194,0,36,130,80,38,36,66,67,232,0,32,66,68,36,79,100,37,66,84,52,78,84,38,66,74,161,36,32,20,1,64,39,226,130,113,74,16,37,66,82,41,34,16,37,2,32,127,196,144,127,196,144,68,7,252,72,5,248,104,132,248,64,7,254,112,165,254,80,71,116,80,69,116,112,69,116,85,69,116,82,107,82,8,132,80,47,192,32,234,130,168,42,130,248,34,2,64,104,9,254,78,226,34,14,232,136,78,226,34,74,172,102,70,100,170,66,32,102,17,15,254,17,7,252,4,2,124,36,15,254,32,3,252,84,74,172,33,2,16,33,15,158,33,2,16,55,206,68,36,66,68,167,196,68,16,1,0,63,194,32,66,1,252,18,1,32,127,224,32,2,0,32,7,239,194,39,226,64,69,71,126,213,69,126,90,135,170,19,66,34,36,130,252,244,130,254,36,131,180,111,202,80,47,194,16,175,228,16,33,2,16,34,143,68,41,34,124,48,142,16,34,66,146,180,68,124,4,0,160,17,2,72,192,99,248,1,0,160,4,133,68,81,72,240,34,2,16,39,207,68,87,197,68,87,197,80,37,69,72,134,64,66,1,15,136,35,239,162,171,234,162,219,232,168,250,168,164,250,64,50,8,1,0,63,2,16,41,2,48,32,3,252,0,79,228,1,64,8,63,194,4,63,194,32,35,35,244,38,130,168,50,68,36,74,40,64,32,2,124,36,79,124,36,66,124,49,14,16,39,194,16,161,4,254,127,193,16,31,1,16,31,1,28,127,0,16,251,228,146,48,204,178,17,15,254,34,135,124,81,7,56,65,7,240,2,7,252,4,0,192,1,0,16,229,202,80,175,234,0,165,74,84,230,202,68,7,192,4,79,196,72,119,136,72,231,132,78,79,142,8,93,197,84,104,133,84,66,4,124,116,72,124,228,68,124,244,68,124,65,6,254,69,64,146,64,2,248,136,132,248,8,130,248,66,12,248,66,4,32,95,192,0,20,1,64,39,230,146,161,2,84,41,34,48,4,69,34,144,160,248,33,2,8,39,239,66,32,7,126,104,138,8,32,130,8,34,130,16,17,5,8,39,229,66,144,1,126,48,133,8,144,129,8,82,130,16,17,233,66,88,65,40,46,69,30,222,166,136,126,228,168,86,130,94,4,0,32,63,226,2,64,1,252,2,0,32,2,0,32,10,0,64,34,2,16,47,239,130,32,2,124,49,14,16,33,2,16,165,4,32,66,2,16,15,232,130,64,1,124,33,12,16,65,4,16,69,0,32,4,0,64,36,3,248,36,4,64,4,15,252,4,0,64,4,0,64,32,2,124,33,79,20,33,66,124,50,78,36,34,66,36,175,228,0,64,4,124,113,72,20,113,66,124,34,79,36,34,66,164,55,226,0,32,2,124,65,73,20,225,68,124,130,79,36,2,67,36,207,224,0,1,7,16,95,229,146,114,5,48,86,167,172,82,133,36,83,43,32,2,8,32,95,225,34,130,5,82,37,68,200,212,132,68,70,32,64,4,0,64,127,196,132,8,1,72,53,5,32,145,1,72,24,97,0,0,7,252,4,3,248,4,7,252,17,15,254,17,1,16,33,4,16,32,2,124,34,79,164,74,68,168,74,133,16,34,133,40,132,64,130,32,2,62,249,34,146,73,67,8,73,64,162,127,193,4,33,68,8,32,2,62,249,36,148,72,131,20,74,40,0,4,69,34,144,160,248,8,0,128,8,15,254,17,1,16,33,1,32,12,0,160,49,140,4,0,238,240,165,74,40,239,202,32,191,234,64,235,192,164,17,128,102,7,128,64,127,196,68,95,4,72,67,133,252,80,7,254,80,9,252,4,0,32,63,226,0,167,198,64,36,6,254,164,2,64,39,196,0,64,5,238,74,174,170,94,196,170,106,173,234,74,196,168,82,142,104,47,227,16,175,234,146,165,74,0,47,226,16,47,226,170,42,162,134,39,234,144,119,226,18,245,66,0,127,234,16,47,226,170,42,162,134,4,68,254,36,64,16,239,226,16,34,2,124,42,67,36,35,192,36,2,128,202,228,139,254,164,138,72,166,170,204,228,136,74,21,96,162,2,15,160,131,233,66,209,74,16,161,13,40,130,136,68,244,64,130,1,15,188,130,72,52,210,74,40,163,237,2,135,168,2,248,160,4,0,15,188,130,73,36,212,106,0,167,205,36,138,136,16,250,128,68,17,15,254,17,2,124,117,66,124,117,66,124,241,7,254,169,34,186,0,0,252,232,10,128,172,74,168,169,10,144,234,138,196,8,0,252,23,193,84,39,198,84,167,194,16,47,226,146,43,162,138,40,34,134,64,2,252,8,8,196,74,129,144,41,12,168,76,68,128,79,192,0,4,64,72,229,235,242,165,42,82,167,234,210,229,40,82,21,224,146,0,143,136,138,136,168,250,130,40,34,139,168,162,139,164,228,64,130,28,14,62,162,171,42,171,234,160,170,42,162,169,234,64,163,2,14,32,130,16,251,202,164,170,74,164,171,202,164,186,66,36,35,194,0,33,2,32,39,195,68,172,74,68,167,194,68,36,66,68,39,194,68,251,194,16,115,194,16,251,224,0,63,130,72,63,162,2,31,224,0,33,2,32,39,207,68,36,66,68,55,206,68,36,66,68,167,196,68,34,130,40,46,239,40,34,130,238,50,142,40,46,226,40,162,132,40,16,133,16,83,229,42,123,228,42,115,229,16,82,133,126,80,137,8,34,132,40,142,225,40,34,134,238,162,130,40,46,226,40,34,130,40,4,9,156,72,129,220,136,132,156,28,130,190,200,133,8,80,130,8,129,197,224,16,201,112,85,3,82,85,77,72,84,133,68,22,34,64,42,143,94,106,202,74,42,143,254,34,133,196,132,35,248,4,0,192,1,201,224,82,64,168,191,228,168,18,66,250,202,132,248,74,128,248,8,3,248,40,130,72,255,226,136,37,132,0,63,130,168,42,143,254,35,135,168,76,111,184,106,133,144,130,135,252,16,3,248,80,129,248,0,135,40,82,69,68,120,37,124,81,71,20,82,69,36,117,64,136,0,143,170,169,202,136,171,239,136,168,138,190,168,143,136,136,128,8,16,69,68,56,65,20,125,65,20,17,79,244,17,66,4,33,68,8,32,10,140,119,2,64,116,2,124,253,66,84,37,68,136,73,73,34,3,131,192,32,2,0,63,194,32,34,15,254,0,0,32,1,0,8,4,7,254,69,4,72,127,228,160,74,68,168,83,42,226,195,224,0,4,3,252,16,128,144,127,228,66,191,192,128,15,128,136,18,130,16,33,2,126,250,66,126,117,34,8,251,194,16,113,202,164,34,66,76,1,7,16,85,69,56,113,5,124,81,7,254,81,5,16,81,11,16,72,132,136,72,142,158,94,164,170,106,172,170,75,101,32,82,46,30,4,0,64,231,234,130,183,170,74,167,170,74,228,74,64,4,32,62,32,66,4,125,72,84,117,69,84,85,71,84,77,68,4,69,67,200,36,2,64,39,202,132,183,74,84,167,66,68,84,197,64,132,32,62,66,2,32,243,225,66,35,166,170,178,162,186,34,98,32,34,34,30,2,7,32,87,197,132,119,66,84,55,74,68,164,203,64,228,32,62,72,2,128,15,201,4,79,64,148,47,68,148,200,132,130,72,32,126,0,0,252,225,10,32,166,138,164,178,74,32,226,10,0,31,224,0,0,7,126,80,133,16,115,69,82,89,39,16,81,5,0,87,235,0,34,2,16,39,194,0,244,66,40,47,226,0,55,206,68,68,64,124,17,7,28,17,7,28,17,7,92,18,15,254,10,1,148,42,132,196,1,15,136,139,202,128,170,74,152,175,234,128,35,197,36,74,72,60,1,7,136,75,197,0,98,69,24,79,228,128,107,197,36,66,68,60,0,15,188,32,79,132,168,74,188,218,8,160,250,8,162,250,40,158,32,3,252,80,69,244,212,69,244,85,69,84,85,69,116,84,102,66,130,4,32,63,232,32,95,195,36,82,77,36,83,69,40,66,0,32,1,0,254,225,10,68,175,234,68,160,10,254,233,42,146,2,128,68,17,1,16,32,133,244,137,33,16,37,4,32,63,130,168,42,143,254,0,15,124,33,2,84,67,135,16,223,229,16,81,7,16,65,0,16,32,2,124,33,15,84,35,131,16,111,234,16,33,2,16,161,4,16,4,7,252,17,1,240,0,3,240,2,0,64,4,1,64,8,5,36,132,37,244,4,136,224,80,34,228,42,140,226,81,36,164,95,128,16,16,15,226,16,71,200,1,39,196,68,135,210,68,66,136,29,14,32,16,143,254,20,136,248,88,128,112,26,238,248,34,2,248,98,9,254,32,2,238,42,175,170,46,231,170,106,170,238,170,162,170,51,34,102,14,239,170,42,162,238,74,167,170,222,229,170,90,167,170,11,33,102,33,7,190,148,132,252,20,142,112,58,226,248,34,2,252,82,8,254,114,5,250,82,71,120,80,37,116,117,133,112,88,165,82,95,203,8,0,7,188,74,68,164,123,196,164,74,71,188,74,68,164,76,73,140,0,78,238,170,170,174,238,170,168,170,238,226,171,234,162,178,166,100,33,2,252,242,2,252,36,3,254,234,131,116,34,34,248,162,4,32,4,79,40,47,226,40,66,135,170,214,197,40,82,135,40,79,224,0,32,2,126,32,130,16,251,66,82,41,34,16,57,14,0,79,224,0,4,143,72,36,130,74,70,199,72,212,133,72,84,135,74,70,160,70,63,128,64,127,197,84,128,135,190,73,71,190,64,135,158,168,131,136,32,130,72,36,143,72,36,162,122,52,206,72,36,130,74,166,164,70,32,130,8,39,239,74,36,130,126,53,46,82,37,66,136,169,69,34,120,132,190,121,68,62,120,138,190,56,128,0,63,192,68,9,65,8,0,7,188,17,3,184,17,7,188,0,2,36,58,130,48,42,35,30,2,143,168,170,170,172,171,143,168,170,138,168,170,175,170,139,160,38,1,0,32,239,202,148,175,202,164,175,202,64,233,9,254,1,0,16,112,133,16,87,231,74,87,229,82,119,229,40,84,133,254,80,139,8,2,3,254,33,10,16,111,226,146,111,202,164,42,133,16,82,138,198,2,0,32,63,226,34,34,3,252,40,66,136,37,4,32,77,139,6,0,7,252,74,4,160,74,4,164,74,69,28,96,4,0,127,224,0,2,0,16,63,234,0,111,226,16,99,74,82,41,4,124,68,72,124,32,130,228,74,228,160,206,164,132,80,229,228,106,228,164,78,68,164,0,3,252,32,67,252,33,2,144,41,34,244,73,132,146,141,32,142,120,132,190,121,68,8,187,226,136,58,135,254,0,3,252,16,129,248,66,7,188,164,128,32,63,194,4,63,194,0,63,229,82,95,233,82,18,1,16,47,226,130,111,230,128,175,227,170,47,226,170,42,162,134,1,1,16,17,1,16,31,225,0,16,1,248,16,130,8,32,132,8,2,14,16,47,234,130,175,232,128,239,226,170,239,226,170,170,165,6,251,194,36,250,74,180,170,207,172,3,79,164,34,71,68,164,102,130,79,226,40,143,228,170,15,226,0,71,204,0,79,228,84,73,32,48,248,98,56,250,138,172,250,160,42,114,160,42,250,135,42,170,230,72,127,192,160,127,196,164,127,192,0,63,128,0,255,226,72,68,64,192,68,133,88,78,142,94,95,69,84,117,77,244,85,69,72,85,77,34,146,133,78,255,43,170,214,73,42,63,130,8,63,130,8,63,130,8,36,66,40,32,15,124,34,131,40,111,234,40,34,130,72,164,132,136,19,229,8,93,5,62,254,33,42,82,165,106,138,161,8,33,68,34,17,2,8,127,73,18,37,4,32,63,130,72,36,130,168,17,2,8,0,3,240,33,2,16,63,0,0,243,201,36,146,73,36,243,201,36,0,143,190,82,165,62,114,165,62,112,5,126,89,15,62,16,33,12,1,129,224,16,1,0,31,193,32,18,7,254,0,0,128,16,2,0,32,2,124,33,2,84,251,130,16,47,226,16,57,14,16,65,0,16,17,15,254,17,0,0,127,192,64,36,129,80,255,224,64,4,0,64,17,15,254,17,4,0,47,232,16,69,65,56,47,238,16,33,2,16,0,3,248,4,2,72,21,0,64,127,192,64,4,0,64,4,0,64,17,193,112,33,6,254,161,2,124,32,1,248,16,129,10,32,164,6,136,5,126,2,15,184,84,133,104,85,143,200,84,133,90,86,169,6,0,4,254,33,0,146,229,66,16,47,226,16,41,3,16,33,0,16,63,226,2,63,226,132,36,130,252,36,130,72,63,228,72,72,137,8,32,130,8,39,226,74,252,130,124,37,66,212,53,78,136,73,65,34,66,2,40,10,72,160,79,225,32,39,238,82,37,66,136,41,65,34,16,1,62,124,133,80,83,231,162,74,166,170,82,165,42,169,64,34,65,2,254,137,36,252,10,68,152,146,64,64,127,224,136,7,3,140,0,143,136,39,226,74,68,135,124,213,69,84,85,71,72,73,65,34,34,4,64,239,202,148,175,206,164,175,202,34,229,74,94,9,33,14,64,130,16,39,192,68,228,66,124,36,66,68,39,194,68,80,8,254,16,69,72,59,225,34,126,33,34,59,229,98,146,33,34,19,225,34,16,71,196,1,68,84,41,79,244,1,71,212,69,68,68,125,64,8,17,1,16,17,7,208,17,129,84,25,39,16,17,1,16,81,2,16,65,68,16,119,200,16,119,194,84,39,207,84,39,194,212,53,66,76,9,0,144,17,1,16,49,133,20,145,33,16,17,1,16,17,1,16,17,15,254,17,0,72,127,192,64,63,130,72,63,130,72,63,130,72,34,15,252,34,7,252,138,71,244,8,71,244,73,71,244,73,68,60,17,15,254,21,0,32,127,193,16,10,15,254,0,3,248,32,131,248,17,15,254,18,132,252,34,8,248,90,130,248,202,132,248,74,132,152,33,66,18,47,226,16,247,194,84,39,194,84,55,206,84,69,64,76,17,1,16,17,15,208,17,131,148,53,37,16,81,9,16,17,1,16,127,196,84,95,68,68,95,69,84,95,69,84,95,69,84,81,71,252,33,1,32,255,197,40,51,15,254,0,3,240,33,3,240,33,3,240,65,66,16,15,224,16,151,197,84,23,194,84,231,194,84,37,66,76,68,66,40,15,224,170,230,194,254,32,2,124,44,67,124,36,64,124,7,206,68,167,202,68,175,238,40,175,234,84,173,110,56,5,64,48,143,132,136,15,136,136,95,194,80,95,236,136,90,198,114,74,128,96,72,4,158,253,36,146,121,228,146,121,36,158,253,32,34,74,168,68,73,4,144,253,4,190,122,36,202,120,132,136,253,64,20,74,72,66,32,2,254,34,143,40,47,231,170,106,170,206,168,34,130,47,226,130,0,160,8,63,226,8,36,130,122,36,163,252,68,133,106,165,96,194,8,7,248,8,3,240,9,15,252,9,1,0,255,193,32,12,7,56,4,0,64,4,0,64,7,199,192,4,0,64,4,32,66,4,32,62,2,9,252,66,1,248,2,131,254,66,140,64,95,196,136,71,1,140,130,5,252,10,137,36,69,2,172,82,44,168,71,4,168,82,64,96,34,1,32,67,194,224,2,66,92,68,7,252,14,1,80,100,192,64,72,2,190,136,164,234,56,160,138,42,172,210,73,36,34,68,160,132,17,1,16,127,193,16,31,1,16,31,1,16,127,192,0,17,2,8,36,130,72,47,207,72,39,135,72,111,138,72,191,226,0,36,130,132,4,0,64,63,128,160,17,7,254,0,131,200,36,131,200,2,128,16,16,129,8,19,229,200,80,133,126,82,37,34,93,79,8,67,64,194,0,143,136,171,234,136,168,143,190,168,10,136,171,239,136,136,128,126,32,130,8,35,234,136,169,74,190,168,42,186,170,171,186,232,32,6,2,7,16,95,229,40,82,135,16,82,133,198,114,133,40,82,139,72,4,0,32,127,193,16,10,0,64,27,6,12,17,1,16,17,2,16,68,2,126,10,79,126,34,66,60,58,66,188,74,68,254,170,65,66,64,2,6,3,143,32,18,2,62,114,74,164,34,66,68,36,66,132,64,2,60,2,79,40,19,2,40,114,74,164,35,66,40,34,2,32,225,2,124,34,138,68,175,239,4,23,67,84,213,65,116,80,66,12,16,1,30,124,33,2,17,239,208,17,5,18,93,37,14,80,11,254,4,2,72,36,131,248,0,3,248,0,131,248,32,2,4,32,65,252,16,1,0,63,194,0,64,1,240,2,0,64,8,1,4,16,64,252,4,0,64,10,1,16,100,192,64,39,130,64,36,2,64,255,192,0,4,0,32,63,194,4,32,67,252,32,2,252,72,68,132,143,192,132,16,7,222,16,167,202,17,39,210,18,96,64,127,224,160,17,6,12,4,15,64,37,226,106,76,167,74,212,165,106,84,167,18,82,160,68,0,7,188,74,71,188,4,135,252,10,3,24,192,103,188,74,71,188,32,3,248,64,11,240,0,7,240,1,0,18,0,160,10,0,96,2,68,2,124,40,0,120,97,2,32,36,66,68,35,197,0,143,224,0,4,0,32,127,192,128,16,131,252,9,64,144,127,224,144,17,2,16,68,2,124,8,9,120,64,1,120,32,140,8,64,164,10,64,96,2,2,4,16,47,232,0,80,65,68,36,78,40,34,130,16,47,224,0,2,4,32,39,224,64,232,2,124,32,66,8,41,3,34,34,32,30,34,2,32,35,207,68,40,130,32,52,206,68,38,194,68,167,196,68,33,2,16,50,138,168,164,74,186,32,2,124,36,66,68,39,194,68,66,2,32,133,4,80,40,133,116,64,12,248,72,132,136,79,128,136,4,3,248,10,1,16,127,196,68,148,1,248,36,7,252,4,0,64,32,2,12,39,15,16,33,2,144,55,238,16,33,2,16,161,4,16,32,194,112,65,7,144,129,7,126,33,15,144,33,2,144,49,2,16,64,4,60,114,72,36,114,66,70,248,2,60,42,67,36,35,192,36,0,0,56,60,0,64,4,0,64,127,192,64,4,0,64,4,0,64,64,194,112,33,0,16,239,226,16,33,2,16,33,5,0,143,224,0,33,3,222,82,136,132,4,0,160,49,141,246,4,2,36,16,135,254,16,1,12,39,2,16,97,10,16,47,226,16,33,2,16,33,2,16,8,136,80,95,192,80,223,196,84,95,228,84,95,198,216,85,64,80,33,15,144,34,15,190,140,15,190,136,79,136,33,15,162,35,226,0,249,10,144,250,138,168,252,66,18,248,130,60,56,78,8,8,138,80,33,2,20,121,36,30,247,2,30,39,15,148,32,162,154,50,98,66,66,68,36,114,72,126,114,66,36,251,194,36,42,67,60,34,64,0,32,129,16,127,192,0,60,66,84,61,66,84,61,66,84,36,66,204,8,137,220,72,131,222,136,133,84,34,36,252,200,68,252,72,64,252,2,9,252,82,65,252,194,7,254,72,132,248,72,4,248,104,137,254,66,130,32,3,200,224,82,1,60,46,2,40,225,34,26,34,98,66,1,10,124,85,64,124,25,12,254,74,68,188,90,6,188,74,65,126,16,143,240,34,5,60,122,129,40,122,129,72,4,7,252,4,15,254,4,4,68,127,192,16,73,4,158,254,36,170,124,132,136,121,68,162,8,0,128,16,1,252,32,66,72,68,0,64,10,0,160,17,6,12,68,130,136,254,226,138,127,34,164,255,66,164,254,70,196,170,162,146,17,1,16,18,135,228,20,35,60,58,69,100,83,73,40,18,33,30,1,14,16,162,138,68,168,42,120,164,138,72,230,138,80,4,64,60,2,7,16,87,197,68,114,133,68,80,7,124,81,5,16,95,235,0,32,129,16,10,7,252,4,3,248,4,7,252,10,1,34,34,44,30,65,4,254,65,4,84,227,132,254,64,4,254,72,38,186,202,160,254,17,15,254,4,7,252,36,143,254,0,3,248,32,130,232,42,131,248,0,15,124,20,65,124,113,4,124,133,79,124,17,1,20,95,226,2,34,2,32,37,15,72,40,67,122,100,138,72,38,130,80,164,68,60,32,194,112,33,207,112,33,199,114,97,234,68,185,130,204,59,162,206,66,132,200,100,136,74,30,206,88,78,142,200,84,132,84,101,68,98,16,143,232,0,231,200,68,135,254,1,47,242,130,203,164,170,171,178,33,2,146,37,75,16,175,202,68,167,194,68,39,194,68,37,66,72,32,2,12,39,15,16,47,230,40,116,74,170,162,130,40,36,130,136,2,142,36,167,234,72,239,235,72,167,238,72,167,234,64,234,160,170,3,199,192,4,7,254,10,3,24,192,97,16,17,1,16,33,4,16,16,193,112,33,2,254,98,138,68,40,34,40,34,130,72,36,130,136,0,0,0,247,226,8,33,2,32,35,226,130,48,46,2,65,64,8,80,143,170,81,199,8,35,239,162,171,239,162,35,239,162,34,162,36,65,132,224,67,142,224,67,197,226,97,236,68,89,132,204,123,172,206,64,7,118,193,37,90,43,109,146,3,111,218,81,37,54,80,8,254,32,130,42,33,202,136,171,234,162,171,234,162,171,235,162,202,160,36,17,1,146,37,66,16,103,202,68,39,194,68,39,194,68,37,66,72,4,0,32,127,228,146,144,128,0,123,225,8,17,225,194,112,162,4,32,2,0,39,226,18,249,34,18,33,34,82,42,35,34,37,64,136,17,15,254,17,0,0,16,7,220,21,65,84,37,66,84,85,200,128,0,3,240,33,2,16,63,2,16,33,3,240,33,2,16,255,192,0,33,2,16,33,3,124,169,10,16,175,226,16,34,2,68,39,226,2,8,0,64,255,233,18,32,134,124,58,78,36,42,67,68,37,64,136,33,2,16,66,7,62,132,39,84,41,15,144,34,130,168,52,66,130,23,193,4,39,194,4,103,202,0,47,226,130,39,194,36,33,130,230,8,0,64,63,129,16,10,7,252,4,3,248,4,2,72,68,64,192,4,7,252,8,15,254,17,2,104,92,72,66,63,128,224,21,2,72,251,226,8,251,226,8,251,224,64,10,3,88,194,97,248,0,128,16,41,7,208,41,3,190,17,39,210,85,39,210,17,39,226,18,167,196,17,15,254,17,0,0,3,131,192,32,3,252,34,2,32,66,8,32,33,2,108,41,47,124,34,130,146,58,174,254,33,2,254,169,36,186,4,1,176,100,203,242,18,4,200,82,135,248,4,15,252,138,73,236,4,7,254,64,41,124,80,67,124,16,67,126,90,161,16,18,129,70,64,2,32,129,4,16,4,2,68,84,45,66,84,166,72,67,132,0,4,7,252,4,3,248,4,15,254,32,131,248,32,131,248,32,130,24,32,2,124,248,132,16,162,143,196,32,3,184,225,2,16,39,194,0,32,7,252,128,7,248,0,135,200,8,131,74,194,167,202,16,111,226,16,1,62,40,130,190,106,42,234,42,162,170,42,162,200,41,66,34,32,4,238,138,168,170,174,170,170,170,174,234,172,194,168,77,136,136,2,9,252,66,0,248,130,5,252,40,132,248,200,132,248,72,132,152,41,7,208,41,231,228,213,71,72,13,67,226,4,7,252,4,0,192,1,14,254,161,10,124,161,14,254,164,74,124,164,78,124,4,64,76,32,3,252,64,11,248,8,135,232,8,135,248,34,163,234,34,98,98,33,2,254,33,11,124,161,10,254,164,66,124,36,66,124,36,66,76,0,4,254,65,4,124,68,71,84,69,68,84,85,70,84,66,128,68,1,4,254,33,0,124,225,2,254,36,66,124,36,67,124,36,64,76,4,0,32,63,194,0,34,2,32,63,194,32,37,4,80,72,137,4,2,15,16,47,226,0,39,207,68,39,194,16,53,78,82,73,32,48,8,0,64,127,228,146,144,130,68,4,7,252,8,64,132,17,66,8,25,14,16,33,34,82,245,66,144,113,10,168,34,130,68,36,66,130,0,0,56,60,2,0,32,3,252,34,2,32,34,2,32,255,224,0,8,7,30,65,36,20,125,133,20,81,37,18,93,175,20,1,0,16,1,15,148,33,2,126,33,15,146,37,66,56,53,78,146,69,0,32,5,0,72,4,7,252,4,2,68,20,128,80,36,132,68,20,0,128,0,7,252,64,68,68,68,68,68,74,68,148,81,68,4,127,196,4,32,129,16,127,192,160,63,130,168,43,131,8,63,130,8,63,130,8,0,4,254,40,32,146,137,36,146,26,162,170,204,100,130,79,228,130,17,1,16,123,193,36,20,143,188,16,69,60,92,69,60,176,1,254,0,3,252,32,2,8,40,130,80,34,2,80,40,130,0,63,192,0,32,2,60,250,74,164,171,202,164,250,66,60,42,67,164,239,224,0,10,0,160,10,7,252,74,68,164,127,196,164,74,68,164,127,196,4,32,7,190,74,7,160,75,71,168,74,143,168,27,66,160,75,233,128,0,3,252,32,67,252,34,2,168,42,130,248,34,5,36,82,73,252,0,15,62,18,5,36,83,69,40,122,128,180,58,44,160,43,225,0,79,194,128,143,132,136,15,130,128,79,192,64,255,225,80,36,132,68,0,15,192,75,231,146,73,39,146,73,68,212,120,140,148,10,64,194,252,4,188,122,68,164,122,132,208,250,128,196,255,225,16,14,7,28,32,98,56,184,138,62,250,162,62,168,141,190,138,169,190,234,32,38,32,2,240,250,2,254,42,175,234,42,162,228,186,170,50,226,9,254,4,0,64,4,3,248,4,0,64,127,192,64,9,1,8,63,192,4,127,197,84,68,69,244,72,71,252,81,70], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+64797);
/* memory initializer */ allocate([236,73,68,244,64,71,252,68,15,238,68,78,238,170,175,234,72,175,234,72,167,234,72,71,234,32,2,0,39,207,164,34,71,36,106,138,40,161,2,40,36,66,130,2,79,126,34,79,136,169,74,162,217,200,136,251,232,136,251,232,128,4,0,128,63,130,8,63,130,8,63,128,68,118,129,80,36,132,198,4,0,64,10,3,24,192,99,248,4,0,64,63,128,64,4,7,252,4,0,32,63,234,16,98,130,68,107,170,16,39,196,16,65,8,254,36,129,80,63,128,128,127,193,16,38,141,198,4,7,248,4,0,192,4,0,80,4,128,64,127,192,64,10,0,160,17,1,16,32,132,4,4,2,72,21,3,248,8,7,252,17,2,8,95,64,144,17,2,48,1,0,16,1,7,190,9,36,146,41,33,18,42,36,98,132,160,132,65,4,16,121,10,124,33,79,148,33,66,254,169,11,168,228,64,130,33,2,16,41,11,124,161,74,20,47,226,16,82,132,168,132,64,130,2,3,254,168,7,238,42,167,110,162,3,254,50,37,82,82,41,86,16,1,30,17,39,210,17,33,18,255,33,18,33,164,148,253,0,80,40,130,158,125,34,154,41,111,240,1,231,194,69,231,194,68,167,196,33,2,126,37,47,168,39,230,168,115,202,168,163,194,40,35,226,32,1,7,220,18,65,72,35,231,170,107,234,170,43,227,170,42,160,70,4,129,68,37,36,96,25,3,254,209,1,252,17,1,252,17,1,254,64,2,124,241,65,126,41,71,124,170,2,60,38,66,164,35,194,36,2,39,148,43,239,200,40,135,190,32,135,136,107,234,136,56,130,136,33,3,148,73,6,254,145,5,40,34,130,68,68,72,130,37,68,82,72,132,234,90,142,254,210,141,212,101,68,148,82,36,0,234,161,42,4,0,64,63,130,72,36,131,248,36,130,72,255,226,8,34,130,16,68,2,64,159,132,74,40,165,6,4,7,252,14,1,80,100,192,64,16,47,220,2,142,236,170,174,234,42,175,234,42,175,234,106,139,76,33,2,254,32,2,238,250,162,238,34,130,254,50,142,254,70,128,182,65,4,254,64,14,238,74,164,238,98,140,254,66,132,254,70,140,182,1,14,254,160,10,238,170,170,238,162,138,254,226,138,254,6,128,182,1,4,16,33,0,16,225,226,16,33,2,16,41,3,16,47,224,0,33,2,30,127,68,152,137,162,102,32,2,254,34,131,42,34,160,70,34,2,40,34,79,32,47,226,40,50,142,40,36,162,74,168,165,6,33,4,30,71,73,8,225,164,102,176,12,254,2,131,42,194,160,70,17,7,248,21,7,252,8,3,248,208,129,248,8,4,68,81,41,240,34,2,32,247,130,40,58,142,74,36,170,166,80,32,0,42,68,82,0,0,56,60,0,64,4,0,64,127,192,64,4,0,64,63,128,0,16,1,0,32,2,252,96,10,0,32,2,0,32,3,254,32,2,0,0,0,64,4,0,64,4,0,160,10,1,16,17,2,8,64,96,0,0,3,252,4,66,68,40,68,148,16,130,64,2,66,130,40,164,120,32,2,0,251,226,10,250,162,42,250,162,202,41,35,146,34,162,68,16,1,28,39,2,16,97,10,16,47,226,16,33,2,16,39,194,0,1,4,16,33,0,16,225,2,40,34,130,40,44,67,68,40,33,0,0,0,0,63,192,36,18,65,36,18,66,68,4,64,132,17,66,8,32,2,28,39,2,16,241,5,16,95,229,16,81,2,16,87,200,0,32,2,62,72,165,10,242,162,42,66,175,74,1,35,18,194,160,68,32,2,0,47,239,34,34,66,40,52,238,66,36,34,130,169,69,8,16,1,0,47,226,34,98,74,40,34,226,34,36,34,66,41,67,8,0,3,248,32,130,8,32,131,248,32,130,8,32,131,248,32,128,0,1,0,24,1,71,254,17,1,20,125,65,24,17,34,42,36,100,2,9,15,254,9,7,254,16,129,248,16,129,248,16,231,248,0,128,8,16,143,254,20,128,32,127,229,10,164,64,160,49,141,246,17,1,240,17,15,254,17,0,0,127,228,66,132,7,252,14,3,88,196,96,64,248,128,8,112,133,62,114,160,42,250,173,190,168,143,138,171,233,130,33,2,254,40,42,40,181,74,40,164,66,130,39,197,68,87,200,68,66,2,16,159,229,74,10,66,80,72,141,4,79,132,136,79,128,136,4,15,254,145,34,72,74,65,16,32,140,6,63,130,8,32,131,248,33,4,20,81,9,254,229,4,84,143,78,88,4,163,90,202,97,2,0,7,252,64,72,0,30,1,32,18,1,32,18,2,36,34,68,28,39,226,20,32,143,126,34,162,72,49,14,254,35,130,84,169,36,16,63,128,16,6,0,16,127,192,164,50,0,96,127,193,80,36,132,70,4,0,64,127,196,68,74,69,20,68,68,68,74,69,20,64,68,12,17,15,254,17,0,0,16,1,28,253,66,84,73,67,20,41,204,64,39,226,16,47,239,146,173,74,128,175,239,144,47,227,170,234,160,134,23,225,16,47,230,146,165,66,0,47,226,16,47,226,170,42,162,134,7,239,16,31,226,146,37,67,0,239,226,16,47,226,170,170,164,134,16,1,0,17,239,210,37,34,82,69,36,146,41,33,30,41,36,64,63,226,0,47,194,0,127,229,36,145,129,134,1,15,254,17,0,176,14,135,8,18,132,200,32,135,200,8,129,232,240,161,10,80,162,6,1,4,16,33,0,254,130,69,36,20,66,72,226,130,16,34,128,68,0,3,0,8,0,128,4,0,160,10,1,16,17,2,8,64,96,0,71,226,64,247,193,64,47,227,90,109,74,90,40,66,190,50,66,12,17,1,16,253,2,62,50,37,72,124,129,8,29,79,20,18,65,66,0,7,128,75,196,128,80,5,126,74,132,168,106,133,42,68,164,134,17,7,252,17,0,64,42,66,138,71,130,32,17,74,34,170,129,152,1,14,146,73,36,254,64,14,254,65,4,254,106,172,170,10,160,134,36,66,40,64,7,124,132,71,68,39,207,168,34,130,170,52,162,134,64,2,252,0,69,244,68,69,244,68,68,68,95,68,4,65,68,8,72,2,94,0,40,186,73,33,186,41,44,146,75,164,130,72,160,132,17,15,254,17,0,64,255,224,128,16,3,248,80,137,8,31,129,8,123,192,132,57,196,32,123,192,132,74,66,148,74,64,132,41,65,8,84,135,232,85,15,254,67,69,212,117,77,212,85,69,200,85,77,98,64,2,254,2,136,40,79,225,170,42,174,174,44,34,130,47,224,130,17,15,254,17,7,136,83,230,20,80,132,190,106,5,32,68,4,128,0,7,124,85,69,124,117,69,124,82,7,16,84,69,162,90,171,24,32,7,190,138,161,62,250,170,190,249,10,136,250,32,82,53,76,140,8,0,64,127,197,20,191,129,16,127,193,16,36,133,244,4,3,248,4,7,252,81,75,248,17,7,252,32,133,244,149,33,80,10,1,16,0,3,252,0,0,0,0,1,248,0,0,0,0,7,254,0,0,0,8,1,8,63,192,132,127,225,16,32,133,244,128,33,248,0,3,252,4,0,160,17,2,8,196,96,64,36,129,80,127,192,64,4,0,64,73,15,208,73,239,228,5,71,148,73,71,148,72,135,148,73,69,162,63,1,32,12,1,32,123,130,168,17,2,232,255,225,80,36,132,68,15,142,80,162,11,220,181,74,136,181,78,32,191,224,168,18,64,32,4,0,64,127,192,64,36,129,80,255,226,64,34,130,16,40,131,6,32,2,254,37,47,36,33,130,102,49,14,124,37,66,124,161,36,254,7,239,42,18,69,24,86,101,8,123,224,170,235,224,136,43,225,2,16,1,0,23,199,132,16,65,60,24,71,4,16,65,124,80,2,0,33,2,86,41,47,214,89,37,254,145,5,254,36,69,40,129,0,238,0,7,190,16,131,156,16,135,190,8,0,80,18,69,66,152,162,248,8,0,128,31,129,16,34,5,252,18,65,36,31,193,0,16,32,254,143,196,36,10,73,36,69,64,136,33,12,156,73,4,144,95,224,0,4,0,64,127,193,80,36,133,86,17,7,188,49,5,184,149,97,16,20,65,40,47,226,214,107,170,254,32,2,124,36,66,124,36,66,124,17,15,254,17,4,32,34,8,168,74,65,36,34,12,12,67,5,192,1,15,144,37,66,82,69,39,144,209,37,20,80,135,16,70,1,128,17,0,160,4,0,160,53,128,64,127,192,64,36,132,68,148,64,128,68,66,132,17,66,148,85,65,20,253,65,20,84,73,36,80,66,12,130,4,32,10,136,164,82,34,32,34,12,34,66,68,24,70,3,128,33,2,16,65,9,84,229,34,146,65,15,18,0,67,24,198,1,128,18,1,254,42,162,146,106,170,254,36,66,162,39,194,164,33,130,102,2,0,80,232,139,116,162,11,252,162,10,248,232,138,136,15,128,136,33,3,144,73,233,36,125,64,84,124,128,72,125,64,34,82,72,146,33,3,222,81,72,162,23,197,16,87,197,84,85,65,92,33,4,16,0,14,254,162,138,40,175,238,170,170,170,206,168,46,130,15,224,130,29,207,84,85,69,84,85,79,254,85,69,84,117,77,84,38,68,204,17,15,254,17,0,64,7,192,64,4,1,248,16,129,8,31,129,8,16,1,4,16,143,208,18,35,132,84,137,16,18,33,4,17,129,96,4,0,64,4,4,68,68,68,68,68,68,68,68,71,252,0,64,0,0,46,226,170,170,170,170,175,250,170,170,170,170,42,162,42,166,100,33,2,254,56,42,254,168,10,254,173,162,182,41,37,182,77,169,54,32,33,4,253,128,130,20,67,152,88,9,66,16,65,24,22,1,0,64,2,252,0,68,68,68,68,68,74,69,20,64,68,4,65,68,8,113,5,16,87,198,16,85,69,56,95,229,16,98,132,40,68,68,130,33,2,254,240,2,254,40,35,186,234,162,254,36,66,124,164,69,254,2,15,60,148,137,254,181,75,98,180,139,126,164,3,92,77,72,156,114,69,254,81,5,124,113,5,254,85,71,254,80,5,124,84,75,124,17,7,252,4,3,248,4,7,252,21,15,254,0,3,248,32,131,248,129,4,16,9,40,146,89,34,146,41,44,146,73,36,254,64,32,0,4,7,252,64,71,252,64,5,220,68,69,84,76,196,204,85,72,204,34,130,254,65,5,124,225,2,254,85,78,254,0,3,124,196,64,124,33,2,254,36,66,40,255,226,170,44,98,186,58,174,186,72,32,134,20,1,64,39,226,144,97,10,126,33,34,18,34,34,34,36,162,132,4,7,252,17,0,160,127,196,164,81,70,236,74,68,228,65,68,8,36,129,80,127,228,2,159,1,16,63,130,8,36,130,72,11,3,8,1,0,32,239,234,130,168,42,186,234,170,170,171,174,130,8,160,132,8,0,128,8,0,128,15,192,128,8,0,128,8,0,128,255,224,0,4,4,68,36,128,64,127,196,4,95,69,20,81,69,244,64,68,12,36,129,80,127,196,4,95,65,16,31,0,64,255,227,72,211,1,142,33,2,146,37,79,16,39,199,68,111,202,68,39,194,68,37,66,72,33,2,146,37,79,16,39,194,68,55,206,68,39,194,68,165,68,72,17,14,146,37,66,16,247,194,68,119,198,196,167,194,68,37,66,72,34,2,60,46,10,168,177,42,106,160,98,252,37,5,84,85,72,140,17,15,254,17,0,0,16,1,252,32,68,132,4,64,68,1,64,8,16,1,0,63,194,4,64,72,132,4,64,68,0,64,4,2,128,16,32,15,222,72,163,10,253,32,38,120,4,158,121,36,146,121,224,0,4,0,64,36,130,68,68,40,66,4,0,68,1,128,96,24,14,0,1,0,146,229,74,16,167,202,68,167,202,68,231,202,68,5,64,72,0,15,188,42,66,168,75,9,168,2,71,164,75,68,168,122,0,32,32,2,252,66,73,36,228,66,84,72,143,124,4,67,68,199,192,68,4,7,252,9,3,72,223,96,80,127,193,8,63,141,8,31,129,8,0,143,148,138,42,220,168,10,190,168,138,172,36,165,10,74,136,16,33,2,8,39,239,194,168,10,160,250,66,40,43,3,162,234,32,30,3,131,192,4,0,64,127,192,64,4,3,248,32,130,8,63,130,8,4,0,160,17,2,8,223,96,64,127,192,64,63,130,8,63,130,8,16,129,8,125,1,30,255,66,148,109,74,180,40,132,148,170,65,66,47,194,72,39,143,72,39,130,78,63,142,8,46,226,170,164,70,170,16,135,136,75,231,136,76,135,168,74,143,136,40,132,136,170,129,16,47,194,72,39,139,72,167,138,78,175,130,8,46,226,170,36,66,170,66,2,32,139,196,160,10,3,252,34,12,160,82,68,24,70,1,128,65,2,16,241,1,16,39,199,16,169,2,16,33,2,254,32,2,0,0,4,124,36,64,68,232,34,0,39,194,36,34,131,16,34,128,198,1,15,144,39,194,84,69,71,124,213,69,84,87,199,16,81,0,16,4,0,64,63,130,72,36,131,248,36,130,72,63,128,64,4,0,64,1,0,16,119,197,84,85,69,124,85,69,84,119,192,16,1,0,16,17,1,16,47,226,146,105,42,254,41,34,146,47,226,16,33,2,16,4,1,248,16,129,248,16,129,250,16,199,248,2,128,200,50,128,16,64,2,254,8,40,40,68,65,16,47,236,56,69,68,146,65,0,16,32,2,126,36,15,92,84,5,126,86,133,106,38,69,164,139,33,32,33,4,16,151,206,84,37,68,124,245,64,84,55,204,16,1,0,16,65,2,16,7,207,84,21,66,124,117,74,212,39,194,16,33,2,16,66,2,32,2,9,254,82,32,36,37,12,80,73,36,146,80,226,0,4,15,254,128,32,64,127,196,68,127,196,68,127,192,64,4,0,0,34,2,16,47,239,130,81,5,124,149,69,124,37,69,124,137,0,16,17,7,252,17,1,240,17,1,240,17,15,254,37,2,136,32,3,252,23,133,72,83,5,72,24,67,248,32,131,248,32,131,248,32,130,24,33,2,254,33,11,124,172,74,124,164,66,124,36,66,254,34,130,68,132,4,136,31,200,36,95,226,72,74,77,82,66,4,200,67,0,192,4,15,254,4,7,252,0,7,252,68,71,252,64,4,0,64,8,0,4,2,64,36,3,252,68,8,64,63,128,64,4,0,64,255,224,0,16,1,62,82,167,254,146,161,62,125,1,62,17,33,210,114,162,68,16,129,40,82,135,190,148,129,8,27,231,8,16,129,8,19,225,0,13,7,16,17,1,16,17,15,254,17,1,16,17,2,16,33,4,16,39,194,68,71,197,16,231,194,84,71,207,84,7,195,16,193,32,14,4,1,72,101,64,96,56,13,248,16,129,248,16,129,248,16,129,248,2,135,254,66,7,164,74,132,144,90,168,6,63,130,168,42,143,254,12,39,2,16,175,234,84,173,106,84,173,106,56,37,66,146,161,4,1,7,16,85,5,124,121,5,16,87,199,16,81,5,16,95,235,0,63,129,16,10,0,96,25,142,70,4,3,248,4,0,64,127,192,0,16,1,124,81,5,16,87,197,84,85,69,84,37,66,92,65,8,16,4,0,64,36,3,248,68,0,64,255,224,64,10,1,16,32,140,6,32,10,190,72,138,136,43,226,170,106,170,170,42,162,174,168,132,8,66,2,32,251,226,72,32,131,174,47,162,170,74,228,168,170,33,30,64,2,252,8,72,252,88,66,252,68,141,74,76,196,72,95,224,0,1,4,16,39,192,16,239,226,4,47,226,36,41,67,4,33,64,8,0,3,252,32,66,4,63,194,0,32,2,0,32,4,0,64,8,0,127,128,8,14,131,136,8,131,232,42,131,232,8,160,170,127,96,18,4,0,64,4,0,64,255,224,64,4,0,64,4,0,64,4,0,0,0,15,254,8,0,128,16,1,248,48,133,8,144,129,8,31,129,8,33,2,16,34,143,68,40,34,124,48,14,124,36,66,68,167,196,68,0,135,8,80,133,126,80,135,72,82,133,40,80,135,8,2,128,16,17,1,16,33,2,16,97,10,254,33,2,16,33,2,16,33,2,16,4,0,160,53,141,246,17,1,240,17,1,240,20,129,48,21,1,136,65,4,16,113,9,124,69,68,84,71,196,16,81,70,30,79,32,0,4,0,32,127,229,2,138,2,32,18,7,254,5,0,136,16,70,2,64,2,124,4,64,68,228,66,68,39,194,128,48,2,40,4,64,130,4,0,64,63,194,68,36,67,252,4,1,64,12,1,32,225,224,0,16,1,0,31,130,64,68,0,64,255,224,64,10,1,16,32,140,6,17,1,16,47,226,16,111,234,146,47,226,144,37,2,32,37,2,142,63,194,4,63,194,32,50,66,168,34,3,254,39,4,168,82,104,32,1,15,16,23,197,84,85,68,124,121,0,176,233,0,168,42,97,64,33,2,16,34,15,40,84,69,126,144,37,124,36,69,68,87,200,68,2,128,36,2,15,254,2,0,32,126,1,36,17,65,212,240,196,4,0,3,248,0,0,0,255,224,64,37,2,72,68,72,68,20,0,128,4,0,64,4,0,64,255,224,64,4,0,64,4,0,64,127,192,0,4,130,72,36,130,72,255,226,72,36,130,72,39,130,0,63,224,0,33,2,8,47,239,16,39,199,84,109,74,84,165,66,92,33,2,16,4,15,254,4,3,248,36,135,252,4,79,254,4,71,252,4,0,192,32,130,10,32,143,126,32,130,232,52,142,72,39,163,202,160,100,2,32,143,112,36,3,124,229,2,80,105,15,254,0,7,248,33,3,240,136,36,156,29,0,144,205,229,148,73,70,148,82,68,0,191,224,0,34,15,124,34,67,100,227,66,68,104,111,250,8,129,8,227,0,0,31,1,16,31,1,16,31,0,0,127,192,64,39,130,64,84,8,254,2,0,244,226,139,252,166,138,180,177,202,248,232,138,248,8,128,248,8,128,238,245,74,0,191,202,32,170,138,168,247,72,32,63,224,0,64,194,112,33,0,254,225,2,124,36,66,68,39,194,0,95,232,0,17,1,16,33,2,16,111,234,16,33,2,16,33,2,16,39,194,0,18,1,32,47,194,32,127,234,8,47,194,72,34,130,8,34,130,16,16,14,124,34,74,168,113,143,166,37,7,124,161,2,254,33,2,16,66,4,32,119,233,80,41,4,124,69,68,84,85,70,92,65,0,16,3,135,192,68,4,64,68,7,252,68,4,32,66,68,148,80,198,4,8,0,64,255,224,64,63,130,72,36,130,72,36,130,88,4,0,64,33,2,16,39,203,16,175,234,8,175,194,72,34,130,8,34,130,16,4,7,252,64,75,248,8,1,16,63,128,72,4,3,248,4,15,254,64,2,124,244,65,84,37,71,84,173,66,40,34,130,74,36,162,134,1,8,24,65,65,254,193,5,240,69,4,74,84,166,122,92,96,2,17,1,16,82,5,62,86,69,164,82,71,40,81,1,40,20,65,130,0,0,56,124,0,64,127,192,64,255,224,64,4,0,64,20,0,128,32,129,16,255,224,64,63,130,8,63,130,8,63,130,8,63,128,0,4,0,32,127,228,2,129,7,254,1,1,16,9,0,16,5,0,32,4,7,252,4,7,248,8,15,254,16,131,254,40,132,72,128,128,24,32,226,240,34,47,148,36,2,254,48,46,252,36,66,40,161,4,238,18,3,252,98,11,252,34,3,252,34,3,252,0,3,252,32,67,252,3,199,192,40,129,80,127,232,2,63,129,16,10,0,96,25,134,6,2,3,254,37,74,146,109,98,146,111,234,16,47,194,72,67,9,206,17,7,252,68,71,252,68,71,252,0,15,254,0,3,248,32,131,248,16,143,254,16,128,16,247,225,16,34,67,126,160,43,84,229,64,150,32,2,126,36,15,98,37,71,72,108,138,84,38,34,64,39,226,0,34,2,16,47,239,32,36,70,254,112,42,168,170,130,170,42,163,38,1,15,80,37,2,124,57,5,16,95,235,56,37,68,146,129,0,16,32,2,124,32,143,48,32,130,254,49,46,20,33,2,16,165,4,32,33,2,40,244,68,186,160,15,226,42,163,234,234,162,234,42,34,166,16,1,0,29,193,20,253,65,20,17,69,148,148,129,20,82,66,66,32,5,124,136,135,48,32,143,126,33,39,20,81,5,16,117,0,32,136,4,142,14,160,138,190,164,138,24,162,202,202,68,140,73,33,162,1,15,126,17,2,36,39,235,2,165,74,84,181,78,84,9,65,22,8,0,136,8,71,244,9,0,144,127,192,132,8,64,148,8,128,128,0,143,190,136,138,190,168,42,168,173,138,168,175,226,8,81,72,162,34,15,32,15,143,40,146,143,104,3,143,40,18,175,170,36,102,130,18,15,224,75,135,168,6,135,184,18,167,170,18,99,66,0,9,36,17,7,252,17,3,248,42,131,248,4,15,254,24,130,248,72,128,248,63,130,72,34,131,248,4,67,248,5,15,254,48,141,248,16,129,248,15,238,170,170,170,254,161,46,124,161,139,254,166,78,188,18,64,60,127,196,164,127,192,80,6,15,254,16,3,248,80,137,248,16,129,248,127,196,164,127,194,0,63,196,132,190,66,164,62,64,132,126,64,44,63,128,64,255,225,80,100,192,160,53,141,86,14,1,80,36,128,192,8,7,60,64,71,188,64,71,252,73,6,208,73,38,202,74,102,194,127,196,4,127,196,32,79,132,168,79,132,32,95,197,36,87,73,20,4,128,68,4,15,254,4,0,224,21,2,72,68,72,66,4,0,64,2,136,36,66,1,252,198,4,176,74,133,36,66,6,0,159,224,0,32,66,4,46,79,62,42,70,164,117,74,76,170,66,148,32,66,12,4,0,64,255,224,64,127,196,68,68,71,252,14,3,88,196,96,64,2,128,36,63,226,32,34,66,36,50,130,144,35,36,74,88,104,2,16,5,124,82,69,40,81,1,168,4,71,252,0,1,16,10,15,254,125,229,68,124,133,68,125,225,10,120,129,88,244,3,248,4,15,254,4,0,32,127,196,0,73,7,252,73,4,144,79,4,0,85,74,82,17,5,80,57,15,222,58,69,84,145,66,20,253,66,136,17,70,226,137,4,144,61,224,146,190,38,168,62,128,136,92,138,180,73,64,162,32,2,0,251,196,164,82,66,60,80,8,64,2,69,34,80,168,248,0,39,226,66,167,234,72,164,138,126,166,170,106,166,226,136,160,132,255,224,64,127,196,164,74,193,0,255,225,8,49,0,224,25,134,4,33,2,254,34,15,74,47,66,16,54,78,186,33,2,254,33,6,16,4,7,252,0,1,248,16,135,254,16,129,248,6,1,148,106,128,198,63,130,72,63,130,72,63,130,72,36,130,104,37,36,66,3,224,0,17,1,16,87,197,84,85,69,84,85,69,84,21,66,92,33,4,16,33,2,40,36,79,130,39,199,16,105,10,124,161,2,16,47,226,0,33,2,40,36,79,130,39,194,16,49,14,124,33,2,16,175,228,0,127,192,64,127,234,82,20,129,60,126,65,60,58,69,124,18,65,60,0,7,188,10,68,164,74,66,164,42,65,40,41,4,88,130,64,66,4,15,254,85,66,72,85,64,64,85,66,72,85,64,160,49,140,6,66,130,36,4,14,126,44,131,126,36,130,126,44,131,72,39,224,64,4,0,64,4,0,100,246,129,80,37,2,72,68,72,66,20,0,128,0,206,112,161,10,254,229,74,84,175,238,84,165,74,254,225,0,124,20,78,40,32,2,124,252,66,68,119,198,168,162,162,74,36,98,128,1,0,16,114,5,68,95,229,2,84,133,72,116,165,74,8,161,6,1,238,226,165,75,254,240,42,68,174,238,164,183,74,94,228,64,132,8,8,190,168,138,144,171,234,162,170,170,170,170,170,136,137,64,162,3,199,192,36,65,40,255,234,10,59,196,136,106,137,62,32,132,8,72,130,80,0,0,248,200,132,136,79,132,80,85,38,146,72,225,0,0,15,126,33,2,124,68,71,84,213,69,84,85,71,40,68,64,130,68,2,158,253,33,18,85,229,82,85,39,222,21,34,34,34,164,68,32,194,112,44,11,80,165,10,126,161,2,84,85,36,146,133,0,32,72,68,184,254,4,160,123,228,168,122,132,168,254,129,40,74,136,72,84,101,88,255,5,80,93,231,84,221,69,84,127,68,20,85,78,36,10,46,172,191,138,168,174,234,170,174,170,170,191,174,10,10,161,18,63,130,72,36,131,248,36,130,72,63,128,0,4,69,34,80,168,248,24,142,8,32,130,16,249,2,16,114,10,164,36,34,254,36,34,0,0,3,252,0,71,244,0,67,228,34,66,36,34,67,228,1,64,8,16,129,8,33,36,164,115,193,8,33,4,32,123,224,0,255,224,0,0,15,254,34,2,32,58,68,168,171,1,34,18,34,34,65,232,0,1,7,124,65,71,126,65,71,124,65,15,124,33,5,126,249,0,144,4,0,64,127,192,64,255,224,16,1,7,252,33,1,16,5,0,32,249,232,130,251,160,2,251,170,170,170,175,170,171,170,130,168,169,132,0,7,252,74,68,164,74,68,164,74,69,28,64,71,252,64,64,0,16,1,126,32,34,122,96,42,122,36,162,74,39,162,2,32,162,4,16,1,8,40,130,200,106,138,168,40,130,168,44,130,148,34,66,66,64,4,126,112,41,122,0,36,122,68,164,74,87,166,2,64,160,4,0,3,248,32,130,8,32,131,248,32,2,0,32,66,4,31,192,0,32,130,40,34,143,68,41,71,18,105,10,32,34,130,68,47,226,2,17,1,16,42,132,68,255,226,16,63,2,16,63,2,30,255,0,16,17,1,16,17,2,168,68,72,130,4,0,36,82,37,10,144,128,248,0,2,190,36,132,80,147,225,34,34,162,170,122,160,136,1,64,34,68,66,40,7,192,16,225,2,254,33,2,40,36,66,132,80,8,254,4,0,32,127,228,2,132,0,64,127,192,224,21,2,72,196,96,64,64,130,72,4,78,132,41,35,16,34,2,168,52,66,126,0,32,0,7,196,8,35,0,8,231,194,84,39,194,84,47,195,84,36,64,76,33,2,86,41,47,214,41,34,254,49,14,254,36,66,40,161,4,238,33,7,54,85,39,118,85,47,126,81,7,126,82,37,36,81,139,102,68,69,84,78,143,254,78,165,90,100,173,250,74,164,164,68,172,178,8,129,232,232,139,238,171,43,232,168,139,200,234,138,148,10,64,194,17,15,254,17,0,128,8,7,240,9,4,148,81,41,18,37,4,32,0,111,184,32,143,136,171,234,136,217,200,170,248,136,136,248,128,8,18,129,68,41,34,16,98,138,68,40,34,124,36,66,68,39,194,0,4,7,252,4,15,254,8,1,16,62,0,136,63,192,68,37,4,200,65,2,16,15,224,16,231,194,84,39,194,56,37,66,146,81,8,254,127,192,160,127,196,164,127,194,72,21,15,254,14,3,88,196,96,64,31,225,40,47,226,170,111,234,84,35,130,254,35,130,84,41,34,16,68,2,158,253,33,30,85,39,222,17,34,102,4,7,252,4,15,254,162,229,74,62,160,142,170,166,170,62,224,170,72,168,146,17,34,38,4,0,32,127,228,2,151,194,16,103,202,68,39,194,68,39,194,68,64,98,120,4,14,64,39,226,72,36,130,216,52,194,74,8,129,8,4,3,248,4,143,254,4,131,248,68,68,228,85,68,68,68,72,68,1,15,164,35,239,130,170,74,210,217,232,162,253,72,136,249,64,34,17,15,254,17,0,0,123,192,0,251,226,8,113,202,170,32,134,24,66,7,190,148,67,250,32,131,248,32,131,248,32,143,254,17,2,16,63,130,8,63,128,64,127,196,68,68,71,252,4,0,68,255,224,2,225,10,254,162,12,124,201,10,254,180,76,124,132,72,124,132,72,76,225,10,254,162,13,124,170,74,60,186,74,188,202,72,172,136,9,126,32,228,240,66,41,148,228,2,254,66,79,68,2,131,16,194,192,194,112,133,126,81,15,222,138,71,62,93,39,94,85,39,86,84,5,190,2,15,16,47,226,40,66,135,84,209,5,254,81,7,16,81,0,16,4,4,68,68,71,252,8,0,248,16,130,144,6,0,192,48,12,0,17,14,254,37,66,124,245,66,124,113,70,254,162,34,148,52,162,120,8,72,72,95,224,96,219,4,84,91,132,84,89,36,80,66,11,254,228,74,40,183,236,144,163,10,74,185,204,236,137,168,168,149,138,62,36,131,248,4,4,68,127,192,0,63,128,0,255,226,72,68,64,192,1,15,16,17,2,16,33,3,84,101,42,82,41,34,16,165,4,32,32,2,124,36,79,124,32,3,124,100,74,84,37,66,84,162,132,196,33,3,222,81,72,162,63,192,68,255,224,68,127,192,128,16,2,0,17,15,254,21,7,252,32,143,254,32,131,248,12,67,40,213,1,140,32,130,16,34,79,126,34,167,100,107,170,72,170,130,16,34,130,70,1,0,32,228,74,254,164,74,162,163,202,100,234,138,16,2,128,198,33,4,8,79,234,162,229,228,72,141,239,82,5,227,82,197,224,64,1,14,146,69,68,16,71,206,68,69,68,84,101,76,40,4,64,130,4,7,252,4,7,254,136,33,16,62,0,132,127,226,82,68,128,192,65,4,146,117,72,16,119,194,68,37,79,212,37,66,16,50,130,68,8,103,56,66,4,32,123,228,168,74,135,168,66,132,72,132,128,136,39,194,68,39,207,68,39,194,0,46,227,34,234,164,102,10,160,102,17,1,16,37,2,92,103,74,212,37,66,92,37,2,66,35,226,0,8,0,64,127,196,4,144,1,16,18,1,64,24,65,4,15,192,0,33,2,16,37,15,92,87,69,212,149,69,92,37,5,66,147,224,0,36,66,254,36,66,16,250,130,68,43,162,0,55,206,68,71,192,68,40,139,200,73,235,226,42,71,254,170,34,170,60,162,168,169,68,162,40,130,72,32,143,62,32,130,200,53,78,82,38,34,64,171,229,0,115,229,34,83,231,34,35,226,0,55,106,18,165,171,54,229,160,54,1,7,16,87,165,52,117,66,178,32,11,124,164,75,124,196,64,124,0,135,144,73,4,164,123,228,130,75,199,164,74,68,164,75,201,128,17,15,254,17,0,64,8,1,8,63,192,4,31,129,8,16,129,248,33,2,16,34,15,68,39,226,2,48,14,124,36,66,68,167,196,68,4,0,128,17,2,8,127,194,4,0,3,248,32,130,8,32,131,248,4,7,252,4,3,248,8,15,254,17,2,72,213,96,224,53,0,200,249,2,16,249,10,254,169,13,144,138,143,168,138,72,212,252,32,128,4,0,64,4,79,254,4,0,64,10,0,144,20,130,36,192,32,0,4,0,64,127,192,160,25,2,72,192,96,128,68,69,82,145,32,240,66,2,32,2,9,252,66,1,32,37,12,80,72,132,200,82,66,2,32,2,124,36,79,100,37,66,68,47,227,68,228,68,68,9,65,8,65,68,16,95,239,84,85,229,84,105,236,148,85,69,62,65,12,16,4,0,160,57,140,70,63,0,32,63,130,8,36,130,72,27,6,8,2,3,254,33,75,208,101,226,116,117,234,148,41,229,84,97,232,16,128,132,10,29,8,94,87,67,94,85,76,158,73,69,84,101,224,16,32,2,60,32,15,128,39,226,16,33,2,32,50,142,68,79,224,66,33,2,254,240,2,254,40,39,186,106,170,254,164,66,124,36,66,254,2,3,254,32,10,164,114,130,80,104,202,32,42,67,40,69,9,140,159,196,80,31,201,84,95,192,136,47,132,136,207,132,32,95,196,32,159,196,80,31,193,84,223,196,136,79,132,136,79,134,32,95,192,32,10,4,164,50,128,80,200,197,32,74,68,168,85,6,80,72,129,4,32,2,124,36,66,68,247,194,68,36,66,124,56,14,0,79,224,0,25,14,84,41,2,40,116,66,16,37,67,152,225,2,42,40,33,254,64,2,60,242,65,36,35,198,164,178,66,188,32,2,0,39,226,0,1,15,84,39,194,32,79,231,32,210,133,74,85,199,168,73,65,34,32,2,254,40,47,40,37,67,16,111,234,56,37,66,146,161,4,16,0,0,252,116,69,68,84,69,40,82,133,16,114,128,72,8,65,2,4,4,68,68,71,252,8,15,254,18,2,164,42,133,32,133,1,140,128,4,248,1,8,32,84,2,252,37,76,148,74,69,36,69,64,136,65,4,254,73,4,188,233,68,254,73,68,188,105,13,124,20,66,124,33,2,254,41,15,188,41,66,254,57,78,188,41,2,252,52,70,124,36,129,80,127,196,4,31,1,16,31,0,64,63,128,64,255,224,0,36,129,80,255,232,2,63,130,8,63,128,64,255,225,80,36,132,68,113,5,84,83,133,254,120,37,56,82,135,56,81,5,124,81,11,126,2,7,254,66,5,252,66,71,254,66,69,252,66,5,252,80,73,252,33,10,254,121,2,188,249,66,254,121,74,188,41,2,188,42,67,60,17,1,146,37,66,16,111,234,130,43,162,170,43,162,130,40,162,132,32,135,170,73,199,136,75,231,162,75,175,170,26,162,186,202,33,166,65,2,146,5,72,16,79,225,130,43,172,170,75,164,130,72,160,132,33,2,146,245,66,16,47,239,130,43,171,170,171,170,134,224,9,254,159,4,32,4,8,252,69,64,148,82,72,76,37,4,160,17,6,12,36,2,126,40,47,66,39,162,162,50,46,250,34,34,170,175,164,6,130,5,252,2,8,248,68,3,254,68,140,254,72,133,40,80,130,24,131,197,192,4,73,40,72,2,64,89,205,4,93,197,4,95,193,4,68,4,124,132,74,168,193,4,108,153,46,254,1,3,84,201,32,48,17,15,254,81,7,254,144,33,242,36,39,250,4,34,74,63,160,6,34,130,40,34,143,170,38,198,40,118,202,170,162,130,42,36,162,134,133,4,80,85,64,216,205,133,84,69,4,148,80,196,0,191,224,0,144,5,254,40,40,250,82,32,34,63,164,34,202,164,250,64,160,4,228,10,254,180,44,250,210,43,254,162,42,170,202,168,250,128,168,4,64,130,8,0,128,254,224,130,72,34,130,40,40,131,8,34,128,16,4,7,252,9,3,8,223,97,0,31,1,0,127,193,16,63,128,8,33,2,16,167,207,16,175,226,8,55,238,8,36,130,40,32,130,24,33,15,254,37,71,56,87,199,32,95,229,40,117,101,56,85,75,48,117,69,56,87,199,32,95,229,68,123,165,40,83,229,2,87,171,6,2,3,254,36,10,124,106,66,24,98,74,194,33,132,4,67,8,12,68,66,72,255,224,128,127,194,72,95,72,2,63,129,16,17,1,240,36,66,40,39,207,20,39,199,80,111,202,52,165,66,156,33,2,16,120,68,132,121,68,148,121,66,20,125,74,212,84,74,68,85,72,136,7,207,68,151,207,68,39,195,32,167,234,170,180,174,146,2,160,68,68,68,40,119,200,20,119,194,80,255,226,18,35,35,90,41,64,16,39,194,68,39,207,68,39,194,0,55,238,16,37,194,80,171,229,0,123,228,136,123,228,162,122,160,42,254,161,8,81,69,226,80,11,254,1,7,124,82,133,16,127,226,146,39,203,84,165,75,92,225,0,16,1,0,254,228,74,40,175,234,146,167,202,84,229,74,92,1,0,16,17,1,16,47,226,16,99,138,56,37,66,84,43,162,16,33,2,16,17,1,16,123,193,16,255,226,168,68,73,250,16,129,248,16,129,248,1,0,124,225,10,254,181,106,124,165,74,254,225,42,92,5,0,190,39,194,68,55,202,68,167,202,32,167,226,170,36,162,146,34,162,68,136,132,80,31,200,36,95,193,32,63,228,98,202,165,36,66,0,32,68,34,130,124,161,74,124,165,10,126,163,42,90,41,66,16,161,4,0,7,252,64,71,252,66,132,168,74,135,254,74,132,184,72,8,254,127,192,64,4,0,64,255,224,64,10,0,160,17,2,8,192,96,0,64,2,252,130,5,254,4,130,132,82,44,160,75,69,42,74,160,64,65,5,254,66,4,252,232,68,252,72,68,252,104,77,254,4,128,132,0,7,252,68,68,68,68,71,252,68,68,68,68,71,252,64,64,0,18,70,36,39,226,36,250,66,36,35,199,36,82,69,36,115,192,0,32,194,112,49,10,144,175,234,16,33,2,124,36,66,68,39,194,68,16,206,112,33,2,254,242,130,84,41,39,20,85,165,148,117,0,32,2,135,168,79,228,170,122,164,254,74,167,170,79,228,128,73,73,162,34,130,40,42,175,108,34,130,44,54,174,168,34,130,74,164,164,134,16,1,248,49,4,224,49,140,70,4,7,252,4,2,72,84,64,128,79,194,36,34,64,84,232,130,124,36,66,68,39,194,0,95,232,0,2,142,40,170,138,106,226,202,40,166,206,170,162,138,74,228,160,134,2,135,40,90,165,108,114,130,40,54,202,170,162,139,74,232,161,6,1,15,144,137,10,158,169,10,144,171,202,164,34,69,36,75,200,36,65,4,16,117,8,124,117,2,144,39,239,144,34,131,40,36,64,130,33,2,16,249,234,144,169,10,188,170,74,164,186,66,36,35,194,0,0,3,252,32,2,0,63,226,16,33,2,16,33,4,16,69,8,32,0,192,112,228,10,64,164,10,126,164,138,72,228,138,136,8,129,8,32,2,124,48,138,144,166,138,134,32,2,124,81,5,16,79,232,0,64,2,254,129,4,16,17,2,16,33,12,16,65,4,16,69,0,32,0,207,112,17,2,16,71,194,16,17,9,124,96,3,0,79,232,0,17,1,254,32,2,124,100,74,124,32,2,254,40,34,124,33,2,48,4,7,252,0,1,240,17,1,240,0,7,252,64,67,248,4,0,192,2,7,254,64,71,184,72,132,136,83,229,136,72,134,190,88,10,126,64,69,216,68,142,136,83,229,200,100,141,72,75,229,64,99,236,0,32,39,12,86,71,36,82,239,68,82,69,164,118,229,32,85,235,0,71,194,40,33,0,124,229,66,124,37,66,124,37,66,76,80,8,254,32,2,254,40,47,186,40,39,186,106,170,170,171,162,130,40,162,132,251,226,34,251,170,162,170,45,186,138,175,170,139,168,162,250,160,36,1,14,254,162,138,254,229,74,124,165,78,124,161,10,124,225,0,254,0,7,252,64,69,244,64,69,244,81,69,20,95,68,4,65,68,8,64,6,254,136,32,186,232,36,186,234,164,170,91,166,130,72,160,132,0,39,196,68,134,82,84,68,72,253,4,66,68,68,72,85,8,128,4,7,252,17,15,254,36,131,248,36,131,248,4,3,248,4,15,254,39,194,4,34,143,144,39,199,84,111,202,84,39,194,84,37,66,76,32,2,124,34,143,144,39,194,84,55,206,84,39,194,84,165,68,76,34,7,188,148,135,252,64,69,244,64,69,244,81,69,244,64,68,12,33,2,8,71,233,16,226,4,68,143,239,42,2,131,74,196,160,134,2,3,254,32,10,252,96,130,254,105,42,254,41,36,254,73,40,150,17,1,40,36,66,186,96,10,226,42,162,234,42,162,226,42,162,164,32,2,120,36,143,72,40,98,0,55,206,68,34,130,16,162,132,198,2,1,32,10,2,32,18,0,32,127,224,32,5,0,136,48,108,2,79,130,32,31,192,112,234,131,38,47,130,72,37,194,132,80,136,254,0,1,240,17,1,16,17,7,28,64,68,4,64,68,4,127,196,4,3,131,192,4,15,254,21,2,72,196,97,240,17,33,18,32,228,0,8,0,64,127,228,146,144,130,84,4,135,252,4,0,160,49,140,6,127,196,132,95,70,148,70,68,148,84,196,36,72,68,68,127,196,4,17,2,16,71,201,16,33,6,254,161,2,80,37,226,80,43,3,30,65,2,40,4,64,186,225,2,254,33,2,84,41,34,80,82,8,254,65,2,40,4,72,186,65,0,254,33,12,84,73,36,16,69,0,32,127,196,4,127,196,72,95,4,96,127,228,248,88,134,248,72,136,248,4,0,64,4,0,64,127,192,64,4,0,64,4,0,64,255,224,0,1,0,16,113,5,16,87,197,16,81,5,16,113,5,16,15,224,0,16,1,0,63,132,16,130,7,252,68,71,252,10,1,42,34,36,30,130,5,36,18,73,252,64,1,252,34,13,252,85,69,84,85,65,12,127,196,36,66,69,252,70,68,164,82,70,36,74,68,68,127,196,4,34,130,36,36,15,126,44,131,126,100,138,126,36,130,72,167,228,64,16,6,62,32,143,190,34,39,42,170,162,42,114,165,72,89,73,34,9,231,82,81,229,18,113,229,208,85,167,84,85,165,64,91,235,0,34,34,20,32,15,190,170,42,162,251,226,20,41,67,148,226,96,64,65,226,146,245,225,18,45,231,84,165,99,84,37,162,64,43,227,0,143,132,136,15,128,136,239,130,162,41,66,168,44,66,0,95,232,0,63,128,64,4,15,254,9,1,8,32,101,248,16,129,8,31,129,8,4,0,64,255,224,64,36,130,72,63,128,72,4,32,66,3,224,0,125,196,86,126,5,94,127,37,76,163,35,248,32,131,248,32,130,24,34,2,32,35,239,80,41,2,92,55,78,212,37,194,80,164,36,62,32,2,12,39,15,144,33,2,16,49,238,240,33,2,18,161,36,14,4,71,40,80,5,124,116,69,68,87,199,40,82,133,42,84,171,134,17,2,8,123,228,162,104,5,146,65,71,152,9,46,146,8,225,128,1,7,8,87,229,66,96,5,36,82,133,48,98,36,34,65,228,0,1,15,16,17,5,126,81,7,144,9,3,168,202,128,164,44,33,0,1,15,8,23,229,66,80,7,164,10,131,176,202,32,162,41,225,0,32,66,228,43,239,168,45,6,174,122,170,174,172,162,142,40,162,138,3,199,192,36,65,40,8,0,128,127,225,8,9,0,96,9,135,4,32,2,126,33,15,144,34,2,60,54,78,164,34,66,36,163,196,36,0,192,112,225,10,254,165,74,84,175,234,84,229,74,254,1,0,124,33,2,8,39,239,66,34,66,66,51,206,8,33,2,32,162,36,30,1,0,16,119,197,16,81,5,254,81,5,16,119,197,16,1,0,254,33,2,16,39,207,144,175,234,144,249,2,124,41,3,144,239,224,0,66,2,32,15,136,32,66,1,252,34,12,32,79,132,32,66,1,252,33,2,16,39,207,16,81,5,126,145,5,16,39,197,16,65,8,254,0,7,252,8,0,128,15,1,16,21,1,48,33,34,146,49,34,14,65,2,16,247,225,16,41,7,124,169,2,56,37,66,146,33,2,16,127,192,64,13,1,72,100,64,64,0,7,252,4,2,120,36,15,254,17,1,16,33,3,208,69,138,148,25,33,18,33,4,16,129,0,16,1,14,254,8,46,64,166,234,170,234,161,110,162,132,42,116,172,134,4,15,254,42,132,164,63,128,8,63,130,0,63,192,4,2,128,16,2,11,254,85,66,82,143,132,8,15,130,128,207,196,4,66,68,24,0,15,188,32,2,0,47,231,40,34,130,40,58,174,42,68,160,134,0,7,62,0,128,62,250,37,34,82,165,106,90,165,20,130,32,0,8,0,128,8,7,240,9,2,144,25,0,146,21,33,18,32,228,0,34,2,16,47,234,130,183,202,0,47,226,40,82,132,170,132,160,134,4,0,32,127,228,2,159,128,0,63,192,144,9,0,146,17,38,14,1,15,136,39,226,66,66,7,94,213,165,90,90,231,40,68,160,142,34,2,60,36,79,136,47,226,146,57,46,254,34,130,42,164,164,134,4,14,124,168,75,8,175,238,146,169,42,254,162,142,42,4,160,134,34,4,16,239,202,132,167,142,0,191,202,80,165,14,82,169,33,14,34,2,16,47,234,130,180,10,110,170,162,170,54,226,40,36,162,134,4,0,32,127,229,2,144,1,222,37,34,82,89,96,144,17,34,14,33,2,8,39,239,66,82,5,62,85,165,90,42,229,40,132,160,134,0,7,252,8,0,128,15,128,136,8,129,8,16,130,8,34,132,16,1,7,8,87,229,66,114,5,62,85,167,90,90,229,40,148,163,134,128,4,254,1,8,144,81,1,124,33,12,16,65,4,16,79,224,0,0,7,252,4,0,64,4,3,248,4,0,64,4,0,64,255,224,0,8,0,64,0,15,254,32,2,0,32,2,0,32,2,0,63,192,0,32,2,124,33,15,144,33,7,124,105,10,16,161,2,16,47,226,0,0,7,252,64,68,4,106,197,20,81,70,172,64,68,4,65,68,8,18,2,16,64,9,124,17,2,16,103,202,16,33,2,16,47,226,0,0,7,124,81,5,16,81,7,124,81,5,16,81,7,16,15,224,0,35,193,36,251,196,36,67,199,36,4,199,252,4,3,248,4,15,254,4,0,32,255,226,0,32,3,252,8,0,64,84,69,18,145,32,240,4,0,32,127,225,0,31,192,64,8,7,254,16,128,144,6,7,158,1,71,254,65,7,210,65,37,20,125,69,72,100,165,138,101,104,34,68,71,252,17,6,124,37,79,252,117,74,252,251,5,52,53,36,142,37,5,80,159,2,30,93,76,52,93,69,84,84,133,104,101,68,34,16,1,248,32,132,16,191,194,0,47,130,136,42,132,146,72,40,126,4,0,64,127,192,64,63,128,64,127,192,68,4,64,84,4,128,64,65,2,16,47,224,16,231,226,16,47,226,18,33,162,20,81,8,254,34,2,60,36,79,136,39,227,64,109,234,82,37,98,80,41,35,14,0,7,254,68,39,250,68,37,242,68,39,250,68,164,90,68,39,254,5,0,72,232,10,254,185,10,252,169,10,252,233,10,144,15,224,128,34,130,36,52,10,126,172,139,126,164,130,126,36,130,72,39,226,64,4,2,64,20,0,64,127,192,68,4,64,164,9,65,4,33,68,8,145,5,20,34,2,190,182,133,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+75037);
/* memory initializer */ allocate([34,131,190,66,136,168,51,224,32,34,130,36,68,5,126,236,130,126,68,143,126,4,131,72,199,224,64,17,15,254,17,0,64,63,192,64,63,192,64,127,192,68,5,64,72,33,15,254,47,0,64,127,193,80,100,192,128,255,225,16,14,7,28,3,131,192,4,7,252,21,6,76,8,7,254,16,128,144,6,7,156,18,1,32,47,194,32,111,138,32,63,226,34,34,162,36,34,2,32,18,1,160,38,2,32,111,202,36,34,66,84,36,194,132,49,66,8,63,194,4,63,194,0,35,195,224,35,130,224,35,197,224,66,40,30,33,2,16,79,229,16,231,194,16,79,239,18,1,33,154,225,64,16,4,0,64,63,128,64,4,7,252,14,1,80,36,132,70,132,0,64,16,143,254,16,135,196,68,71,222,64,71,228,73,69,196,170,65,140,2,0,32,239,138,32,162,11,252,167,10,168,242,74,34,2,0,32,63,130,72,63,130,72,63,128,0,255,226,72,37,2,32,41,131,6,127,196,68,127,196,68,127,194,8,63,130,8,63,130,8,34,130,16,15,142,168,175,138,168,175,138,0,191,234,164,234,138,144,12,192,130,26,14,124,37,79,124,37,71,124,169,68,24,250,165,46,37,37,142,18,1,16,32,2,254,96,10,132,36,66,72,36,130,16,63,226,0,159,197,36,31,201,36,95,194,136,47,140,136,79,132,136,74,128,144,159,197,36,31,205,36,95,196,136,79,133,136,111,132,136,10,128,144,126,68,36,126,68,30,92,68,20,126,196,132,90,70,148,136,65,140,124,68,68,125,228,4,126,68,148,172,68,172,24,0,68,82,169,248,0,7,252,8,64,132,8,64,132,9,64,136,8,0,128,255,224,0,2,3,252,32,10,248,104,130,248,104,138,248,32,5,252,85,75,254,79,130,136,15,136,136,79,130,0,95,205,84,85,69,84,127,228,0,33,2,8,32,15,190,169,74,148,249,66,20,40,131,148,234,64,66,8,0,64,0,15,254,32,130,8,17,0,160,4,0,160,49,140,6,64,2,254,0,37,250,73,36,242,73,36,242,73,165,242,65,36,22,34,4,16,80,9,254,228,66,68,66,143,40,1,3,40,196,65,130,2,0,32,231,234,170,162,170,42,164,170,82,233,41,34,4,160,4,20,14,120,41,2,124,240,66,124,112,74,124,34,2,20,44,163,120,4,15,254,17,0,224,53,140,150,30,0,128,63,129,80,36,128,192,64,2,252,64,68,4,78,68,164,74,68,164,78,68,4,65,68,8,4,64,146,226,10,68,167,202,0,174,234,34,170,174,102,170,160,102,17,2,72,72,105,16,63,128,8,123,194,148,24,194,148,74,65,140,16,130,68,73,33,248,0,143,254,16,1,240,17,2,82,33,35,142,32,66,132,37,239,4,44,66,84,52,78,68,37,66,72,170,5,30,33,194,20,33,79,156,168,138,190,250,170,42,43,99,162,202,160,36,71,194,68,7,200,16,79,225,146,41,44,170,76,100,130,72,160,132,4,7,252,81,66,8,95,65,16,31,0,64,127,196,68,74,68,12,2,1,168,114,65,32,255,225,32,18,129,168,113,1,50,84,162,6,33,15,168,36,79,138,138,143,136,138,143,142,39,143,136,32,130,8,1,7,208,81,5,16,125,132,84,69,39,210,81,5,16,125,0,16,39,226,66,39,239,64,37,226,72,53,46,94,36,130,190,168,133,62,0,4,24,46,8,32,66,1,252,34,12,80,69,4,136,72,129,4,0,7,252,4,2,72,36,130,72,85,72,226,4,0,64,255,224,0,1,0,32,119,197,68,84,69,76,84,5,126,80,39,122,0,32,6,65,7,32,135,199,68,37,66,72,247,226,2,39,163,2,32,160,4,8,1,0,63,2,16,35,2,0,63,192,4,127,64,4,2,128,16,128,4,252,0,8,0,95,224,32,20,2,124,192,68,4,66,132,16,0,9,252,66,0,168,202,132,168,74,133,116,66,6,32,95,192,0,127,196,4,127,196,0,127,196,64,72,133,252,66,5,252,66,11,254,0,7,252,4,0,64,4,15,254,10,0,160,18,33,34,33,228,0,17,7,252,17,0,0,63,192,64,255,224,160,10,33,34,33,236,0,32,2,254,33,15,124,34,71,36,111,234,0,167,194,68,36,66,124,127,128,128,8,7,240,17,1,16,255,224,0,63,130,8,32,131,248,63,130,8,32,131,248,0,7,252,4,15,254,10,1,24,224,96,0,63,130,72,36,130,72,255,228,136,72,132,136,127,225,8,34,132,16,1,3,212,1,15,254,17,1,16,93,5,16,80,165,234,240,96,2,0,7,252,8,0,128,127,128,136,8,129,8,16,129,8,255,224,0,32,2,252,34,15,120,34,131,72,111,234,0,39,194,68,164,68,124,16,1,0,63,130,64,68,0,64,255,224,64,4,0,64,4,0,64,64,7,254,170,135,252,42,143,254,32,131,190,72,139,40,35,236,8,16,1,124,33,2,16,97,10,252,34,66,36,36,66,68,47,226,0,20,1,126,40,2,124,101,74,76,63,226,164,41,66,254,32,66,24,34,2,120,36,130,72,245,130,64,39,194,4,47,67,4,193,64,8,5,0,72,4,3,254,36,2,68,34,66,40,33,36,42,76,104,2,63,128,64,255,234,74,63,133,16,14,3,30,196,3,248,8,131,24,15,206,32,175,138,40,164,142,254,160,10,120,164,142,72,7,128,0,34,2,32,164,15,126,170,162,42,52,174,82,41,34,34,36,162,4,32,2,0,63,197,36,146,65,36,34,66,68,68,72,148,16,128,0,16,1,248,41,4,96,9,131,70,196,3,248,8,128,136,18,130,16,32,2,254,33,11,124,170,74,36,175,226,0,39,194,68,36,66,124,0,8,248,72,128,248,192,5,252,66,5,254,66,6,80,72,131,6,17,1,16,127,193,16,17,15,254,0,3,248,32,131,248,32,131,248,0,15,188,146,75,164,171,202,160,186,9,34,253,224,0,82,72,146,32,194,112,36,15,64,39,231,72,108,138,72,36,130,136,40,131,8,0,15,254,10,0,160,127,196,164,74,69,36,97,196,4,127,196,4,15,239,40,34,130,254,74,167,170,202,164,206,72,39,130,79,224,130,0,135,200,16,129,30,33,35,162,106,74,212,40,131,136,33,0,96,4,46,92,165,11,240,165,238,116,173,75,84,165,78,84,6,64,68,1,0,254,225,10,124,164,74,124,162,138,254,224,10,124,4,64,124,0,0,252,228,74,72,165,10,92,168,74,168,241,9,40,36,100,128,71,196,68,119,200,68,119,194,32,247,226,170,34,163,82,42,160,4,32,2,254,162,143,40,175,226,170,58,174,170,44,98,130,47,226,130,26,78,24,34,66,16,247,226,40,119,234,170,34,162,46,32,130,8,8,3,248,32,131,248,32,131,248,32,131,248,8,4,68,81,41,240,33,1,224,33,0,128,255,225,32,63,197,36,146,65,52,18,128,32,3,199,192,36,129,80,127,192,224,21,6,76,8,5,68,81,40,242,113,5,124,83,135,84,89,37,40,116,101,16,85,69,56,85,75,48,4,0,64,7,192,132,8,129,72,35,0,32,4,1,128,96,0,0,34,130,40,55,202,168,162,138,254,160,2,124,36,66,124,36,66,124,33,2,124,44,75,124,164,74,124,36,66,124,82,4,20,140,161,120,36,130,48,180,138,164,175,234,80,39,194,212,85,69,92,129,0,16,129,197,224,10,72,72,79,1,32,36,140,248,66,5,252,69,0,136,130,4,32,3,200,36,84,66,72,42,140,16,65,4,32,68,0,128,127,196,4,127,197,36,74,133,4,74,4,252,82,11,254,130,0,32,36,66,228,42,143,238,43,38,234,100,171,234,168,66,236,50,162,114,16,143,254,21,2,96,76,73,60,4,15,254,10,1,148,106,128,198,2,3,254,36,67,254,36,66,124,33,2,254,73,36,154,137,64,16,0,3,252,0,65,4,8,64,132,2,64,68,8,67,4,1,64,8,34,2,124,36,79,124,84,69,124,148,69,124,34,5,20,140,161,120,4,7,252,4,3,248,32,131,248,17,15,254,0,3,248,32,131,248,65,4,80,119,200,144,113,2,254,242,130,40,34,163,74,36,96,128,66,2,32,138,4,248,18,2,32,95,236,80,69,4,146,73,33,14,3,135,192,8,1,16,62,0,64,8,131,252,4,4,72,148,64,128,113,5,84,89,38,124,100,69,124,84,69,124,97,4,84,73,36,48,1,0,20,249,0,158,79,4,144,41,65,24,41,36,42,132,96,130,32,2,124,69,73,84,229,66,124,69,79,84,5,67,84,199,192,0,1,14,254,169,42,124,225,10,124,161,14,254,161,10,124,228,64,124,32,2,126,33,15,144,169,138,148,249,42,16,41,3,208,229,0,16,0,7,254,64,5,252,82,69,252,82,69,252,66,4,32,66,7,254,127,192,64,127,234,82,19,199,132,75,199,128,67,199,148,64,132,118,33,2,254,249,36,124,97,10,124,241,2,254,49,14,124,36,66,124,14,238,162,170,42,238,168,14,238,168,170,234,168,174,132,8,160,146,32,130,8,35,234,136,170,170,156,168,138,190,184,142,148,2,64,66,17,1,16,39,194,16,101,74,56,33,2,254,33,2,40,36,66,130,17,5,16,39,197,16,149,65,56,49,5,254,145,1,40,84,66,130,0,7,254,4,0,64,4,0,80,4,192,68,4,0,64,4,0,64,127,196,64,95,133,8,95,133,8,95,132,128,95,134,136,71,9,140,127,192,64,63,130,8,63,130,8,63,129,0,63,132,136,7,3,142,0,1,254,226,10,32,162,138,36,162,74,32,226,10,32,2,0,32,69,5,144,81,239,34,80,133,232,116,141,72,85,69,84,101,76,34,66,132,200,104,232,146,232,4,244,234,68,164,74,70,164,74,161,18,4,2,64,63,132,64,4,15,254,10,0,160,18,33,34,33,228,0,17,1,16,33,2,146,105,42,146,41,34,146,41,34,254,32,34,0,66,39,148,139,225,8,248,138,190,248,138,136,251,224,8,28,142,8,32,194,112,65,9,16,225,2,254,65,15,16,1,1,144,225,0,16,1,64,16,127,228,16,127,4,20,93,69,88,93,36,42,132,96,130,23,197,36,82,133,16,18,128,70,63,130,8,36,130,72,10,3,24,36,4,78,135,1,128,32,230,228,164,66,228,36,66,84,38,66,76,33,7,136,79,230,144,89,79,164,75,134,144,89,4,164,75,233,130,64,2,252,0,68,68,68,69,244,68,68,228,85,68,68,69,68,8,128,101,216,4,136,136,82,226,168,42,141,168,75,229,64,83,226,0,1,7,8,23,225,16,114,68,68,71,135,16,18,1,68,87,226,2,72,132,80,95,238,80,175,202,84,191,234,84,79,202,80,173,129,84,63,130,8,63,130,8,63,128,160,74,66,168,27,0,160,255,224,0,113,5,40,84,69,130,103,197,0,81,70,84,66,68,8,79,228,0,0,15,124,36,66,84,37,71,84,37,66,16,58,142,42,68,160,134,16,129,12,254,161,8,127,230,200,84,135,212,85,71,212,86,68,194,31,129,8,31,129,8,31,129,8,127,224,64,9,1,8,63,192,4,113,5,124,84,71,124,84,69,124,113,5,218,85,197,84,89,43,48,66,4,60,114,69,72,144,4,44,68,68,68,70,197,68,103,196,68,17,7,252,4,3,248,4,15,254,66,2,124,9,66,16,66,128,198,4,0,32,255,232,66,36,3,248,68,15,254,18,1,32,34,36,30,2,7,32,83,197,68,104,133,32,84,101,66,102,228,66,71,228,66,0,7,124,84,69,124,100,69,124,86,37,84,100,132,68,69,36,96,34,132,36,66,9,60,238,4,60,142,14,36,2,131,18,194,160,70,16,1,30,17,39,210,17,227,146,53,37,30,145,33,18,17,225,0,127,228,128,73,231,242,73,37,222,91,38,158,73,36,146,73,232,128,65,4,254,96,8,238,234,164,238,66,142,254,66,132,254,100,132,102,3,3,192,4,15,254,21,2,72,196,97,240,17,1,240,17,1,240,66,7,188,165,1,0,19,199,228,19,195,164,55,197,36,19,193,0,4,15,254,42,131,184,17,7,252,17,15,254,26,2,148,200,128,198,136,4,188,10,75,228,75,193,228,42,76,188,74,68,164,75,192,128,4,0,64,8,129,16,62,0,68,8,131,248,1,0,96,24,6,0,136,5,54,249,34,18,117,162,54,33,47,182,37,162,18,69,168,36,68,66,40,247,193,16,33,7,124,169,2,16,47,226,16,33,2,16,4,68,40,47,224,16,225,2,124,33,2,16,47,227,16,33,0,16,16,1,60,126,65,60,58,69,124,146,65,60,4,1,36,80,168,248,1,0,32,239,234,130,168,42,186,170,170,170,235,170,130,8,160,132,4,7,252,0,1,240,17,1,240,0,3,240,2,7,252,4,0,192,0,0,254,241,2,124,36,66,84,37,67,84,197,64,40,4,64,132,17,1,16,127,193,16,255,225,16,63,141,22,31,1,0,16,128,248,36,2,124,40,143,124,37,71,124,98,10,212,163,130,212,33,34,48,20,1,124,40,130,124,101,74,124,34,2,212,35,130,212,37,34,32,8,1,8,255,200,8,190,138,40,162,139,232,128,136,8,131,128,0,8,1,240,34,7,252,164,67,252,12,1,50,103,65,168,106,96,64,17,15,254,21,3,248,4,143,254,4,135,248,4,2,232,53,132,72,1,15,146,37,66,16,71,199,68,215,197,68,87,199,68,85,64,72,127,192,64,255,234,74,21,3,248,32,131,248,32,131,248,32,130,24,146,69,68,17,71,212,69,71,212,69,71,212,69,68,68,85,68,136,2,0,244,226,139,252,162,10,124,168,139,16,231,202,16,5,0,32,59,130,168,255,224,64,63,130,8,36,129,176,224,227,184,42,131,184,33,2,146,117,72,16,119,194,68,247,194,68,39,195,68,37,64,72,130,5,36,10,136,32,79,129,136,47,140,136,79,132,136,74,128,144,4,7,254,64,42,72,21,3,248,32,131,248,32,131,248,32,130,24,68,66,56,133,68,254,2,2,124,74,76,60,66,68,60,66,64,44,2,14,60,174,10,40,161,46,106,160,107,252,165,14,82,9,33,14,4,0,64,4,0,64,37,2,72,68,72,68,4,0,64,20,0,128,4,65,248,5,7,254,4,1,248,97,8,32,63,224,32,10,0,64,34,2,16,47,239,0,34,135,68,106,170,40,162,130,16,34,130,68,4,2,72,21,0,64,63,130,8,63,130,8,63,130,8,34,130,16,2,0,252,226,75,254,162,74,252,162,11,36,247,73,172,18,66,36,33,3,222,82,136,132,3,131,192,4,15,254,4,0,160,49,140,6,33,1,16,253,0,30,82,72,164,5,69,20,32,133,20,138,64,66,36,2,254,244,162,234,116,166,234,165,106,16,47,226,40,36,66,130,17,1,18,93,69,24,81,37,210,224,224,0,63,128,0,255,224,0,125,4,80,125,228,98,124,66,8,124,137,72,109,68,84,117,64,162,35,194,36,35,207,164,171,202,144,251,226,74,43,99,162,203,160,6,80,143,136,83,231,8,35,239,136,168,143,190,32,143,136,35,226,0,34,2,32,34,2,248,242,130,40,38,194,170,34,130,72,42,130,16,33,2,16,39,207,16,37,66,56,49,14,254,33,2,40,164,68,130,34,130,126,44,143,126,36,130,126,52,142,254,34,66,46,164,36,140,0,7,222,9,36,148,73,135,212,25,34,146,73,168,148,41,1,16,16,66,164,69,75,132,18,65,20,124,97,28,84,73,36,80,66,4,114,5,32,95,135,40,82,133,108,122,165,42,84,133,72,90,139,16,136,132,138,14,204,136,74,164,198,66,4,252,72,70,252,72,64,252,0,7,254,72,40,128,15,193,0,31,192,4,126,64,4,2,128,16,32,162,8,47,239,8,42,134,170,127,170,172,170,130,154,54,98,2,64,4,0,125,233,18,17,47,210,17,37,210,81,165,212,241,0,16,123,232,146,125,101,104,125,229,72,132,3,248,36,131,248,4,71,252,81,229,202,101,108,128,223,77,94,95,69,94,95,69,84,85,70,52,66,130,40,10,136,168,95,224,168,42,140,168,75,132,128,79,224,0,128,5,254,16,40,64,71,193,64,39,204,4,79,68,4,65,64,8,136,69,228,19,237,228,82,69,244,82,197,228,106,69,36,43,64,72,63,226,2,63,226,146,37,66,254,40,34,254,40,36,254,72,40,134,9,15,254,9,1,6,125,130,144,253,225,20,253,67,148,85,67,36,17,15,254,17,1,16,4,0,32,18,69,2,80,169,8,15,128,0,34,2,16,119,232,0,116,66,40,247,226,16,39,195,16,33,0,16,5,3,144,33,226,34,60,66,136,40,130,136,73,68,148,138,64,66,8,0,64,127,193,16,10,15,254,4,0,64,127,192,64,4,0,64,16,39,220,1,4,80,41,15,222,17,71,212,17,69,148,149,67,36,32,194,112,36,11,64,172,10,126,164,130,72,36,130,136,40,131,8,0,0,128,4,0,32,18,5,4,80,37,10,144,129,8,15,128,0,18,1,16,47,226,0,103,202,0,39,194,0,39,194,68,39,194,68,8,129,8,34,167,220,84,133,92,84,133,126,84,133,232,240,128,8,63,130,8,63,130,8,63,128,64,36,3,248,68,3,248,4,7,252,119,197,68,87,199,68,87,197,16,117,5,124,89,5,124,81,11,254,23,201,68,87,194,68,87,201,16,53,5,124,153,1,124,81,2,254,39,194,68,55,202,196,167,202,16,165,2,124,41,2,124,33,2,254,0,0,128,68,130,72,33,0,0,255,192,0,18,2,16,64,136,4,0,39,226,36,162,74,36,175,250,36,162,74,36,36,66,68,168,68,0,71,212,41,66,148,253,66,148,72,72,140,4,3,248,4,15,254,0,7,226,36,66,72,36,47,228,36,130,66,36,68,72,69,8,64,0,7,222,41,34,148,41,143,244,41,34,146,41,164,148,73,8,144,32,4,124,128,1,0,47,230,16,161,2,16,33,2,16,37,2,32,251,226,34,251,234,162,171,237,136,138,143,190,140,136,190,248,136,190,4,3,248,4,7,252,17,0,160,127,192,64,255,224,64,4,0,64,4,0,64,127,192,224,21,2,72,196,99,248,32,130,8,63,130,8,33,2,16,37,11,80,167,202,144,33,2,124,33,2,16,47,226,0,33,2,16,37,15,80,87,197,144,145,5,124,33,5,16,143,224,0,0,3,248,32,130,8,32,131,248,10,0,160,18,33,34,33,228,0,0,1,16,17,68,164,74,68,68,74,68,164,81,68,4,127,192,4,4,14,64,175,234,130,245,42,34,170,174,218,168,170,250,161,70,8,32,2,0,127,196,4,148,64,148,73,69,84,65,71,244,1,64,8,64,2,68,2,136,168,73,33,146,42,172,170,76,100,130,79,224,2,34,130,36,244,2,126,76,133,126,164,138,126,84,135,72,23,224,64,34,132,176,122,64,28,120,4,168,123,4,164,121,196,128,82,72,146,17,1,16,33,2,254,97,10,56,37,66,146,33,2,16,33,2,16,34,2,60,84,69,168,209,133,36,84,165,48,80,133,48,64,196,112,9,7,252,4,3,248,8,15,254,16,2,248,34,132,248,132,129,254,32,2,0,47,239,16,34,7,64,103,202,4,32,66,4,34,130,16,2,0,248,232,138,248,168,138,248,168,138,248,226,73,254,5,1,140,64,196,112,97,8,254,229,68,146,247,196,36,82,230,66,68,160,132,3,131,192,4,7,252,21,2,72,255,97,32,23,194,4,34,132,16,64,130,8,240,129,62,34,166,170,179,226,170,34,162,42,35,226,0,33,130,224,66,5,252,234,131,38,79,143,72,5,227,66,201,65,8,66,4,60,66,5,254,242,165,240,82,69,28,122,173,108,18,130,254,2,0,40,2,67,254,34,2,36,58,66,40,33,36,42,68,104,130,127,192,64,127,196,68,53,128,0,127,192,64,127,196,164,74,68,12,4,0,120,4,3,254,36,34,120,60,34,62,53,68,216,69,11,254,1,0,28,225,10,254,169,42,252,169,42,142,234,138,170,22,194,254,0,2,254,33,4,124,148,66,84,69,73,84,37,68,40,132,64,130,33,4,40,148,66,130,103,202,16,47,226,16,37,66,146,37,2,32,2,4,32,39,192,80,233,2,16,47,226,16,41,3,16,33,0,16,33,15,252,41,7,252,18,3,208,8,135,252,36,131,248,36,131,248,248,2,34,249,74,148,170,173,170,138,175,182,138,40,162,251,232,130,16,1,0,43,196,84,185,65,20,125,65,8,88,137,84,81,66,34,32,2,56,34,143,168,43,130,168,42,130,168,75,164,130,71,232,0,4,7,252,64,5,248,65,4,96,65,5,252,66,68,40,74,8,64,4,7,252,17,3,224,8,135,252,0,67,248,36,131,248,36,131,248,33,2,16,50,10,254,170,170,170,170,162,170,42,162,170,63,226,0,32,15,188,74,67,36,75,201,16,62,0,136,127,194,80,84,128,128,47,226,18,37,207,80,91,229,68,87,197,68,39,197,68,133,64,72,33,2,16,71,169,20,239,226,16,67,206,100,11,195,36,195,192,36,33,2,124,65,9,126,224,34,40,69,143,40,15,227,24,194,64,66,32,2,124,249,4,16,97,10,254,241,2,16,57,14,16,33,2,16,1,0,254,232,42,124,160,10,124,164,74,124,228,74,124,0,0,254,4,7,252,64,67,248,0,3,248,32,131,248,32,131,248,0,7,252,63,130,8,63,130,8,63,130,8,255,225,16,63,128,64,82,169,250,66,2,32,3,239,64,75,228,10,114,133,46,82,133,40,149,227,0,4,0,32,127,192,64,8,1,16,62,0,64,8,1,16,63,128,8,1,4,80,39,192,144,1,14,254,34,130,42,34,162,70,80,8,254,2,3,254,40,10,234,116,67,238,106,75,238,42,71,238,64,75,228,2,14,16,175,234,16,226,10,68,175,142,16,162,10,68,239,224,66,34,2,32,67,233,66,235,162,42,67,175,42,3,163,130,192,160,4,81,15,168,82,167,106,34,207,168,171,143,168,34,175,170,34,98,32,16,143,254,16,130,16,119,197,40,113,4,254,113,5,124,113,0,16,8,2,72,17,7,252,64,75,240,2,0,64,127,192,64,20,0,128,4,0,32,0,3,252,32,68,0,9,0,144,17,1,8,32,132,4,63,128,64,255,232,66,53,128,0,127,192,4,63,192,4,127,192,0,0,0,64,8,3,248,42,130,168,42,130,168,42,130,168,255,224,0,124,132,72,124,128,62,124,164,74,84,165,74,85,34,146,38,164,68,63,128,64,255,224,64,127,197,84,127,192,64,127,192,0,82,72,146,32,228,248,136,129,190,40,134,190,170,34,190,42,34,190,42,35,62,32,2,0,127,132,8,190,130,40,62,130,40,62,128,8,2,128,16,4,4,64,39,192,132,231,66,84,39,66,84,39,67,4,33,64,8,63,192,4,31,192,4,63,192,16,255,226,16,17,0,16,5,0,32,242,33,42,82,165,42,82,167,170,10,174,170,10,160,170,42,161,66,133,68,84,10,128,168,213,4,168,74,132,84,69,68,0,191,224,0,2,15,160,35,226,66,59,164,170,75,171,42,19,162,2,64,168,4,128,4,248,4,136,72,84,130,248,36,140,72,68,164,74,68,96,66,4,68,84,37,64,84,229,66,84,37,66,84,53,66,148,8,65,4,64,2,248,4,128,72,228,130,248,36,130,72,36,163,74,36,96,66,128,133,200,4,128,136,205,197,170,72,164,168,89,4,0,191,224,0,143,132,72,4,128,72,239,130,74,36,162,70,36,37,0,143,224,0,0,3,254,34,2,32,34,2,252,34,2,40,34,68,32,95,232,0,32,2,124,37,79,84,39,194,84,53,78,124,33,2,16,161,4,16,1,7,188,18,69,52,82,199,160,19,227,2,87,169,2,80,162,4,1,15,188,170,74,180,250,74,168,171,239,130,39,162,2,32,162,4,0,0,254,224,138,72,164,138,126,161,138,40,228,138,136,18,128,16,0,4,4,32,129,16,10,0,64,4,0,64,4,0,64,4,0,64,17,15,254,17,7,252,1,2,16,63,224,48,13,3,16,197,0,32,0,7,252,2,2,32,34,3,252,6,0,160,50,12,32,10,0,64,32,2,126,248,138,168,170,138,190,249,130,40,60,140,136,18,128,16,68,71,252,0,7,252,66,4,248,66,5,252,66,4,248,66,11,254,32,5,238,136,3,224,74,237,244,64,69,228,82,69,36,95,68,8,159,229,16,17,9,124,81,1,254,49,13,16,87,197,16,47,228,0,1,15,148,18,5,62,150,143,190,50,133,62,146,129,40,83,226,32,0,0,254,226,138,40,162,138,170,166,202,40,226,128,40,31,224,0,0,7,252,10,0,160,10,4,164,42,129,176,10,0,160,255,224,0,64,2,126,0,128,72,232,130,254,34,130,168,52,130,136,18,128,16,127,192,64,39,130,64,255,226,0,63,130,0,63,192,4,85,73,44,0,0,254,233,42,146,175,234,146,169,42,170,236,106,130,15,224,130,95,224,66,95,164,162,85,39,250,85,37,242,85,37,242,68,36,54,32,2,254,169,43,146,175,234,146,41,34,170,92,100,130,143,224,130,130,5,252,5,8,168,95,194,168,47,140,168,79,132,34,66,32,30,17,1,16,125,129,20,29,7,16,0,3,248,42,130,168,42,143,254,0,7,252,10,2,168,27,0,160,127,196,0,64,4,0,64,8,0,0,15,124,34,130,40,66,135,126,210,133,40,82,135,72,68,128,136,32,34,236,34,79,164,165,106,84,251,66,84,45,239,96,9,225,0,4,2,72,36,131,248,0,15,254,16,3,248,80,137,8,31,129,8,0,192,112,241,1,16,37,199,80,21,5,80,39,195,0,79,232,0,8,0,64,127,192,0,63,128,0,63,128,0,63,130,8,32,131,248,16,7,254,40,129,62,126,36,170,114,164,170,114,164,148,82,74,66,71,194,4,72,68,228,82,70,68,91,69,20,91,69,20,95,68,12,4,2,72,37,4,160,49,140,68,36,130,80,68,0,160,49,140,6,143,132,136,8,136,136,80,96,0,47,132,136,200,132,136,79,128,136,4,0,128,255,225,16,36,135,252,164,163,248,36,131,250,4,32,62,34,2,32,47,207,72,42,67,250,234,130,248,42,130,250,162,36,30,0,14,252,168,74,252,232,74,252,169,46,148,168,138,168,236,64,130,40,2,92,64,9,0,43,230,72,160,130,8,36,130,136,34,130,16,130,7,254,32,41,252,66,1,252,50,77,252,82,69,252,72,129,4,36,2,120,244,130,144,119,194,84,253,66,124,36,2,66,35,226,0,32,2,254,42,66,188,250,66,188,41,2,254,58,78,152,74,64,254,10,15,254,10,2,232,224,162,236,42,134,170,174,96,0,82,72,146,0,3,254,32,2,40,34,66,32,63,194,32,37,4,80,72,137,4,7,207,68,37,66,84,69,71,84,213,69,16,82,135,42,68,160,134,0,7,254,74,133,68,127,229,72,87,229,72,87,229,72,87,233,64,2,0,16,239,234,0,167,202,0,167,202,0,231,202,68,7,192,68,4,7,252,17,0,160,127,196,16,70,5,152,70,5,140,67,9,192,34,2,32,51,202,68,168,138,32,164,194,68,86,197,68,135,192,68,4,7,254,80,169,248,16,129,248,8,15,254,16,128,144,6,7,158,129,4,254,2,140,16,79,228,136,75,69,136,107,37,4,17,130,96,1,15,40,20,69,130,87,197,0,122,0,148,236,64,168,47,225,0,1,15,144,39,194,84,117,69,84,95,235,16,18,130,40,68,72,130,4,0,64,63,130,72,36,130,72,255,224,64,10,1,16,96,192,0,4,3,248,36,143,254,10,3,88,223,97,16,21,1,252,0,67,204,25,14,16,39,194,84,245,66,84,47,231,16,170,130,40,36,66,130,32,2,124,32,143,144,34,7,126,106,170,74,41,34,34,36,162,4,32,2,124,32,143,144,34,2,126,50,174,74,41,34,34,164,164,4,20,65,40,32,2,254,97,10,124,33,2,16,47,226,16,33,2,16,2,3,254,32,10,240,98,2,64,111,202,84,41,69,36,69,72,8,17,0,160,127,192,64,4,3,248,4,0,64,255,224,64,4,0,64,136,132,80,31,200,32,82,1,248,34,12,32,95,196,32,66,0,32,120,4,188,74,69,36,98,69,60,74,68,164,106,69,60,64,4,0,32,3,252,64,11,248,20,131,232,8,131,232,8,167,250,8,96,130,18,1,94,41,34,146,105,42,146,41,34,218,41,66,16,33,2,16,2,3,254,32,10,68,98,130,254,97,10,124,33,4,254,65,8,16,16,128,144,127,192,64,127,192,128,255,225,8,41,68,146,17,2,16,36,66,40,47,239,16,33,7,124,105,10,16,175,226,16,33,2,16,133,5,252,2,8,248,66,1,252,36,12,224,67,69,168,74,65,96,137,5,208,21,237,228,85,69,212,73,71,200,84,133,84,109,43,254,119,229,40,95,231,170,90,165,254,113,5,126,82,69,40,81,139,100,32,194,112,33,15,16,81,5,254,81,5,40,34,133,68,72,73,2,0,207,112,33,2,74,34,71,64,39,194,144,55,238,16,69,64,124,32,194,112,34,15,84,34,130,64,55,206,144,47,226,16,165,68,124,8,0,252,248,128,176,4,7,168,1,143,254,18,1,34,34,36,30,1,233,224,73,64,72,7,206,144,47,226,16,41,34,254,96,9,254,4,15,254,145,34,8,16,1,248,36,0,64,127,192,64,36,131,248,129,197,224,2,0,148,196,132,128,79,229,16,79,230,16,73,32,254,34,130,40,42,175,108,82,133,44,86,165,168,34,165,42,132,96,128,2,0,16,239,234,0,164,138,132,180,170,72,229,10,32,5,1,140,3,199,192,8,2,72,17,0,128,115,196,4,123,196,4,127,196,4,17,15,254,17,2,32,75,199,68,16,66,36,121,64,4,25,70,8,127,192,160,63,130,168,63,128,128,255,225,16,10,0,64,27,6,8,38,234,170,118,98,170,33,15,190,86,133,190,82,133,190,146,128,62,32,3,240,42,239,234,42,167,236,106,170,186,190,162,44,34,130,40,1,0,254,225,10,254,168,42,124,160,10,124,228,74,124,2,128,254,0,15,222,73,36,148,121,132,148,121,36,146,77,175,148,9,0,144,17,2,8,81,64,224,49,140,6,63,128,136,8,128,168,9,0,128,0,15,190,168,79,152,168,79,190,32,175,136,32,131,136,226,128,16,2,8,32,68,1,72,47,194,4,192,4,248,72,132,136,79,128,136,4,0,64,36,2,88,38,131,200,228,130,104,37,2,68,32,65,252,0,7,252,4,0,128,63,130,8,36,130,72,36,128,160,17,2,8,33,2,254,32,15,80,37,226,146,58,174,164,45,66,136,169,68,162,18,1,32,18,9,36,82,131,48,18,1,32,18,15,254,0,0,0,1,7,16,81,5,16,95,229,16,81,5,16,113,0,16,1,0,16,4,0,64,127,196,68,127,196,68,127,192,72,3,32,98,57,172,6,113,5,254,82,135,78,93,37,90,118,69,84,84,133,84,86,75,66,4,15,254,18,1,32,35,194,68,101,74,200,50,130,16,34,130,198,129,5,254,5,8,156,90,66,180,44,204,168,73,4,168,76,64,130,0,0,0,0,0,0,0,0,0,255,224,0,0,0,0,0,0,0,4,7,252,4,7,254,64,43,248,0,3,248,32,131,248,17,7,252,0,7,252,68,4,64,79,133,32,66,5,252,66,4,80,72,135,254,39,194,68,39,207,0,47,226,68,55,206,68,39,194,70,175,196,4,65,4,8,112,8,126,113,2,18,250,194,104,42,66,36,51,34,32,18,1,16,47,194,32,101,10,82,45,67,72,36,130,68,38,34,64,16,1,124,34,66,36,111,234,36,34,66,252,34,2,64,36,2,128,8,0,64,255,224,128,20,131,80,82,9,32,17,1,72,24,97,0,0,15,190,144,137,62,186,42,170,170,171,170,146,169,8,253,64,34,4,7,252,4,3,248,4,131,248,36,3,252,4,64,172,17,6,12,130,4,248,10,131,254,192,4,248,72,132,168,74,132,80,72,139,254,26,14,60,36,66,40,251,66,72,113,230,162,165,66,8,35,2,192,18,1,16,33,34,130,100,74,68,34,130,40,33,2,40,36,66,130,113,5,126,81,7,124,81,71,124,85,5,126,81,37,22,82,139,70,83,230,4,73,131,132,67,231,202,144,129,46,254,129,40,45,228,128,64,194,112,4,9,64,84,2,126,36,140,72,68,132,136,72,129,8,8,0,64,127,228,2,159,65,16,31,1,16,31,1,16,255,224,0,33,2,254,33,15,124,81,69,124,149,6,126,33,37,22,66,136,68,31,1,16,255,229,72,57,79,200,57,229,92,18,175,254,16,130,8,33,2,16,47,239,40,36,71,126,104,74,116,165,66,116,32,66,12,33,2,8,32,143,162,170,42,162,249,66,20,40,131,148,202,64,66,17,1,16,47,226,40,100,74,254,32,66,116,37,66,116,32,66,12,0,7,248,0,130,8,32,131,248,32,2,0,32,66,4,31,192,0,0,7,240,2,0,64,8,1,0,16,2,0,32,66,4,31,192,0,4,0,128,17,3,248,16,129,240,36,0,64,127,192,160,17,6,12,0,132,8,72,132,72,68,132,8,72,133,16,97,4,40,12,67,2,18,15,252,18,0,0,63,0,32,12,1,0,32,66,4,31,192,0,34,2,94,41,47,146,41,34,146,57,46,178,45,162,148,161,4,16,63,130,8,63,130,8,63,129,0,63,196,164,146,66,68,73,65,8,63,130,8,63,128,0,127,196,68,127,196,0,64,36,2,63,224,0,33,2,16,35,234,160,172,10,190,168,75,136,233,0,162,2,32,30,16,1,0,39,194,4,96,138,16,34,2,64,40,34,130,39,226,0,32,4,120,132,129,72,40,102,0,175,194,68,34,130,16,34,130,196,1,7,124,82,133,254,116,69,124,84,71,124,82,5,20,150,163,184,132,4,120,9,1,252,234,66,252,34,130,84,37,34,142,80,8,254,161,12,124,145,71,126,65,71,124,161,2,124,249,2,126,81,8,144,2,3,254,32,10,120,100,130,142,112,10,124,36,68,40,65,8,238,8,0,64,255,224,144,9,2,148,73,40,146,17,1,16,37,4,32,4,15,254,18,67,40,217,129,6,127,197,20,110,196,164,78,68,12,4,7,252,17,15,254,32,131,248,32,131,248,8,4,68,81,41,240,33,207,148,81,66,38,252,2,28,213,66,148,221,66,168,201,67,34,32,2,124,32,75,8,169,10,32,162,2,64,36,34,66,35,226,0,8,0,68,68,66,8,32,129,16,10,0,64,11,3,8,192,96,0,32,129,16,127,193,16,32,132,4,63,130,168,42,130,168,255,224,0,136,132,80,31,200,0,72,131,4,64,13,252,85,69,84,63,224,0,4,68,88,38,0,68,227,194,0,39,194,68,47,195,68,39,192,68,4,4,32,34,64,132,228,66,72,34,130,16,42,131,40,36,65,130,2,4,16,47,224,130,224,2,124,36,66,124,44,67,124,36,64,254,0,4,248,36,128,48,197,4,140,66,4,248,98,5,252,2,0,32,63,130,8,63,130,0,32,65,252,17,1,16,255,225,16,33,4,16,123,132,200,42,132,200,63,130,72,63,129,16,127,193,16,255,226,8,123,192,132,74,66,148,74,64,64,127,192,0,17,0,160,255,224,0,71,196,68,146,142,16,34,132,214,241,0,124,49,12,254,1,0,16,17,15,254,17,7,252,64,68,68,95,68,68,74,69,20,64,71,252,17,15,254,17,7,188,74,68,188,82,68,188,106,69,36,69,68,136,0,7,252,68,68,68,127,196,68,74,69,20,96,196,4,127,196,4,24,6,60,122,68,164,124,100,128,123,196,36,122,132,144,170,129,68,4,7,252,17,0,160,255,224,0,63,130,8,63,130,8,63,130,8,123,196,164,74,69,60,82,68,164,75,198,164,82,68,68,69,68,136,32,2,126,37,47,82,87,229,82,85,34,106,84,100,194,135,224,66,2,0,32,229,10,136,178,106,16,160,10,248,224,138,16,2,0,64,64,4,124,116,72,124,116,66,124,117,2,82,44,195,72,38,64,66,64,226,240,2,40,148,68,1,12,23,2,16,239,226,16,33,2,124,4,7,252,64,75,248,4,3,248,36,131,248,36,131,248,17,2,8,34,2,32,67,231,194,137,66,16,33,2,16,42,131,40,36,64,130,63,128,72,4,143,254,4,128,72,63,128,128,8,1,0,32,4,0,0,135,200,4,128,72,124,132,8,64,135,200,4,128,72,40,129,8,4,14,120,169,10,124,192,74,124,160,74,252,226,8,20,148,170,120,8,7,60,66,68,36,122,68,36,82,70,52,66,128,32,2,0,32,17,15,254,17,0,64,63,130,72,36,143,254,10,1,16,32,204,2,32,2,238,42,175,170,42,167,68,106,170,32,175,226,40,33,2,238,251,232,162,170,170,170,81,72,162,8,15,254,16,128,144,6,7,156,2,7,254,73,5,252,105,4,252,68,4,248,74,132,252,64,73,236,8,0,64,127,228,0,68,69,36,74,132,136,65,4,32,127,232,0,32,4,238,74,170,170,196,68,170,130,14,254,4,67,40,195,128,198,17,15,254,17,7,254,64,43,248,4,3,248,5,0,72,255,224,0,17,15,254,17,7,252,64,64,64,63,130,72,63,128,68,7,199,196,17,15,254,17,7,252,64,65,240,17,1,240,0,3,248,32,131,248,17,15,254,17,7,254,64,40,64,36,66,72,68,0,160,49,140,6,33,194,20,33,207,136,171,234,170,251,226,42,43,227,136,232,160,6,2,4,222,41,32,146,233,34,146,45,162,148,33,5,16,143,224,0,4,15,254,32,3,252,0,14,252,169,78,156,173,78,68,170,102,16,0,15,248,32,131,208,85,196,132,149,64,8,63,130,168,42,143,254,124,68,68,124,132,80,124,65,4,254,132,80,124,33,2,84,75,40,80,6,62,72,131,144,19,230,34,34,175,170,34,167,8,169,66,34,0,15,126,33,2,124,69,71,124,213,69,124,89,7,80,67,0,206,2,14,32,175,138,168,234,138,168,191,234,32,229,10,80,8,131,6,4,128,72,233,234,162,188,42,82,168,170,234,224,42,98,24,160,4,32,2,124,37,79,212,39,194,84,53,78,124,37,66,84,169,69,12,16,2,254,41,38,146,175,226,146,41,34,254,41,34,146,48,162,4,113,5,254,85,135,84,91,229,212,117,229,180,93,229,84,89,235,16,2,0,16,63,234,0,111,226,146,111,234,146,47,228,146,73,41,6,4,7,254,66,5,252,66,71,254,66,69,252,82,69,252,82,73,12,4,15,254,34,132,36,151,238,72,47,228,72,247,224,72,55,236,64,119,197,8,83,7,8,39,195,212,167,202,84,191,206,84,4,64,76,35,226,20,32,143,190,170,170,190,250,162,62,42,163,162,234,160,36,2,0,16,224,10,112,161,139,218,165,202,152,233,73,20,37,32,32,33,1,8,135,4,16,1,162,252,67,140,84,73,69,18,69,0,32,79,194,8,3,8,8,79,225,146,47,236,146,79,228,146,73,32,134,4,0,32,0,3,192,4,0,100,118,129,80,36,132,68,148,32,128,63,0,160,4,3,248,36,131,248,36,131,248,36,128,132,85,41,242,63,0,160,63,130,72,63,130,72,63,130,72,8,15,248,16,134,24,31,193,36,18,65,252,18,65,36,31,193,36,18,66,36,33,68,8,4,0,64,148,169,74,173,107,90,148,170,82,189,232,66,255,224,0,18,1,40,34,66,32,111,202,32,37,2,80,41,34,146,48,226,0,18,1,32,39,230,164,170,130,144,42,130,70,4,5,36,80,168,248,34,3,40,42,74,32,175,202,32,165,2,80,41,34,146,48,226,0,8,0,144,8,128,128,255,224,160,10,1,32,18,34,34,66,40,30,4,0,64,4,7,252,68,68,68,127,196,68,68,71,252,64,64,0,16,1,30,17,39,212,85,133,84,125,37,82,85,167,212,69,0,16,32,130,8,120,132,62,242,162,42,251,226,42,42,163,42,35,224,0,146,5,40,34,69,32,159,225,40,50,133,40,146,161,74,84,162,134,65,2,16,1,8,254,89,34,146,47,236,146,73,36,254,72,32,0,136,132,72,30,232,144,72,225,226,42,76,164,74,229,36,90,66,76,0,15,254,10,7,252,74,68,164,115,196,4,127,196,4,127,196,4,8,0,128,255,225,0,63,133,8,159,129,8,31,129,8,18,129,16,8,0,128,255,193,0,16,1,248,40,130,136,69,4,32,141,131,6,4,0,64,255,224,128,16,3,248,80,137,8,16,129,248,16,128,0,17,1,16,47,226,32,98,10,64,43,195,36,34,66,36,35,194,36,24,142,8,168,135,62,34,175,170,51,230,170,162,162,42,35,226,0,129,132,224,2,1,254,199,4,168,82,100,248,85,6,92,72,65,24,0,3,248,16,129,8,17,0,144,10,0,64,10,3,24,192,96,0,34,2,32,66,5,124,146,78,36,34,68,36,148,79,68,9,65,8,135,196,16,65,0,254,225,2,16,33,2,80,34,5,0,143,224,0,144,132,136,61,73,18,82,1,200,52,77,64,85,5,72,84,66,192,0,3,248,4,0,64,4,15,254,4,0,64,4,0,64,20,0,128,31,0,64,4,7,252,4,1,64,8,3,248,42,130,168,255,224,0,33,2,40,36,79,186,32,6,226,122,170,234,170,162,226,42,162,164,7,128,64,127,228,82,94,68,124,72,132,248,66,5,252,69,9,140,63,130,72,63,130,72,127,196,84,95,68,12,4,5,36,80,168,248,20,198,228,68,70,140,78,70,76,78,68,68,255,224,0,17,2,8,4,0,160,17,2,8,223,96,64,127,192,64,36,132,68,148,64,128,4,0,160,17,134,246,128,3,212,37,67,212,37,67,196,37,66,200,66,2,80,8,131,246,192,69,212,85,69,212,84,69,212,84,139,254,16,1,240,33,4,32,191,130,72,63,130,72,63,128,0,127,192,0,33,2,40,52,74,186,160,10,226,170,162,234,42,162,234,42,34,166,65,2,40,4,72,186,64,1,234,42,172,234,74,164,226,74,160,164,136,4,248,16,138,16,95,193,36,63,205,36,95,196,0,127,228,0,119,197,84,87,198,84,87,197,16,95,230,146,73,36,186,72,164,132,63,128,16,26,0,64,2,15,254,4,32,68,4,0,64,20,0,128,39,194,68,36,79,124,80,5,124,81,5,16,47,229,40,68,72,130,0,15,254,4,7,252,68,70,100,85,70,100,85,68,68,69,68,72,16,1,0,31,194,0,32,3,252,0,64,4,127,64,4,2,128,16,33,2,16,33,234,144,170,10,190,168,42,186,184,44,130,9,64,8,3,135,192,4,3,248,36,131,248,4,7,252,69,69,244,65,68,8,4,0,32,127,228,2,191,128,64,4,7,252,4,0,64,20,0,128,128,5,252,2,0,248,196,133,254,64,4,120,84,134,72,71,128,72,0,15,188,8,68,164,41,64,132,41,68,164,140,64,132,41,65,8,0,7,252,4,0,64,4,3,248,4,0,80,4,128,64,255,224,0,65,68,16,95,238,16,93,37,82,93,68,8,102,173,154,2,96,66,17,15,254,17,0,0,63,128,64,255,224,64,4,0,64,20,0,128,16,1,30,253,34,20,125,138,84,61,34,82,61,162,84,37,2,208,0,0,124,113,5,16,95,229,16,81,5,16,113,4,16,5,0,32,15,136,168,79,128,168,207,132,32,95,197,36,87,69,12,64,11,254,1,0,40,228,74,186,160,10,234,170,170,234,234,170,226,10,160,164,34,130,68,40,42,16,170,138,196,168,42,188,186,76,164,3,192,36,40,4,142,142,161,74,36,165,250,196,165,106,84,229,120,124,132,8,4,1,176,224,225,240,0,131,168,42,131,168,41,128,68,82,169,248,41,4,80,133,225,34,40,68,80,129,7,144,74,132,168,122,68,66,32,138,136,68,170,8,59,226,136,104,138,168,45,66,148,162,68,66,4,15,254,16,131,252,0,67,248,32,131,248,32,131,248,32,130,24,40,129,80,255,226,8,68,75,250,0,3,248,0,3,248,32,131,248,133,4,136,18,72,80,72,131,6,64,12,248,72,132,136,79,128,0,4,7,252,64,67,248,36,131,248,36,131,248,4,7,252,69,69,244,66,130,68,240,1,16,42,135,68,168,34,124,36,66,68,39,194,68,247,225,16,98,1,124,252,66,212,37,66,84,37,66,40,164,68,130,2,15,60,20,134,252,21,79,124,35,2,218,34,194,218,162,164,216,0,15,0,23,197,36,82,69,36,122,64,148,40,140,148,42,65,66,35,131,168,75,139,36,41,205,240,21,1,0,31,192,4,126,64,12,72,34,146,13,104,186,73,34,254,73,44,186,77,101,18,81,34,2,127,197,4,144,3,240,66,11,248,36,131,248,10,1,42,34,44,30,0,3,248,0,0,0,255,225,32,18,1,32,34,34,34,65,232,0,32,2,254,32,2,124,244,66,124,36,66,124,52,78,0,79,224,0,4,3,248,4,15,254,0,3,248,32,131,248,10,67,24,212,129,132,63,226,32,39,194,68,39,194,68,39,194,16,69,68,146,149,32,32,33,194,226,37,79,254,34,2,254,50,14,60,37,66,72,169,68,34,33,2,124,241,4,254,160,15,124,36,67,124,226,162,108,42,66,50,127,228,2,95,36,2,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+85277);
/* memory initializer */ allocate([164,162,74,165,42,97,164,2,127,228,2,63,130,8,63,128,0,63,130,8,36,130,72,36,128,160,17,6,8,127,196,4,95,69,20,95,68,4,95,69,84,85,68,164,81,71,252,17,9,124,81,2,254,80,9,124,52,69,124,146,161,100,91,66,34,159,229,16,23,201,68,87,195,68,87,205,16,85,69,146,85,2,32,34,4,60,68,73,120,225,4,254,134,14,180,5,131,52,205,32,48,64,2,252,32,0,0,31,206,80,37,2,84,37,66,140,80,8,254,17,15,254,17,2,0,59,196,164,74,74,180,18,129,34,34,36,30,127,228,64,95,197,4,95,197,4,95,196,168,82,72,96,40,164,250,32,2,60,122,68,164,170,193,32,34,36,158,4,5,68,145,32,242,1,15,8,151,233,66,163,201,0,151,237,40,162,136,42,132,168,134,0,7,252,64,68,4,64,71,244,64,68,4,64,68,4,127,192,0,34,2,32,71,201,68,232,66,36,65,79,4,0,67,20,192,128,0,32,162,8,119,226,72,252,162,76,38,171,150,162,46,0,159,224,0,112,229,112,81,7,16,33,2,254,185,10,40,186,142,68,8,65,2,32,2,60,122,72,36,123,194,36,250,66,60,42,67,36,37,64,136,3,3,192,32,3,252,34,2,32,255,224,64,68,68,68,127,192,4,8,7,252,68,69,84,127,196,228,85,79,254,8,1,252,0,64,24,0,1,248,16,129,8,31,129,8,16,129,248,16,130,8,34,132,16,36,66,40,32,11,124,172,74,68,167,194,40,34,130,74,36,162,134,79,226,2,17,36,162,95,37,18,95,36,162,74,165,42,97,164,6,32,2,28,248,2,0,115,226,8,248,130,16,113,74,162,35,226,2,0,3,248,0,0,0,255,224,64,8,0,128,17,2,8,127,194,4,125,228,82,125,32,20,125,132,84,85,37,82,85,162,148,37,4,16,16,1,0,31,194,4,40,68,68,0,64,100,56,65,4,1,64,8,119,197,68,87,198,0,87,197,68,85,70,84,69,68,40,68,68,130,8,0,128,17,2,8,127,193,36,18,1,32,34,34,34,65,232,0,0,4,124,32,0,0,15,238,16,34,2,68,47,226,2,80,8,254,18,15,252,18,4,248,152,142,248,72,136,248,224,1,252,213,67,254,0,15,158,32,15,128,171,234,136,216,136,144,249,8,164,139,239,130,63,130,8,63,130,8,255,232,130,63,129,64,63,128,64,255,224,64,17,7,208,1,228,82,42,47,202,0,103,202,69,39,194,68,167,196,127,1,16,19,194,4,95,72,44,4,15,254,4,0,64,20,0,128,0,7,254,66,4,32,95,197,36,82,69,36,82,196,32,66,7,254,0,15,126,36,130,72,71,231,106,214,165,106,86,231,72,84,128,126,16,7,240,17,2,20,64,192,64,127,192,64,36,132,68,20,0,128,18,1,40,126,65,32,255,225,32,126,65,40,57,37,90,146,97,66,18,1,40,126,65,32,18,15,254,2,7,164,73,132,146,122,160,70,8,0,64,127,228,2,132,2,68,36,132,80,4,0,160,49,140,6,4,0,32,127,228,66,191,129,16,10,7,252,4,3,248,4,0,64,18,135,228,18,15,254,34,15,164,81,71,212,16,129,202,241,97,34,0,7,252,4,3,248,36,131,248,36,143,254,32,130,8,34,130,16,8,0,128,255,193,0,34,2,32,111,138,32,34,3,252,32,2,0,1,0,32,119,197,68,84,69,124,84,69,68,87,199,68,84,64,124,74,133,252,72,143,222,73,69,102,111,140,136,74,132,168,69,13,140,32,79,184,66,15,188,34,143,168,36,135,240,65,7,240,65,7,240,82,135,190,148,135,190,16,131,154,82,227,248,36,130,72,10,7,24,1,15,136,139,234,160,170,138,168,171,234,168,164,133,72,75,233,0,113,5,8,87,231,64,84,133,72,119,229,72,84,133,72,91,235,0,17,15,254,17,7,252,34,135,176,202,35,30,209,7,252,17,2,16,5,11,254,69,1,252,21,77,252,72,132,248,72,132,248,96,9,254,34,138,254,114,130,254,250,162,254,122,170,254,36,66,124,36,66,124,10,4,164,42,143,254,17,4,164,95,68,68,95,68,68,68,71,252,17,15,254,17,8,248,72,129,220,149,69,220,2,5,252,138,129,36,4,7,252,4,7,252,78,65,80,96,192,192,3,3,8,14,0,16,0,3,248,32,131,248,32,131,248,4,15,254,4,0,64,4,0,64,143,132,136,15,136,0,93,195,84,93,204,32,95,196,112,74,129,36,127,194,72,17,0,224,49,140,70,63,130,72,63,128,68,255,224,2,115,133,40,83,135,0,46,226,170,174,235,16,175,235,56,229,64,146,7,192,68,231,202,0,174,234,170,174,234,16,239,234,56,5,64,146,65,2,80,7,192,144,225,2,254,32,2,124,36,66,124,80,8,254,8,1,0,127,132,8,127,132,8,127,128,128,15,207,128,8,32,126,33,2,16,41,11,16,167,202,16,161,2,16,33,5,16,79,232,0,39,194,68,39,203,0,174,234,170,174,226,16,47,229,56,69,72,146,4,7,252,4,3,248,4,15,254,0,3,248,36,130,72,27,6,12,32,2,252,36,79,168,33,2,110,57,14,124,33,2,254,161,4,16,0,71,196,69,69,84,85,69,84,85,69,84,40,66,68,69,72,8,159,196,136,5,8,32,77,129,38,47,140,32,95,196,32,66,0,32,0,175,136,143,234,136,170,138,250,170,170,172,34,133,74,73,104,34,32,3,252,72,8,248,8,0,248,8,0,64,2,5,4,81,40,240,36,66,40,47,226,214,251,162,254,32,2,124,52,78,124,68,64,124,36,66,40,47,235,214,171,170,254,160,2,124,36,66,124,36,66,124,32,129,16,127,197,84,78,71,252,0,3,248,32,131,248,32,131,248,4,79,168,143,232,214,171,170,254,168,10,124,36,69,124,76,72,124,17,1,16,17,7,208,17,1,16,25,7,16,17,33,18,80,226,0,2,1,252,231,10,168,178,106,248,168,138,248,232,138,248,0,1,252,130,5,252,7,8,168,82,96,248,40,140,248,72,132,248,64,1,252,17,1,16,17,15,208,17,3,144,53,5,18,145,33,18,16,225,0,17,1,16,253,2,16,33,5,16,125,1,18,29,47,18,16,225,0,64,36,226,106,168,170,234,164,170,234,164,170,68,166,66,74,161,4,64,2,252,0,69,244,85,69,244,85,69,244,68,68,68,69,68,8,0,206,240,162,10,16,239,202,8,161,14,32,164,10,160,225,224,0,64,5,220,85,79,84,85,71,254,213,69,84,85,69,84,102,68,204,33,2,254,42,175,68,34,6,62,117,10,158,161,2,30,33,2,16,2,0,32,119,229,80,89,5,30,81,5,16,113,229,16,1,0,16,16,1,0,63,196,128,136,0,248,8,0,128,15,192,128,8,0,128,34,2,160,179,234,80,169,10,30,33,2,16,81,228,144,129,0,16,4,4,64,39,224,160,226,2,60,34,2,32,43,227,32,34,0,32,33,2,254,36,79,40,47,226,146,59,174,146,43,162,170,171,164,134,4,15,254,17,0,224,49,141,246,4,7,252,74,68,164,73,68,8,8,0,64,127,196,4,135,3,128,8,0,240,120,0,132,8,64,124,4,7,254,81,42,136,16,3,252,72,0,248,8,0,252,8,0,128,17,1,124,33,2,124,97,10,254,32,2,124,37,66,84,34,130,196,4,15,254,145,39,252,17,15,254,32,132,68,191,160,64,36,132,196,7,142,136,191,234,164,237,42,188,232,10,188,168,14,188,18,66,60,25,14,16,33,195,144,225,2,60,58,78,36,35,194,2,31,224,0,31,2,16,127,234,72,42,67,250,32,2,248,32,4,248,72,136,248,17,5,80,57,225,16,253,1,60,58,69,100,146,65,36,19,193,0,66,2,32,131,229,32,18,2,252,40,76,132,72,68,252,72,64,0,10,0,248,120,0,240,116,192,48,61,32,14,63,130,168,42,143,254,16,97,56,250,2,32,82,7,190,18,65,164,114,65,36,20,65,132,32,2,126,244,36,126,165,79,126,37,67,126,234,130,170,50,66,50,4,4,68,127,193,0,252,66,56,82,7,190,18,135,168,20,129,136,63,194,4,63,194,80,63,194,80,63,226,160,73,68,136,140,96,128,17,15,254,17,79,160,39,207,168,171,205,168,139,207,128,138,175,170,33,2,20,33,15,28,39,7,16,105,234,116,160,130,26,34,98,66,4,0,64,4,0,124,4,0,64,63,130,8,32,130,8,63,130,8,33,66,18,61,2,30,39,15,148,137,72,152,137,47,170,132,96,130,65,2,16,1,15,158,1,5,16,87,197,68,36,67,68,199,192,68,4,132,252,36,136,120,84,129,120,36,141,254,74,132,196,72,0,254,33,2,8,71,233,66,240,2,126,65,15,16,5,227,80,203,1,30,33,2,124,34,143,254,36,71,124,108,74,124,161,2,254,33,2,16,4,7,252,17,15,254,32,131,248,32,131,248,4,15,254,4,0,64,16,39,196,40,143,226,68,71,200,69,7,194,16,79,200,17,1,32,130,5,252,5,11,254,72,128,248,40,140,248,66,5,252,66,0,32,244,65,68,20,143,80,134,8,252,245,1,80,20,130,84,230,32,0,36,129,80,127,197,20,159,0,8,63,0,64,255,224,64,20,0,128,129,5,210,5,72,88,93,3,62,81,141,212,69,68,84,85,160,144,32,130,8,32,143,126,32,135,72,106,138,40,33,2,40,36,66,130,2,0,32,2,7,254,2,2,32,18,0,160,4,0,176,16,230,0,34,2,36,34,143,176,170,10,254,170,138,168,170,75,164,35,34,32,2,15,164,138,136,176,170,10,254,170,138,168,34,69,36,75,40,32,16,129,8,32,130,254,96,138,136,36,130,40,33,2,40,36,98,128,114,5,36,82,135,48,82,5,254,115,5,40,82,133,36,83,43,32,1,3,254,162,134,254,36,66,124,100,74,124,33,4,254,65,8,16,113,5,124,82,134,254,100,69,124,84,69,124,97,4,254,65,4,16,32,2,252,34,79,36,37,66,136,48,14,124,36,66,68,167,196,68,0,7,124,82,69,36,85,71,136,80,5,124,84,71,68,7,192,68,34,130,36,34,15,62,46,2,36,58,142,16,35,34,74,168,100,2,64,2,252,2,72,36,84,65,84,40,140,124,68,68,68,71,192,68,16,1,34,125,65,20,16,143,232,17,69,212,82,37,0,191,224,0,0,7,124,82,69,36,117,69,136,87,197,68,119,192,0,82,72,146,127,196,164,127,192,64,63,130,8,63,130,8,63,128,64,255,224,64,10,0,160,74,66,168,11,2,168,74,73,32,18,34,34,33,228,0,18,7,190,77,71,136,133,103,248,4,143,254,4,135,248,4,0,64,0,7,248,16,129,8,34,132,16,128,3,248,32,130,8,63,130,8,1,8,252,72,0,168,207,228,168,75,133,0,106,164,170,64,11,254,32,194,112,36,15,64,39,227,72,228,130,72,36,130,136,168,133,8,16,199,176,18,1,188,114,129,40,52,128,0,63,130,8,32,131,248,18,1,120,122,129,104,26,167,86,20,35,248,36,131,248,4,71,254,68,69,244,234,132,238,161,175,234,42,163,234,234,66,228,42,162,178,8,0,132,127,128,144,10,15,252,8,3,248,208,129,248,16,129,248,65,4,18,119,200,24,119,226,32,247,194,164,35,195,36,35,192,0,17,15,254,21,0,32,127,196,144,127,196,144,79,4,0,85,74,82,132,4,32,95,192,8,232,130,80,34,2,80,40,130,0,95,232,0,136,100,152,9,11,208,73,226,148,77,77,148,105,68,148,73,65,164,1,15,16,34,130,68,41,167,96,32,130,16,54,78,8,67,0,192,40,135,200,42,131,152,40,131,168,41,143,206,83,134,136,64,135,200,4,7,252,4,3,248,32,131,248,32,131,248,32,143,254,17,2,8,3,239,200,40,143,236,171,79,244,17,207,244,17,65,212,241,196,22,1,15,144,33,2,30,65,7,16,215,197,68,84,71,68,87,192,68,1,14,254,65,8,124,162,14,254,68,78,186,65,6,254,197,64,146,4,0,64,7,192,64,63,130,8,36,130,72,36,128,160,17,6,8,33,2,16,121,8,16,119,226,16,249,2,16,33,3,16,33,0,16,17,1,16,33,226,16,103,202,68,37,66,84,37,66,40,36,66,130,33,2,16,33,15,126,37,39,16,106,138,40,162,162,74,40,98,0,2,3,254,34,10,80,104,131,54,108,10,48,44,68,24,70,9,128,1,4,40,34,128,68,233,34,32,36,66,24,38,35,12,35,0,192,63,128,64,127,232,66,53,128,0,63,194,0,63,194,168,73,8,204,32,2,254,40,15,188,40,2,254,58,142,170,42,66,164,171,37,32,65,4,254,113,8,124,116,66,124,244,66,124,36,66,254,50,130,68,1,7,16,87,197,32,99,5,80,87,197,16,111,228,16,65,4,16,17,15,254,17,3,224,2,7,84,20,130,68,95,32,0,82,72,146,34,2,60,36,79,136,39,194,20,55,238,20,39,194,16,165,4,32,4,7,120,84,133,144,119,197,20,127,229,20,87,199,16,5,0,32,32,2,254,65,9,16,33,6,92,165,2,80,37,2,80,47,226,0,18,9,60,84,66,8,87,201,20,63,229,20,151,193,16,85,2,32,16,1,240,34,4,64,63,128,72,255,224,72,63,128,64,20,0,128,32,2,254,33,11,16,169,10,30,165,2,80,37,2,80,63,226,0,16,143,254,85,71,212,56,133,84,144,39,252,4,2,120,36,15,254,32,2,124,32,143,16,45,162,92,53,78,148,37,34,32,175,228,0,0,7,252,4,0,64,36,2,124,36,2,64,36,2,64,255,192,0,1,7,208,17,225,36,85,69,212,81,69,8,93,78,20,2,64,66,32,130,8,248,234,136,171,234,162,170,170,170,186,162,8,33,66,34,2,0,16,63,234,0,111,226,16,97,10,92,37,4,80,95,232,0,68,2,158,1,39,210,17,65,20,125,33,18,41,162,84,69,8,16,0,4,254,33,0,16,229,2,92,37,2,208,53,2,80,31,224,0,17,15,254,17,0,64,2,7,248,1,0,96,24,2,0,95,224,0,33,2,16,47,239,16,39,199,36,106,74,40,161,2,40,36,66,130,4,0,64,255,224,64,4,7,248,32,129,16,10,0,64,27,14,14,1,0,16,239,234,16,161,10,252,164,74,68,226,138,16,6,129,134,36,2,64,39,15,174,170,170,170,175,175,170,34,227,80,228,128,132,32,2,0,61,197,20,145,65,20,253,65,20,41,66,84,69,200,0,1,7,16,87,229,16,113,5,124,82,71,36,82,133,16,82,139,70,4,7,72,87,5,66,115,229,0,119,197,68,87,197,68,87,203,68,65,2,16,129,4,16,15,226,16,65,12,16,65,4,16,65,0,16,8,0,64,0,7,248,1,0,32,4,0,128,16,2,128,71,224,0,32,2,0,71,197,68,228,66,68,68,79,124,0,3,40,196,64,130,0,15,188,82,71,36,82,71,36,82,69,188,240,1,36,20,33,0,4,7,252,4,3,248,32,131,248,32,131,248,32,131,248,32,143,254,33,2,124,33,15,124,36,71,124,108,74,124,164,66,124,36,66,254,1,15,124,33,2,124,116,69,124,84,75,124,36,66,124,68,72,254,34,2,32,34,15,120,34,130,40,54,142,40,37,162,74,168,101,2,17,1,124,33,2,124,100,74,124,36,66,124,36,66,124,36,66,254,16,1,254,34,2,68,111,234,18,33,2,124,33,2,16,47,226,0,33,2,16,33,2,16,245,194,80,37,2,80,53,12,80,31,224,0,36,2,76,39,15,68,35,194,0,55,206,68,39,194,68,167,196,68,4,0,64,4,2,64,39,194,64,36,2,64,36,2,64,255,224,0,120,132,136,72,135,168,18,225,232,82,133,40,94,142,40,15,224,0,0,3,248,32,130,8,32,130,8,63,128,0,17,2,8,64,64,0,33,130,96,56,66,4,31,192,0,63,194,4,63,194,4,63,194,4,32,196,112,85,9,80,229,2,124,69,15,80,4,163,74,198,96,66,4,0,64,255,224,64,4,7,252,8,0,64,84,69,18,81,40,240,34,15,120,34,131,106,227,98,66,99,131,192,4,7,252,4,0,192,74,4,78,64,174,234,68,196,74,127,172,74,74,196,168,80,140,8,0,7,252,8,1,16,63,128,72,4,3,248,4,0,64,255,224,0,1,15,144,34,5,62,254,130,168,34,135,40,33,3,168,228,64,130,127,196,164,127,192,64,255,224,64,63,130,8,36,130,72,36,143,254,32,2,60,250,74,164,170,74,164,170,74,188,184,2,36,36,34,0,33,2,16,39,202,144,175,234,136,175,234,136,186,140,152,8,128,24,16,69,4,125,73,20,255,65,20,125,69,84,84,69,196,17,65,8,32,3,188,82,79,228,18,66,188,68,3,248,32,131,248,32,131,248,25,14,16,37,2,124,249,2,16,119,234,144,34,130,40,36,66,130,26,142,36,36,2,254,244,130,126,116,134,254,164,130,72,39,226,64,3,135,192,68,7,252,68,5,240,81,5,80,85,4,160,145,2,8,8,1,252,36,133,48,12,3,32,202,64,168,18,0,80,24,134,6,2,3,254,34,10,248,98,3,252,97,10,252,33,4,80,65,8,48,69,66,84,159,228,84,15,226,146,71,204,84,69,68,92,65,0,16,33,1,16,130,4,68,15,225,2,39,204,68,68,68,68,71,192,68,4,15,254,145,34,8,31,0,64,9,1,248,4,3,248,4,7,252,4,0,64,4,7,252,68,68,68,68,71,252,4,0,64,4,0,64,4,0,64,63,130,72,36,131,248,4,0,0,63,130,168,42,143,254,4,0,64,127,196,68,68,71,252,4,0,128,4,69,34,80,168,248,32,130,8,56,132,62,130,167,170,34,175,190,32,130,136,48,130,8,4,15,254,4,3,248,36,131,248,4,64,168,49,13,72,24,97,0,34,2,32,71,197,68,234,130,16,66,143,70,1,3,8,195,0,8,24,142,8,32,130,62,250,162,42,114,166,190,160,130,8,32,130,8,0,135,136,72,132,190,122,164,170,74,167,190,72,132,136,104,137,8,7,131,192,4,15,254,36,131,248,36,131,248,4,3,248,4,15,254,17,1,16,33,2,254,105,42,146,41,34,254,33,2,16,33,2,16,4,0,64,10,1,16,32,140,6,17,1,16,17,2,168,68,72,130,8,3,240,33,2,144,37,15,252,33,2,144,37,2,16,37,4,32,63,130,72,46,130,72,63,130,8,46,130,168,46,132,8,66,136,16,16,65,36,18,69,36,91,73,108,18,65,36,34,66,36,66,72,4,72,34,146,137,36,218,27,98,146,41,44,146,73,37,18,80,34,2,2,4,60,36,64,136,231,226,2,32,34,62,40,35,2,39,224,2,4,14,78,53,34,226,228,233,248,228,226,226,53,34,66,164,164,68,32,130,8,248,132,62,162,175,170,35,227,170,226,162,42,35,226,0,0,135,136,72,132,254,120,132,168,73,135,136,72,132,136,106,137,16,63,0,16,31,0,16,127,228,66,191,130,72,36,130,88,4,0,64,0,7,188,74,68,164,123,192,0,31,1,16,17,1,18,33,36,14,64,135,8,151,226,74,244,129,126,246,33,84,21,79,72,9,65,34,8,0,64,127,196,4,132,0,64,63,130,72,63,130,72,63,130,8,63,130,8,63,130,32,33,5,248,81,73,242,17,1,240,0,7,252,31,14,160,47,234,170,174,72,170,254,1,52,245,129,52,85,34,48,1,15,80,39,194,144,33,7,254,33,2,56,53,78,146,65,0,16,33,2,80,39,207,144,33,7,126,105,10,56,165,66,146,33,2,16,33,2,80,39,207,144,169,10,254,249,2,56,37,67,146,233,0,16,4,2,64,63,132,64,4,7,252,14,1,80,36,132,68,4,0,64,17,5,18,39,197,24,159,225,32,55,197,164,147,193,36,83,194,36,130,4,34,15,204,40,95,228,32,71,196,196,87,198,68,71,192,68,1,8,80,71,192,144,193,4,254,65,4,56,101,68,146,1,0,16,128,5,254,68,0,162,19,206,88,43,66,84,41,34,80,82,8,254,33,2,16,33,7,190,82,137,72,16,129,8,16,129,8,18,129,16,33,2,16,41,11,124,165,74,84,167,194,80,33,69,30,78,40,0,4,67,248,5,15,254,8,3,248,208,129,248,16,129,248,0,4,164,34,2,16,32,15,124,33,2,16,55,206,16,33,2,16,175,228,0,15,206,132,175,202,144,239,202,212,239,202,144,191,239,146,43,164,134,15,206,132,175,202,144,175,202,212,175,207,16,159,226,146,43,164,134,8,0,64,127,192,64,4,0,64,63,128,64,4,0,64,255,224,0,17,15,254,21,3,232,5,15,254,8,1,248,40,140,248,8,128,248,34,2,16,39,207,144,33,7,16,103,202,16,161,2,16,47,226,0,1,7,144,73,7,188,73,71,148,73,68,148,94,78,36,5,64,136,33,2,8,35,239,136,168,138,136,251,226,8,40,131,136,235,224,0,1,15,136,139,234,162,170,42,128,168,10,128,32,5,62,72,8,128,65,4,254,113,8,124,113,2,254,242,66,126,36,66,148,48,64,12,66,7,188,162,129,68,0,7,120,36,130,104,53,174,138,8,161,6,18,1,16,32,2,254,97,10,16,39,194,16,33,2,16,47,226,0,66,2,16,15,232,16,65,1,16,39,204,16,65,4,16,79,224,0,64,2,124,244,65,68,36,71,124,170,130,40,34,162,74,40,98,0,1,15,8,16,5,62,80,133,8,123,224,136,232,128,136,43,225,0,32,2,28,46,143,168,42,130,168,58,142,168,42,130,164,170,69,34,0,0,60,61,2,80,37,2,80,37,2,72,36,132,68,68,40,64,33,2,16,39,207,84,39,194,84,55,206,18,33,66,24,162,164,198,4,0,64,63,128,128,255,225,0,63,128,16,18,0,192,2,0,16,1,15,16,39,194,16,65,7,254,210,5,124,80,71,40,81,0,8,17,1,16,123,194,16,87,231,144,19,193,196,240,129,48,16,129,4,46,226,170,46,239,136,42,162,102,50,142,124,34,130,254,162,132,68,8,143,254,133,8,252,165,75,254,165,74,252,37,133,212,85,40,80,66,7,190,164,129,248,17,15,254,24,6,82,27,70,104,10,99,96,33,2,8,39,239,64,36,135,72,103,234,72,168,130,136,51,226,0,4,0,32,63,194,0,34,2,32,47,130,32,66,4,32,159,192,0,17,5,16,55,197,16,19,128,64,255,224,160,25,66,136,202,96,192,34,2,32,162,6,254,36,130,72,100,138,40,33,2,40,44,66,0,33,2,124,242,130,254,37,67,124,101,74,124,33,2,124,161,4,254,33,2,16,161,6,16,47,226,16,97,10,16,33,2,124,32,2,0,33,2,20,161,38,16,47,226,16,97,10,40,34,130,68,36,66,130,34,130,36,36,15,126,44,135,126,108,138,126,164,130,72,39,226,64,66,132,36,116,8,254,116,130,126,244,130,126,44,131,72,39,224,64,65,2,32,39,192,68,231,194,64,39,194,68,36,66,124,80,8,254,17,7,144,19,231,228,37,67,136,73,67,250,36,130,72,10,3,16,113,5,16,97,5,40,82,134,68,72,36,0,4,7,252,4,15,254,46,228,34,74,170,68,234,164,16,142,238,42,10,163,68,202,161,18,1,4,254,32,0,124,228,66,124,32,2,124,40,131,126,33,0,48,5,8,72,72,0,254,25,2,252,73,12,252,73,4,144,79,224,128,32,2,124,36,79,68,39,195,16,101,10,92,37,2,80,171,229,0,33,2,16,37,79,84,37,66,124,49,14,84,37,66,84,167,196,0,4,0,124,4,3,248,32,131,248,32,131,248,4,15,254,4,0,64,4,0,124,4,3,248,32,131,248,32,143,254,14,3,88,196,96,64,0,14,252,66,4,96,73,79,184,69,132,212,83,70,82,201,0,48,17,15,254,17,0,64,36,130,72,63,128,64,68,68,68,127,192,0,1,15,144,33,239,162,172,42,146,216,168,130,248,40,130,249,64,8,0,1,252,228,10,160,179,42,220,169,139,116,229,72,146,21,0,32,17,15,254,4,3,248,8,15,254,16,131,248,80,137,248,16,129,248,34,2,32,42,11,124,164,74,132,34,66,20,32,69,4,74,136,16,66,2,32,130,4,248,10,130,168,74,140,248,66,4,40,95,192,4,32,129,16,255,225,8,33,4,164,115,130,16,82,79,190,72,32,0,66,2,60,20,66,16,225,2,40,36,64,0,63,130,8,32,131,248,68,2,124,24,70,32,37,0,136,63,130,8,36,130,72,27,6,8,68,2,124,26,70,32,37,2,140,16,15,254,17,0,224,49,140,6,72,66,72,159,228,68,8,131,18,93,204,68,72,133,82,93,224,66,66,162,84,10,136,84,66,161,0,47,236,146,79,228,146,79,224,130,1,15,16,18,2,62,36,67,164,226,66,40,33,2,40,164,68,130,17,69,216,81,37,206,233,1,32,12,131,252,4,66,80,84,128,128,16,1,124,32,66,8,97,10,254,33,2,16,33,2,16,37,2,32,32,2,60,168,71,8,32,143,200,35,231,8,168,130,8,34,130,16,130,5,252,16,72,32,95,194,136,69,13,252,66,4,248,66,0,32,0,3,248,1,0,32,4,15,254,4,0,64,4,0,64,20,0,128,4,0,128,63,130,8,32,131,248,32,130,8,63,130,8,32,131,248,130,5,252,2,8,248,66,3,254,64,13,252,82,69,36,69,1,140,4,0,32,127,228,2,31,128,16,2,7,254,2,0,32,10,0,64,60,66,26,124,66,154,124,64,88,127,232,2,127,193,80,36,128,192,34,2,16,47,239,130,39,199,0,111,234,16,165,66,146,37,2,32,1,7,124,84,69,56,112,2,124,185,10,84,181,46,146,5,0,32,4,0,32,255,232,2,63,128,0,127,192,64,37,4,72,148,64,128,33,2,8,71,233,66,99,196,0,135,239,16,5,67,84,201,32,48,32,129,16,0,3,248,32,130,8,63,128,0,84,69,42,144,160,248,32,130,72,68,137,72,100,132,104,245,128,72,57,76,146,18,34,64,32,2,30,61,36,84,137,135,212,5,39,210,5,167,212,5,0,16,4,0,64,63,128,64,255,224,64,36,2,120,36,3,64,79,232,0,4,3,248,4,3,248,8,15,254,32,133,244,132,35,248,10,3,16,33,2,124,33,15,124,34,2,254,52,78,186,33,2,124,162,132,68,24,14,60,34,66,36,251,194,36,114,74,188,34,66,36,39,226,0,0,3,248,32,130,8,63,128,64,36,2,124,36,5,64,143,224,0,8,0,64,127,193,16,17,2,168,4,0,64,255,224,64,4,0,64,66,2,32,251,226,80,33,227,168,44,130,190,40,132,148,105,73,34,64,2,60,250,65,36,35,199,36,170,66,60,34,66,36,39,226,0,0,4,120,36,128,72,231,130,72,36,130,120,44,131,72,47,192,0,112,5,120,84,133,72,103,133,72,84,133,120,100,132,72,95,228,0,32,2,124,68,69,68,231,194,68,68,79,124,4,67,68,207,224,0,64,132,8,120,136,14,112,130,8,251,226,34,42,35,34,35,224,34,66,7,190,149,3,248,32,143,254,40,133,36,140,163,248,37,4,200,4,161,108,244,171,230,167,138,144,191,234,146,239,234,146,9,33,6,248,130,62,248,10,148,169,77,170,136,143,190,136,136,136,248,128,8,63,130,8,63,130,8,255,229,0,119,133,40,114,133,144,242,129,70,127,196,164,127,192,0,10,7,188,10,3,184,10,7,188,10,0,160,17,7,252,10,3,248,42,131,56,46,131,248,1,7,252,17,0,176,8,139,254,69,1,252,21,77,140,95,196,8,95,228,136,65,139,254,2,7,32,87,229,80,89,7,30,81,5,16,81,231,16,1,0,16,4,0,64,127,224,64,8,0,252,17,1,16,33,4,16,159,224,0,18,1,32,47,226,32,100,10,124,37,2,144,41,3,16,39,226,0,34,2,32,39,239,80,41,3,30,105,10,30,33,2,16,33,2,16,41,2,144,73,5,222,202,68,148,93,69,84,84,133,212,65,68,34,20,1,64,39,194,160,114,10,60,34,2,32,35,194,32,34,2,32,4,0,64,36,130,72,36,133,84,142,32,64,63,128,64,4,15,254,2,0,16,63,226,0,34,2,168,42,131,116,34,5,252,66,11,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,240,0,0,0,127,192,64,4,0,64,4,0,64,20,0,128,0,0,0,127,224,144,9,0,144,9,0,144,17,1,16,33,4,16,0,0,0,127,224,144,9,0,144,9,0,144,17,33,18,33,36,14,0,7,252,4,0,64,39,194,64,36,3,252,0,64,4,2,128,16,17,1,16,17,1,16,255,225,16,17,1,16,17,1,240,17,0,0,32,130,72,36,130,72,36,143,254,36,130,72,36,132,72,64,136,8,0,7,252,2,0,64,13,3,72,196,64,64,4,0,0,255,224,0,0,7,252,0,0,0,63,130,8,63,130,8,63,128,0,0,15,254,0,3,240,2,0,72,117,1,96,37,4,72,148,96,128,255,224,0,127,192,0,63,130,8,63,128,0,127,197,20,74,69,244,68,68,76,127,192,96,29,6,72,4,2,60,248,68,136,75,227,8,42,140,80,127,192,64,117,197,84,117,192,64,255,224,64,117,197,84,85,79,254,4,0,64,4,0,64,4,0,64,4,0,64,4,0,64,4,0,64,63,130,72,63,130,72,63,128,64,127,196,68,69,69,244,65,68,8,4,0,64,4,0,64,4,0,64,8,0,128,8,1,0,16,2,0,0,2,0,33,2,32,36,2,128,48,2,0,32,66,4,31,192,0,0,192,112,124,0,64,4,0,126,252,0,64,4,32,66,3,224,0,0,0,56,60,0,64,4,0,64,127,192,64,10,1,16,32,140,6,0,67,8,13,0,32,13,131,4,0,1,8,9,0,96,25,134,6,1,195,224,32,3,254,32,2,248,40,130,168,41,164,130,71,232,0,3,135,192,68,4,64,127,196,64,68,4,32,82,70,148,68,192,4,8,1,0,127,196,4,81,68,164,68,68,164,81,68,4,127,196,4,72,133,40,92,132,168,95,132,8,94,133,40,94,165,42,94,169,38,34,130,124,33,15,188,42,66,188,42,66,188,42,68,188,72,40,126,66,7,16,143,231,16,82,71,126,80,47,212,117,69,84,117,97,134,16,7,252,74,71,252,4,15,254,17,7,252,4,15,254,4,0,64,82,131,48,82,66,28,124,129,62,120,132,188,121,68,148,48,135,182,0,0,0,0,1,0,8,0,64,4,0,0,0,0,0,0,0,0,127,0,16,2,14,92,164,74,84,164,142,84,22,32,128,255,224,0,127,130,168,46,226,162,78,168,4,42,67,188,10,7,188,42,68,164,0,1,0,16,129,56,28,131,8,208,129,40,17,33,2,15,224,0,17,1,16,17,1,208,17,1,16,125,4,80,69,4,82,125,36,78,0,3,248,0,0,0,255,225,16,17,1,16,17,2,16,33,4,16,21,1,80,117,193,80,21,7,252,4,15,254,4,0,64,4,0,64,4,3,248,4,7,252,64,67,240,2,0,64,127,192,64,20,0,128,4,7,252,36,129,80,255,224,0,63,130,8,46,130,168,46,131,248,64,4,238,74,46,238,72,4,238,232,170,234,168,174,132,168,160,146,0,3,252,32,2,32,34,2,32,34,2,80,37,4,136,72,73,2,63,226,32,34,3,252,36,2,144,47,194,16,95,228,16,129,0,16,63,226,72,36,130,252,36,131,254,32,2,252,40,68,252,72,72,252,127,228,72,68,71,254,72,133,252,106,164,248,74,132,248,66,8,32,127,230,40,84,135,238,73,38,170,106,135,232,73,69,20,82,42,64,127,229,64,126,37,92,93,5,80,93,229,84,127,68,20,149,66,36,127,228,72,68,71,254,72,133,116,98,37,252,85,69,116,85,73,252,127,228,168,82,71,126,92,133,126,84,4,254,73,36,146,70,201,130,0,3,252,32,2,0,32,2,0,32,2,0,32,2,0,63,192,0,0,7,252,64,4,0,79,4,144,73,4,144,79,4,0,64,7,252,255,233,32,146,15,160,167,141,40,250,137,42,254,169,38,148,15,254,127,196,64,95,5,80,127,196,0,95,5,16,85,4,160,81,7,252,127,228,64,95,133,8,95,133,0,95,197,84,95,197,84,96,199,254,0,143,190,144,137,62,184,138,190,168,11,190,146,169,42,253,64,34,17,1,16,125,1,16,253,129,20,17,39,210,17,1,208,241,4,16,4,0,64,7,192,64,63,194,4,62,66,36,62,66,4,63,194,4,0,64,4,1,64,20,1,64,20,1,64,20,0,64,4,1,64,8,0,72,68,69,68,148,41,66,148,17,66,148,68,72,68,1,64,8,32,34,2,64,167,234,170,162,170,74,165,42,146,162,34,74,160,68,0,79,132,9,65,20,41,68,84,129,71,212,17,65,4,29,70,8,16,79,196,41,68,84,187,64,20,253,66,20,121,64,132,41,65,8,16,41,34,146,175,234,32,163,202,68,166,74,152,32,130,16,162,4,16,69,68,85,71,212,1,71,212,5,71,212,65,68,68,89,70,8,16,65,4,254,65,20,125,69,84,125,67,148,84,73,4,17,65,8,16,71,196,17,66,148,255,64,84,117,69,84,117,64,68,21,64,136,16,69,68,89,73,20,41,76,84,17,69,84,89,73,4,41,76,72,32,33,2,254,168,42,64,167,234,90,165,234,170,162,130,74,168,196,68,47,242,68,46,234,170,174,234,170,174,234,170,170,162,170,167,100,254,34,130,254,170,170,254,160,10,124,160,10,254,37,66,146,163,4,127,165,82,73,39,250,74,166,202,105,39,242,73,37,42,82,170,70,40,68,4,126,76,148,125,68,148,125,68,148,126,68,4,171,74,168,36,79,228,36,66,148,125,74,148,61,66,148,125,66,84,24,70,76,16,67,132,41,67,148,41,71,212,85,71,212,84,79,228,41,68,136,0,7,252,64,68,4,64,68,4,64,68,4,64,68,4,65,68,8,127,196,4,81,68,164,127,196,68,127,69,4,95,68,4,65,68,8,16,1,0,32,2,0,96,10,0,32,2,0,32,2,0,32,2,0,16,1,0,47,226,16,97,10,16,33,2,16,33,2,16,37,2,32,16,1,0,39,130,72,100,138,72,36,130,72,40,162,138,48,98,0,18,1,32,34,2,252,98,74,36,34,66,68,36,66,132,41,67,8,16,1,0,47,194,0,96,10,252,32,2,0,32,3,254,32,2,0,18,1,32,39,226,64,104,10,124,32,130,16,34,2,66,36,34,62,17,1,16,34,2,36,100,74,136,33,2,32,36,66,254,32,34,0,16,1,126,33,34,18,101,42,82,37,34,146,34,34,34,36,162,132,16,1,126,36,2,66,102,74,84,36,130,84,38,34,64,39,226,0,17,1,144,41,2,146,111,74,152,41,2,144,41,34,210,40,226,0,16,1,126,32,130,40,100,138,126,33,130,40,36,130,136,34,130,16,16,1,252,36,2,120,100,138,72,42,130,152,40,162,170,44,162,134,18,1,32,39,194,80,105,10,16,63,226,16,33,2,16,33,2,16,20,1,72,37,2,96,100,10,252,38,2,80,36,130,86,38,2,64,17,1,16,34,130,68,104,42,124,36,66,68,37,66,72,36,34,62,18,1,16,47,226,0,103,138,72,36,130,72,36,162,138,40,99,0,18,1,16,32,2,254,104,42,130,32,2,0,32,2,254,32,2,0,16,1,120,32,3,254,98,10,32,47,194,72,40,130,80,34,2,216,18,1,32,35,194,32,98,10,254,34,2,48,34,130,36,34,2,32,17,1,16,42,2,190,109,74,148,41,66,148,40,130,148,34,66,66,17,1,16,37,2,124,105,10,16,47,226,16,34,130,40,36,66,130,18,1,32,39,226,66,107,170,42,34,162,42,35,162,2,32,162,4,18,1,32,39,194,68,106,138,16,34,130,198,35,2,8,35,2,8,17,1,8,39,226,66,104,10,36,34,130,48,34,34,34,33,226,0,16,1,126,36,34,126,100,10,82,37,66,88,41,34,146,48,226,0,40,2,128,72,229,234,202,164,170,74,164,170,74,165,42,106,228,64,17,1,16,33,2,254,97,10,124,32,2,124,36,66,68,39,194,0,16,1,254,36,130,72,103,138,72,39,130,72,36,226,248,32,130,8,18,1,32,47,226,64,111,203,68,39,194,68,39,194,68,37,66,72,18,1,32,63,226,72,107,75,2,47,194,32,39,194,4,33,66,8,16,1,248,40,130,136,111,138,0,42,130,168,42,162,170,50,98,0,17,1,80,39,194,144,97,10,254,33,2,56,37,66,146,33,2,16,16,129,72,36,66,132,119,170,72,39,130,72,39,130,72,36,130,88,21,1,80,37,3,84,109,138,80,45,131,84,37,2,146,41,35,14,18,1,16,47,226,72,99,10,72,56,98,72,36,130,72,40,131,8,18,1,16,47,226,0,100,138,132,52,162,72,37,2,32,37,2,140,17,1,16,47,226,146,97,10,40,34,162,108,42,67,36,35,34,32,17,1,32,36,66,254,97,42,80,39,194,144,33,2,254,33,2,16,17,1,124,33,2,124,98,10,254,36,130,126,40,130,168,48,130,24,16,1,254,34,130,170,102,202,40,47,226,128,40,2,128,40,3,0,16,1,254,32,2,238,106,170,170,46,226,170,42,162,170,42,162,170,17,1,20,33,34,254,97,10,84,35,130,52,37,66,146,37,2,32,16,1,124,37,66,124,101,74,124,33,2,124,33,2,16,47,226,0,16,1,124,36,66,124,96,10,124,33,2,254,33,2,40,36,66,130,17,1,124,37,66,124,101,74,124,32,2,254,34,2,60,32,66,24,16,1,252,36,130,48,111,234,146,47,226,146,47,226,146,41,34,134,18,1,32,36,130,252,100,74,120,42,2,32,63,194,80,40,131,4,18,1,252,34,2,248,100,11,254,40,131,36,47,162,32,63,194,32,17,1,124,33,2,124,97,10,254,36,66,124,36,66,124,36,66,76,20,129,72,47,194,72,98,11,254,36,2,252,52,66,68,39,194,68,18,129,40,46,226,40,98,138,238,34,130,40,46,226,40,34,130,40,17,1,30,33,2,124,100,74,124,36,66,124,33,2,254,33,2,16,34,2,60,84,69,168,209,5,110,89,5,20,87,229,16,66,132,68,16,1,124,37,66,124,101,74,124,33,2,254,35,130,84,41,34,16,16,193,112,33,2,254,101,74,146,34,2,254,36,130,48,36,130,132,18,1,124,37,66,124,101,74,124,34,130,72,47,226,8,32,130,8,16,1,254,41,38,186,169,34,254,40,34,186,42,162,186,40,163,4,18,1,16,47,226,130,119,202,68,39,194,64,39,194,68,39,194,64,18,1,16,47,226,130,98,138,68,40,34,124,33,2,16,47,226,0,23,225,66,39,226,72,100,138,126,36,130,72,43,226,162,50,34,62,17,1,124,33,2,40,111,234,40,39,194,68,37,66,84,34,130,68,16,1,254,42,66,188,106,74,188,41,2,254,42,66,152,42,66,254,20,129,74,38,194,72,102,170,70,33,2,124,36,66,124,36,66,124,23,193,68,39,194,68,103,202,32,39,226,146,53,34,106,39,162,6,23,193,84,39,194,84,103,202,0,63,226,82,37,66,72,38,66,66,40,2,252,85,70,212,199,68,156,82,68,76,66,5,84,84,166,56,17,1,84,35,130,254,99,138,84,41,34,32,47,226,36,33,130,100,17,1,84,35,130,254,104,42,124,36,66,124,34,130,42,36,162,134,17,1,126,36,34,188,98,10,62,34,130,40,47,226,0,34,66,66,32,130,10,65,5,222,199,69,94,85,68,158,85,70,84,65,228,16,40,130,238,74,165,234,212,70,244,80,38,248,66,4,168,82,68,96,17,1,124,33,2,254,100,74,124,34,130,254,32,2,124,36,66,124,42,67,244,74,141,30,93,70,116,93,69,84,92,132,72,85,68,162,32,2,238,68,69,84,223,228,204,85,102,248,72,132,248,72,132,248,21,1,72,47,227,144,111,202,144,47,194,144,47,226,128,42,163,42,40,130,10,126,132,8,221,229,72,92,132,136,93,134,186,74,165,198,17,1,124,34,130,254,101,74,124,37,66,124,33,2,124,33,2,254,47,226,170,79,228,0,223,228,0,79,196,132,79,196,106,74,69,50,39,130,136,95,228,164,204,164,188,72,4,188,72,4,188,74,69,60,4,0,64,10,1,16,96,136,6,63,128,64,4,0,64,127,192,0,4,0,160,17,2,72,196,96,96,118,65,88,37,4,72,148,96,128,4,0,160,17,2,8,223,96,0,127,192,64,36,132,68,20,0,128,4,0,160,17,2,8,223,96,0,8,132,72,37,1,32,255,224,0,32,2,60,34,69,36,75,200,36,34,66,60,82,68,164,135,224,0,4,0,160,17,3,248,192,99,248,42,135,252,74,71,252,74,68,12,24,0,64,10,3,24,196,96,64,118,65,88,36,132,68,148,32,128,24,0,64,10,3,24,196,98,72,21,7,252,21,2,72,68,64,64,2,1,32,17,2,8,95,104,64,8,1,248,0,128,8,5,0,32,123,196,164,123,196,32,74,67,156,17,7,252,17,15,254,17,2,8,36,143,254,145,39,252,17,15,254,36,131,248,36,131,248,17,2,8,161,68,16,239,196,16,239,74,180,234,202,232,224,138,234,225,96,34,80,2,252,248,74,252,250,138,252,250,130,254,250,130,170,43,67,34,17,15,254,4,2,238,186,170,174,254,133,6,191,69,18,14,7,28,16,1,0,31,194,4,32,68,4,0,64,4,0,64,4,2,128,16,32,3,252,74,75,244,8,67,228,42,67,228,42,67,228,43,66,104,64,7,252,136,71,244,0,67,228,0,67,228,0,67,228,34,67,236,32,3,254,64,43,250,17,33,242,0,35,250,36,163,250,36,163,254,8,3,240,41,2,80,34,3,252,0,65,244,18,129,32,34,36,30,0,7,248,64,133,232,72,132,232,82,134,168,68,164,138,80,106,2,0,7,56,82,133,232,64,132,8,127,129,32,18,34,34,33,228,0,0,0,128,4,0,0,0,15,254,0,0,0,0,0,0,0,0,0,4,0,32,255,225,16,36,132,148,16,131,252,9,64,144,17,38,14,4,15,254,32,131,248,0,7,254,131,35,192,7,199,192,4,32,62,4,7,252,17,2,72,72,65,16,63,128,200,26,2,148,202,128,198,4,15,254,0,3,248,1,7,252,20,66,72,78,33,148,104,128,198,4,15,254,34,15,120,34,131,106,227,98,194,122,130,144,76,192,128,4,15,254,17,5,20,145,32,64,127,196,164,85,68,164,81,68,12,4,15,254,8,3,56,32,131,184,32,131,248,12,67,40,209,129,134,4,15,254,42,130,232,32,131,248,0,3,248,0,15,254,36,132,196,4,15,254,32,3,252,4,14,78,190,174,170,170,238,74,164,166,176,4,15,254,32,3,252,0,7,68,95,71,84,95,71,68,95,75,22,4,15,254,32,3,252,10,14,78,174,174,74,174,238,74,174,162,82,0,4,0,32,0,0,16,2,0,32,12,0,64,4,0,0,0,0,0,9,252,68,0,120,20,130,136,40,140,248,65,4,16,95,224,0,0,41,242,68,32,74,46,162,170,74,173,74,68,164,130,72,161,4,2,8,160,79,193,32,2,3,254,37,4,80,201,36,146,80,226,0,8,8,148,73,67,226,8,161,200,41,12,144,74,68,190,72,32,128,0,0,0,0,7,254,64,40,0,0,0,0,0,0,0,0,0,0,0,15,254,128,39,252,8,3,82,235,67,104,218,129,36,106,32,64,255,232,2,63,130,8,63,130,8,63,128,64,255,224,0,17,2,8,0,4,0,32,0,0,224,2,0,32,2,0,40,3,0,32,0,0,0,4,124,33,0,16,225,2,254,33,2,16,41,3,16,33,0,16,0,4,124,33,0,16,225,2,16,33,2,144,49,2,16,15,224,0,1,4,16,33,0,84,229,66,84,37,66,84,45,67,84,39,192,4,0,4,126,36,0,100,229,66,72,36,130,212,54,34,64,7,224,0,0,4,126,36,0,64,231,194,68,36,66,124,44,3,64,39,224,0,1,4,16,33,0,254,201,36,146,73,36,170,76,102,130,72,160,132,1,4,16,33,0,254,225,2,16,39,194,68,36,67,68,39,192,0,0,4,254,32,64,4,231,66,84,37,66,116,40,67,4,33,64,8,0,200,240,73,0,144,201,4,254,73,4,144,72,166,202,74,96,18,0,4,126,33,32,18,226,162,68,32,2,62,42,35,34,35,224,34,1,4,16,37,64,84,229,66,124,33,2,84,37,67,84,39,192,4,1,4,16,34,0,36,231,226,2,35,194,36,42,67,36,35,192,36,71,226,64,7,224,72,228,130,92,36,130,72,47,227,64,39,224,0,1,4,16,47,224,16,231,194,16,47,226,56,53,66,146,17,0,16,1,4,16,39,192,16,239,226,16,33,2,124,41,3,16,47,224,0,1,4,16,47,224], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+95517);
/* memory initializer */ allocate([16,225,2,124,32,2,124,44,67,68,39,192,68,130,4,32,31,224,64,196,132,106,74,196,168,84,134,20,66,64,66,66,2,32,10,0,252,210,4,32,95,228,80,69,6,146,73,33,14,64,194,112,4,14,64,39,226,64,37,226,210,53,34,146,9,225,18,1,4,40,36,64,130,231,194,16,33,2,124,41,3,16,47,224,0,68,2,120,8,129,124,225,66,254,33,66,124,41,3,16,37,0,32,15,228,130,33,0,124,226,2,80,39,194,16,47,227,16,33,0,16,0,4,238,34,32,170,230,98,102,42,162,34,42,35,34,42,160,68,1,4,146,37,64,16,231,194,68,39,194,68,47,195,68,37,64,72,1,4,80,39,192,144,225,2,254,32,2,124,44,67,68,39,192,68,148,4,190,20,128,72,196,132,200,87,228,72,84,134,72,87,224,128,1,4,32,36,64,254,228,34,124,41,2,16,47,227,40,36,64,130,0,11,224,85,193,212,213,69,212,85,69,104,92,134,84,70,32,64,0,9,252,66,0,66,202,37,180,77,133,116,69,70,146,85,0,32,129,132,224,2,1,252,202,133,36,68,5,254,68,134,48,68,129,132,65,2,80,9,96,146,237,98,146,47,226,16,42,131,40,36,64,130,2,8,80,72,129,38,193,4,252,64,132,16,82,70,18,84,162,120,2,4,60,36,64,136,225,2,102,36,34,118,44,35,66,39,224,0,2,4,16,47,224,68,228,66,170,33,2,254,33,3,16,33,0,16,4,136,252,68,128,120,196,132,120,68,133,254,74,134,196,72,0,252,130,5,252,2,1,252,210,69,172,87,69,252,71,6,168,82,96,32,2,8,60,66,1,254,210,37,240,82,69,124,116,5,254,20,2,124,71,194,68,7,192,68,231,194,32,39,226,210,37,35,106,39,160,6,14,232,170,78,224,0,231,194,0,47,226,32,39,195,4,33,64,8,129,4,40,4,64,186,192,4,234,74,164,234,74,166,226,74,160,164,64,226,240,5,76,254,66,5,254,66,5,124,100,68,168,17,0,108,2,8,16,79,224,68,226,130,254,32,2,124,36,67,124,36,64,124,1,4,254,36,64,40,239,226,130,33,2,124,37,67,84,37,192,16,73,2,94,2,32,8,228,130,148,34,34,0,39,195,68,39,192,68,1,4,254,40,32,254,232,2,254,42,162,254,58,162,162,8,161,4,66,130,254,2,128,124,228,66,124,36,66,124,41,3,126,34,128,198,2,9,36,74,129,252,208,68,248,72,132,248,85,6,84,73,65,12,31,201,36,95,193,36,223,196,136,84,70,122,76,134,48,68,129,134,8,72,72,95,224,72,200,69,2,64,5,252,85,71,84,85,67,254,132,4,36,8,129,84,198,165,184,96,5,252,85,71,84,95,224,0,129,4,254,2,128,254,201,36,254,73,36,186,90,166,186,72,160,132,4,137,254,64,0,226,202,164,234,74,36,166,64,6,252,68,64,140,189,228,132,41,67,222,200,197,212,106,100,248,88,134,248,72,128,248,133,4,72,15,236,144,95,198,144,79,197,144,111,228,128,21,66,82,143,132,16,31,192,164,214,5,252,85,69,140,87,71,84,87,65,12,4,73,246,68,65,244,219,229,84,95,69,84,95,71,84,85,161,48,4,8,124,72,129,254,202,68,210,72,132,254,88,6,188,74,65,60,138,68,166,21,67,254,202,69,182,74,69,180,74,198,180,92,160,18,0,0,60,2,64,36,2,64,36,2,64,52,2,128,32,2,0,32,63,0,32,118,33,84,36,133,246,128,3,240,33,2,84,34,65,252,0,7,128,72,5,0,96,5,0,72,4,128,112,4,0,64,4,0,0,15,126,146,138,40,194,138,40,146,137,42,228,168,74,136,105,0,240,201,112,145,10,16,193,10,254,145,9,16,209,10,16,129,8,16,2,79,36,146,74,126,194,74,36,151,233,36,210,74,68,132,72,132,0,111,120,148,10,64,199,202,84,149,73,84,212,138,84,137,73,34,1,7,16,81,229,16,97,5,124,84,69,68,100,68,68,71,196,0,2,15,32,147,233,80,169,10,30,145,9,30,209,10,16,129,8,16,0,143,8,151,233,74,164,140,126,165,41,82,213,74,136,137,73,34,0,7,124,80,133,16,98,134,68,80,5,124,97,4,16,79,228,0,1,15,8,151,233,16,162,74,120,145,41,36,212,138,20,130,40,64,1,15,28,149,9,80,175,234,16,149,41,84,217,138,16,134,9,128,0,7,124,84,69,124,100,70,124,81,5,16,103,196,16,79,228,0,0,15,248,170,10,174,206,170,170,174,170,170,203,73,228,130,168,50,224,202,112,161,10,254,197,74,84,175,234,84,197,72,254,129,8,124,2,7,124,85,69,124,101,70,124,82,5,80,111,228,16,65,4,16,0,7,124,85,69,124,101,69,124,80,5,254,101,4,74,70,68,66,1,7,124,84,69,124,100,70,124,80,5,124,97,4,124,65,4,254,1,14,32,175,202,148,207,204,164,175,202,40,197,72,188,138,41,30,231,202,68,167,204,68,199,202,68,170,170,68,200,136,238,128,8,170,0,7,222,17,33,20,17,129,20,255,33,18,17,161,20,17,1,16,0,7,222,17,33,20,17,129,20,17,33,210,241,164,20,1,0,16,16,0,158,63,34,20,33,130,20,33,34,18,33,162,20,65,8,16,32,1,30,1,47,212,65,132,20,65,36,18,65,167,148,1,0,16,16,2,30,121,36,148,89,132,20,125,32,82,53,172,84,21,0,144,32,1,30,253,34,20,33,131,148,41,34,146,73,164,148,169,1,16,0,7,222,17,33,20,125,133,84,85,38,210,69,164,84,85,4,144,0,7,222,9,33,20,53,133,52,145,33,18,1,193,208,225,0,16,40,2,158,41,46,244,41,130,148,41,38,178,173,162,148,1,0,16,0,2,158,41,34,146,171,70,212,41,34,146,45,175,20,1,0,16,12,7,30,81,37,20,125,133,20,81,37,82,85,166,212,85,0,16,16,2,30,73,47,212,5,128,20,121,36,146,73,167,148,73,0,16,16,1,30,125,33,20,85,131,148,17,47,210,17,162,148,69,8,16,0,15,222,33,36,148,125,129,84,17,39,210,17,161,212,241,0,16,16,1,30,81,39,212,145,143,212,17,35,146,85,169,20,17,1,16,16,2,158,69,40,52,57,128,20,253,34,18,73,175,212,5,0,16,40,1,30,41,36,84,33,143,212,33,36,146,81,170,84,61,0,80,32,2,30,125,40,84,117,133,84,117,37,82,117,160,84,21,0,144,125,228,82,17,39,148,33,133,20,125,33,18,29,175,20,17,1,16,0,15,238,0,174,234,170,202,170,238,170,170,170,202,168,170,128,8,0,7,222,69,39,212,1,135,212,17,39,210,17,161,212,113,0,16,16,5,30,125,41,20,17,143,244,1,39,210,69,164,84,125,0,16,72,3,30,73,34,20,253,133,20,253,37,82,85,165,212,17,1,16,28,14,30,85,34,148,253,128,148,17,33,210,241,161,20,81,2,16,16,7,222,85,39,212,85,135,212,33,37,18,253,161,20,17,1,16,16,5,94,153,34,148,69,129,20,85,37,146,145,162,148,69,8,16,254,234,74,188,170,74,188,201,10,254,170,74,152,202,72,254,128,8,0,15,238,40,175,234,170,207,234,16,167,202,16,193,232,240,128,8,253,225,18,93,37,20,253,130,20,61,36,18,125,160,84,165,10,208,41,239,210,41,35,148,17,135,212,85,39,210,17,167,212,17,7,208,16,7,222,41,47,244,69,135,212,69,39,210,17,175,212,17,1,16,12,15,14,84,163,138,254,197,74,130,167,202,84,199,200,84,135,200,40,15,238,16,167,202,16,207,234,84,175,234,0,199,200,68,135,200,252,229,10,126,165,170,244,193,170,120,163,74,216,195,72,210,131,8,124,225,10,254,169,42,16,205,106,0,175,234,170,202,168,254,128,8,40,7,206,170,175,234,170,207,234,170,175,234,68,194,136,60,142,8,8,0,128,31,193,8,33,5,252,0,64,4,31,192,4,0,67,252,16,1,240,33,4,32,191,130,72,36,143,254,4,0,160,49,140,6,1,15,208,33,2,60,57,66,148,41,66,148,74,68,164,171,65,72,32,130,8,124,136,126,4,167,74,84,165,74,117,32,82,42,161,68,0,143,200,36,130,94,84,168,138,124,164,74,69,39,210,66,160,68,32,129,8,252,130,62,72,175,10,36,164,138,153,34,82,66,160,68,32,7,220,37,68,220,128,7,254,0,131,200,36,131,200,2,128,16,124,128,136,19,239,202,16,165,10,32,167,202,85,37,82,254,160,68,0,143,200,132,139,94,132,171,74,0,167,146,73,39,162,74,167,196,32,15,190,42,164,190,154,160,62,81,15,200,84,37,114,85,74,220,20,6,92,68,71,92,68,71,252,4,7,252,32,129,16,14,15,30,36,130,232,177,170,236,160,130,232,91,72,162,63,129,16,14,7,28,123,196,164,123,196,228,127,195,32,95,193,32,127,193,16,14,7,28,0,7,128,8,1,0,32,3,128,8,5,0,32,3,0,79,232,0,0,0,0,0,4,4,64,68,4,64,68,4,64,71,252,0,64,0,4,0,64,69,71,100,84,69,100,101,68,68,84,68,132,127,192,4,8,10,40,148,140,152,148,138,40,255,132,0,78,7,8,64,131,248,0,0,0,4,0,64,8,0,128,16,1,16,32,135,252,0,64,0,8,0,144,16,131,252,0,65,16,17,15,254,17,1,16,33,4,16,8,1,16,63,128,136,255,225,16,32,135,252,164,163,248,36,131,248,1,15,126,17,2,36,87,232,130,117,66,84,61,78,84,9,97,0,17,2,8,95,104,144,9,1,80,34,0,64,63,128,64,255,224,0,0,7,252,10,4,164,42,128,160,255,224,64,4,3,248,4,15,254,21,1,72,39,195,192,101,10,36,37,66,140,4,3,248,4,15,254,17,15,208,75,199,148,19,71,148,18,195,70,4,7,252,4,15,254,17,207,244,85,103,224,85,239,226,85,71,200,5,103,252,4,15,254,4,15,254,33,68,190,118,130,190,114,129,62,36,7,252,4,15,254,60,2,28,253,75,84,73,79,200,73,71,162,4,7,252,4,15,254,32,2,124,33,2,16,241,2,254,33,2,16,57,12,16,5,0,32,32,2,60,32,15,128,39,226,16,34,2,60,56,78,4,65,64,8,34,2,32,35,226,64,248,2,124,32,130,16,58,14,66,4,32,62,32,34,34,34,162,42,250,162,42,34,162,42,58,174,74,4,160,130,33,2,8,39,226,64,252,2,64,36,2,64,60,14,64,72,1,0,32,2,124,32,66,4,248,66,124,36,2,64,60,46,66,67,224,0,32,2,124,36,66,68,244,66,124,36,2,64,60,46,66,67,224,0,32,2,126,36,2,72,244,130,94,36,162,74,52,174,146,73,161,36,32,194,112,36,2,64,247,226,72,36,130,72,60,142,72,72,129,8,32,194,112,36,15,192,39,226,82,37,35,212,229,68,136,9,65,34,36,130,72,47,194,72,244,130,72,39,130,72,60,142,72,71,128,72,36,130,68,36,2,254,245,2,82,37,66,88,57,12,178,21,34,14,33,2,16,33,2,30,249,2,16,39,226,66,60,46,66,71,224,66,33,2,16,33,226,16,247,194,68,36,66,124,52,14,64,72,1,0,32,194,112,36,15,64,39,226,72,37,130,72,52,206,138,72,129,8,32,194,112,37,2,80,247,226,80,37,2,74,53,110,98,68,128,4,34,2,16,47,226,130,242,2,36,34,130,48,58,46,34,65,224,0,32,2,126,36,47,126,36,2,80,37,35,84,229,132,146,9,33,14,32,2,124,36,66,84,244,66,254,36,66,84,52,78,126,64,64,24,68,132,72,72,132,168,237,228,74,72,164,170,111,44,18,2,160,68,32,2,254,34,130,40,242,130,170,38,194,40,50,142,40,79,224,0,32,2,126,33,2,36,247,226,18,33,2,124,49,14,16,79,224,0,32,2,254,40,47,186,40,34,186,42,163,170,235,164,130,8,160,132,33,2,84,37,66,124,240,2,124,32,66,124,52,14,68,68,64,60,64,100,56,92,142,136,74,229,40,90,134,168,219,225,64,35,228,0,65,4,32,79,228,130,235,164,170,74,164,170,107,172,130,8,160,132,66,4,16,79,228,0,226,132,146,73,36,170,104,44,130,15,224,2,33,2,8,39,239,144,34,66,120,33,35,164,228,132,148,2,32,64,32,2,124,36,66,124,244,66,124,37,34,84,52,142,84,70,32,64,39,194,68,36,66,124,248,2,124,33,2,16,55,206,16,65,0,254,64,68,228,75,238,164,74,68,244,74,196,164,106,76,228,1,64,8,32,2,124,36,66,124,241,2,254,41,34,170,60,110,130,72,160,132,39,194,68,39,194,0,247,194,68,37,66,84,53,76,40,4,64,130,32,226,112,33,34,74,34,79,8,39,226,8,36,131,168,224,128,24,34,2,16,47,226,130,247,194,0,47,226,40,50,142,74,68,160,134,33,2,254,33,2,124,244,66,124,36,66,124,52,78,124,68,64,254,66,4,32,95,228,72,234,69,250,74,132,248,106,140,250,2,32,30,39,194,68,39,194,68,247,194,32,39,226,170,52,174,146,66,160,4,32,130,16,39,226,74,247,226,82,39,226,32,52,142,254,64,128,8,33,2,16,34,130,70,241,2,124,32,130,144,50,78,146,74,161,56,64,4,238,74,164,170,238,228,170,74,164,238,106,172,170,19,34,102,68,4,120,72,133,16,239,196,164,79,196,48,101,140,86,9,33,14,39,194,4,39,207,4,47,226,146,39,195,84,229,68,92,1,0,16,33,2,124,33,66,254,241,66,124,33,34,84,51,142,84,73,32,48,64,4,254,72,46,254,72,132,170,75,230,136,202,161,42,19,226,2,33,66,84,47,226,84,245,194,64,39,227,16,239,228,84,9,32,16,32,2,254,34,130,254,250,162,170,47,226,16,55,206,16,79,224,0,32,2,254,42,162,170,255,226,16,47,226,32,59,206,68,73,65,8,68,4,92,72,78,190,89,6,156,74,132,136,107,236,136,9,64,162,47,226,0,39,207,68,39,194,0,47,227,170,233,36,254,9,32,150,95,229,16,82,15,124,84,69,124,84,71,124,209,2,84,41,36,48,39,194,68,39,199,68,47,226,170,47,227,0,239,196,68,3,128,198,65,5,254,81,15,124,81,69,254,81,71,124,213,65,124,37,68,76,87,132,40,86,206,170,82,132,88,66,5,252,103,12,168,18,64,32,79,228,130,79,238,170,73,196,170,74,134,190,212,129,62,32,128,8,19,135,168,19,199,232,85,7,254,149,3,248,81,65,240,17,1,240,16,143,222,16,135,222,5,35,252,41,35,240,20,15,254,4,0,64,36,143,168,32,239,146,138,135,72,81,71,34,1,5,34,38,175,152,17,1,16,255,225,16,17,0,0,0,0,0,0,0,0,0,0,0,17,15,254,17,0,128,8,7,240,9,0,144,17,33,18,32,228,0,17,15,254,17,0,0,63,128,144,10,0,188,16,65,4,34,132,16,17,1,16,255,225,16,17,0,64,4,3,248,4,0,64,255,224,0,17,15,254,17,0,0,3,131,192,4,0,64,255,224,64,4,0,64,17,15,254,17,3,248,16,129,16,21,193,68,34,130,16,70,137,134,17,15,254,17,0,128,63,0,144,25,0,208,21,33,18,32,228,0,17,15,254,17,0,0,63,128,8,31,130,0,63,128,8,2,128,16,17,15,254,17,0,0,63,128,8,0,131,248,32,2,4,32,65,252,17,15,254,17,0,64,9,3,224,4,64,136,63,128,16,6,7,128,17,15,254,17,0,64,4,3,248,4,15,254,4,0,160,49,140,6,17,15,254,17,0,0,63,128,0,255,224,160,10,1,36,34,68,28,17,15,254,17,0,0,63,128,0,255,224,128,9,1,8,127,194,4,17,15,254,17,0,64,255,224,64,127,196,68,68,68,84,68,128,64,17,15,254,17,0,64,127,192,64,63,1,16,10,0,64,27,6,12,17,15,254,17,0,0,127,196,64,68,5,252,68,68,132,73,73,8,17,15,254,17,0,0,127,196,0,95,5,16,85,5,36,80,72,252,17,15,254,17,0,0,63,194,0,63,130,8,63,130,0,63,192,0,17,15,254,17,0,0,34,2,36,58,130,48,34,2,162,50,34,30,17,15,254,17,0,64,4,2,64,39,130,64,36,2,64,255,224,0,17,15,254,17,0,64,127,196,68,68,68,164,81,68,4,65,68,8,17,15,254,17,0,0,63,130,8,36,130,72,36,128,162,50,44,30,17,15,254,17,0,128,8,128,176,12,7,254,10,0,144,8,128,198,17,15,254,17,0,0,17,1,16,17,2,144,38,132,40,132,64,130,17,15,254,17,0,64,10,3,24,196,96,32,63,128,16,2,0,64,17,15,254,17,2,0,63,194,164,74,64,164,18,65,68,37,64,136,17,15,254,17,2,0,63,194,8,69,0,64,4,0,160,49,140,6,17,15,254,17,0,0,7,131,160,34,3,248,34,2,36,41,67,12,17,15,254,17,0,0,31,1,16,32,229,240,9,0,144,6,7,158,17,15,254,17,0,64,2,15,254,4,0,80,4,128,68,4,0,64,17,15,254,17,0,64,2,7,252,64,68,4,0,0,0,255,224,0,17,15,254,17,0,0,125,0,144,17,1,208,241,1,18,81,34,14,17,15,254,17,0,0,41,2,80,33,2,16,42,131,36,36,32,128,17,15,254,17,0,64,255,224,64,127,192,224,21,2,72,196,96,64,17,15,254,17,0,0,17,15,254,17,1,240,17,1,16,31,1,16,17,15,254,17,0,0,127,192,64,13,1,72,100,64,64,0,15,254,17,15,254,17,0,136,8,79,254,20,1,80,38,36,66,139,225,0,17,15,254,17,0,136,255,225,0,31,131,16,74,8,96,25,142,6,17,15,254,17,0,0,63,130,8,63,130,8,63,130,8,63,128,0,17,15,254,17,0,0,63,130,8,63,130,8,63,130,8,255,224,0,17,15,254,17,0,64,63,130,72,63,130,72,255,226,8,34,130,16,17,15,254,17,0,0,63,130,8,46,130,168,42,130,232,32,130,24,17,15,254,17,0,32,18,2,32,127,202,32,34,2,32,47,194,0,17,15,254,17,0,0,16,130,8,111,234,8,36,130,8,34,130,16,17,15,254,17,0,64,10,3,24,196,99,248,1,1,32,12,0,32,17,15,252,21,0,128,63,2,16,43,2,0,63,192,4,253,64,8,17,15,254,17,0,128,115,196,36,114,68,36,91,70,40,2,0,32,33,15,254,33,1,0,99,196,164,74,69,164,107,68,168,18,2,32,17,15,254,17,0,0,127,196,68,4,3,248,4,0,64,255,224,0,17,15,254,17,15,254,128,35,248,8,128,136,127,160,138,8,96,130,17,15,254,17,3,252,32,67,252,34,3,252,34,2,20,40,195,4,17,15,254,17,0,0,127,128,136,18,130,16,127,130,8,32,131,248,17,15,254,17,15,254,10,7,252,74,68,164,73,197,4,127,196,4,17,15,254,21,3,248,4,131,248,36,3,252,4,64,172,17,6,12,17,15,254,21,0,124,125,0,100,11,193,0,127,192,160,18,38,30,17,15,254,17,2,40,59,2,36,57,192,64,255,224,64,4,0,64,17,15,254,17,0,0,18,5,36,90,133,48,82,37,226,225,224,0,33,15,252,33,0,0,63,2,16,63,0,0,127,132,8,64,135,248,17,15,254,17,7,252,64,69,244,64,69,244,81,69,244,65,68,8,17,15,254,17,0,0,127,196,4,95,69,20,81,69,244,64,71,252,17,15,254,17,2,64,63,132,64,255,224,224,21,2,72,196,96,64,17,15,254,17,0,0,113,193,112,33,7,124,17,5,124,32,13,254,17,15,254,17,3,224,8,15,254,17,2,8,209,97,16,17,2,16,17,15,254,17,1,40,34,67,254,98,10,32,37,2,80,40,131,4,17,15,254,17,1,24,46,2,32,98,11,252,34,2,32,47,130,0,17,15,254,17,1,0,35,196,128,23,227,8,80,129,8,18,129,16,17,15,254,21,0,160,49,140,6,63,128,64,31,0,64,127,192,0,17,15,254,21,0,160,49,140,230,0,3,248,8,1,8,63,192,4,17,15,254,17,3,252,64,75,228,34,67,228,34,67,228,1,64,8,17,15,254,17,0,64,15,129,16,42,0,192,63,141,8,16,129,248,17,15,254,17,0,64,255,225,16,14,3,24,209,97,16,33,4,16,17,15,254,17,0,64,127,193,16,32,133,20,10,0,64,27,14,14,17,15,254,21,0,32,127,192,128,16,131,252,9,64,144,17,38,14,17,15,254,17,4,0,47,136,32,82,2,32,194,4,32,95,224,0,17,15,254,17,7,252,68,73,64,31,130,64,127,192,64,4,0,64,17,15,254,17,7,254,68,40,72,117,1,96,37,4,72,148,96,128,17,15,254,17,3,248,0,131,248,0,143,254,33,1,16,5,0,32,17,15,254,17,3,248,32,131,248,32,131,248,36,66,40,41,131,6,17,15,254,17,3,248,32,131,248,33,2,144,36,132,132,68,40,32,17,15,254,17,7,252,32,69,72,36,15,254,4,0,160,49,140,6,17,15,254,17,0,0,241,1,16,37,67,84,233,34,18,165,4,32,17,15,254,17,2,0,75,239,8,32,132,8,248,128,8,27,238,0,17,15,254,17,1,8,40,135,126,32,135,168,0,129,136,98,128,16,17,15,254,17,2,32,35,239,66,41,66,16,57,12,40,4,64,130,17,15,254,21,3,248,4,7,254,64,41,240,2,7,252,4,0,192,17,15,254,17,0,4,120,68,190,72,71,164,73,68,132,121,64,8,17,15,254,17,3,248,32,131,248,4,7,252,68,68,164,81,68,12,17,15,254,17,3,248,4,15,254,36,133,246,137,0,188,16,66,24,17,15,254,21,7,168,18,79,254,18,1,168,113,33,42,84,98,2,17,15,254,17,2,0,63,196,0,63,130,136,255,228,72,127,192,16,8,143,254,8,129,16,17,2,158,106,74,212,41,66,136,33,66,98,33,15,254,33,1,32,17,2,124,96,10,68,34,66,40,47,226,0,17,15,254,21,0,160,49,141,246,4,7,252,4,2,72,84,64,128,17,15,254,21,0,160,49,141,246,0,0,136,37,1,32,255,224,0,18,15,254,18,7,252,40,129,80,63,0,32,255,224,64,20,0,128,17,15,254,17,0,124,124,2,136,21,15,254,16,128,144,6,7,158,17,15,254,17,5,40,34,69,32,159,227,40,82,137,74,84,162,134,17,15,254,17,5,0,33,5,84,21,131,144,210,129,40,84,66,130,17,15,254,17,0,64,127,193,16,10,15,254,4,7,252,4,0,64,17,15,254,21,0,32,127,196,4,159,0,0,127,192,160,18,38,30,17,15,254,21,0,32,63,130,8,63,130,8,63,130,36,41,131,6,17,15,254,17,7,254,72,41,248,20,129,16,31,192,4,125,64,8,18,15,254,18,2,16,87,206,16,69,79,84,7,195,18,193,32,14,17,15,254,21,3,248,4,15,254,32,131,248,32,131,248,32,130,24,17,15,254,17,7,252,17,1,240,17,1,240,17,15,254,17,2,8,17,15,254,17,2,12,35,15,160,35,199,40,170,130,40,36,130,136,17,15,254,17,2,0,34,143,68,41,39,16,170,2,68,47,226,66,17,15,254,17,1,240,4,3,248,36,131,248,4,3,248,4,15,254,17,15,254,17,0,64,127,193,16,46,140,6,63,129,80,36,128,192,17,15,254,21,3,248,4,143,254,4,135,252,9,1,16,14,7,28,17,15,254,17,2,40,34,79,126,34,3,60,229,66,72,169,68,34,17,15,254,16,1,220,17,79,244,17,67,148,84,137,20,82,66,66,17,15,254,17,3,248,32,131,248,32,135,252,64,71,252,64,71,252,17,15,254,17,2,0,33,15,158,169,10,188,170,75,164,35,194,36,33,15,254,33,1,64,101,196,68,117,196,68,127,192,160,49,140,6,17,15,254,21,1,32,63,198,32,191,194,32,63,194,32,63,226,0,17,15,254,21,3,248,36,131,248,40,131,248,18,15,254,2,0,32,17,15,254,17,7,188,74,71,168,75,199,164,75,68,168,107,73,34,17,15,254,17,3,240,66,11,248,36,131,248,10,0,170,18,38,30,17,15,254,17,0,128,31,2,16,74,3,28,32,67,156,32,67,252,17,15,254,17,0,64,127,193,16,17,2,168,4,7,252,4,0,64,17,15,254,17,4,8,32,143,148,34,35,136,40,68,144,104,137,4,17,15,254,17,4,0,47,136,136,95,130,136,207,132,136,72,131,254,17,15,254,21,0,32,127,232,2,127,193,0,63,133,8,159,129,8,17,15,254,21,7,254,128,33,248,16,129,248,16,1,248,16,129,248,17,15,254,21,7,254,96,43,188,42,68,164,171,65,40,34,36,30,17,15,254,17,7,252,72,65,32,60,0,144,63,128,68,37,4,200,17,15,254,17,0,14,247,65,84,37,67,84,229,66,146,170,133,56,17,15,254,17,3,240,2,5,68,77,69,100,101,69,68,72,71,252,17,15,254,17,7,188,17,71,164,20,192,64,255,224,160,49,140,6,17,15,254,17,1,4,124,65,30,252,65,20,124,193,4,29,79,8,32,143,254,32,129,16,127,193,16,31,1,16,255,226,160,49,3,252,17,15,254,17,1,0,123,193,36,59,197,100,147,193,36,19,193,0,17,15,254,17,71,254,65,5,208,73,71,212,85,133,82,138,161,70,17,15,254,17,71,254,65,5,240,81,69,84,84,132,170,81,104,34,17,15,254,17,4,36,122,132,50,105,227,240,33,3,240,33,3,240,32,143,254,32,129,240,17,15,254,32,131,248,32,231,248,0,128,8,17,15,254,21,3,248,36,143,254,0,3,248,36,130,72,27,6,12,17,15,254,17,3,248,36,131,248,36,131,248,8,5,68,81,40,242,17,15,254,17,3,184,42,131,184,0,7,252,16,1,248,0,128,48,17,15,254,17,1,248,40,130,248,98,11,252,39,2,168,50,98,32,17,15,254,17,2,0,119,197,84,85,71,124,84,5,66,115,224,0,17,15,254,21,7,252,0,1,240,17,7,252,64,65,240,4,0,192,32,143,254,36,129,80,127,193,80,36,128,128,255,225,16,14,7,24,17,15,254,17,4,12,47,8,132,91,130,168,202,165,36,83,66,34,17,15,254,21,7,254,128,35,248,32,131,248,32,131,248,0,15,254,17,15,254,17,7,188,72,71,188,64,7,124,66,71,40,65,4,238,17,15,254,21,3,240,8,15,254,17,2,232,68,107,248,21,2,72,33,15,254,41,7,232,9,15,254,12,131,82,223,225,72,18,129,248,17,15,254,17,3,252,32,3,254,81,73,72,25,71,254,17,0,176,17,15,254,17,3,248,36,143,254,16,131,244,73,32,248,0,131,216,17,15,254,17,3,248,36,130,232,36,130,168,63,128,68,82,169,248,16,143,254,18,129,16,47,230,68,162,130,254,32,2,124,36,66,124,17,15,254,17,0,144,20,134,150,31,128,0,123,194,148,24,194,148,17,15,254,21,7,252,0,1,240,17,7,252,64,69,244,81,69,244,17,15,254,21,0,32,63,202,128,111,135,32,191,194,32,69,9,140,17,15,254,17,0,64,255,224,160,36,130,168,127,196,68,95,68,20,17,15,254,21,7,252,17,7,254,68,43,248,8,0,248,16,134,24,9,15,254,41,65,8,127,224,160,63,128,168,255,225,176,42,132,164,9,15,254,9,5,0,251,194,36,171,202,164,251,194,36,66,72,76,17,15,254,21,4,248,40,136,248,88,130,248,202,68,152,76,128,132,17,15,254,17,7,252,68,64,160,49,141,246,4,3,248,21,7,252,17,15,254,17,15,190,16,134,62,18,47,170,42,162,42,161,68,98,17,15,254,17,7,200,16,231,210,86,39,200,56,133,84,145,65,34,17,15,254,17,3,248,42,135,254,128,39,248,16,1,240,37,67,44,17,15,254,17,0,64,46,196,164,78,68,164,110,193,16,17,38,14,17,15,254,17,1,16,37,197,80,47,230,16,165,194,80,43,3,30,17,15,254,17,2,144,69,235,164,18,69,84,40,129,212,98,64,66,17,15,254,81,2,64,247,196,160,115,197,80,95,229,16,146,131,70,17,15,254,17,4,252,36,68,164,95,70,164,79,68,164,79,68,140,17,15,254,81,2,252,136,4,248,40,132,252,4,15,254,36,132,68,17,15,254,21,7,254,129,39,28,1,15,188,82,69,24,82,72,254,17,15,254,21,7,254,144,34,252,97,10,124,36,66,124,36,66,124,17,15,254,17,7,188,74,66,148,70,65,176,228,225,128,3,131,192,17,15,254,21,7,252,36,131,248,36,175,254,8,37,68,81,40,242,17,15,254,17,7,252,10,7,252,74,71,252,25,1,80,255,224,64,17,15,254,17,7,254,84,135,238,73,38,168,126,132,136,73,73,34,17,15,254,17,15,136,34,132,62,164,133,62,180,133,190,148,3,62,9,15,254,9,1,248,20,129,40,255,226,64,61,194,84,126,128,86,17,15,254,17,7,168,74,79,254,74,7,168,77,47,170,12,96,130,17,15,254,17,3,248,42,143,254,128,35,248,32,131,248,32,131,248,17,15,254,19,7,200,37,15,254,36,135,252,164,163,248,36,131,248,17,15,254,85,2,134,125,133,80,125,229,84,125,65,20,253,65,36,17,15,254,17,7,168,66,135,124,66,143,168,39,229,0,242,129,68,17,15,254,17,0,40,122,130,108,58,132,236,178,129,108,34,133,254,17,15,254,17,3,248,42,143,254,128,39,252,18,71,168,43,47,30,17,15,254,17,6,168,190,130,30,94,77,84,85,69,104,101,68,34,17,15,254,17,0,64,127,193,16,255,226,8,63,128,68,82,169,248,17,15,254,17,0,64,255,226,40,87,231,40,43,231,168,19,230,32,16,143,254,84,131,144,253,5,190,148,66,20,253,68,136,49,76,162,17,15,254,17,0,8,123,228,148,120,132,62,120,138,156,40,131,136,17,15,254,17,4,124,68,15,126,85,73,90,100,69,126,138,65,12,32,143,254,36,135,252,17,1,240,0,7,254,145,35,248,4,7,252,17,15,254,17,7,252,4,7,252,132,67,88,4,7,252,74,68,172,17,15,254,17,7,252,4,7,252,85,71,252,4,15,254,82,72,146,8,143,254,40,135,162,145,71,254,84,135,220,84,135,254,0,135,200,32,143,254,36,135,252,17,7,252,74,68,236,4,15,254,21,6,76,17,15,254,21,6,124,41,79,164,100,202,176,52,141,86,14,1,80,17,15,254,17,7,252,4,15,254,149,34,248,98,10,248,34,2,252,17,15,254,21,4,124,4,13,254,82,37,84,91,133,84,99,9,254,16,143,254,20,132,246,146,3,254,85,77,244,85,71,252,68,68,172,17,15,254,81,7,222,215,71,200,85,71,226,8,131,252,21,2,200,17,15,254,17,7,124,82,135,252,73,7,184,5,15,254,36,132,68,17,15,254,21,7,254,72,135,254,93,198,170,93,228,80,189,224,80,0,0,0,9,0,144,9,0,144,255,224,144,9,1,16,17,2,16,4,15,254,18,5,40,154,66,64,17,1,16,255,225,16,17,2,16,4,7,252,10,1,16,32,140,6,36,130,72,36,130,72,68,136,8,4,15,254,10,3,24,192,99,252,32,2,144,38,2,144,32,3,252,4,15,254,10,3,24,192,99,248,17,1,240,17,199,240,1,0,16,8,0,64,255,224,144,41,69,82,34,0,64,255,224,160,49,140,6,3,199,200,37,0,128,18,3,192,8,131,252,4,79,254,10,7,28,41,2,144,63,224,144,249,2,188,72,0,64,255,224,160,49,140,6,34,2,32,251,197,68,143,70,84,7,79,68,69,71,72,20,38,62,8,0,128,8,0,128,255,224,128,10,1,32,18,2,36,66,72,28,66,4,32,67,196,68,248,69,36,81,69,20,80,69,40,81,40,254,65,4,40,68,79,130,82,133,40,82,133,40,82,133,74,80,40,254,65,68,84,69,111,216,85,69,2,87,197,84,85,69,254,80,8,254,16,1,0,16,7,192,16,1,0,24,7,0,16,1,0,80,2,0,36,2,32,32,239,66,36,34,66,52,46,66,36,34,66,164,164,68,33,2,16,39,207,16,47,226,16,50,14,124,32,66,104,161,132,4,33,2,16,39,207,84,37,66,124,53,78,84,39,194,16,161,4,16,34,66,36,36,79,94,44,66,84,52,206,68,36,66,68,165,68,72,33,2,16,34,79,126,32,35,40,98,138,254,34,130,40,164,132,136,34,130,40,36,143,158,46,162,74,52,174,170,46,162,50,162,164,68,33,2,16,47,239,16,33,3,124,96,10,124,36,66,68,167,196,68,32,66,120,33,15,126,34,130,68,56,46,36,34,66,36,162,68,68,34,162,42,37,79,170,34,162,144,51,238,66,42,66,24,163,4,192,39,194,68,39,207,128,39,194,84,53,78,124,36,2,66,164,36,62,32,98,120,32,47,82,34,194,4,55,238,68,34,66,4,161,68,8,32,2,124,33,79,126,33,66,124,50,14,124,42,67,36,163,196,36,32,2,126,33,15,126,34,131,68,105,42,20,37,162,148,165,68,32,64,5,254,74,174,234,74,196,234,106,172,186,94,196,40,66,140,40,32,2,126,36,143,92,36,131,126,100,138,92,36,130,136,171,229,0,33,2,16,39,239,40,36,67,186,96,10,254,33,2,84,169,36,48,33,2,124,33,15,168,39,226,4,55,78,84,39,66,4,161,68,8,32,2,254,40,47,186,41,34,186,57,174,150,47,226,130,175,228,130,34,2,124,37,79,124,37,67,124,98,10,80,47,226,16,161,4,16,34,2,62,36,47,146,37,99,58,111,234,58,37,98,146,161,36,6,34,2,16,39,207,0,36,67,40,111,234,0,39,194,68,164,68,124,34,2,16,47,207,132,47,194,144,57,78,254,41,2,168,170,133,68,33,2,126,36,47,126,36,2,94,53,46,94,37,34,158,169,37,22,39,194,84,47,239,84,39,195,0,103,202,68,37,66,84,162,132,68,33,66,84,47,239,84,37,195,64,103,234,16,47,226,84,169,36,16,33,2,254,35,143,84,41,34,124,52,78,124,36,66,124,160,4,254,32,2,254,42,79,188,42,66,188,57,14,254,42,130,144,170,132,254,72,132,136,76,143,30,93,36,162,92,134,136,202,132,212,73,76,34,33,2,40,36,79,186,32,2,226,58,174,234,42,162,234,170,36,166,34,2,16,47,239,68,34,130,254,48,14,124,36,66,124,164,68,124,33,2,254,40,47,124,32,2,124,52,78,124,36,66,124,160,4,254,39,226,66,39,239,64,38,35,84,103,234,84,39,226,148,170,69,68,33,2,244,34,143,170,38,67,68,235,163,16,39,194,16,162,132,68,34,2,60,36,79,120,33,2,254,50,14,210,34,194,220,162,164,216,33,194,16,47,239,146,41,194,242,56,238,128,42,66,146,182,68,188,32,2,124,37,79,124,37,66,108,52,78,124,34,2,20,172,165,120,65,197,224,81,207,16,87,229,82,117,205,112,85,197,84,101,76,166,40,130,80,47,207,80,47,194,84,63,238,84,47,194,216,181,68,82,81,4,174,64,174,234,68,229,90,117,173,254,68,164,138,73,45,38,32,2,126,36,47,126,37,67,126,101,74,126,38,130,170,171,69,34,32,2,238,34,47,238,40,130,238,50,46,170,38,98,170,162,36,102,79,196,72,67,14,72,93,197,84,104,141,84,66,5,252,74,141,36,39,194,84,39,207,84,39,194,36,55,142,18,39,226,16,165,68,178,32,2,238,42,175,170,42,163,68,106,170,32,63,226,72,163,4,204,33,2,8,39,239,64,37,66,126,53,78,84,37,194,128,170,165,74,64,133,136,73,15,222,87,69,212,117,77,200,86,135,212,69,76,98,46,226,34,42,175,102,42,162,16,55,238,66,39,226,66,167,228,66,72,4,190,92,142,144,75,229,226,98,173,234,84,165,72,93,76,34,34,2,124,40,143,124,37,67,124,101,74,254,36,66,124,164,68,124,36,66,40,47,239,40,47,226,170,60,110,254,32,66,254,162,68,12,33,2,254,42,175,84,47,226,84,55,206,16,47,226,146,175,228,16,72,133,212,74,47,192,85,197,200,116,141,254,72,133,200,72,140,136,47,226,170,47,239,0,47,226,0,55,206,68,39,194,42,166,68,178,65,5,200,87,239,84,92,135,62,222,133,168,91,198,168,78,140,8,66,4,248,72,142,248,72,133,252,114,77,252,82,71,254,72,141,8,94,228,170,70,110,170,69,6,254,217,6,252,73,4,252,73,12,254,79,228,16,79,238,146,68,68,144,111,237,144,79,196,144,79,236,128,72,132,238,85,78,124,68,68,254,101,76,162,87,196,84,73,44,48,65,5,254,69,78,254,84,166,252,196,133,254,69,36,204,86,140,70,9,0,136,8,128,128,15,239,128,4,0,64,2,64,20,0,192,4,2,128,36,2,0,62,254,2,32,17,0,18,164,170,170,170,97,130,2,128,36,3,239,224,74,4,144,253,4,144,120,164,138,120,100,130,0,133,12,32,165,126,168,130,120,250,130,40,114,170,186,38,102,2,2,0,32,114,5,32,83,5,40,82,69,36,114,5,32,2,0,32,2,0,32,114,69,40,83,5,32,86,5,160,114,37,34,1,224,0,0,0,120,116,133,72,84,133,72,84,133,72,116,160,138,8,161,6,0,0,60,114,69,36,82,69,36,82,69,52,114,133,32,2,0,32,0,0,124,114,69,36,82,69,36,82,69,36,116,64,68,9,65,8,2,0,32,114,5,124,82,69,36,82,69,36,116,69,68,9,65,8,0,0,12,7,7,16,81,5,30,95,5,16,81,7,18,65,32,14,0,0,130,116,69,40,81,5,16,81,5,16,113,5,16,1,0,16,1,0,16,114,5,36,84,133,120,81,5,32,114,132,68,15,224,2,1,0,16,113,5,124,81,5,16,95,229,16,114,133,40,4,64,130,0,0,252,226,10,32,162,11,254,162,10,80,229,42,146,17,34,14,4,128,72,239,234,72,160,10,252,160,138,16,226,10,66,4,32,62,2,0,32,226,10,32,191,234,32,165,10,80,236,138,168,18,66,2,0,0,254,233,10,144,175,202,148,169,74,148,234,73,36,21,66,136,0,0,254,232,10,188,170,74,164,171,74,168,234,41,34,17,226,0,1,0,144,233,10,148,173,138,144,169,10,146,235,42,210,8,224,0,0,0,124,116,69,84,85,69,84,85,69,84,117,69,40,4,64,130,63,130,8,32,131,248,4,7,252,68,68,164,81,68,4,65,68,8,0,0,32,225,10,16,160,74,34,170,46,160,170,65,36,1,192,0,0,64,244,225,74,20,167,74,68,168,74,244,225,74,20,5,64,36,0,0,254,232,138,136,171,234,170,170,170,170,234,234,136,8,128,254,2,0,32,227,202,32,162,11,254,162,10,40,226,74,36,2,0,32,0,0,124,117,69,84,87,197,84,85,69,124,117,69,16,1,0,16,0,192,248,234,138,168,170,138,168,170,138,168,234,65,36,19,162,8,1,0,16,226,138,68,170,42,16,175,202,4,228,138,48,1,0,8,4,0,124,228,74,168,163,10,72,168,106,48,224,138,0,3,0,8,2,0,16,239,234,130,160,10,254,161,10,16,225,10,16,5,0,32,1,0,16,117,69,84,87,197,16,81,5,84,117,69,84,7,192,4,4,0,64,229,235,234,170,170,170,170,170,170,228,74,170,17,34,32,4,128,72,233,234,170,174,170,74,168,170,170,238,170,18,2,160,68,2,32,68,228,74,136,174,234,68,164,74,136,238,234,0,31,224,0,0,0,254,232,10,190,168,138,136,171,234,136,232,138,190,8,0,254,1,0,16,239,234,16,161,10,124,160,10,0,231,202,68,4,64,124,0,0,254,226,138,40,175,234,170,170,170,206,232,42,130,15,224,130,2,0,32,239,234,32,164,138,72,170,170,172,244,137,20,34,68,66,16,128,136,224,138,62,184,138,136,169,74,148,234,40,128,23,226,0,0,33,226,232,170,234,170,170,170,170,171,106,228,170,66,8,161,4,1,0,254,113,5,124,81,69,124,85,5,126,113,37,46,4,64,130,2,0,62,238,10,40,161,42,42,164,107,252,229,10,80,9,35,14,8,128,138,238,202,136,170,170,214,161,10,254,225,10,16,1,0,16,0,128,40,226,138,40,170,170,188,170,138,168,234,170,186,28,96,0,1,0,16,233,42,84,161,10,254,162,138,40,228,170,74,8,161,6,1,0,84,117,69,124,82,5,60,84,69,168,113,5,32,4,1,128,5,0,80,233,10,252,185,10,184,171,74,212,233,42,144,9,0,144,4,0,124,233,75,148,175,234,148,169,74,188,233,10,160,10,0,192,0,192,240,232,202,176,170,138,170,170,202,168,234,73,36,19,34,32,1,0,40,228,74,130,167,202,0,175,234,32,226,138,68,15,224,66,15,128,136,232,138,136,178,106,32,191,202,112,234,137,36,34,32,32,2,0,16,239,234,72,163,10,40,172,107,72,228,138,72,8,129,8,4,64,40,239,234,16,161,10,124,161,10,16,239,234,16,1,0,16,1,0,16,117,69,56,81,5,254,81,5,56,117,68,146,1,0,16,2,0,16,239,234,130,161,202,224,162,10,60,254,10,34,2,32,30,1,0,16,239,234,146,161,10,42,166,202,168,242,74,36,3,32,32,0,0,248,232,138,248,168,138,248,170,74,168,233,10,144,10,128,196,1,0,32,228,74,254,161,42,80,167,202,144,225,10,254,1,0,16,2,1,252,226,10,252,162,11,254,164,10,120,232,129,80,2,1,220,1,0,16,231,202,16,161,10,254,162,138,172,234,169,42,4,128,152,2,64,126,114,69,0,87,229,66,81,5,124,113,69,36,5,64,136,0,0,254,113,5,124,85,69,124,85,69,124,117,5,48,6,129,134,0,0,126,113,5,124,81,69,36,87,229,0,115,197,36,2,64,60,8,0,134,233,139,208,169,234,148,173,75,148,233,72,148,42,65,68,1,0,84,115,133,16,87,197,68,85,69,84,117,69,40,4,64,130,1,0,32,239,138,136,175,138,136,175,138,32,227,201,224,2,32,30,4,64,56,228,74,32,191,234,80,169,11,124,229,74,84,5,192,16,1,0,16,229,74,84,165,74,186,161,10,124,225,10,16,15,224,0,0,0,238,234,170,234,170,170,234,168,170,202,234,234,216,8,128,8,2,0,252,226,10,252,164,11,254,168,139,36,239,170,32,31,192,32,1,0,254,225,10,124,161,10,254,160,10,124,229,74,84,2,128,68,4,128,72,255,234,72,162,11,254,162,10,64,231,202,164,18,64,60,2,128,254,114,133,0,87,197,84,85,69,124,117,69,84,7,192,68,4,128,72,228,139,254,164,138,236,181,202,106,228,138,72,4,128,72,4,78,68,190,234,132,172,235,68,190,142,78,166,33,202,4,64,66,0,0,254,233,42,186,169,42,254,168,42,186,234,160,186,16,162,4,4,0,126,232,43,66,167,170,162,175,170,34,234,170,250,0,160,4,4,0,126,234,171,42,164,170,146,162,106,64,226,73,74,36,160,56,2,0,16,239,234,0,164,74,68,170,170,16,239,234,16,1,0,16,1,0,124,224,10,68,162,138,252,162,11,254,228,138,48,4,129,132,2,1,254,228,138,252,160,74,120,164,138,120,228,138,120,4,128,88,1,0,82,229,74,144,162,138,68,161,10,82,233,74,40,4,64,130,16,128,136,231,234,74,180,138,220,165,74,84,236,137,84,10,65,66,2,0,16,239,234,130,167,202,16,165,10,92,229,8,80,11,225,0,4,0,238,234,170,234,170,202,234,168,170,202,234,170,220,8,128,8,2,0,16,239,202,132,175,202,144,169,74,254,233,0,168,18,130,68,0,32,250,232,170,250,170,42,250,170,174,170,19,161,34,34,160,36,29,192,68,245,74,136,181,74,0,189,202,84,245,72,136,21,66,34,2,142,168,191,234,168,171,138,128,175,234,16,239,234,56,5,64,146,8,129,254,232,138,32,165,10,136,183,106,0,239,136,136,8,128,248,1,0,254,225,10,254,170,170,146,171,170,146,239,234,146,9,32,134,15,224,128,235,234,170,171,234,170,171,234,136,235,233,8,19,226,0,2,1,254,229,10,136,178,106,248,162,11,252,226,10,248,2,1,254,9,0,146,239,74,152,171,42,206,162,10,252,232,74,252,8,64,252,7,192,84,231,202,84,167,202,16,175,234,146,233,42,186,8,160,132,7,192,84,119,197,84,87,197,0,87,197,68,119,197,68,4,64,76,2,128,200,228,138,90,190,202,72,174,138,200,245,74,84,6,32,64,5,0,150,233,42,214,169,42,254,161,10,252,228,74,40,1,0,238,1,0,254,224,10,68,162,138,254,160,10,124,228,74,124,4,64,124,4,3,248,17,0,160,127,232,66,63,130,72,4,3,248,32,131,248,4,64,40,239,234,16,175,202,32,191,234,64,239,202,144,17,2,254,1,0,146,229,74,254,165,74,146,162,10,254,228,74,56,4,65,130,20,64,168,127,228,34,18,1,252,34,7,254,0,1,252,16,65,252,15,224,130,239,234,128,175,234,144,170,74,188,241,1,124,33,4,254,2,0,60,228,74,120,161,11,254,162,10,212,227,136,212,53,32,32,1,0,254], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+105757);
/* memory initializer */ allocate([225,10,124,162,11,254,164,142,244,178,32,248,7,0,168,4,128,232,228,138,238,165,43,234,168,170,234,234,169,36,26,162,82,2,0,252,226,11,252,162,10,72,175,10,36,239,232,148,21,32,32,8,1,206,234,170,202,190,170,140,190,170,170,238,170,172,14,128,8,2,0,32,239,138,32,191,202,32,164,138,252,224,9,252,21,67,254,31,206,136,175,138,136,175,138,142,191,142,8,157,193,84,8,129,84,4,129,254,228,138,64,171,235,132,171,202,172,235,202,132,9,64,136,1,0,254,225,10,124,164,74,124,164,74,124,228,74,254,2,128,68,1,0,254,225,10,254,170,42,72,167,10,36,239,234,84,9,32,48,15,224,0,231,202,68,167,202,0,175,234,170,233,42,186,9,32,150,15,224,16,119,197,68,87,197,68,87,197,32,119,196,164,1,128,102,15,238,146,175,234,146,170,170,198,168,42,254,226,9,20,20,162,122,2,0,248,232,138,248,168,138,248,164,11,252,232,137,36,47,160,32,4,64,170,225,10,40,173,106,56,164,138,176,225,202,100,1,128,224,3,193,192,234,74,88,175,235,34,175,202,64,235,202,164,17,128,102,8,142,80,191,234,0,164,138,132,160,15,252,149,65,84,63,224,0,34,1,78,254,170,138,168,234,170,170,171,238,232,169,10,17,34,38,18,0,188,228,11,60,171,74,44,175,234,68,237,73,126,0,64,24,19,224,148,224,138,62,186,170,190,170,170,190,234,170,166,20,2,62,2,0,168,239,138,32,191,202,32,175,138,168,239,136,36,31,192,4,68,133,232,169,45,92,94,72,72,238,224,64,228,227,248,32,131,248,10,65,244,234,74,254,164,171,250,181,171,250,228,169,250,4,160,86,2,128,254,226,138,254,170,170,254,170,170,254,228,74,124,4,64,124,15,224,40,239,234,170,175,234,0,167,202,0,239,234,84,9,32,48,0,160,8,239,234,168,171,170,170,175,170,164,239,73,172,18,162,114,29,193,84,245,74,136,181,74,34,164,11,252,232,138,80,2,1,220,1,0,146,239,234,0,174,234,170,174,234,170,238,234,170,10,161,118,8,142,78,191,10,136,168,234,244,170,78,174,138,65,36,26,162,82,1,0,254,228,74,40,175,234,146,175,234,146,235,170,170,11,160,134,1,0,254,234,43,20,164,170,210,178,74,92,225,10,146,9,32,254,4,33,244,228,138,226,160,74,232,170,42,226,234,74,68,30,128,16,0,3,254,224,138,168,164,235,242,164,11,84,255,66,68,36,164,146,2,1,254,245,10,138,191,202,138,175,138,136,239,138,168,18,64,96,10,160,108,239,234,68,162,138,254,161,10,124,225,10,254,2,128,198,7,128,72,231,138,72,191,234,160,174,234,170,238,170,180,30,160,50,2,128,36,231,234,72,175,235,72,167,234,72,231,234,64,10,160,170,2,0,254,237,106,186,175,234,186,173,106,16,239,234,40,4,64,130,2,0,216,242,106,248,165,10,168,173,138,136,255,201,36,23,65,12,4,0,124,232,139,124,165,74,124,165,74,254,228,74,124,4,64,124,4,64,40,239,234,214,171,170,254,160,10,124,228,74,124,4,64,124,14,160,44,234,138,74,171,75,2,167,138,72,231,138,132,4,129,254,4,64,254,229,74,254,160,10,124,164,74,254,232,42,186,10,160,186,4,129,254,228,138,236,181,170,72,167,202,0,239,234,16,9,65,50,1,192,16,239,234,146,169,138,242,169,234,176,237,169,44,20,162,24,2,0,252,228,139,254,168,74,252,168,74,252,226,10,20,20,162,120,1,0,254,234,170,124,162,138,254,162,138,84,235,170,16,15,224,0,0,64,224,234,234,160,174,170,132,174,234,164,250,234,164,14,64,4,15,238,16,175,234,146,165,74,0,175,234,16,239,234,170,10,160,134,1,1,254,244,42,238,170,171,68,171,75,2,239,138,32,10,129,100,15,206,16,175,234,146,164,74,144,191,202,144,239,202,144,15,224,128,1,0,254,229,74,254,170,170,124,162,138,254,226,138,106,10,64,50,0,7,252,64,68,4,64,68,4,64,68,4,64,68,4,127,192,0,127,196,4,94,68,36,68,69,244,68,68,68,84,68,132,127,196,4,0,7,252,72,68,132,127,196,164,82,68,196,82,70,20,127,196,4,0,7,252,68,68,164,81,70,140,74,68,196,73,68,116,64,71,252,0,7,252,80,69,244,107,69,52,101,68,148,85,68,36,127,196,4,0,7,252,68,68,164,85,70,76,95,68,20,74,68,68,66,71,252,127,196,68,127,196,132,95,70,148,79,68,148,79,68,148,75,71,252,127,196,4,95,68,68,95,68,148,127,196,4,95,69,20,95,71,252,127,196,68,95,68,68,95,68,68,127,197,20,95,69,20,83,71,252,127,196,68,95,68,68,127,196,164,95,68,68,127,196,68,68,71,252,255,232,2,191,170,170,255,233,18,159,40,162,154,170,210,136,175,254,33,2,16,39,239,144,171,202,144,175,234,146,185,162,20,33,2,16,32,130,8,34,143,190,170,138,200,171,234,136,185,66,20,34,66,66,32,130,8,39,239,202,172,138,252,173,74,212,189,66,72,41,67,34,16,1,28,125,66,84,24,130,84,68,35,248,36,130,72,37,128,64,32,130,126,248,138,188,169,10,254,170,75,190,36,66,84,40,66,12,33,2,124,249,10,252,169,10,254,168,10,252,189,66,84,34,130,68,32,2,62,250,42,190,170,170,190,170,170,174,186,162,62,34,34,62,33,66,18,251,234,232,170,138,190,170,138,190,186,130,40,35,226,32,35,226,34,251,234,160,171,234,168,171,42,190,186,130,94,36,130,190,35,194,36,251,202,164,175,234,170,175,235,128,39,194,36,33,130,230,32,130,62,249,74,254,170,42,190,170,42,190,184,130,126,32,130,8,33,66,54,249,74,190,169,74,190,168,138,190,184,130,126,33,66,34,32,226,120,250,170,156,175,234,156,170,170,254,186,162,62,34,162,62,4,4,68,127,192,0,127,129,16,18,1,56,40,130,80,67,9,206,32,2,62,32,42,130,168,42,190,170,10,160,186,46,162,10,32,30,32,2,126,34,74,164,170,74,254,170,74,164,186,78,68,4,64,132,32,130,8,39,234,136,168,138,254,170,42,162,185,78,136,3,64,194,32,2,62,34,10,160,170,170,164,170,74,170,186,14,160,3,224,0,32,2,62,32,74,148,170,74,190,168,202,148,186,78,68,9,64,8,32,2,124,36,74,196,173,74,212,173,74,212,186,142,170,4,160,134,3,135,192,8,15,252,17,2,8,196,96,64,36,130,72,63,128,0,4,4,68,127,192,64,10,3,24,196,96,32,63,128,16,2,0,64,4,4,68,127,192,0,63,130,8,42,130,72,42,165,42,64,104,2,4,4,68,127,192,0,63,130,72,36,131,248,32,34,2,31,224,0,32,130,8,32,138,190,168,138,136,171,234,162,186,44,162,3,224,0,4,4,68,127,192,0,255,224,8,124,132,72,124,128,8,2,128,16,4,4,68,127,192,128,127,129,0,36,7,252,4,2,80,84,128,128,32,2,62,34,170,170,171,234,170,170,170,190,184,140,136,0,128,8,32,130,8,32,138,190,170,170,170,171,234,170,186,172,170,3,224,0,21,1,72,39,231,192,162,66,20,32,192,64,36,130,72,36,131,248,33,2,16,35,234,162,172,42,186,170,170,170,187,172,130,0,160,4,4,4,68,127,193,0,99,196,164,74,69,164,107,64,168,18,2,32,32,2,62,34,42,190,170,138,168,171,234,168,186,172,170,3,96,34,32,2,124,34,74,152,170,74,210,171,138,144,191,204,144,1,0,16,32,2,62,34,42,190,170,42,186,170,170,186,186,46,162,2,160,36,32,194,112,33,10,254,169,10,168,172,106,168,186,140,168,4,128,136,33,2,16,35,234,194,171,170,170,171,170,170,187,174,130,0,160,4,34,2,60,34,74,200,171,202,148,175,234,148,187,206,144,1,0,48,34,66,126,34,74,128,175,234,210,169,10,188,185,76,164,4,64,140,32,130,8,35,234,136,170,170,156,171,234,136,185,206,170,0,128,8,4,4,68,127,193,0,18,143,196,53,37,144,82,73,126,16,33,0,33,2,16,47,234,40,165,74,254,181,74,124,181,78,124,1,32,14,4,4,68,127,192,0,127,196,68,127,196,68,95,69,20,95,71,252,34,66,24,34,74,144,175,234,160,175,202,164,187,206,164,2,64,44,33,2,126,32,10,188,170,74,188,168,10,188,184,78,126,0,128,24,33,2,8,35,234,162,169,74,162,168,10,190,184,142,136,3,224,0,32,2,254,40,42,254,168,138,170,171,234,136,186,174,170,11,225,0,33,66,62,33,74,190,170,42,136,171,234,136,185,206,170,0,128,8,32,2,254,34,138,254,170,170,254,162,10,254,180,78,40,1,0,238,4,4,68,127,192,40,127,228,32,126,69,20,124,133,74,73,105,66,4,4,68,127,192,0,63,130,72,63,130,72,63,128,128,85,73,242,4,4,68,127,192,128,63,130,72,63,130,72,63,128,160,50,172,30,4,4,68,127,192,64,27,14,14,56,130,168,58,130,168,56,130,152,36,66,40,47,234,16,175,234,32,175,234,64,183,206,144,17,0,254,33,2,84,33,10,254,165,74,146,162,10,254,178,78,36,1,128,102,36,66,40,47,234,0,164,74,136,178,171,204,168,79,42,30,224,34,32,2,62,34,170,190,170,10,190,171,42,190,189,46,94,9,33,30,33,130,224,34,11,254,170,139,170,170,203,170,162,107,112,202,193,32,68,71,252,4,15,254,0,1,248,16,135,254,64,36,242,73,36,246,33,2,146,37,74,170,172,74,190,170,74,188,186,78,60,2,64,44,33,2,254,34,138,254,164,74,124,164,75,124,225,0,254,1,0,16,33,2,146,37,74,254,165,74,146,165,74,174,171,79,94,4,64,132,32,162,236,34,138,170,164,74,186,160,10,124,180,78,124,2,128,254,4,7,120,165,45,106,189,237,106,189,237,106,181,168,66,255,224,0,4,4,68,127,194,128,51,225,212,64,135,190,144,167,236,42,132,94,4,4,68,127,193,0,125,225,8,125,228,82,85,175,250,40,132,84,8,1,0,32,4,64,8,1,128,40,4,128,8,0,128,8,0,128,18,1,16,32,4,252,146,2,32,99,202,36,34,66,68,37,66,136,16,1,120,36,132,72,151,130,72,100,138,120,36,130,72,47,194,0,34,2,32,71,233,66,24,34,122,100,170,122,36,162,122,32,162,4,20,65,40,32,4,124,145,2,124,97,10,16,47,226,16,33,2,16,18,1,36,36,132,112,146,66,254,98,42,124,42,66,24,34,66,194,17,1,16,39,196,16,149,66,56,97,10,254,35,130,84,41,34,16,17,1,16,37,228,80,149,2,254,97,10,16,37,226,80,43,3,30,17,2,146,69,73,16,47,230,130,171,162,170,42,162,186,40,162,132,17,2,124,68,73,124,36,70,124,160,2,254,33,2,124,33,2,254,16,226,240,69,41,44,36,6,124,169,3,254,33,2,84,39,194,4,40,134,168,190,130,30,93,76,52,93,68,148,92,132,136,95,68,34,40,133,200,149,3,222,87,77,212,73,71,212,80,133,212,101,68,226,95,9,94,63,5,80,223,228,164,95,71,68,95,69,68,95,69,12,0,0,128,16,6,0,4,0,128,16,6,32,4,0,128,48,12,0,8,8,128,80,2,0,80,9,0,48,5,0,144,1,0,80,2,0,18,9,32,82,2,120,82,137,40,50,133,40,146,129,74,84,162,134,0,9,124,81,2,16,81,9,16,63,229,16,145,1,16,81,2,16,9,8,136,80,2,62,82,9,32,50,5,32,146,1,64,84,2,128,16,9,124,80,66,36,82,73,62,48,37,2,151,161,2,80,162,4,16,9,124,81,66,20,81,73,124,50,69,36,146,65,36,87,226,0,17,9,16,82,66,66,87,233,42,50,133,40,146,161,74,84,98,128,16,9,124,85,66,84,87,201,84,53,69,124,145,1,16,81,2,16,18,9,32,103,194,68,88,73,116,53,69,116,148,193,64,84,34,62,18,137,40,111,226,42,87,233,168,63,229,42,146,161,46,84,130,136,17,9,20,81,2,254,85,9,84,63,69,84,148,129,74,89,98,34,17,9,40,84,66,130,83,201,0,55,229,16,145,1,36,87,226,2,17,9,8,87,226,66,80,137,126,48,133,72,146,129,8,82,130,16,32,139,200,68,138,136,42,194,234,122,170,202,40,130,136,170,133,144,41,10,146,73,68,216,169,34,146,108,234,16,39,194,16,175,228,0,23,233,66,103,226,0,87,233,66,55,229,66,151,225,66,84,162,68,34,34,194,164,164,74,174,162,74,110,171,90,36,162,66,164,164,68,17,9,40,84,66,130,87,201,16,63,229,16,149,65,146,85,2,32,17,9,40,84,66,130,87,201,0,50,5,20,148,65,40,87,226,0,18,5,16,47,194,0,87,137,0,55,133,0,151,129,72,84,130,120,33,10,32,68,74,254,36,66,162,99,202,68,42,130,16,162,132,70,17,9,124,81,2,40,87,233,4,55,69,84,151,65,4,81,66,8,32,10,248,74,138,248,42,130,248,98,10,252,39,2,168,178,100,32,32,2,254,170,164,170,175,226,32,99,202,68,42,130,16,162,4,192,18,5,76,36,69,108,148,65,68,55,197,40,146,161,74,84,98,128,17,9,40,84,66,130,87,201,16,63,229,16,151,193,68,84,66,124,34,2,16,175,228,0,164,66,68,106,170,16,47,226,16,161,4,16,45,10,80,69,234,210,42,130,136,109,202,106,36,162,72,182,132,144,36,234,74,68,170,238,36,162,74,110,234,170,42,162,234,161,36,38,33,2,16,175,228,84,169,34,124,100,74,124,36,66,124,160,4,254,47,138,168,79,138,168,47,134,0,191,194,160,41,66,168,172,100,128,47,226,146,175,228,146,175,226,68,103,202,68,39,194,68,164,68,76,47,234,146,73,42,254,40,2,190,106,42,190,42,34,190,170,37,62,47,202,40,65,10,254,34,162,216,97,10,254,35,130,84,169,36,16,33,10,124,66,138,254,36,70,124,164,66,124,33,2,254,161,4,16,34,10,248,69,11,252,40,134,248,168,130,248,37,2,82,169,37,14,32,10,254,72,138,216,42,230,242,170,66,164,47,66,164,172,165,18,33,10,254,82,170,196,47,227,68,103,202,68,39,194,16,165,68,178,40,138,232,82,234,82,62,70,164,190,226,164,62,226,164,170,68,100,39,202,16,79,234,16,47,230,214,171,162,254,33,2,254,160,4,170,36,74,254,68,74,238,42,162,238,99,10,72,47,227,72,167,228,64,32,130,8,59,228,136,74,139,40,20,130,126,32,132,8,128,128,8,124,133,78,125,37,116,124,129,20,254,99,138,85,169,36,16,129,48,33,2,40,36,71,146,87,197,68,183,193,68,39,196,74,133,64,98,4,1,248,97,1,254,226,33,252,18,65,252,18,65,252,8,129,4,8,0,128,31,129,8,40,132,144,5,0,32,5,1,136,96,96,0,32,2,0,60,4,64,72,10,0,32,2,0,32,2,128,48,2,0,64,4,124,112,137,16,18,4,126,66,164,42,68,166,146,66,160,4,65,4,16,119,233,16,17,4,84,69,68,84,71,197,16,97,36,14,66,4,32,119,233,64,11,196,0,71,132,8,80,166,10,64,96,2,64,4,12,119,9,16,1,4,16,79,228,16,81,6,16,71,192,0,64,196,112,113,9,16,17,4,254,65,4,16,82,134,40,68,64,130,66,4,32,119,233,64,9,4,16,71,228,18,81,38,34,66,160,68,33,2,16,122,4,164,151,224,2,32,2,60,42,67,36,34,64,60,65,4,32,111,234,130,8,36,186,74,164,170,75,165,130,104,164,132,65,4,124,113,9,254,72,36,124,64,132,254,65,5,16,101,4,32,65,4,40,116,73,130,71,196,16,79,228,16,85,70,146,69,0,32,64,4,124,116,73,124,4,68,124,64,4,74,70,197,72,102,164,70,65,4,254,115,137,84,73,36,124,68,68,124,84,70,124,64,0,254,65,4,86,121,41,214,41,36,254,65,4,254,68,69,40,97,4,238,66,132,254,114,137,124,68,68,124,68,68,124,81,6,254,66,128,68,68,68,254,113,9,124,2,5,254,68,4,124,73,69,124,98,68,254,66,132,254,114,137,56,1,4,124,69,68,124,65,5,124,97,4,254,74,69,228,74,135,254,145,164,234,74,164,234,90,70,228,74,160,178,78,228,170,110,234,136,10,164,102,68,132,252,68,133,254,100,132,132,65,4,254,113,8,124,69,68,254,74,164,124,82,134,254,70,64,178,4,0,32,63,194,0,36,2,68,36,130,80,38,4,66,68,40,62,4,0,32,63,194,0,47,130,32,34,3,252,37,4,82,73,41,14,4,0,32,63,194,32,63,194,32,47,130,136,37,4,32,69,9,140,2,3,254,40,2,248,48,130,232,42,130,232,40,132,154,72,40,126,2,3,254,32,2,72,40,131,190,40,130,156,42,164,136,72,136,136,2,3,254,36,66,40,47,226,16,39,194,16,79,228,16,129,0,16,2,3,254,36,131,254,36,130,120,32,2,252,72,68,252,136,129,6,4,7,252,66,7,254,74,133,252,106,164,248,74,132,250,66,40,30,2,3,254,32,2,16,37,98,146,45,98,146,47,228,40,68,72,130,4,3,252,34,2,252,41,66,252,42,66,252,37,5,254,65,8,16,2,3,254,34,2,252,34,67,254,36,130,252,53,100,84,66,136,196,2,7,254,73,5,208,73,231,228,81,69,212,84,137,84,45,68,34,1,3,254,36,66,254,36,66,124,33,2,254,41,36,254,65,8,254,2,7,254,64,5,252,82,69,252,82,69,252,74,133,116,98,40,248,2,7,254,80,5,222,100,165,246,85,69,254,85,69,254,85,74,52,4,7,254,66,7,254,85,69,116,80,69,252,64,7,254,74,137,100,2,7,254,74,133,124,124,133,124,84,132,254,72,68,252,72,72,140,16,1,0,24,5,64,80,9,0,16,1,0,16,1,0,16,1,0,32,2,0,47,203,36,170,74,36,162,66,36,34,66,68,37,66,136,32,130,8,48,138,254,160,138,8,36,130,40,32,130,8,34,130,16,33,194,112,49,10,144,161,10,254,161,2,16,33,2,16,33,2,16,32,2,124,49,10,144,161,10,254,161,2,40,34,130,74,36,162,134,33,2,16,47,235,16,161,10,252,164,66,40,33,2,40,36,66,130,32,2,126,52,10,194,166,74,84,36,130,84,38,34,64,39,226,0,33,2,16,33,11,124,173,74,84,165,66,124,33,2,16,33,2,16,34,2,32,55,202,80,169,10,16,47,226,16,33,2,16,33,2,16,36,2,64,55,202,128,167,138,0,47,130,8,32,162,10,32,98,2,36,2,72,37,11,96,164,11,254,37,2,80,36,130,84,38,34,64,33,3,16,42,138,68,168,42,124,36,66,84,36,130,66,36,34,62,32,130,40,34,139,68,164,74,146,34,2,32,36,66,254,32,34,0,33,2,8,32,3,126,169,10,24,161,66,18,33,2,16,33,2,16,32,2,124,49,74,148,161,74,124,34,66,36,34,66,254,32,2,0,33,2,16,49,10,254,161,10,16,39,194,68,36,66,68,39,194,68,33,2,20,177,42,144,175,234,56,35,130,84,37,66,146,33,2,16,32,2,124,49,10,84,163,138,16,47,226,16,33,2,16,33,2,16,32,2,124,52,74,196,167,202,68,36,66,124,36,66,0,47,226,0,33,2,16,55,202,212,165,74,84,47,226,16,34,130,40,36,66,130,34,2,32,55,234,80,169,10,30,33,2,16,33,226,16,33,2,16,32,2,124,36,75,124,172,10,82,165,66,88,41,34,146,48,226,0,34,130,40,47,235,42,175,234,168,47,226,42,34,162,78,36,130,136,32,2,252,34,75,36,165,74,136,32,2,124,36,66,68,39,194,68,39,194,68,50,138,16,162,138,198,161,2,124,33,2,254,33,2,16,33,2,16,50,10,68,175,234,66,32,2,124,36,66,68,39,194,68,32,130,104,48,138,30,174,170,74,36,162,170,46,162,18,34,162,68,32,2,254,40,11,148,169,42,144,47,226,144,42,131,40,36,66,130,32,34,250,40,171,170,170,170,170,42,162,170,34,34,82,36,162,134,33,2,84,53,74,124,160,10,124,32,66,124,36,2,66,35,226,0,34,2,32,55,234,130,167,170,74,39,162,74,39,162,2,32,162,4,36,2,124,52,74,168,161,10,40,44,98,0,39,194,68,36,66,124,32,2,254,41,43,16,175,202,32,37,2,124,33,2,254,33,2,16,33,2,254,49,10,254,168,42,124,32,130,16,47,226,16,37,2,32,33,2,16,55,234,144,167,202,84,39,194,16,35,130,84,41,34,16,34,2,174,58,170,170,170,74,42,33,2,16,39,194,16,47,226,0,32,2,124,37,75,124,173,74,124,161,2,124,33,2,16,47,226,0,32,2,254,57,42,146,175,234,146,43,162,214,41,34,146,47,226,130,39,130,72,55,138,0,175,202,164,170,66,252,40,2,130,39,226,0,36,66,40,55,202,148,167,202,80,39,226,50,37,162,148,33,2,16,33,2,32,36,75,126,170,170,68,42,34,60,36,66,168,33,2,238,32,2,254,56,138,190,168,138,170,41,194,190,40,130,148,42,34,254,33,2,124,49,10,254,164,74,40,39,194,16,47,226,16,33,2,16,34,130,40,46,235,40,162,138,238,34,130,40,46,226,40,34,130,40,33,2,146,53,74,16,175,234,130,43,162,170,43,162,130,40,162,132,47,226,130,58,170,254,169,42,254,42,34,162,43,162,130,40,162,132,47,226,146,57,42,186,169,42,254,40,34,186,42,162,186,40,35,6,36,3,126,42,170,42,165,42,170,36,66,16,32,130,162,42,163,24,34,2,16,47,235,0,164,74,68,42,162,16,47,226,16,33,2,16,39,194,68,55,202,68,167,202,0,47,226,170,42,162,170,63,226,0,33,2,124,181,74,124,161,10,254,32,2,124,36,66,84,34,130,68,46,226,170,46,235,0,167,202,0,47,226,32,35,194,4,34,130,16,32,2,254,42,170,254,178,10,16,175,226,32,35,194,68,37,66,136,33,2,146,47,235,0,175,234,16,47,226,170,42,162,162,40,162,132,34,130,200,36,171,92,174,138,72,46,131,88,36,130,84,38,34,64,39,226,128,39,203,68,175,202,68,39,194,32,39,194,164,33,130,102,33,2,124,49,10,254,162,10,72,47,2,36,47,226,84,41,34,48,40,130,80,47,203,80,175,202,84,191,226,84,47,194,216,53,66,80,65,5,254,81,7,124,209,69,254,85,69,124,85,69,124,101,68,76,39,194,68,39,203,68,167,202,16,47,226,68,39,194,16,37,66,178,34,131,64,175,235,72,167,234,72,39,226,72,39,226,64,42,162,170,33,2,124,50,138,254,165,74,124,37,66,124,33,2,124,33,2,254,34,130,254,50,138,124,170,170,8,47,226,18,37,2,94,43,3,30,33,2,254,48,10,254,168,42,186,42,162,254,32,2,254,37,66,178,36,66,254,52,74,254,170,170,254,32,3,254,52,162,120,36,130,120,63,128,64,8,15,254,17,2,8,68,104,64,38,130,84,85,64,128,113,5,126,98,5,124,90,70,60,70,65,152,232,98,168,73,65,128,64,2,252,0,68,4,64,69,244,64,68,4,64,68,20,64,128,0,64,2,124,0,69,228,64,69,228,64,68,4,127,68,4,65,68,8,64,2,252,4,69,244,68,69,244,68,69,244,69,68,116,68,68,76,64,2,252,0,68,68,95,68,68,74,69,68,105,68,244,64,68,12,64,2,252,0,68,68,95,68,36,74,68,68,74,69,20,64,68,12,79,194,4,136,72,68,191,72,4,156,73,84,149,74,52,128,72,12,159,228,2,18,40,34,143,171,34,149,41,138,144,42,250,128,40,6,64,2,252,0,68,228,74,68,228,64,69,244,81,69,244,64,68,12,159,228,2,63,170,74,191,170,74,174,171,90,164,171,250,128,40,6,79,226,130,78,37,34,127,37,82,95,37,82,95,36,74,67,164,6,79,194,68,95,69,20,95,69,20,95,69,84,82,69,148,80,68,12,79,226,42,130,107,254,130,43,170,170,171,178,129,168,170,180,40,6,79,194,4,14,68,164,78,68,164,95,69,20,95,69,20,95,68,12,159,196,4,22,74,36,182,74,36,190,73,68,149,73,84,163,72,12,95,192,4,131,75,196,149,75,244,161,73,228,146,72,196,179,72,12,95,192,20,190,74,68,191,74,36,177,73,228,146,73,228,146,73,236,95,226,18,145,47,170,164,106,18,184,170,162,169,44,138,168,41,6,47,192,4,95,69,20,95,69,20,95,68,100,69,71,252,74,69,20,95,192,36,187,74,172,145,74,236,196,75,244,132,72,164,145,72,12,79,194,68,31,68,68,127,68,164,95,68,4,95,69,84,127,196,4,47,192,68,95,68,68,95,69,20,95,69,20,127,196,164,81,68,12,95,224,34,170,41,58,252,169,2,213,47,210,145,41,42,164,168,6,95,224,34,186,40,190,254,170,170,186,170,210,249,40,170,140,168,134,4,0,64,68,2,64,36,0,64,4,1,64,36,4,64,4,0,64,17,1,16,17,1,240,1,0,16,127,1,16,17,1,16,33,4,16,18,133,36,82,5,62,126,1,36,242,133,16,83,37,74,152,97,2,64,2,0,0,8,0,72,1,0,32,14,0,32,2,0,32,0,0,68,2,64,15,232,128,80,0,252,32,140,48,68,4,130,72,32,126,32,1,124,4,68,68,36,64,196,23,198,64,36,34,66,35,224,0,64,2,252,8,72,164,73,64,132,36,140,80,66,4,80,72,129,6,66,2,32,159,196,32,2,2,248,66,12,32,95,196,32,66,0,32,64,2,252,0,8,0,95,224,80,37,4,80,201,36,146,80,226,0,66,2,32,130,5,254,2,2,112,74,141,36,98,36,32,66,0,32,128,5,254,2,8,32,75,193,164,42,76,252,64,68,4,65,64,8,66,2,32,31,232,32,82,65,36,63,196,32,194,36,34,65,224,0,0,4,248,40,136,136,72,129,248,40,140,136,72,132,248,72,128,0,64,2,252,136,68,132,8,66,244,72,76,132,72,68,252,0,0,0,66,2,16,128,5,254,2,2,48,34,140,36,66,4,32,66,0,32,66,2,16,0,9,254,72,128,136,37,12,80,66,4,80,72,129,6,66,2,16,31,232,0,71,129,72,36,140,72,72,164,138,80,162,6,73,2,80,1,8,254,65,33,18,34,172,38,68,36,66,72,161,4,157,5,80,21,9,190,85,35,82,85,45,146,82,37,42,20,65,0,72,130,136,136,133,254,8,130,136,47,140,136,72,132,248,72,128,0,66,2,40,2,72,32,95,193,112,39,12,168,74,133,36,66,0,32,68,130,68,132,5,254,9,2,148,73,140,144,83,37,82,32,224,0,34,1,60,130,4,252,8,66,132,79,204,128,72,5,0,80,2,0,66,2,32,143,132,168,10,130,168,127,236,32,69,4,136,80,66,2,128,5,252,21,73,84,85,67,84,213,69,156,80,69,252,16,64,0,72,2,128,15,201,32,74,130,184,78,141,168,75,132,162,72,32,126,66,2,32,5,8,136,84,64,32,47,140,8,73,4,96,66,0,16,68,2,156,17,73,84,85,65,84,61,77,84,69,196,144,73,1,16,65,130,224,8,8,144,73,0,254,33,12,84,73,37,18,69,0,32,66,2,16,31,232,32,68,128,240,34,12,64,72,132,252,64,64,0,65,2,146,5,72,16,71,193,16,33,12,254,65,4,16,65,0,16,66,2,16,15,232,130,64,0,64,20,130,80,198,4,66,68,32,62,156,68,68,4,73,200,80,131,8,93,12,84,69,36,94,84,32,128,64,2,252,8,72,252,73,1,144,47,236,144,73,4,170,76,96,130,64,2,248,129,4,32,5,2,136,80,76,248,66,4,32,95,192,0,64,2,252,0,8,252,72,64,252,40,76,252,72,68,0,95,224,0,66,2,32,31,232,64,79,193,68,7,194,68,199,196,68,69,64,72,128,37,242,4,40,74,78,160,170,42,173,74,68,164,130,16,162,4,65,2,16,15,232,16,69,65,56,33,12,254,65,4,40,68,64,130,66,2,60,2,8,248,72,129,168,42,140,168,74,132,80,72,129,4,128,5,252,18,73,36,95,193,36,50,77,84,88,197,4,95,193,4,128,5,252,16,73,4,87,65,84,53,69,116,208,69,4,95,193,4,65,2,80,135,196,144,1,2,254,65,12,56,69,68,146,65,0,16,65,2,32,15,200,132,72,65,252,40,76,132,79,196,132,72,64,252,68,2,64,8,9,252,85,65,84,53,77,84,85,69,84,127,224,0,66,2,80,8,137,6,79,128,0,47,196,32,197,4,136,95,192,4,133,4,80,21,64,216,133,4,208,21,130,84,201,4,146,81,34,14,34,1,32,7,232,130,71,161,74,39,174,74,39,162,2,32,160,4,68,2,124,12,137,48,68,129,166,47,140,32,74,4,252,66,0,32,136,36,74,0,169,250,66,160,170,42,172,74,74,37,34,64,160,4,17,8,144,65,224,40,152,132,136,27,226,136,202,132,200,72,132,8,79,194,4,7,200,4,79,193,8,47,236,72,66,132,8,66,128,16,68,2,64,4,233,234,74,162,170,74,172,170,68,164,174,17,2,0,66,2,32,159,196,32,31,195,36,95,204,32,71,4,168,82,64,32,128,5,252,2,8,248,68,129,254,32,12,248,72,132,136,79,128,136,130,4,32,31,200,32,74,130,112,95,236,112,74,133,36,98,32,32,95,227,34,18,41,250,82,33,114,50,45,250,82,165,58,82,33,254,0,4,248,40,136,136,79,129,32,34,12,188,74,4,160,23,226,0,79,194,132,15,200,0,79,193,132,47,204,132,79,196,132,73,64,136,130,5,36,31,200,32,69,2,136,84,108,32,79,132,8,65,0,32,64,194,240,8,8,128,79,193,144,41,12,144,127,228,0,72,129,4,72,130,112,8,136,32,95,224,80,47,197,84,197,68,92,65,0,16,136,4,248,17,10,32,95,193,36,50,69,252,194,4,82,73,35,14,66,2,16,31,233,2,71,129,0,47,204,80,69,4,146,73,33,14,66,2,34,15,200,40,95,192,32,39,204,196,87,198,68,71,192,68,132,132,72,31,232,72,71,129,72,39,140,72,95,228,0,72,129,4,72,66,152,9,11,208,73,225,212,43,76,148,74,68,164,12,64,132,72,2,148,9,75,212,74,33,200,42,140,144,73,4,164,75,224,130,65,2,124,1,9,254,72,32,84,41,12,80,95,228,40,68,64,130,128,5,252,4,8,160,83,32,212,45,141,116,69,69,146,69,0,32,128,5,252,18,73,252,82,65,252,32,5,254,200,132,136,80,134,8,79,130,136,15,136,32,95,193,36,63,205,36,95,196,32,66,32,30,66,2,80,8,137,4,79,130,32,95,204,32,82,68,168,95,192,0,0,11,190,106,162,170,186,166,170,43,227,160,106,10,162,41,229,128,68,2,32,159,197,4,15,130,0,95,204,32,74,133,36,10,0,64,132,4,32,31,201,4,66,2,248,74,140,248,74,132,248,66,0,32,66,2,16,15,200,132,64,1,120,36,140,120,68,4,124,68,64,124,79,130,8,15,136,8,95,224,32,43,44,108,74,133,36,42,32,64,128,37,250,16,169,250,82,33,34,31,165,170,170,162,186,66,32,38,130,132,168,31,200,168,75,129,128,47,204,32,95,196,112,74,129,36,128,5,252,5,9,252,85,67,84,95,204,32,95,196,32,127,224,0,128,5,252,2,8,64,95,193,84,55,77,84,87,69,84,95,193,4,6,139,136,72,128,170,190,196,136,28,133,168,233,68,148,74,32,192,66,2,172,18,73,172,82,65,252,34,13,252,72,132,80,71,3,142,68,2,248,8,136,248,72,128,248,32,12,248,66,4,248,66,1,252,8,8,128,84,226,42,156,164,138,62,164,138,220,70,170,72,161,146,69,2,136,16,72,248,68,130,168,81,12,0,95,197,84,85,67,254,136,68,72,63,232,0,92,65,84,61,77,84,93,69,68,85,65,72,130,5,252,16,72,248,64,0,248,40,140,248,72,132,248,64,1,252,159,197,4,31,201,0,87,193,32,52,77,124,81,5,124,33,4,254,64,2,252,9,72,252,72,1,188,42,76,188,74,68,188,82,66,60,73,2,158,29,40,164,75,225,234,42,172,190,94,4,162,73,224,128,130,5,252,2,8,248,68,1,254,40,141,116,98,37,252,74,129,36,66,2,248,2,9,252,68,0,144,47,132,8,223,197,84,85,67,254,79,194,72,7,136,72,71,129,78,47,142,8,46,226,170,36,64,170,68,130,252,4,136,36,95,224,72,40,77,74,79,196,72,72,129,8,133,5,252,5,9,252,80,64,248,34,12,248,66,4,40,95,192,0,66,67,254,130,5,252,18,67,252,210,68,8,95,228,136,68,128,24,128,5,252,133,5,252,21,67,252,66,13,252,71,4,168,82,64,32,79,226,128,139,196,128,15,226,170,74,76,178,72,69,126,82,66,12,79,130,136,15,136,136,79,130,0,93,204,68,85,68,204,85,64,204,95,227,2,31,169,66,90,97,90,59,173,86,89,37,82,82,33,254,72,130,238,21,72,0,65,130,224,67,140,224,67,197,224,66,32,30,68,2,248,8,136,248,72,128,248,40,140,248,66,69,254,68,129,132,136,133,4,5,8,32,77,131,6,79,140,32,95,196,168,71,3,254,130,5,254,17,9,124,81,65,254,49,77,124,81,5,124,36,68,124,65,2,252,4,137,254,82,32,16,47,204,64,71,196,68,73,65,8,128,5,252,16,72,248,72,129,248,40,140,248,66,5,252,72,129,4,136,133,252,8,139,254,66,3,252,82,77,252,82,69,252,72,129,4,68,130,252,4,137,254,82,32,72,47,12,36,79,228,84,73,32,48,8,139,254,72,129,252,2,75,254,66,65,252,82,73,116,26,194,36,8,139,222,72,129,220,170,164,136,34,13,254,68,132,72,67,1,206,133,5,252,5,9,252,85,65,252,53,77,252,72,132,248,72,128,248,131,196,32,31,233,34,95,129,34,17,229,240,149,66,254,33,4,48,159,197,36,31,201,36,95,192,64,40,141,240,68,69,252,74,129,100,130,4,248,10,136,248,66,1,252,50,77,252,66,4,20,84,162,120,136,132,136,21,2,30,158,68,52,17,66,168,20,132,20,189,64,34,37,9,80,75,161,148,175,228,144,27,194,228,11,196,164,171,193,36,37,9,124,73,1,168,47,232,132,91,194,164,11,196,132,169,65,8,130,4,16,31,233,80,95,193,84,63,205,72,86,165,76,86,162,70,161,5,16,1,231,160,36,10,62,120,162,136,106,234,168,42,133,222,156,132,72,9,3,222,151,69,212,21,65,212,86,139,212,5,64,98,8,75,228,73,225,196,128,69,212,52,205,196,64,69,68,72,67,236,148,37,92,63,1,80,157,229,84,29,65,84,63,68,20,149,66,36,8,139,222,72,129,220,42,169,252,80,65,252,16,69,252,144,65,12,8,139,42,81,193,8,123,225,34,187,229,98,19,229,34,146,161,36,66,2,248,5,11,254,74,128,248,42,140,248,66,4,248,66,1,252,95,195,4,31,201,16,87,193,16,30,229,34,164,66,238,68,64,204,8,139,238,73,35,228,170,230,170,62,160,138,92,170,164,72,64,138,128,133,212,21,9,126,93,65,94,61,77,94,85,69,212,65,224,16,133,5,252,21,73,252,85,65,252,32,12,248,72,132,248,69,3,254,8,8,248,81,3,254,148,69,162,17,5,124,144,1,124,36,68,124,2,11,254,80,65,116,149,69,252,40,132,248,200,132,248,64,3,254,2,11,254,104,130,80,175,198,84,63,230,84,191,194,216,85,72,80,143,196,32,63,234,34,90,192,0,63,196,32,223,197,84,85,65,12,138,164,236,18,137,254,116,67,254,81,13,124,81,5,254,82,129,68,68,2,248,8,136,248,72,131,252,82,77,252,82,71,254,72,129,8,130,5,252,8,136,248,64,1,252,48,68,248,196,69,168,69,69,178,157,197,84,12,201,84,70,0,144,47,205,144,111,196,144,79,192,128,16,139,148,82,35,128,171,103,146,45,163,182,85,107,154,17,33,54,73,194,212,9,65,200,37,73,162,101,1,220,5,5,220,133,3,254,130,5,254,8,8,252,64,2,78,62,162,170,106,234,74,42,164,16,130,4,216,48,105,252,85,65,252,32,13,252,85,69,252,85,65,12,146,68,168,31,192,168,146,68,248,10,128,248,74,139,254,8,129,4,157,229,68,28,137,94,93,32,146,63,37,90,157,162,170,73,65,162,159,196,32,63,226,170,20,11,252,85,65,220,73,75,220,9,64,172,0,0,64,2,0,0,127,228,2,128,0,0,0,0,0,0,0,0,4,0,32,127,196,132,136,3,240,9,0,144,17,33,18,32,228,0,8,0,64,127,196,4,0,7,252,8,1,0,63,133,8,144,129,248,8,0,64,127,196,132,4,1,16,82,69,34,84,169,136,47,132,0,4,7,252,72,67,248,16,3,248,80,137,248,16,129,248,16,129,24,4,15,254,128,35,248,32,2,240,32,3,248,42,34,148,76,136,134,4,15,254,136,37,84,159,32,0,63,130,72,63,130,72,63,130,72,4,15,254,145,35,248,17,15,254,16,131,244,73,32,248,0,131,216,4,15,254,145,35,248,17,15,254,34,133,196,132,35,248,4,0,192,4,15,254,144,37,124,81,7,124,18,79,126,80,5,60,146,65,60,4,15,254,136,39,252,17,11,250,81,73,242,4,2,80,84,128,128,4,15,254,145,35,248,17,15,254,36,133,244,138,33,148,108,128,132,4,15,254,128,39,252,74,79,254,32,131,248,10,33,148,104,128,198,4,15,254,145,35,252,17,15,254,49,133,244,132,34,120,36,5,252,4,15,254,145,35,248,17,15,254,36,133,244,128,33,240,17,1,240,0,4,0,32,0,0,224,2,0,32,2,0,32,5,0,143,224,0,79,226,8,36,128,126,225,130,40,36,130,136,34,133,16,143,224,0,4,4,124,41,0,16,225,2,254,33,2,16,33,5,16,143,224,0,128,5,252,16,77,116,85,69,84,87,69,4,81,69,8,191,224,0,68,2,64,7,206,160,35,194,32,35,194,32,34,2,32,95,232,0,136,4,252,18,0,40,235,130,232,59,130,168,40,34,126,80,8,254,4,4,64,39,192,132,225,2,84,41,35,18,37,2,32,95,232,0,136,4,128,30,236,170,74,164,170,74,165,42,106,228,64,191,224,0,71,194,8,33,0,108,232,35,124,33,2,16,47,226,0,95,232,0,130,4,72,8,64,252,224,66,120,36,130,72,39,130,0,95,232,0,128,196,240,8,0,254,200,4,188,74,69,36,99,196,0,191,224,0,136,4,248,20,128,48,204,135,38,79,132,32,74,4,252,66,11,254,2,75,254,66,1,252,210,69,252,82,69,252,82,69,44,64,11,254,63,232,0,93,193,84,213,69,220,85,69,84,85,68,0,191,224,0,130,132,36,95,224,32,202,68,104,75,5,40,74,68,64,191,224,0,9,36,84,33,0,124,228,66,124,36,66,124,36,66,84,84,136,254,148,132,136,20,160,92,206,133,72,101,69,84,74,36,0,191,224,0,68,2,136,31,192,136,212,70,122,72,133,80,66,4,80,72,139,254,130,4,248,2,13,252,72,133,36,79,132,32,95,196,0,191,224,0,129,132,224,2,3,252,10,141,36,68,5,252,68,132,48,108,137,254,130,5,252,16,64,248,200,132,248,72,4,252,72,68,252,64,11,254,143,132,8,79,128,8,223,228,32,74,132,112,74,133,36,70,11,254,2,9,36,95,192,0,223,228,32,95,197,84,85,69,20,112,137,254,130,4,248,8,128,248,232,130,248,32,2,248,34,2,248,82,8,254,8,139,254,69,1,252,213,69,156,80,69,252,80,69,252,64,11,254,29,201,68,93,193,0,221,197,4,93,69,8,81,69,34,191,224,0,136,133,200,9,237,228,73,71,244,80,133,200,101,68,228,160,1,254,133,4,248,5,1,252,194,4,248,74,132,248,74,133,252,72,139,254,15,136,136,79,128,136,207,132,0,93,197,84,76,197,84,100,73,254,155,197,20,21,65,172,196,5,252,82,69,252,82,69,252,64,11,254,143,196,132,15,192,132,207,196,80,72,133,252,105,4,254,73,11,254,18,72,168,95,192,168,210,68,136,93,229,72,106,132,190,80,139,254,131,196,32,31,237,34,95,133,64,90,69,88,105,100,80,98,9,254,17,233,234,101,33,246,213,69,254,85,69,254,85,69,84,98,75,254,136,133,222,21,34,94,217,36,158,116,196,204,117,68,102,104,9,254,130,7,254,40,161,4,197,5,252,68,5,180,70,133,164,70,11,254,137,37,36,9,33,254,212,165,50,84,165,254,82,69,180,82,43,254,0,0,0,127,128,8,0,131,248,0,128,8,127,128,8,0,0,0,32,143,190,32,143,190,32,143,190,32,135,252,0,67,252,0,71,252,8,0,240,17,1,240,2,7,252,8,3,72,15,3,104,10,103,96,8,0,240,9,1,240,2,15,254,72,132,234,84,198,232,68,166,166,0,3,248,32,131,248,36,2,64,63,130,72,36,132,74,72,169,6,0,7,188,74,68,164,122,69,60,80,5,36,84,36,128,132,0,62,127,196,4,127,196,80,73,5,124,73,5,184,106,132,144,138,128,196,127,228,2,127,228,0,93,229,68,89,197,84,85,197,132,81,73,8,63,194,4,63,194,32,63,194,32,61,194,68,72,133,222,136,129,152,63,194,4,63,194,72,42,227,104,47,227,136,42,228,168,77,232,128,127,228,2,127,229,84,111,228,180,85,39,16,87,229,36,81,137,100,63,194,4,63,194,80,47,130,32,53,66,136,93,228,136,189,225,8,0,7,124,16,129,16,114,132,196,64,39,124,17,1,16,95,226,0,32,15,184,74,131,16,202,195,248,0,131,248,32,3,252,0,64,24,0,14,254,36,130,72,231,136,72,135,142,72,36,226,248,160,132,8,81,5,28,82,79,200,87,239,234,82,175,254,86,5,226,146,33,30,238,226,66,36,46,238,138,136,168,238,226,162,42,34,162,174,164,4,213,100,226,223,104,228,213,100,66,255,225,16,127,196,164,95,68,76,4,0,64,36,130,72,36,131,248,4,128,64,4,0,64,4,0,64,34,2,32,35,207,68,84,69,132,82,69,20,32,69,4,73,72,8,32,2,120,32,143,8,87,133,72,84,5,64,36,69,68,75,200,0,32,2,124,34,143,40,82,133,254,82,133,40,34,133,72,132,128,136,32,2,124,33,15,16,95,229,16,81,5,40,34,133,74,132,160,134,32,2,126,36,15,100,85,69,72,84,133,84,38,69,64,79,232,0,32,130,72,36,175,74,86,197,72,84,133,72,36,165,106,148,96,0,33,2,16,34,143,68,89,37,8,80,5,124,32,69,8,72,136,16,33,2,16,33,207,112,85,5,80,87,229,18,35,37,90,73,72,16,41,2,80,33,15,124,81,69,36,83,69,44,34,69,68,149,64,136,32,2,124,33,79,20,81,69,124,82,69,36,34,69,36,79,232,0,47,194,4,34,143,16,95,229,18,81,69,16,33,5,16,141,0,32,32,130,72,36,143,104,85,133,72,84,133,72,38,133,84,137,64,34,32,2,60,34,79,164,75,196,164,74,69,36,35,197,0,79,232,0,33,2,16,33,15,124,85,69,84,87,197,84,37,69,84,79,200,68,64,4,238,74,174,170,170,171,254,170,164,170,74,170,170,170,161,118,4,7,252,32,129,16,255,224,128,127,193,16,57,0,96,25,134,4,32,2,124,34,143,40,82,133,170,86,197,40,34,133,40,79,232,0,33,2,30,47,79,24,81,37,110,80,5,126,34,133,42,84,168,134,33,2,80,39,207,144,81,5,254,81,5,56,37,69,146,145,0,16,4,15,254,17,5,20,145,32,64,255,224,144,17,0,224,25,134,4,34,2,16,39,207,0,84,69,130,82,133,40,33,5,40,68,72,130,36,66,40,32,15,124,82,133,40,82,133,254,34,133,40,138,128,72,33,2,8,39,239,66,80,197,112,81,5,30,39,5,18,137,32,14,32,2,124,37,79,124,85,69,124,81,5,124,33,5,16,143,224,0,33,2,124,37,79,124,85,69,124,80,5,254,34,5,60,136,64,12,32,2,124,36,79,68,87,197,16,95,229,146,41,37,170,136,32,134,72,4,94,64,46,146,175,234,146,171,170,214,73,36,146,168,160,132,66,2,168,138,69,32,67,137,192,8,15,254,17,1,32,12,7,56,36,66,40,39,207,20,87,197,80,87,229,50,37,37,90,137,65,16,39,226,66,39,239,64,84,229,120,84,229,120,36,229,120,136,161,6,78,228,162,74,46,206,170,170,170,170,170,206,72,36,130,168,160,132,33,2,254,33,15,124,81,5,254,84,69,124,36,69,124,140,64,76,33,2,16,47,239,16,87,197,16,95,229,40,38,164,164,147,64,34,33,2,254,33,15,124,81,69,254,81,69,124,33,5,94,133,0,190,35,194,36,35,207,36,83,197,0,87,229,66,39,229,66,135,224,66,34,2,124,37,79,124,85,69,124,82,5,80,47,229,16,137,0,16,36], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+115997);
/* memory initializer */ allocate([66,40,39,207,84,87,197,84,87,197,16,47,229,16,137,0,16,32,15,188,42,65,24,42,100,64,63,130,72,42,130,72,42,130,24,79,132,136,79,142,136,175,138,0,191,203,84,85,69,84,191,224,0,32,194,112,37,79,40,87,197,16,95,229,32,35,197,84,72,136,20,33,2,126,32,15,60,82,69,60,80,5,126,36,37,60,72,136,24,121,1,16,253,227,84,82,139,20,6,39,252,9,0,96,25,134,4,34,130,254,34,143,124,82,133,254,85,69,124,37,69,254,132,64,76,34,130,254,34,143,124,84,69,124,84,69,124,33,5,254,82,136,68,33,2,126,36,47,106,85,37,106,87,229,72,38,165,76,78,168,70,32,194,112,37,47,44,87,229,146,87,197,32,35,197,84,72,136,54,33,2,8,39,239,74,83,5,32,83,197,40,39,229,0,74,72,66,33,2,84,39,207,16,95,229,16,87,197,84,39,197,20,79,232,2,17,7,208,19,239,212,56,133,84,63,226,32,63,226,72,67,8,204,39,226,16,37,207,80,95,229,64,87,197,64,39,229,2,138,161,38,65,4,254,69,78,56,175,234,0,175,234,130,75,170,170,171,160,254,47,226,40,47,239,170,95,229,0,87,197,0,47,229,84,137,32,48,37,66,56,47,239,130,87,197,68,87,197,16,47,229,146,137,96,16,39,194,84,39,207,84,87,197,36,87,133,16,39,197,84,137,32,48,33,2,124,34,143,254,84,69,124,84,69,124,33,5,126,73,8,16,33,2,254,33,15,254,84,69,124,82,133,254,32,5,124,84,72,124,33,2,254,36,79,116,85,69,124,80,2,124,84,69,124,132,64,254,124,132,126,125,68,62,124,138,92,60,128,136,255,225,16,14,7,28,0,15,94,164,175,254,170,174,190,74,143,190,84,165,170,81,43,38,65,4,254,74,142,254,170,202,250,170,138,144,74,74,200,17,34,62,47,226,16,47,239,146,85,69,46,95,165,46,39,165,174,146,160,46,0,7,240,17,1,28,32,68,84,132,129,80,36,132,68,20,0,128,4,1,80,36,132,68,16,15,254,32,132,68,149,34,72,20,0,128,3,135,192,36,129,48,63,128,16,2,15,254,4,0,64,20,0,128,32,15,188,74,67,24,202,99,240,2,0,64,127,192,64,20,0,128,17,15,254,41,71,56,41,71,188,0,3,240,2,15,254,4,0,192,0,3,240,2,0,64,4,192,112,28,6,64,4,0,64,20,0,128,0,3,240,2,0,64,36,1,64,12,0,64,7,0,76,20,0,128,2,15,160,11,225,66,35,163,170,226,162,58,34,98,32,162,36,30,0,14,120,36,138,72,167,143,72,20,131,120,212,129,72,95,226,0,0,14,254,42,170,170,170,168,170,234,162,174,108,42,130,47,230,0,226,66,68,172,75,94,164,79,68,21,67,76,212,65,68,85,66,72,2,15,60,20,133,16,83,199,132,8,67,188,200,64,132,43,193,0,247,193,36,82,133,16,82,133,86,123,128,144,239,192,144,41,1,16,16,7,188,42,65,24,42,103,248,16,129,252,0,71,228,1,64,8,1,15,16,18,5,36,87,231,130,11,195,164,202,64,164,43,193,0,2,14,60,46,138,20,166,207,0,31,227,40,210,129,42,84,98,128,2,142,74,44,203,88,164,175,70,17,3,254,209,1,16,81,2,16,4,78,40,39,234,40,162,143,40,31,227,40,210,129,40,84,130,136,0,14,254,32,10,238,138,174,170,42,166,238,170,162,170,170,164,170,2,79,36,23,229,36,83,199,164,11,194,164,207,224,128,42,65,66,7,206,84,39,202,84,167,207,16,31,227,56,213,65,146,81,2,16,2,142,64,47,235,72,164,143,126,20,131,126,212,129,72,87,226,64,1,14,36,39,234,16,175,239,36,20,163,48,208,193,48,80,226,112,117,197,80,111,229,16,101,68,152,78,3,248,8,128,252,0,71,236,250,5,62,37,79,136,105,74,34,127,128,136,15,192,4,126,64,24,17,7,208,17,239,212,34,131,212,68,35,248,16,129,252,0,71,236,2,15,94,20,165,106,85,103,128,11,227,170,203,224,170,43,225,0,1,14,124,36,74,124,164,10,118,245,33,122,213,97,90,89,34,54,239,226,40,175,234,170,175,239,0,23,195,0,223,225,84,89,34,48,1,14,126,37,42,90,166,175,82,23,225,16,244,65,170,82,162,24,239,194,132,175,202,136,143,206,144,46,230,162,170,66,254,170,69,108,2,174,236,34,170,230,165,79,124,21,67,124,210,129,254,82,130,68,1,14,254,37,74,124,162,143,124,18,131,254,211,65,104,90,98,48,0,1,0,16,2,64,120,1,0,32,7,128,0,1,192,96,0,0,16,2,124,73,15,16,33,4,126,249,0,16,25,14,16,5,0,32,32,130,8,64,137,126,224,130,72,66,143,40,0,131,136,194,128,16,34,2,32,67,229,64,227,194,4,64,143,144,2,33,162,225,224,0,34,2,32,66,9,120,226,130,104,66,143,90,4,163,74,200,97,2,33,2,8,75,239,32,34,4,32,250,0,32,26,14,64,4,0,128,32,2,60,72,15,0,39,228,16,249,0,32,26,142,68,15,224,2,73,4,144,153,46,148,45,132,144,249,0,144,59,44,210,8,224,0,39,194,4,66,137,16,224,132,254,129,47,20,1,3,16,197,0,32,34,66,36,66,73,126,226,66,36,67,207,36,2,67,36,195,192,0,33,66,20,69,73,84,239,226,84,69,79,84,5,195,64,199,224,0,34,4,40,66,74,254,228,4,124,133,79,84,4,131,84,201,65,34,68,4,120,148,142,144,39,196,4,240,64,124,48,76,4,7,192,4,66,132,40,143,238,42,79,232,168,239,224,42,50,172,78,4,128,136,33,2,16,69,73,84,231,194,16,69,79,84,5,67,84,199,192,0,33,4,16,146,14,68,47,228,2,247,192,68,52,76,68,7,192,0,1,4,254,66,137,68,235,162,0,71,207,32,3,195,4,193,64,8,36,2,158,66,9,64,237,226,68,68,79,68,4,67,68,197,64,72,36,4,124,148,142,176,68,200,146,231,192,16,53,12,126,1,0,16,32,2,254,65,9,124,229,66,124,69,79,124,1,3,80,194,0,222,41,34,84,65,9,124,228,66,124,68,79,124,4,67,68,197,64,72,36,66,40,71,201,20,231,194,80,71,239,18,3,35,90,201,64,16,33,2,124,65,10,254,228,68,162,131,206,68,10,131,16,194,128,196,33,2,124,66,137,68,239,226,4,71,79,84,7,67,4,193,64,8,34,130,40,78,232,40,226,132,238,130,142,40,14,227,40,194,128,40,65,4,146,149,78,16,47,228,130,251,160,170,59,172,130,8,160,132,39,194,68,71,201,68,231,194,0,68,143,74,6,195,72,198,160,70,64,68,120,145,14,254,37,68,254,245,64,84,15,227,16,199,192,0,32,194,240,69,73,40,239,226,130,71,207,36,2,131,16,198,129,134,68,68,116,133,106,164,229,68,142,128,14,124,4,67,68,199,192,0,33,4,146,69,74,254,194,5,254,132,78,250,4,131,88,196,32,62,34,2,16,71,233,66,227,194,36,67,207,32,3,227,34,195,224,34,37,66,84,74,137,84,229,66,0,71,207,84,7,195,84,199,192,68,34,130,254,66,137,56,225,2,124,69,79,124,1,3,126,193,0,16,34,2,46,66,169,122,226,226,122,74,175,46,2,163,42,194,224,32,39,194,68,71,201,68,231,194,0,79,239,16,5,195,80,203,225,0,64,133,200,148,203,90,222,165,72,156,173,68,20,141,208,2,0,64,33,2,124,69,73,124,225,2,254,64,15,124,5,67,84,194,128,198,64,4,124,149,78,124,37,68,124,240,0,32,49,76,162,10,161,24,71,228,136,155,238,170,43,228,170,251,224,200,58,140,144,10,224,192,68,4,92,168,77,254,106,8,190,234,128,200,43,236,136,9,64,162,72,68,72,145,238,18,45,228,80,245,224,82,53,236,160,9,225,0,47,194,132,79,201,144,239,196,138,140,110,124,4,67,124,196,64,124,32,2,254,66,138,170,230,196,254,128,14,124,4,67,124,196,64,124,33,2,124,65,9,124,228,66,124,68,79,124,4,66,254,194,128,68,79,228,128,155,206,128,47,228,168,251,96,132,59,236,132,18,66,12,33,2,254,64,9,124,228,66,124,64,14,254,8,34,186,202,160,186,1,4,254,66,136,146,234,164,254,129,14,254,9,35,186,200,160,132,72,68,72,159,238,72,72,73,2,223,193,84,53,77,84,63,224,0,72,132,80,95,232,80,239,196,84,159,238,84,15,194,216,213,64,80,33,2,8,71,233,66,227,132,32,131,206,40,15,226,0,194,128,68,79,228,40,175,238,170,79,232,0,239,224,0,47,236,84,9,32,48,71,196,68,151,206,68,79,232,170,239,224,0,47,204,68,3,129,198,79,228,146,175,238,146,79,232,36,231,128,16,47,236,84,9,32,48,78,228,170,166,110,170,65,8,108,233,32,104,33,12,100,0,128,112,69,68,168,165,78,124,69,72,124,229,64,124,49,12,254,5,64,146,72,4,190,156,142,190,94,40,42,222,161,106,52,141,212,1,64,34,66,5,252,69,10,138,223,196,138,143,142,136,15,130,168,210,64,96,36,66,40,79,233,214,235,164,254,128,14,124,4,67,124,196,64,124,32,2,254,69,73,124,229,68,254,128,14,124,5,67,124,197,64,254,65,5,124,133,74,124,217,4,254,138,142,188,10,66,188,200,1,126,39,194,68,71,201,0,238,228,170,142,238,16,15,227,56,197,64,146,79,228,170,175,238,0,95,232,68,231,192,16,50,172,100,11,32,32,84,133,254,164,137,254,228,132,234,149,108,252,8,66,164,197,1,140,2,0,64,4,0,136,17,3,224,4,0,144,16,131,252,0,64,0,36,133,82,101,194,72,117,192,40,255,229,80,125,69,74,125,96,34,0,0,0,18,65,36,36,132,144,36,129,36,18,64,0,0,0,0,18,66,72,73,2,72,18,67,248,36,130,72,63,130,72,36,131,248,36,132,144,36,131,240,33,3,240,0,7,248,68,135,248,64,35,254,0,15,190,32,130,8,32,143,136,32,130,8,56,142,8,66,128,16,0,15,120,36,130,72,36,135,72,36,130,72,56,174,138,16,162,6,1,7,16,47,226,16,39,199,16,47,226,18,49,44,26,1,64,16,0,143,40,34,66,68,40,39,124,34,66,36,52,78,68,9,65,8,2,15,144,32,2,254,36,79,68,34,130,40,57,14,40,68,64,130,0,15,124,33,2,16,33,7,124,33,2,24,57,78,16,79,224,0,0,15,126,32,66,4,39,71,84,37,66,116,57,78,4,65,64,8,2,143,36,34,2,254,34,143,170,34,194,72,53,174,170,72,97,0,1,15,144,33,2,30,33,15,144,39,194,68,60,78,68,71,192,68,2,143,76,44,163,72,36,231,120,36,130,72,60,174,74,4,96,66,1,15,32,39,194,68,36,79,68,39,194,68,60,78,68,71,192,68,0,15,126,36,34,126,36,143,72,39,226,72,60,174,74,70,96,66,8,14,128,72,229,234,74,174,170,74,164,170,114,173,46,42,4,64,0,14,254,68,132,120,68,142,120,68,132,78,111,140,8,0,128,8,2,143,168,34,130,124,34,143,168,34,130,254,48,14,40,68,64,130,0,7,126,33,2,124,116,66,84,37,66,84,57,14,40,4,64,130,15,14,46,74,164,170,79,206,42,70,164,170,114,204,40,10,128,72,4,14,156,80,4,64,235,229,136,72,132,136,104,140,136,10,128,144,5,14,80,85,68,216,229,4,216,85,68,80,105,44,146,16,226,0,4,14,120,72,133,80,66,14,88,88,100,248,104,140,136,15,128,136,32,3,252,68,65,80,36,132,196,0,7,252,4,3,248,5,15,254,0,14,254,72,36,32,79,206,32,69,4,124,97,12,254,1,0,16,0,142,8,87,228,144,226,133,188,72,132,190,104,140,136,23,226,0,4,142,72,79,196,72,71,142,72,71,132,72,95,230,0,196,128,132,4,142,252,68,132,32,79,142,168,74,133,252,98,12,80,8,129,4,1,15,16,39,194,40,244,66,254,32,66,116,53,78,116,64,64,12,1,14,30,65,4,254,73,46,156,79,36,142,107,141,42,18,162,70,15,142,136,79,132,136,239,132,0,73,4,212,105,140,146,12,224,0,1,15,82,37,66,144,34,143,68,33,2,82,57,78,40,68,64,130,2,14,16,79,228,130,71,206,0,79,228,16,101,76,146,17,32,48,1,14,254,72,36,64,230,228,170,74,165,110,100,140,138,8,161,6,0,14,254,72,36,40,68,78,16,79,228,56,101,76,146,1,0,16,15,206,132,79,196,144,73,14,252,73,4,144,119,205,68,36,68,124,0,14,254,72,36,186,64,14,124,68,68,124,116,76,124,4,64,124,3,14,72,91,100,0,78,46,170,78,164,170,110,172,162,10,160,164,0,206,240,69,68,254,66,14,254,68,4,252,106,77,24,34,128,198,29,207,68,84,69,220,80,15,220,81,69,212,113,77,8,17,65,34,2,174,84,74,132,84,66,174,64,79,228,170,105,44,170,15,224,130,0,206,240,69,69,254,82,46,252,68,4,124,106,76,152,18,64,66,1,14,254,73,4,188,73,78,254,73,68,188,105,13,124,20,66,124,2,143,126,34,130,56,33,15,124,37,66,124,49,14,124,65,0,254,2,143,124,34,130,254,33,15,124,37,66,124,53,78,124,66,128,68,14,238,42,74,164,170,68,78,170,66,4,254,100,76,40,1,0,238,1,14,146,79,228,40,71,238,200,87,228,72,103,236,72,7,224,64,2,14,252,74,68,180,77,78,164,77,68,252,98,13,84,20,162,56,17,14,158,66,5,224,73,238,138,78,132,174,106,141,40,19,130,110,1,7,124,34,130,254,36,71,124,36,66,124,49,6,254,1,0,16,2,142,170,70,196,254,66,142,254,65,4,124,97,12,254,2,128,198,4,14,110,68,164,228,234,164,64,89,36,84,111,236,56,5,64,146,1,206,16,79,228,146,239,132,146,75,230,176,213,161,44,36,160,24,1,1,208,245,197,100,93,68,136,237,68,162,73,198,212,217,192,20,113,5,124,114,132,124,121,10,184,57,7,252,4,3,248,5,7,252,233,69,222,74,69,222,232,69,108,65,100,248,106,140,168,5,1,136,95,71,28,93,71,92,85,79,254,128,35,248,4,1,240,4,71,254,121,4,144,127,196,144,123,192,16,255,225,18,93,165,20,81,11,254,71,196,68,247,196,68,231,196,0,247,197,84,117,68,84,79,228,0,64,100,120,241,4,74,226,68,16,246,101,66,118,100,66,71,228,66,32,2,0,47,239,40,34,135,40,106,138,40,34,162,74,36,98,128,33,2,16,35,239,162,36,39,18,104,170,10,32,34,2,32,162,4,32,2,124,32,79,132,32,71,124,108,10,64,36,34,66,35,226,0,32,2,252,36,79,100,37,71,68,98,138,16,162,130,40,36,66,130,32,2,124,32,79,164,34,71,36,107,234,2,39,162,2,32,162,4,32,2,126,36,15,72,36,135,126,108,170,74,165,34,146,42,163,68,32,130,72,36,143,74,38,199,72,108,138,72,165,162,106,36,98,0,33,2,16,33,15,84,37,39,82,105,10,20,32,130,48,44,2,0,4,0,64,255,225,80,36,140,70,63,130,8,63,130,8,63,130,8,33,2,16,33,15,126,37,39,82,110,170,66,164,34,66,36,162,68,32,2,124,36,79,84,37,71,84,101,74,16,162,162,42,36,162,134,34,2,32,35,239,72,32,135,8,107,234,8,160,130,8,32,130,8,34,2,36,34,143,48,34,7,126,107,10,40,162,66,42,35,2,32,32,2,72,36,143,72,36,135,72,100,138,168,169,67,36,36,34,0,8,3,240,41,2,80,34,3,252,4,71,244,14,129,80,36,128,64,34,2,16,47,239,32,34,7,60,106,74,36,162,66,68,37,66,136,32,2,124,37,79,84,37,71,124,108,10,64,164,34,66,35,226,0,32,2,124,32,79,168,33,7,126,105,42,20,33,2,16,37,2,32,4,7,252,14,3,88,196,97,240,0,7,252,21,2,72,84,64,128,34,66,36,39,239,164,32,7,126,105,42,18,161,162,20,33,2,16,16,1,62,16,135,200,17,3,144,51,229,82,81,41,18,17,225,18,34,130,36,34,15,126,34,135,42,106,170,44,164,130,90,42,163,6,32,2,252,41,15,144,43,199,164,108,138,152,170,66,194,47,226,0,32,2,124,33,15,84,35,135,16,111,234,16,161,2,16,33,2,16,33,2,16,33,239,16,39,231,66,108,42,126,164,2,64,36,2,128,16,1,62,18,167,170,19,227,170,54,165,62,80,137,8,16,129,8,32,2,60,34,79,188,32,7,126,105,10,60,160,66,4,33,66,8,16,129,8,16,135,190,18,163,170,55,229,42,82,169,42,19,225,0,32,2,124,36,79,68,36,71,68,103,202,0,162,130,68,40,34,0,32,194,112,36,15,64,39,231,72,108,138,88,164,194,74,40,130,8,32,98,120,36,15,126,36,7,94,109,42,90,165,66,144,41,35,14,33,2,16,34,143,68,41,39,8,104,10,124,32,66,40,33,2,8,34,2,32,39,207,132,39,71,84,109,74,84,167,66,4,33,66,8,32,194,112,36,143,72,36,135,126,108,138,74,164,162,102,37,34,8,32,194,112,36,15,80,37,7,126,105,10,84,169,34,18,37,2,32,33,2,8,39,239,66,32,7,36,106,138,48,162,34,34,33,226,0,32,2,252,36,79,40,33,7,40,109,106,16,167,194,16,33,2,254,33,2,18,39,207,20,47,231,16,107,234,80,169,226,2,32,162,4,33,2,18,39,175,20,47,231,16,99,74,88,169,34,18,32,226,0,32,2,124,34,143,40,34,134,170,118,202,40,162,130,40,47,226,0,34,2,62,46,143,18,34,167,70,96,10,254,162,130,42,36,162,134,32,2,124,33,15,160,36,135,124,105,74,16,167,194,16,47,226,0,33,2,30,33,15,124,36,71,84,109,74,84,165,66,40,36,66,130,33,2,16,37,79,56,33,7,126,106,138,40,164,162,74,40,98,0,33,2,84,37,79,124,32,7,124,104,74,124,164,2,66,35,226,0,32,2,230,34,207,36,36,71,78,98,74,164,164,226,160,49,226,0,32,194,112,33,15,16,47,231,16,105,10,124,164,66,68,39,194,68,32,2,32,36,207,68,36,71,68,102,202,68,164,66,68,39,194,68,34,130,74,44,207,88,38,166,70,113,10,254,161,2,16,33,2,16,34,2,78,40,15,32,37,230,196,116,74,68,164,66,68,37,66,72,33,2,40,36,79,130,39,199,0,104,10,254,162,2,68,47,226,66,32,131,188,72,138,168,19,226,72,68,143,254,14,3,88,196,96,64,8,0,64,127,192,160,42,132,164,4,15,254,14,3,88,196,96,64,36,129,80,127,192,128,255,226,8,68,75,250,14,1,80,100,128,64,33,2,8,39,239,66,33,7,16,111,234,36,162,66,24,35,66,194,32,2,238,34,47,34,42,166,102,118,106,170,162,34,34,42,162,68,32,130,8,251,226,8,113,202,170,32,129,240,17,1,146,37,36,14,33,2,80,39,207,144,33,6,254,112,10,124,164,66,68,39,194,68,32,98,248,37,79,40,39,199,8,105,10,254,161,2,16,37,2,32,34,2,60,36,143,16,39,199,84,111,202,84,167,194,84,37,66,140,34,2,16,39,207,0,36,71,40,111,234,16,167,194,16,33,2,16,40,130,72,32,207,42,42,167,72,96,170,68,168,130,16,38,2,0,32,2,124,32,79,124,32,71,124,105,10,84,165,130,144,34,130,198,33,2,16,39,175,148,39,231,16,171,194,100,43,194,36,35,194,36,32,143,190,32,135,28,170,162,8,17,2,8,223,96,144,21,2,32,33,2,124,33,15,126,32,39,40,101,138,40,175,226,8,33,66,34,16,207,176,34,5,60,122,129,40,122,129,64,255,225,80,100,192,64,33,2,30,33,15,124,36,71,124,108,74,124,161,2,254,33,2,16,32,2,254,42,175,170,47,231,32,107,202,68,42,130,16,38,2,128,32,66,120,33,15,254,37,71,84,111,234,84,37,66,254,33,2,124,34,2,16,47,239,0,39,199,68,103,202,16,165,66,146,37,2,32,33,2,254,32,15,124,36,71,124,104,10,124,160,130,254,33,2,48,33,2,60,45,79,126,41,70,188,117,10,124,181,2,254,37,2,190,33,2,124,33,79,126,33,71,124,105,10,90,163,66,84,41,34,48,32,2,126,36,47,126,36,135,72,103,234,72,171,226,162,50,34,62,33,2,124,241,2,124,114,6,254,164,74,186,49,2,124,34,130,68,34,66,126,34,79,188,34,71,60,106,74,254,165,66,98,36,2,126,33,2,16,47,239,16,47,231,170,111,234,146,175,226,146,41,34,134,33,2,254,35,143,84,41,39,124,100,74,124,164,66,124,32,2,254,33,2,254,241,2,254,41,39,214,107,170,254,163,130,84,41,34,16,34,130,168,42,239,180,34,39,124,108,74,84,165,66,16,34,162,198,39,194,68,39,207,0,47,231,68,103,202,68,167,194,70,47,194,4,32,2,124,36,79,68,39,199,0,110,234,170,170,162,170,46,226,0,35,195,160,83,207,228,19,194,160,71,192,64,127,193,80,100,192,64,34,130,200,36,175,92,46,135,72,110,139,84,165,66,84,38,66,66,34,2,220,41,79,214,42,6,220,121,74,212,185,66,136,41,66,162,32,66,136,37,239,18,45,230,80,117,234,82,165,226,64,43,227,0,34,2,16,47,239,68,34,134,254,113,10,124,161,2,84,41,34,48,40,2,94,40,47,186,42,167,186,104,42,186,170,162,186,40,162,132,36,66,40,39,207,144,39,199,16,111,234,32,165,194,72,43,226,0,42,34,84,32,15,126,34,135,68,105,42,124,161,2,254,33,2,16,33,2,254,40,47,124,32,7,124,108,74,124,164,66,124,32,2,254,39,226,74,39,239,64,37,231,82,109,234,82,165,226,82,41,226,18,47,194,70,39,175,170,41,38,46,112,10,254,170,162,170,63,226,0,33,2,124,33,15,126,34,7,254,100,74,186,161,2,254,37,66,146,39,226,64,37,79,118,37,71,118,109,74,118,165,66,84,39,226,0,39,194,68,39,207,68,39,199,0,110,234,34,170,162,102,42,162,102,34,130,126,44,143,126,36,135,126,100,138,126,161,2,254,33,2,16,34,34,114,37,47,114,37,231,114,101,170,246,163,34,82,41,162,52,33,2,124,36,79,124,36,71,124,98,10,254,164,66,146,39,194,16,33,2,254,32,15,124,36,71,254,164,66,124,34,162,100,43,34,32,33,2,254,32,15,124,36,71,124,96,10,254,168,34,186,42,162,186,83,207,164,35,202,164,251,194,36,68,192,64,127,193,80,36,132,68,33,2,254,40,175,112,36,7,124,108,138,72,175,226,0,36,66,130,33,2,254,40,47,84,41,39,40,100,74,130,167,194,68,39,194,68,32,130,138,37,239,12,35,230,208,118,234,74,164,226,106,36,226,0,47,226,130,47,239,170,41,199,190,106,42,190,170,34,190,50,34,38,34,130,254,34,143,184,33,7,124,109,74,124,161,2,124,33,2,254,33,2,254,37,79,56,47,230,0,119,234,66,167,162,74,36,162,126,32,162,8,47,239,136,42,135,186,106,170,252,170,163,118,42,162,96,39,194,16,47,239,146,37,71,124,96,10,126,161,2,60,32,66,24,41,34,84,47,239,130,39,199,68,103,202,16,167,194,16,47,226,0,81,34,124,81,131,254,86,73,188,82,66,60,4,7,252,21,2,72,72,68,244,82,206,68,95,199,84,223,101,92,95,69,84,85,70,52,32,66,196,36,143,238,43,167,234,106,170,234,171,67,228,34,66,42,72,132,138,92,142,190,94,134,170,206,68,174,75,37,160,87,230,0,41,15,222,43,71,212,213,71,72,21,64,162,255,225,80,100,192,64,4,7,252,21,7,252,72,65,248,48,133,248,4,7,252,21,2,72,64,5,254,90,143,72,94,237,74,117,5,244,84,69,68,84,166,146,34,130,36,39,239,200,39,231,72,103,234,72,167,226,64,42,162,170,33,2,108,41,47,124,34,135,84,103,202,16,175,226,146,43,162,134,36,2,124,40,143,124,37,71,124,101,74,254,164,66,124,36,66,124,36,66,254,34,143,254,42,167,174,108,42,254,160,66,254,36,66,44,47,226,130,47,239,170,41,199,170,106,138,190,172,130,190,48,130,8,39,226,20,32,143,126,34,167,72,111,234,170,175,226,170,43,162,134,37,2,92,41,79,200,39,231,144,170,130,218,34,194,202,34,130,16,47,226,16,47,239,146,37,71,0,103,202,84,167,194,84,39,194,68,39,194,136,39,239,84,38,167,92,108,10,92,164,2,156,41,67,28,33,2,254,36,79,116,37,71,124,96,10,254,161,2,84,41,34,48,120,132,190,121,68,62,120,138,156,56,128,72,255,225,80,100,192,64,33,2,254,44,175,108,42,167,68,107,170,0,175,226,84,41,34,48,136,133,12,248,162,8,251,234,136,216,136,136,249,72,148,249,72,162,17,7,222,19,79,212,32,131,148,74,41,136,4,79,254,9,7,14,0,15,188,34,66,36,60,100,128,75,203,36,18,130,16,66,136,198,0,15,188,34,66,36,59,196,164,74,75,60,18,66,36,66,72,126,2,15,190,36,2,60,56,132,144,75,235,42,20,162,18,66,168,68,0,143,148,34,34,8,57,4,164,72,139,18,22,66,8,67,8,192,0,15,124,68,68,124,112,5,124,84,75,84,37,66,84,66,136,68,1,15,144,34,130,68,56,36,188,72,11,84,21,66,40,64,8,254,0,207,112,37,67,168,79,196,136,177,1,254,33,4,16,133,0,32,4,79,168,32,2,124,53,69,124,85,75,124,33,2,254,65,8,16,0,15,120,33,3,32,82,229,226,170,162,234,66,68,170,132,1,254,1,15,8,39,226,66,51,197,32,83,234,40,47,228,0,66,72,66,1,15,124,33,2,254,120,37,124,80,11,124,36,66,124,66,136,254,32,2,0,251,228,18,161,47,50,37,35,146,225,34,34,34,162,68,32,2,126,244,4,92,165,79,84,37,67,92,229,2,82,40,226,0,33,2,16,241,4,254,161,15,16,39,195,68,228,66,68,39,194,0,32,2,126,248,68,4,167,79,84,37,67,212,231,66,4,33,66,8,32,130,14,248,132,62,162,47,162,35,227,160,226,2,32,36,2,128,32,2,124,244,68,68,164,79,68,39,195,0,226,130,68,40,34,0,33,2,80,253,4,124,169,15,16,39,227,144,226,130,40,36,66,130,33,2,16,250,132,68,169,47,32,36,131,146,226,66,8,35,2,192,32,194,112,249,4,84,163,143,144,39,227,144,225,2,16,37,2,32,32,194,112,252,4,80,165,15,126,33,3,212,229,34,146,37,2,32,32,2,124,250,68,36,162,79,84,40,131,60,226,66,36,35,194,36,32,130,10,248,132,126,160,143,120,34,131,168,227,162,234,32,98,2,32,2,124,249,4,40,167,207,20,33,3,124,225,2,16,47,226,0,33,2,16,242,132,68,171,175,16,33,3,188,225,2,16,39,226,0,34,2,60,244,68,168,161,143,36,36,35,60,226,66,36,35,194,0,32,2,252,250,4,232,170,143,232,42,131,184,238,162,42,34,98,32,33,7,60,33,15,188,33,5,168,127,193,64,63,128,64,255,224,64,32,2,254,248,36,170,175,239,146,40,163,254,234,34,186,40,34,134,32,2,238,240,36,170,164,79,170,32,3,238,226,162,170,36,66,170,37,66,84,250,132,84,165,79,0,39,195,84,231,194,84,39,194,0,33,2,124,249,4,124,162,15,254,36,67,186,225,2,254,34,130,68,33,2,254,250,132,254,170,175,254,42,131,170,234,194,186,50,98,0,33,2,146,245,68,254,165,79,146,36,67,110,234,67,84,37,226,132,4,7,252,4,3,248,36,131,248,36,143,254,4,3,248,32,131,248,9,0,136,11,199,192,8,0,190,252,128,80,6,1,162,97,160,6,33,5,20,73,40,30,127,4,146,73,69,148,64,132,154,58,96,66,127,192,64,63,130,8,63,130,8,63,128,68,7,231,200,3,35,206,17,71,210,17,7,222,71,7,208,69,71,216,17,47,234,20,97,2,61,2,84,61,32,16,255,226,80,61,66,88,61,34,106,124,96,66,73,79,210,73,7,158,79,7,148,73,79,216,80,166,138,65,103,162,125,68,82,125,4,94,127,1,20,81,71,212,145,167,202,17,103,226,249,68,146,125,5,94,167,5,80,1,71,216,85,37,106,254,96,2,254,130,138,170,134,206,43,143,234,0,167,204,68,135,218,70,103,194,1,75,254,161,10,248,234,130,250,233,170,252,170,138,250,33,100,34,0,15,124,130,9,32,211,138,72,166,141,88,132,143,74,6,160,70,47,130,32,82,8,184,36,128,104,245,129,72,85,130,106,20,160,6,39,207,160,2,5,56,36,143,200,6,135,88,84,165,106,116,165,6,16,71,216,16,71,216,68,39,204,43,15,254,16,1,240,37,35,46,87,207,160,170,15,184,170,143,200,6,135,88,84,167,106,84,167,6,121,4,252,122,132,124,121,10,184,57,15,254,16,1,240,37,35,174,4,0,64,7,192,64,4,7,248,16,128,144,6,0,144,48,140,6,16,1,0,127,1,16,33,34,18,64,235,248,32,131,248,32,131,248,0,3,248,32,131,248,32,131,248,8,7,240,9,1,18,17,34,14,0,7,124,81,5,16,81,7,254,81,5,16,81,7,16,1,0,16,63,130,8,63,130,8,63,128,0,63,128,64,255,224,160,17,6,12,63,130,8,63,130,8,63,128,0,63,128,0,255,224,128,16,131,252,63,130,8,63,130,8,63,128,64,255,225,80,36,140,70,4,0,64,31,193,4,31,193,4,31,192,0,63,226,32,34,2,80,72,137,6,0,199,112,84,5,64,87,231,72,84,133,72,84,135,72,8,129,8,2,7,32,83,197,68,88,71,68,82,69,12,81,71,100,1,64,8,63,130,8,63,130,8,63,128,64,36,66,72,74,1,16,32,140,6,63,130,8,63,130,8,63,129,0,63,196,68,164,66,164,63,64,8,33,3,208,69,138,148,17,2,254,64,11,248,32,131,248,32,131,248,63,130,8,63,130,8,63,128,128,115,196,164,90,70,180,18,130,32,63,130,8,63,130,8,63,128,64,127,192,0,17,0,160,255,224,0,32,1,28,1,71,52,21,207,148,57,69,92,84,9,32,81,226,0,0,14,252,168,74,252,168,14,164,170,138,176,234,33,34,17,226,0,4,67,232,5,15,254,13,3,100,195,195,248,32,131,248,32,131,248,63,130,8,63,130,8,63,128,36,127,228,40,122,132,146,106,169,70,2,135,74,92,197,88,86,167,70,81,5,254,81,7,16,1,0,16,63,130,8,63,130,8,63,136,164,74,130,176,82,137,36,34,36,30,63,130,8,63,130,8,63,128,64,127,196,132,255,225,16,14,7,28,0,7,126,84,37,16,87,199,32,85,5,124,81,7,126,1,0,16,1,78,18,175,234,16,175,238,146,175,234,146,175,238,146,9,32,134,2,14,80,168,139,38,161,14,248,161,10,32,175,142,136,8,128,248,63,130,8,63,130,8,63,135,160,170,129,36,111,235,248,32,131,248,1,14,254,168,42,124,160,14,124,164,74,124,164,78,124,0,0,254,30,175,44,172,170,68,168,79,122,161,10,254,161,14,40,4,64,130,0,206,240,165,74,254,169,46,124,162,10,60,166,78,152,2,128,198,15,238,130,167,202,68,167,206,68,167,202,16,175,238,0,4,64,130,8,142,72,191,234,170,174,174,10,174,170,36,164,78,234,4,160,210,0,238,240,161,10,254,173,110,186,169,42,254,161,14,254,0,0,170,14,238,170,166,106,170,167,206,200,183,234,72,167,238,72,7,224,64,2,142,254,161,10,254,161,14,254,164,170,254,180,206,234,3,96,98,63,130,8,63,130,72,255,228,164,123,193,16,255,225,148,42,140,198,4,7,252,4,1,16,255,225,16,63,130,8,36,130,72,27,6,8,41,15,252,41,2,240,32,3,248,0,3,248,36,130,72,27,6,8,0,15,188,138,72,164,170,74,188,169,138,152,33,133,42,74,168,70,0,143,136,137,8,164,171,234,130,171,202,164,34,69,36,75,200,36,34,15,120,34,131,106,229,162,134,127,162,8,36,130,72,27,6,8,17,37,212,81,133,210,224,227,248,32,130,72,36,130,72,27,6,8,2,15,144,143,234,144,170,74,248,169,10,36,36,133,20,138,32,64,0,15,188,138,72,188,170,138,168,170,74,210,32,133,16,136,128,0,0,15,190,138,10,172,170,10,190,171,74,182,37,69,84,73,40,24,4,7,252,36,143,254,21,2,72,64,99,248,32,130,72,10,7,24,1,79,144,143,234,144,173,74,184,169,138,180,37,69,18,77,8,32,4,7,252,36,133,84,255,232,2,63,130,8,36,130,72,27,6,8,1,15,180,141,136,144,170,138,196,169,10,82,41,69,16,74,136,70,0,175,190,136,136,190,170,170,190,170,170,4,39,229,36,73,72,12,32,2,124,60,66,84,37,71,84,85,69,16,82,135,42,4,160,134,32,10,190,170,47,162,2,175,170,10,175,152,129,136,170,178,172,70,0,7,190,18,37,98,86,165,170,178,161,24,29,143,42,2,160,70,16,7,190,18,47,226,70,163,42,146,165,8,252,131,26,74,168,70,16,2,158,69,43,178,1,39,82,85,39,90,84,135,90,86,164,198,40,7,222,41,47,242,17,39,210,85,167,200,85,143,218,70,164,198,80,15,190,82,39,34,34,175,170,170,175,136,33,143,154,34,175,198,28,1,30,125,37,82,121,37,210,65,165,74,118,133,74,151,163,166,18,130,32,111,202,32,37,65,76,31,2,64,255,224,64,4,0,64,119,193,68,119,196,16,119,193,84,103,225,80,63,196,64,255,224,64,18,1,32,82,71,168,147,1,32,26,7,32,18,33,34,17,225,0,16,97,120,81,7,156,87,9,16,25,231,112,17,33,18,16,225,0,16,129,8,80,135,190,80,137,72,27,231,34,18,33,34,19,225,34,16,1,124,81,7,188,81,73,126,24,7,60,18,65,36,19,193,0,16,129,40,83,231,200,144,129,126,24,7,62,18,33,34,19,225,34,17,1,124,81,7,168,151,225,4,23,65,212,119,65,4,17,65,8,19,193,36,83,199,164,147,193,36,27,199,36,23,225,0,18,65,66,33,2,60,57,74,254,249,74,188,49,14,252,41,3,254,41,3,126,33,2,124,164,79,124,164,2,126,54,174,106,47,226,170,50,162,6,33,2,254,160,15,124,164,67,124,96,10,254,40,34,186,42,162,186,19,199,212,17,71,164,20,195,240,4,7,252,4,15,254,4,0,192,66,2,168,138,68,56,78,11,60,60,0,64,255,224,64,20,0,128,34,44,172,74,69,20,224,229,228,74,78,174,74,69,36,107,76,72,36,44,76,74,69,20,238,228,4,78,78,174,74,68,228,65,76,8,121,4,252,122,132,126,121,10,184,57,7,248,4,15,254,4,0,192,8,131,240,10,15,254,10,3,200,199,131,128,15,143,130,12,32,126,25,14,32,36,67,126,225,34,80,55,206,144,47,226,16,33,33,254,7,135,192,7,131,192,7,135,194,3,227,136,227,3,28,231,35,142,33,12,60,89,68,254,241,69,188,73,14,252,89,4,254,81,3,254,32,133,112,121,2,28,251,5,16,169,197,112,41,5,18,32,228,0,16,66,152,68,139,168,1,206,168,170,142,188,170,142,170,162,170,102,85,3,144,125,228,100,93,69,72,93,96,240,120,0,250,248,32,126,20,14,124,40,130,124,53,78,124,37,67,254,228,66,124,32,33,254,20,78,254,34,130,170,54,206,254,36,66,124,60,78,124,32,33,254,238,74,184,238,138,168,239,194,136,124,236,184,124,132,138,126,164,6,32,3,252,64,9,248,0,3,240,1,0,144,8,160,138,16,98,2,32,3,252,64,9,248,0,3,240,1,1,80,21,33,74,36,100,66,32,3,252,64,11,248,0,7,240,1,1,16,85,37,74,124,96,66,32,3,254,64,9,240,0,3,248,0,130,168,42,162,170,42,100,34,32,3,252,64,11,248,32,131,232,82,128,200,50,164,154,20,96,130,32,3,252,64,9,248,0,135,248,20,133,88,54,161,74,127,96,2,32,3,252,64,11,248,0,143,232,146,139,168,146,170,170,254,104,34,32,3,252,64,11,248,16,143,232,16,135,200,68,167,202,41,108,114,64,7,252,128,7,248,34,131,232,34,131,232,0,167,250,85,111,250,16,1,0,16,3,252,33,5,16,146,0,160,4,0,160,17,6,12,16,129,8,252,129,30,125,69,116,125,67,148,84,137,20,17,65,34,33,7,144,73,7,188,76,135,168,34,143,168,65,7,168,74,137,196,16,133,62,80,133,126,120,36,40,117,133,40,87,229,8,81,73,34,17,69,84,95,231,84,69,196,64,119,197,16,95,229,56,85,105,16,17,5,124,84,71,252,68,164,126,116,133,126,86,165,190,82,169,38,1,199,224,40,129,80,127,192,128,255,225,0,31,130,72,67,9,206,25,238,16,39,234,210,85,194,114,245,226,64,171,130,170,170,165,70,0,67,196,37,66,84,61,66,84,37,67,212,36,68,68,85,72,136,0,7,156,72,4,128,123,228,136,73,7,158,72,36,130,104,169,4,0,71,136,73,4,160,120,68,136,73,7,160,72,68,136,105,9,32,4,15,252,32,3,248,0,3,248,32,131,248,32,131,248,32,130,24,2,135,40,82,133,124,114,133,40,95,231,40,82,133,40,84,139,136,0,7,60,80,5,0,127,229,40,82,135,40,82,165,42,84,171,134,1,7,16,81,5,254,113,5,40,82,135,40,84,69,100,89,43,0,1,7,16,81,5,126,113,5,36,82,71,40,84,133,82,91,235,2,1,7,16,95,229,16,117,69,84,85,71,124,81,5,18,81,43,14,1,7,16,81,5,124,117,69,84,85,71,108,84,69,68,85,75,72,33,1,224,41,15,252,16,3,248,80,137,248,16,129,248,16,129,24,2,7,32,83,229,66,117,69,144,81,7,16,82,133,40,84,75,130,2,135,36,82,5,254,114,133,42,82,167,76,85,133,106,88,171,6,1,7,16,95,197,32,115,5,80,87,199,16,85,69,146,85,43,32,2,7,32,83,197,32,114,5,254,82,7,48,82,133,36,82,11,32,0,135,8,80,229,8,115,229,34,82,39,62,82,5,32,82,11,64,0,7,124,85,69,84,119,197,84,85,71,124,81,5,16,81,11,16,1,7,16,87,197,84,117,69,124,85,71,84,87,197,16,81,11,16,4,7,252,68,71,252,68,71,252,32,131,248,32,131,248,32,130,24,2,7,32,83,229,80,121,5,30,81,7,16,81,229,16,81,11,16,0,103,120,85,69,84,117,69,84,85,71,84,85,69,82,89,203,4,1,7,16,82,133,68,121,37,32,84,135,16,82,69,8,81,11,96,2,7,32,87,197,68,120,69,116,85,71,84,87,69,4,145,67,8,0,199,120,84,133,72,116,133,126,84,135,72,84,165,102,85,43,8,0,7,124,80,133,24,118,69,130,87,199,16,81,5,16,95,235,0,1,7,16,89,37,84,113,5,254,82,135,40,82,165,42,84,107,128,0,7,126,84,37,126,116,37,122,86,167,106,87,165,66,84,171,68,0,7,124,84,69,84,117,69,124,85,71,84,86,197,68,87,203,68,1,7,16,82,133,70,123,133,0,87,231,16,82,5,68,87,235,2,4,71,40,81,5,40,116,69,16,95,231,16,85,69,146,85,11,32,2,7,16,95,229,32,116,133,112,82,71,72,81,133,36,84,43,0,116,69,40,80,7,124,82,133,40,127,229,40,82,133,40,84,139,136,4,71,40,80,5,124,113,5,16,95,231,16,82,133,40,84,75,130,1,7,16,89,37,84,113,5,254,81,7,56,85,69,146,81,11,16,0,7,126,81,5,32,117,5,42,84,199,24,82,197,74,82,139,16,0,7,124,84,69,124,113,5,124,85,71,84,86,197,68,85,75,72,1,7,16,85,69,84,123,165,16,87,199,16,81,5,16,95,235,0,0,103,120,82,5,84,114,133,124,80,135,16,87,197,16,85,11,32,1,7,8,87,229,66,112,5,60,80,7,126,82,133,42,82,171,70,0,7,126,84,37,126,116,133,72,87,167,92,86,165,138,82,139,16,1,7,124,81,5,124,113,5,254,84,71,124,84,69,124,84,75,76,1,7,254,82,133,68,121,37,124,85,71,124,85,69,124,81,43,14,2,135,40,94,229,40,114,133,238,82,135,40,94,229,40,82,139,40,1,7,54,85,37,82,119,101,82,87,231,16,81,5,40,84,75,130,2,7,16,87,197,68,112,5,56,80,7,124,81,5,84,89,43,48,1,7,8,87,229,66,112,5,126,81,7,92,85,5,80,91,235,0,1,7,60,93,69,126,121,69,188,85,7,126,85,5,252,85,11,190,1,7,124,81,5,124,114,5,254,84,71,186,81,5,124,82,139,68,1,7,126,81,5,126,116,37,106,85,39,122,85,37,126,85,43,86,15,199,16,82,5,252,117,69,116,85,71,116,85,69,84,95,203,0,3,135,40,83,133,40,115,133,0,87,199,84,85,69,84,95,235,0,112,5,238,90,165,238,112,5,124,80,7,126,81,5,60,80,75,24,1,7,40,84,69,186,112,5,122,84,167,122,84,165,122,84,171,90,1,7,84,83,133,124,113,5,254,82,135,84,89,37,124,81,11,126,5,71,56,87,197,16,119,229,36,85,39,16,87,229,36,81,139,102,239,234,0,167,206,68,167,202,0,239,234,170,175,234,146,169,38,134,34,15,188,36,131,180,74,138,180,18,35,248,32,131,248,32,130,24,1,7,8,87,229,66,113,133,32,83,199,40,82,133,126,82,75,66,1,7,84,83,133,124,114,5,254,84,71,146,85,69,56,85,75,50,113,5,254,90,165,68,119,197,32,84,135,124,81,5,124,81,11,126,113,5,124,82,133,254,121,37,124,85,71,16,87,197,68,87,203,0,116,69,228,84,229,228,112,69,238,82,167,234,80,165,164,84,171,242,2,135,124,82,133,254,112,37,124,82,7,84,83,133,212,85,43,32,119,197,68,87,199,0,94,229,170,126,229,16,95,229,56,85,107,16,113,5,254,84,71,116,85,69,124,114,133,56,82,133,56,80,11,126,112,133,126,85,71,126,85,69,126,117,101,126,85,69,118,85,75,148,5,71,56,95,229,84,121,37,68,86,231,164,85,69,94,88,75,4,66,4,32,123,228,66,64,135,136,8,131,148,201,64,164,42,65,66,73,3,16,73,226,34,252,133,8,252,133,72,85,69,212,18,65,66,33,15,144,35,229,34,252,64,144,233,10,144,234,128,168,42,65,66,9,7,16,17,239,210,18,69,8,150,137,40,214,137,52,255,64,34,33,1,16,253,228,146,50,15,200,0,135,136,72,135,148,73,71,162,49,4,144,181,224,18,122,4,200,120,128,8,236,139,84,109,75,98,1,7,222,70,36,94,109,101,94,85,37,86,109,4,78,68,8,62,64,2,248,8,142,136,13,138,168,170,132,168,61,172,138,16,98,2,1,199,212,69,196,84,109,197,84,87,229,84,110,36,66,67,232,0,3,15,214,137,40,214,217,42,254,169,10,252,218,72,152,138,96,126,40,2,124,252,66,68,86,200,212,85,79,212,86,197,68,172,96,130,5,79,184,137,8,168,220,74,170,175,205,168,141,72,130,135,224,0,30,1,32,18,2,24,64,3,240,17,1,16,10,0,64,27,6,12,32,15,184,34,143,168,140,103,0,23,199,36,66,135,16,18,131,68,16,7,220,17,79,212,166,103,128,33,197,20,125,65,8,125,65,34,16,7,220,17,79,212,162,103,128,139,231,210,85,71,200,85,72,226,17,7,28,17,7,28,17,7,28,21,0,32,127,193,16,14,7,30,4,15,254,32,129,240,224,228,164,91,68,164,91,68,164,127,200,4,137,228,66,73,32,254,249,42,254,173,106,186,79,228,186,173,96,146,32,129,8,1,79,212,34,35,128,40,130,132,73,4,136,168,65,0,68,2,124,9,15,16,79,231,16,87,197,84,85,69,92,177,0,16,68,2,124,8,15,12,71,7,28,87,5,30,87,5,18,145,35,14,66,2,62,4,15,60,66,71,52,82,197,126,82,69,36,146,67,76,68,2,124,8,15,16,69,7,124,89,5,124,81,5,16,159,227,0,68,2,126,8,15,124,68,71,124,85,5,82,85,69,88,153,35,14,68,2,124,9,15,124,66,7,68,87,197,0,85,69,84,153,67,18,68,2,124,9,15,124,65,7,40,87,229,4,87,69,84,151,67,12,32,2,252,32,138,144,178,10,126,34,162,74,41,37,34,76,168,4,33,2,144,183,234,16,167,202,16,47,226,18,81,164,148,137,0,16,33,2,16,39,226,144,181,74,84,165,66,124,81,4,146,73,40,14,33,2,144,178,138,68,168,42,60,34,66,52,82,132,162,129,224,0,32,2,126,168,139,16,161,10,32,39,226,162,82,37,34,75,232,34,32,194,240,177,10,146,165,74,16,47,226,16,81,5,16,133], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+126237);
/* memory initializer */ allocate([32,33,2,136,176,10,254,161,10,16,39,194,16,81,4,144,143,224,0,33,2,8,39,234,144,177,10,36,167,130,16,82,4,68,143,224,66,8,1,8,63,192,4,63,130,8,63,128,68,36,132,160,49,140,6,34,130,170,180,202,216,182,170,74,37,98,16,95,229,16,129,0,16,36,66,40,167,202,144,177,10,124,33,2,16,95,228,144,129,0,16,47,194,32,47,139,40,164,138,254,160,2,124,84,68,196,135,192,68,33,2,168,52,74,146,160,138,124,160,130,16,39,197,68,76,72,124,36,2,46,36,42,210,180,170,82,167,98,82,85,164,194,68,168,68,33,2,30,41,11,124,164,74,124,36,66,124,33,5,254,81,8,16,36,66,72,74,1,24,96,105,80,91,69,88,41,2,168,68,72,130,36,226,202,180,170,238,164,170,234,42,226,170,46,165,18,73,40,38,39,194,196,183,202,68,167,202,16,39,194,0,82,132,144,143,224,0,39,194,212,183,202,84,167,202,0,63,226,80,85,68,200,70,72,66,33,2,110,172,171,114,164,10,110,164,162,106,92,164,196,132,160,82,31,130,136,111,138,32,63,194,168,34,65,72,37,0,160,49,140,6,33,2,126,164,42,188,176,10,60,34,66,60,82,68,188,128,0,126,34,2,16,47,234,130,191,234,128,175,226,170,47,229,170,74,169,6,33,226,146,181,234,18,161,234,212,37,98,84,85,164,192,139,225,0,33,2,110,172,171,106,165,106,0,39,226,82,87,228,210,135,224,66,39,194,196,183,202,68,175,234,170,47,226,0,87,228,164,129,128,230,33,2,254,180,74,40,175,234,130,42,162,198,91,164,170,75,168,134,124,68,94,124,68,20,124,75,20,90,129,68,68,130,160,17,134,6,39,98,18,165,170,182,181,170,18,32,130,62,82,36,190,74,40,62,34,2,254,61,106,186,175,234,186,45,98,16,47,229,16,74,136,198,32,194,240,165,74,254,179,138,84,41,34,124,85,69,124,133,64,124,36,66,40,183,234,160,165,43,172,45,194,170,92,132,144,87,232,0,251,226,16,214,163,156,90,203,90,82,128,68,36,132,160,49,140,6,32,226,240,37,74,254,186,170,254,170,66,238,42,68,236,72,72,204,110,196,164,110,196,164,255,233,18,127,195,184,85,66,72,27,6,12,0,0,0,0,0,0,0,0,0,0,0,0,82,68,146,128,32,0,4,7,252,4,3,248,8,15,254,17,2,248,73,0,16,82,72,146,4,7,124,88,69,116,117,69,84,87,71,4,1,64,8,82,72,146,4,15,254,4,7,252,32,131,248,17,15,254,32,131,248,82,72,146,2,3,252,32,67,252,34,130,36,63,226,32,37,4,80,72,137,4,2,3,252,32,67,252,41,2,80,41,2,94,63,4,16,129,0,16,4,3,252,32,67,252,32,2,254,40,34,186,42,164,186,72,168,132,4,3,252,32,67,252,32,2,120,36,130,252,41,68,252,72,40,126,2,3,252,32,67,252,37,3,222,37,3,220,37,5,222,69,8,80,32,1,0,248,0,128,16,3,128,84,9,0,16,1,0,16,1,0,64,2,124,244,65,68,36,71,124,164,2,64,36,34,66,35,226,0,64,2,124,241,1,16,33,7,126,169,2,40,34,130,68,40,34,0,64,130,8,240,129,40,34,231,40,170,130,40,34,130,40,47,226,0,65,2,16,241,1,124,33,7,16,175,226,16,34,2,68,47,226,66,64,130,8,240,129,62,32,135,8,171,226,34,34,34,34,35,226,34,65,66,18,241,1,126,34,7,60,163,66,84,37,66,72,41,67,34,66,2,32,243,225,80,33,7,30,169,2,16,33,226,16,33,2,16,66,2,32,243,225,66,33,71,16,169,2,84,41,34,18,37,2,32,64,98,120,244,129,72,39,231,72,172,130,74,36,162,118,36,162,8,64,2,124,240,65,116,32,71,116,173,66,84,39,66,4,33,66,8,65,2,30,241,1,124,36,71,84,173,66,84,37,66,40,36,66,132,66,130,40,242,161,172,38,135,40,166,194,170,34,130,74,40,163,6,66,66,36,247,225,36,35,199,36,171,194,36,39,226,0,34,66,66,68,66,40,247,193,84,39,199,84,175,194,16,47,226,16,33,2,16,68,2,254,244,161,234,37,38,234,181,66,16,47,226,40,36,66,130,68,66,40,247,225,16,33,7,124,169,2,16,47,226,0,42,163,42,65,2,254,241,1,254,36,67,124,98,138,254,32,2,124,36,66,124,65,2,254,245,65,124,34,135,124,162,130,254,34,130,106,43,66,34,0,7,254,4,0,96,5,0,72,0,1,68,82,165,10,143,128,0,4,0,64,7,192,64,4,7,254,4,5,36,82,41,10,15,128,0,0,71,132,11,226,132,17,66,132,65,64,72,82,41,10,15,128,0,16,7,222,16,163,138,16,167,210,18,97,0,4,69,34,80,168,248,4,3,248,4,15,254,4,3,248,4,15,254,4,5,36,144,160,248,0,15,254,4,7,252,74,68,164,74,192,0,68,69,34,144,160,248,17,129,224,34,7,254,162,2,32,47,194,0,4,5,36,80,168,250,17,0,160,127,192,64,63,128,64,127,192,0,4,69,42,144,160,248,68,2,124,8,65,40,34,14,80,40,194,64,2,69,34,80,168,248,4,7,252,4,3,248,0,7,252,64,65,240,17,70,76,17,37,242,32,4,76,146,2,158,100,74,4,37,66,136,4,5,36,80,168,250,121,4,144,121,229,36,125,69,8,85,70,226,4,5,36,80,168,250,63,194,144,63,194,64,63,194,200,55,130,0,63,193,68,82,168,250,12,135,30,17,47,222,17,39,222,69,39,222,4,5,36,80,168,250,17,15,222,75,71,148,17,71,200,17,69,98,34,1,4,80,168,250,46,130,40,245,226,232,109,203,74,44,128,0,84,69,42,143,128,0,132,133,254,4,137,254,68,129,254,84,169,182,16,36,68,82,169,250,34,15,190,86,79,152,86,103,60,34,79,180,33,128,100,82,169,250,4,0,64,63,128,72,255,224,72,63,128,64,4,0,64,4,0,64,4,3,248,4,143,254,4,131,248,4,7,252,4,15,254,4,0,64,4,71,104,21,2,72,84,104,128,63,130,8,63,130,8,63,130,8,36,65,40,127,196,4,4,7,100,22,130,80,68,136,70,20,0,128,4,71,104,21,2,72,212,96,144,17,13,122,91,69,84,145,35,48,0,7,184,18,129,40,34,131,168,106,138,168,42,163,202,36,160,134,0,7,190,16,129,8,32,131,190,104,138,136,40,131,136,40,128,8,0,15,124,32,130,16,66,7,126,210,165,42,85,39,146,66,160,68,4,7,252,4,3,248,4,15,254,4,7,252,16,3,248,208,129,248,1,15,144,39,194,32,69,7,126,209,5,254,81,7,16,65,0,16,1,15,144,39,226,16,69,71,84,213,69,124,81,7,18,65,32,14,0,15,126,32,130,40,68,135,126,209,133,40,84,135,136,66,128,16,0,79,184,34,2,32,67,231,36,210,69,36,84,71,68,72,64,4,0,207,112,32,2,32,65,7,124,208,133,16,82,7,96,73,224,0,0,15,124,36,66,68,70,199,84,213,69,108,84,71,68,72,97,2,1,15,144,39,194,16,65,7,254,209,5,32,82,135,68,79,224,66,2,143,168,39,226,40,66,135,0,212,69,40,81,7,40,68,64,130,0,15,126,36,2,126,69,7,80,213,229,82,85,39,82,74,161,68,9,0,136,255,193,80,38,68,188,16,15,254,16,3,248,80,129,248,2,15,160,35,226,80,73,7,30,209,5,16,81,231,16,81,0,16,1,15,144,34,130,68,72,39,0,215,197,16,81,7,16,79,224,0,0,111,120,36,130,72,68,135,126,212,133,74,84,167,102,69,32,8,1,15,136,32,2,126,64,7,68,212,69,40,82,135,16,79,224,0,1,15,136,39,226,66,66,7,36,210,133,48,82,39,34,81,224,0,2,143,40,47,226,42,79,231,168,223,229,42,82,167,46,84,128,136,0,47,250,37,34,82,69,39,82,223,165,82,85,39,82,69,160,148,2,79,164,39,226,36,65,7,8,215,229,32,82,7,32,83,192,0,1,15,144,39,194,16,69,71,56,209,5,254,81,7,40,68,64,130,2,15,190,46,2,20,65,167,102,208,5,254,82,135,42,84,160,134,17,5,212,81,133,210,240,224,0,127,224,128,31,194,132,79,192,132,0,15,126,36,34,122,68,39,122,214,165,106,87,167,66,84,160,68,0,143,144,39,226,66,68,167,106,213,37,82,86,167,66,87,224,66,2,15,188,36,66,168,65,7,40,220,101,0,87,199,68,68,64,124,1,143,106,34,130,40,79,231,40,211,165,236,82,135,58,82,96,98,1,15,124,33,2,124,65,7,254,208,5,124,85,71,84,66,128,198,2,143,164,36,2,126,76,135,126,212,133,126,84,135,72,87,224,64,2,15,144,39,194,0,68,71,40,223,229,0,87,199,68,84,64,124,1,15,136,39,226,66,64,7,126,209,5,16,85,199,80,69,0,190,1,15,164,39,226,16,71,231,36,213,37,168,81,71,40,65,0,32,1,15,124,33,2,254,64,7,124,213,69,254,85,71,126,64,64,24,7,207,68,39,194,68,71,199,32,215,229,146,86,167,66,71,160,6,1,15,126,36,66,40,79,231,146,215,197,84,85,71,92,81,0,16,1,15,126,36,34,60,64,7,60,210,69,60,82,71,60,80,0,126,1,15,136,39,226,66,71,231,64,215,229,82,87,231,82,69,32,134,4,79,110,42,67,84,69,231,132,209,69,254,83,135,84,73,32,16,1,15,126,34,66,66,65,7,36,215,229,16,82,167,100,75,64,34,7,207,164,33,130,36,78,231,170,212,69,170,81,7,254,69,64,146,17,199,212,18,103,220,85,71,200,129,71,252,16,3,248,80,129,248,9,239,80,41,226,82,65,231,80,217,229,16,95,231,84,73,32,16,4,79,244,42,130,238,65,167,234,210,165,74,94,69,68,116,160,210,14,175,172,38,162,68,75,199,2,215,197,68,87,197,68,114,128,254,15,239,84,39,194,84,71,199,0,223,229,84,87,199,84,79,224,0,2,143,124,34,130,110,74,167,68,219,165,0,95,231,84,73,32,48,2,143,126,34,130,254,72,39,124,210,5,84,91,135,84,89,32,48,2,79,126,34,66,138,71,231,42,219,229,42,84,69,190,114,64,12,4,1,176,238,224,0,63,130,8,63,128,144,255,225,80,38,69,188,10,2,168,27,15,254,36,129,80,127,196,68,78,69,84,68,68,76,81,13,84,89,47,208,39,234,160,115,207,164,171,79,200,169,73,162,80,173,72,91,239,200,35,234,170,115,239,170,171,239,170,170,169,166,0,7,124,81,5,16,113,5,254,81,7,16,81,5,16,117,0,32,0,7,126,81,5,16,117,197,84,117,69,124,80,71,4,2,128,16,0,7,126,84,5,98,117,69,84,84,135,84,86,37,64,119,224,0,1,7,16,95,229,16,117,69,84,85,71,124,81,5,18,113,32,14,1,14,16,161,10,84,229,42,146,161,14,18,160,202,16,230,1,128,1,14,16,161,10,254,233,42,16,162,142,40,162,138,74,228,160,134,36,3,252,68,3,248,4,15,254,0,3,248,32,131,248,32,131,248,35,195,164,74,203,34,33,239,248,32,131,248,32,131,248,32,131,248,0,143,16,146,9,68,247,233,2,144,15,124,148,73,68,247,192,68,1,15,16,151,201,16,241,9,254,145,15,16,151,201,16,241,0,254,2,142,40,162,138,170,235,202,168,170,142,168,171,171,234,224,96,0,2,15,56,148,137,176,242,137,78,153,47,52,148,137,16,246,1,128,1,14,32,164,74,254,225,42,80,167,206,144,191,234,16,225,0,16,1,14,16,175,234,16,229,74,56,175,238,16,163,138,84,233,32,16,2,14,32,165,10,136,247,74,2,170,142,168,170,138,80,239,192,0,4,79,40,151,201,20,247,201,80,151,239,18,147,169,84,249,0,16,1,15,32,148,73,254,244,169,164,151,143,72,154,137,16,242,128,198,0,7,126,84,133,92,116,133,126,84,7,72,85,197,72,123,225,0,2,7,76,84,69,108,116,69,124,82,135,40,82,165,74,116,160,134,2,135,36,87,229,200,116,133,126,84,135,126,84,133,72,119,224,64,0,135,16,87,229,74,119,229,82,87,231,32,84,133,254,112,128,8,8,0,252,8,15,254,164,164,164,49,141,246,17,1,240,17,1,240,5,14,150,169,42,214,233,42,254,161,14,254,164,74,56,230,129,134,0,174,236,162,170,172,228,74,130,167,206,16,175,234,40,228,64,130,125,2,144,19,239,212,52,133,20,182,35,248,32,131,248,32,131,248,1,14,124,161,10,254,226,10,72,175,206,4,175,234,170,234,161,254,15,238,130,167,202,68,231,202,68,167,206,16,175,234,0,228,64,130,15,238,40,175,234,170,239,234,0,167,206,0,175,234,84,233,32,48,1,14,146,165,74,254,232,42,124,164,78,124,161,10,124,225,0,254,0,142,232,162,235,250,234,170,234,170,174,228,171,75,234,227,32,32,9,46,84,175,234,84,233,42,68,166,238,164,187,74,94,232,65,4,32,143,190,32,143,188,138,79,152,82,99,248,224,131,248,32,131,248,0,15,190,168,138,136,168,143,136,168,138,136,248,136,136,2,128,16,63,130,72,63,130,72,63,128,0,255,225,16,17,1,16,33,4,16,1,15,148,169,42,144,175,239,144,169,10,168,250,136,164,4,64,130,1,15,144,169,10,190,170,79,212,169,74,148,168,143,148,138,64,66,0,111,184,170,10,160,170,239,170,170,170,170,250,72,74,5,32,162,1,15,144,170,138,196,169,47,160,168,138,146,170,79,136,137,0,32,4,1,176,110,200,2,127,194,72,76,67,248,36,131,248,36,131,248,1,15,8,167,234,130,164,15,110,170,170,170,182,239,72,136,161,6,0,143,190,169,74,254,170,175,190,170,170,190,168,143,190,136,128,62,0,7,252,74,71,252,0,7,252,4,0,192,53,12,72,4,64,64,0,7,252,74,71,252,0,15,254,4,2,120,36,2,64,255,224,0,0,7,252,74,71,252,4,0,64,255,224,64,63,130,8,32,131,248,127,196,164,127,192,64,255,224,0,63,128,0,63,130,8,63,128,0,127,196,164,127,192,128,255,226,72,127,202,74,63,128,64,4,64,60,127,196,164,127,192,64,63,128,64,255,225,8,63,192,0,82,72,146,127,196,164,127,192,64,255,224,64,127,196,164,95,68,68,95,68,76,127,196,164,127,194,40,183,234,200,183,226,72,39,226,72,39,226,64,127,196,164,127,197,0,251,197,4,250,74,190,248,34,58,248,34,6,127,196,164,127,193,16,127,197,84,78,71,252,32,131,248,32,131,248,4,3,248,4,15,254,8,1,8,63,192,4,63,130,168,42,143,254,36,12,70,157,44,230,149,40,66,236,224,0,127,196,164,74,79,254,151,198,84,247,192,32,83,232,202,3,239,170,171,234,138,253,224,6,32,2,0,120,8,0,112,2,0,248,2,0,32,2,128,48,2,0,32,2,32,122,8,32,114,2,32,114,2,34,42,35,34,33,224,0,32,2,124,120,72,8,112,130,16,113,2,32,44,35,66,35,224,0,34,2,32,122,8,48,114,130,36,114,2,32,42,3,32,34,0,32,32,66,4,122,72,36,114,66,36,114,66,36,42,67,4,33,64,8,32,2,62,120,40,4,112,130,8,112,130,8,40,131,8,34,128,16,33,2,16,121,8,16,119,194,16,113,2,16,41,3,16,47,224,0,32,34,34,122,168,42,114,162,42,114,162,42,42,163,42,36,160,130,32,130,8,121,8,36,112,130,16,114,34,4,40,131,16,34,0,0,36,2,46,120,40,66,116,34,66,116,34,66,44,35,66,36,160,68,64,4,252,116,72,84,116,66,40,114,130,16,42,131,40,36,64,130,33,2,16,121,8,126,113,66,36,114,66,40,41,3,40,36,64,130,32,2,126,120,136,16,113,2,52,117,34,18,41,3,16,33,0,16,33,2,16,121,8,126,113,2,16,114,130,40,42,67,84,40,160,0,32,2,124,124,8,64,119,194,68,116,66,124,44,3,64,39,224,0,32,194,112,116,8,64,119,194,84,117,66,84,44,131,84,41,64,162,33,2,16,122,136,36,117,34,8,32,7,60,32,66,136,49,2,32,66,4,16,119,200,32,114,2,60,114,66,36,42,67,68,37,64,136,34,2,16,119,200,0,115,130,40,114,130,40,42,163,42,36,96,128,64,132,72,114,136,8,116,130,40,32,239,120,32,130,136,48,130,8,33,2,16,113,40,84,117,2,16,249,2,40,42,131,68,36,64,130,32,2,124,117,72,84,117,66,124,116,2,64,44,35,66,35,224,0,32,2,124,121,8,16,113,2,124,113,2,24,41,67,16,39,224,0,32,2,126,112,136,8,114,130,46,114,130,40,42,131,40,47,224,0,33,2,16,121,8,126,113,2,16,119,194,68,44,67,68,39,192,0,32,2,126,120,72,4,119,66,84,117,66,116,40,67,4,33,64,8,32,2,126,116,8,92,117,66,84,117,66,84,37,195,64,39,224,0,33,2,16,119,232,32,116,130,190,114,162,42,42,163,46,32,128,8,33,66,18,121,8,126,113,2,30,114,162,42,42,163,68,36,160,144,32,130,10,120,136,126,116,130,74,116,162,76,36,131,106,37,96,34,32,2,60,122,72,36,115,194,36,114,66,60,42,67,36,35,192,0,64,4,60,114,72,36,115,194,36,114,66,60,40,3,0,39,224,0,32,2,124,125,72,84,117,66,124,117,66,84,45,67,84,39,192,0,32,194,112,116,8,80,117,2,126,113,2,84,53,34,146,5,0,32,66,4,16,119,232,16,119,194,84,117,66,84,37,195,16,33,0,16,33,2,8,119,232,16,114,2,68,119,130,16,42,3,68,47,224,2,33,2,8,119,232,66,112,2,36,114,130,48,42,35,34,33,224,0,34,2,16,121,72,4,114,66,170,122,162,50,42,3,100,41,192,0,32,2,124,116,72,124,116,2,82,117,66,88,45,35,82,40,225,0,64,132,8,119,232,74,116,130,126,117,34,82,45,67,72,41,65,34,39,226,36,121,136,36,117,34,16,119,194,16,47,227,16,33,0,16,33,2,58,121,72,126,113,2,62,117,2,30,40,35,2,33,64,8,33,2,18,119,232,20,113,130,126,115,2,84,41,131,18,32,224,0,32,2,254,116,136,120,116,130,120,116,130,78,47,131,8,32,128,8,65,4,16,119,232,32,119,194,164,115,194,36,43,195,36,34,64,44,65,68,18,111,200,144,233,4,234,234,164,172,78,134,138,73,97,34,33,2,16,119,200,16,117,66,56,113,2,254,33,3,40,36,64,130,33,2,30,119,8,20,113,162,38,112,2,126,42,131,42,36,160,134,64,4,254,98,168,170,234,196,250,230,164,170,82,198,40,74,128,72,33,2,84,115,136,16,119,194,4,112,66,60,40,67,4,39,192,0,35,130,40,114,136,56,113,2,124,117,66,84,37,67,92,33,0,16,32,2,124,116,72,84,119,194,84,117,66,108,36,67,68,39,192,0,33,2,84,117,72,124,112,2,124,112,66,124,44,3,66,35,224,0,65,4,80,119,200,144,113,2,254,113,2,56,37,67,146,33,0,16,64,7,4,77,136,72,116,130,156,36,135,72,45,195,64,43,225,0,32,194,112,113,8,124,113,2,254,113,2,32,42,131,68,47,224,2,34,130,42,116,200,216,118,162,70,113,2,254,33,3,16,33,0,16,65,4,16,114,136,68,123,162,16,113,2,124,41,3,16,47,224,0,33,2,16,114,136,68,120,34,124,112,2,124,44,67,68,39,192,0,36,130,40,113,8,40,116,66,16,119,194,16,37,67,146,37,0,32,34,130,40,114,168,172,118,130,40,118,194,170,34,131,74,36,96,128,34,2,60,116,136,252,113,66,254,113,66,124,41,3,16,37,0,32,34,2,60,116,136,16,119,194,84,117,66,124,44,3,66,35,224,0,33,2,8,119,232,16,114,66,126,114,162,40,42,163,74,36,96,128,80,4,188,96,136,16,23,238,170,66,174,74,65,36,82,106,164,4,34,2,16,119,232,66,113,2,16,119,226,36,42,67,24,34,64,66,68,7,64,68,232,234,122,162,170,122,162,170,36,163,78,42,1,0,66,68,126,114,72,0,119,226,82,33,15,126,41,35,18,34,160,68,33,2,124,113,8,84,115,130,16,119,226,16,43,131,84,41,32,16,64,164,8,119,232,8,228,132,36,224,68,84,76,199,86,67,96,2,34,2,174,122,168,170,122,66,170,113,2,124,41,3,16,47,224,0,32,2,124,116,72,124,112,2,124,113,2,124,41,3,16,47,224,0,32,2,124,117,72,124,117,66,124,113,2,124,41,3,16,47,224,0,32,130,40,115,232,72,112,130,126,112,2,62,42,35,34,35,224,0,33,130,108,114,168,40,119,226,40,115,162,234,34,195,58,42,96,66,33,2,16,53,68,84,245,66,186,113,2,124,33,3,16,47,224,0,32,194,112,122,168,20,112,66,126,248,66,36,41,67,4,33,64,8,33,2,8,119,232,16,114,66,126,112,34,84,37,67,84,41,65,22,72,4,94,104,40,254,10,174,170,79,238,170,74,164,170,108,164,134,72,4,94,232,32,130,235,164,170,235,164,170,91,166,130,72,160,132,34,2,16,119,200,68,119,194,68,119,194,82,36,195,84,38,32,64,67,196,4,123,200,4,115,194,0,119,226,66,35,195,36,33,128,102,32,2,124,116,72,124,116,2,126,116,34,122,54,162,186,8,161,4,64,6,238,138,32,162,236,228,170,234,164,174,76,38,130,72,160,132,33,2,124,113,8,124,113,2,254,116,66,124,36,67,124,36,64,76,34,66,36,119,232,36,113,2,126,114,2,64,43,195,36,34,64,60,33,2,16,119,232,40,117,66,186,113,2,40,47,227,40,34,128,72,39,194,68,119,200,68,119,194,0,119,194,8,47,227,72,34,128,16,32,2,124,117,72,124,117,66,124,113,2,254,35,131,84,41,32,16,32,2,124,116,72,124,116,66,124,112,2,72,38,163,76,38,160,70,64,6,254,136,32,146,235,164,146,235,164,170,75,166,130,79,224,0,34,2,62,117,104,42,117,34,38,113,2,74,42,35,36,33,192,0,66,4,16,119,200,0,116,66,40,47,239,0,39,194,68,52,66,124,41,34,84,119,232,16,119,226,40,116,66,190,34,67,44,34,32,30,33,2,82,117,72,168,114,66,66,113,2,82,37,67,40,36,64,130,66,164,84,122,136,84,114,162,0,39,231,82,39,226,82,55,226,66,68,4,224,117,232,234,116,162,234,117,98,16,47,227,40,36,64,130,36,130,106,116,200,106,117,98,32,247,194,68,39,195,68,39,192,0,64,4,124,117,72,124,117,66,124,114,2,20,42,35,164,41,192,0,78,228,170,126,232,0,119,194,0,47,239,32,35,194,132,49,66,8,64,196,112,113,8,254,1,14,86,73,46,146,77,100,146,111,228,130,65,4,86,105,40,214,9,46,254,65,15,126,66,69,24,98,68,194,65,196,224,117,72,254,225,4,254,226,4,60,85,70,72,73,65,34,33,2,254,112,8,124,116,66,124,113,2,42,38,195,164,35,32,32,73,36,84,111,232,56,117,66,146,112,130,126,33,67,36,33,128,102,66,68,46,115,40,172,118,130,52,250,226,116,42,194,36,50,64,44,66,132,254,114,168,126,10,142,254,68,175,124,69,69,84,98,132,198,32,2,126,116,168,126,116,2,94,245,34,94,37,35,94,37,32,158,34,130,124,114,136,124,116,66,124,244,66,124,41,3,126,34,128,68,47,226,0,119,200,68,119,194,0,127,226,170,41,35,186,41,32,150,66,132,126,116,136,254,116,130,126,116,2,252,36,131,94,36,32,140,33,2,40,119,200,130,119,194,68,119,194,16,47,227,16,37,0,32,33,2,110,116,168,106,117,98,0,119,226,82,39,227,82,39,224,0,68,68,40,112,8,254,114,130,68,120,34,124,37,67,84,47,224,0,65,4,254,104,40,124,114,2,80,114,162,92,34,195,74,42,160,16,65,4,126,116,40,8,115,2,32,115,194,40,39,227,0,34,64,66,79,228,40,111,232,170,239,228,0,231,196,0,79,230,84,73,32,48,65,4,146,117,72,254,120,34,124,116,66,124,33,3,124,33,0,254,71,196,68,119,200,68,15,238,170,79,238,0,71,196,36,97,132,230,71,196,84,119,200,84,119,194,40,119,2,16,39,195,84,41,32,48,65,4,254,105,8,188,233,68,254,233,68,252,77,69,124,101,64,76,72,132,72,97,233,208,10,142,142,79,78,164,74,230,164,82,162,114,73,6,80,159,224,160,233,228,234,234,132,174,74,134,168,91,98,64,65,6,254,130,128,254,233,36,186,233,36,186,90,166,186,72,160,132,79,230,40,143,224,170,239,228,68,231,196,68,87,198,16,79,224,16,95,231,8,154,129,78,255,37,64,245,69,244,84,71,74,88,162,16,74,164,108,111,232,68,2,142,254,65,14,124,65,4,254,98,132,68,66,4,124,104,136,124,117,66,124,117,66,254,36,67,124,36,64,124,68,69,244,106,136,238,225,164,234,226,164,74,78,166,68,84,160,144,75,230,18,139,160,146,239,228,214,235,164,254,73,166,182,77,32,150,36,66,254,114,136,170,118,194,254,240,2,124,44,67,124,36,64,124,65,6,254,136,32,68,233,36,124,245,68,254,89,38,254,65,0,16,91,230,162,139,225,136,243,229,42,90,174,190,72,132,138,107,229,130,93,6,84,148,128,138,239,69,2,239,132,136,79,134,136,69,1,252,66,68,254,115,72,72,119,226,200,119,226,72,39,227,36,35,128,198,79,230,170,143,224,64,239,229,34,239,164,170,79,166,34,79,160,14,33,2,124,114,136,254,116,66,124,116,66,124,34,3,18,42,160,184,65,4,254,104,40,110,234,165,68,235,165,0,79,230,84,73,32,48,65,6,254,138,128,254,234,164,254,234,164,188,74,166,182,80,2,170,64,196,240,97,8,254,229,68,124,229,68,124,81,6,124,65,0,254,71,68,20,113,74,116,36,66,68,247,66,20,33,69,20,85,72,36,65,4,16,117,74,84,43,162,16,249,2,124,33,5,16,79,232,0,66,132,64,119,234,200,39,226,72,247,226,72,36,133,126,84,8,64,20,142,72,36,130,106,252,194,72,116,138,202,37,162,106,36,98,0,17,46,28,39,2,80,245,2,126,113,42,178,37,162,148,33,2,16,25,14,16,47,226,16,241,2,124,113,10,184,37,66,146,33,2,16,17,6,20,33,34,16,247,226,16,115,134,84,165,66,146,33,2,16,24,14,60,34,66,36,251,194,0,119,234,194,36,34,66,39,226,0,50,142,36,47,226,40,242,162,74,120,106,16,41,34,146,47,226,0,48,206,240,37,66,40,247,194,8,113,10,254,33,2,16,37,2,32,18,14,16,39,194,68,247,194,68,119,202,210,37,66,72,38,66,66,23,206,84,39,194,84,247,194,16,127,234,56,37,66,146,33,2,16,49,14,40,36,66,146,240,130,124,112,74,40,33,2,162,42,162,24,49,14,254,33,2,124,244,66,124,116,74,124,36,66,254,34,130,68,55,206,84,39,207,84,39,199,40,100,74,162,167,194,164,33,130,102,49,14,254,37,66,254,240,2,254,120,42,186,42,162,186,40,34,254,56,129,8,254,133,78,146,130,136,69,233,18,85,35,146,85,227,0,59,238,64,35,207,164,115,202,164,35,199,16,83,199,100,81,135,102,49,14,254,37,66,124,242,130,252,114,138,254,34,130,106,42,66,50,16,194,112,116,5,64,87,199,84,85,69,84,84,135,148,9,65,34,18,2,16,119,197,0,82,133,68,112,5,40,81,7,40,4,64,130,17,2,80,119,197,144,81,5,254,112,5,124,84,69,68,119,192,68,16,79,216,57,5,94,145,65,84,10,67,248,32,131,248,32,131,248,33,196,240,229,74,254,163,138,84,233,42,124,165,74,124,229,64,124,12,15,8,170,138,190,172,138,190,168,138,148,170,42,64,186,0,158,32,15,134,87,136,208,117,128,84,253,66,84,117,65,82,85,194,132,63,128,16,14,0,32,63,130,72,63,130,72,63,130,72,36,130,24,66,4,120,68,143,104,84,133,80,87,197,4,87,69,132,145,64,8,4,128,126,250,1,18,63,162,150,37,3,252,0,71,228,1,64,8,65,5,120,100,132,104,84,131,80,39,207,132,39,66,4,33,66,8,32,130,60,34,79,180,170,66,40,83,229,2,87,165,130,144,160,4,32,130,60,34,79,180,34,66,40,115,229,2,87,165,2,112,160,4,33,2,60,250,68,52,162,79,168,35,231,2,171,162,2,160,164,4,17,1,60,30,65,52,122,68,168,123,228,2,71,164,2,64,168,4,64,135,188,138,64,180,234,74,168,171,238,130,11,160,130,40,161,4,9,7,60,82,69,52,122,69,40,83,229,66,77,166,66,80,160,132,32,132,146,113,194,8,255,224,128,63,130,72,35,3,254,0,35,246,1,15,188,34,68,52,250,74,168,171,234,130,171,168,130,136,169,132,34,15,120,34,131,106,229,98,130,127,130,72,35,3,252,0,71,236,17,6,120,36,130,104,252,130,80,119,197,4,87,69,4,113,64,8,40,130,158,73,45,218,73,36,148,93,230,162,75,164,130,72,164,132,4,7,252,10,2,168,74,65,0,63,130,136,37,3,252,0,71,236,33,15,60,34,79,180,138,71,40,19,226,2,247,162,2,160,164,4,0,79,238,0,174,238,170,170,168,238,234,162,171,234,162,170,170,164,17,5,60,122,73,52,18,79,232,3,199,132,75,68,132,121,64,8,1,5,60,138,66,52,82,72,168,3,231,2,87,165,2,112,160,4,128,69,238,2,169,46,254,169,40,186,237,98,147,233,34,138,168,68,137,5,60,250,66,180,250,74,40,251,230,130,171,163,130,32,162,4,8,70,174,8,175,238,8,162,136,168,235,130,169,235,162,230,160,36,81,15,188,82,64,52,250,74,168,171,239,130,171,170,130,248,160,4,16,143,220,41,68,92,145,71,208,85,231,194,85,231,194,20,161,132,65,15,188,170,79,180,170,79,168,67,234,2,251,162,2,32,162,4,33,15,188,82,71,52,2,71,40,19,194,4,247,66,4,161,68,8,78,68,174,234,164,238,74,174,168,174,234,162,171,238,162,18,162,100,238,74,174,238,160,14,124,160,8,254,226,2,61,160,66,40,161,4,132,68,142,0,175,238,68,168,136,238,228,66,170,238,226,34,160,4,124,133,92,125,68,28,93,69,80,93,229,66,93,229,66,156,160,4,122,1,62,253,67,72,81,75,66,31,129,72,17,1,252,0,71,236,25,14,60,170,69,52,122,74,40,35,239,130,35,170,130,248,160,4,68,66,142,254,162,142,254,162,168,255,226,162,254,230,194,170,162,132,238,74,174,170,164,78,170,162,8,254,228,130,73,227,2,40,164,68,16,135,222,65,37,90,85,39,244,85,229,194,65,229,66,84,168,4,236,131,92,173,71,92,165,67,16,73,234,66,83,162,130,80,162,4,16,143,222,17,42,186,125,106,176,57,226,130,59,229,66,146,163,4,40,132,28,253,68,156,125,68,144,125,228,130,125,228,2,106,169,84,17,71,208,43,227,144,18,165,70,146,3,248,36,131,254,0,39,230,124,128,158,253,35,90,81,41,20,255,234,162,199,235,162,170,171,164,66,142,254,162,142,126,172,137,126,228,130,126,228,66,40,161,4,108,114,5,60,118,66,24,182,106,60,250,65,248,20,129,252,0,71,236,81,15,188,82,79,180,170,79,168,83,237,2,123,165,2,124,164,4,4,0,32,63,234,0,96,2,0,96,10,0,32,4,0,64,8,0,2,0,16,31,229,0,48,1,126,48,133,8,16,130,8,34,132,16,4,0,32,63,234,0,96,2,252,100,74,68,37,68,72,68,8,64,4,0,32,63,234,0,111,194,32,98,10,60,36,68,68,73,73,8,2,0,16,63,234,0,97,2,16,105,42,146,41,36,146,79,232,2,2,3,254,160,6,254,41,6,144,175,226,146,73,37,34,146,162,68,4,0,32,63,234,40,98,67,254,98,10,80,37,4,146,73,41,14,2,3,254,32,10,68,100,66,254,100,74,68,39,196,68,68,72,124,4,0,32,63,234,0,111,226,8,110,138,168,42,132,232,64,136,24,4,0,32,63,234,0,111,130,136,111,138,136,47,132,0,95,200,0,4,0,32,63,234,64,100,2,252,106,11,60,34,4,60,66,8,32,2,3,254,164,6,64,47,198,132,183,66,84,39,68,72,68,40,62,2,0,16,63,234,32,97,2,254,97,10,16,39,196,16,65,8,254,2,3,254,34,10,16,111,194,32,100,74,248,33,4,36,79,232,2,2,3,254,168,6,128,62,230,170,170,162,170,82,165,46,170,4,64,2,3,254,32,10,254,98,130,40,106,170,108,34,132,40,79,232,0,2,3,254,34,10,248,98,130,248,106,10,252,34,68,92,72,137,4,2,3,254,34,10,32,127,194,32,111,138,32,33,68,66,84,169,56,2,3,254,164,134,252,36,134,254,178,34,252,34,68,36,69,72,136,2,3,254,160,6,252,34,6,248,164,131,254,32,4,252,72,72,252,2,3,254,160,6,16,37,70,84,171,162,16,39,196,16,65,8,254,2,3,254,168,6,94,32,38,146,175,226,146,43,164,214,73,40,150,2,3,254,49,10,144,101,67,82,105,42,16,41,69,8,67,9,192,2,3,254,32,10,252,98,2,80,110,170,76,43,165,42,68,136,152,2,0,16,63,234,40,98,130,238,98,138,238,34,132,238,66,136,40,2,3,254,160,6,254,41,38,254,169,34,186,74,164,186,136,32,254,2,3,254,160,70,120,33,6,254,165,66,146,63,228,72,67,8,206,2,3,254,161,6,214,41,38,214,169,34,254,33,4,40,68,73,130,2,3,254,168,134,72,62,134,148,174,34,168,74,69,40,154,66,64,2,3,252,168,134,80,47,130,168,111,138,168,47,132,32,95,200,32,2,3,254,34,10,250,98,34,250,106,170,250,39,36,170,82,168,36,2,3,254,34,11,252,106,130,112,127,234,136,50,68,248,66,9,252,2,3,254,164,6,184,56,130,254,106,10,190,44,132,190,73,72,162,2,3,254,36,138,252,98,2,248,98,11,254,36,4,252,81,8,254,1,3,254,165,70,56,47,226,84,105,42,32,47,228,68,67,136,198,2,3,254,32,10,238,106,34,238,104,10,238,40,164,228,72,168,146,2,3,254,160,7,252,42,134,112,170,195,250,42,132,248,66,73,254,2,3,254,164,6,254,36,166,234,165,34,230,36,5,20,84,170,56,2,3,254,164,135,254,36,134,252,168,66,252,74,69,254,133,1,140,2,3,254,164,6,238,42,162,242,106,11,238,42,164,234,74,73,106,2,3,254,178,70,168,53,70,136,176,66,248,72,132,248,136,128,152,2,3,254,164,134,252,36,135,254,170,66,252,42,68,252,68,136,132,2,3,254,32,10,254,98,130,254,106,170,254,32,4,254,69,72,178,2,3,254,170,134,248,42,134,248,164,130,240,34,69,252,74,137,100,2,3,254,160,6,238,42,166,170,164,66,170,63,228,72,67,9,204,2,3,254,168,6,238,42,167,68,175,162,128,55,196,16,69,72,178,2,7,254,65,13,220,87,69,72,219,101,92,84,133,156,80,137,62,2,3,254,160,134,238,43,66,206,106,42,174,42,68,210,74,168,142,2,3,254,160,6,238,42,162,102,106,170,48,36,133,134,65,136,224,2,7,254,64,15,174,80,69,252,213,71,222,85,69,36,157,67,14,2,3,254,40,139,236,105,67,238,106,171,234,40,165,196,106,168,146,2,3,254,161,6,252,36,135,254,168,66,252,68,5,36,148,162,56,2,3,254,160,6,238,42,166,234,169,2,174,82,165,250,165,64,138,2,3,254,160,70,238,42,6,234,168,66,238,90,70,174,78,72,4,2,3,254,164,6,238,36,70,238,170,162,234,74,165,244,74,73,26,2,3,254,170,166,238,42,166,238,164,130,254,52,132,126,68,136,126,64,2,238,2,47,170,6,105,34,86,101,170,34,35,162,202,160,68,65,2,254,1,15,124,5,73,84,87,197,16,35,131,84,201,32,16,4,7,252,64,65,16,36,132,132,31,130,136,69,0,96,24,6,0,4,7,252,64,65,16,47,132,20,15,1,0,31,192,4,1,64,8,4,7,252,81,66,8,4,7,252,4,2,72,36,131,250,4,32,62,4,7,252,81,66,8,71,67,192,2,3,248,3,0,192,48,4,254,4,7,252,81,66,136,17,2,124,121,65,20,41,71,164,11,64,72,4,7,252,81,66,168,74,66,168,27,2,168,74,65,34,33,228,0,4,7,252,81,66,72,31,0,64,127,194,164,22,7,252,5,3,140,4,7,252,81,67,248,85,65,240,21,1,240,4,7,252,21,6,76,4,15,254,164,164,164,49,141,230,0,135,168,74,135,168,72,133,152,4,7,252,81,66,72,127,193,16,10,15,254,32,131,248,32,131,248,4,15,254,145,34,72,21,7,252,21,2,72,255,225,16,14,7,28,4,7,254,160,164,132,115,133,40,90,197,106,82,165,40,92,233,2,64,2,0,240,1,0,32,6,128,176,2,128,32,2,0,32,2,0,64,2,252,244,65,100,37,66,196,114,138,168,33,2,40,36,66,130,65,2,16,241,1,124,37,66,212,117,74,236,36,66,68,37,66,72,64,2,12,247,1,16,33,2,144,119,234,144,33,2,16,39,194,0,65,2,16,242,129,70,33,2,136,112,10,188,32,66,8,32,130,16,65,2,16,241,1,124,33,66,148,119,234,144,34,130,40,36,66,130,65,2,146,245,65,16,39,194,144,113,10,254,33,2,16,33,2,16,65,2,146,245,65,16,39,194,132,112,74,188,32,66,4,39,194,0,65,2,16,242,129,68,40,38,124,168,3,124,44,66,68,39,194,68,66,2,60,244,65,168,33,2,168,116,74,130,39,194,68,36,66,124,64,2,124,244,65,124,36,66,252,117,10,210,36,194,72,38,66,66,72,130,72,243,225,8,45,67,94,116,74,222,36,66,68,43,226,0,64,2,124,244,65,68,39,194,128,119,202,144,39,194,16,47,226,0,129,4,40,228,66,130,71,197,0,225,69,84,66,68,40,79,228,0,136,4,94,224,34,186,74,165,186,234,165,170,75,164,130,72,164,132,129,4,254,225,2,124,81,6,254,210,132,106,74,69,36,67,36,32,65,2,18,247,161,20,41,131,126,106,10,124,42,66,60,34,66,60,135,196,68,231,194,68,71,205,32,103,229,170,68,164,146,66,164,4,64,130,126,244,161,126,45,35,126,106,10,72,47,226,8,32,130,8,71,226,66,247,225,72,44,135,126,172,130,72,43,226,162,50,34,62,128,4,238,226,34,170,68,69,170,224,5,238,66,164,170,68,68,170,132,68,254,228,66,16,66,133,68,235,165,0,71,196,68,68,68,124,66,130,234,242,193,106,42,99,124,108,74,124,36,66,124,36,66,76,66,2,92,253,65,84,37,194,200,119,234,200,37,194,106,36,130,72,73,34,84,15,239,56,21,66,146,114,10,254,34,66,24,34,66,194,129,4,254,8,46,254,40,5,254,234,165,170,79,228,170,74,165,6,130,132,168,234,226,180,74,37,32,239,229,170,74,164,170,95,228,0,129,196,232,8,238,136,43,229,170,235,197,170,74,228,220,73,69,38,128,4,238,226,34,170,86,102,170,209,4,126,68,36,126,68,36,126,128,5,220,5,78,220,40,133,190,238,165,126,68,132,74,87,228,130,71,194,16,15,239,146,21,66,128,119,234,144,47,226,170,42,162,134,136,133,222,10,142,220,42,133,254,233,133,100,66,5,252,66,4,96,0,3,252,4,64,72,36,2,64,39,194,64,84,4,192,131,224,0,127,192,68,39,130,64,95,233,8,31,129,8,31,129,8,18,129,16,0,143,136,143,226,74,244,132,126,165,47,84,36,131,212,229,66,162,32,132,8,247,225,74,100,137,124,69,71,84,212,130,84,85,72,162,120,128,136,49,65,34,252,129,64,51,197,4,144,129,8,81,2,0,4,0,64,127,192,64,63,128,64,255,224,224,21,2,72,68,96,64,32,2,62,248,34,4,112,130,62,248,130,8,112,138,136,34,130,16,32,143,136,34,167,42,34,175,168,36,167,4,168,130,48,44,2,0,32,2,60,250,66,36,115,194,32,251,226,34,114,42,190,34,2,0,33,2,16,250,130,36,116,34,60,248,2,60,114,74,164,35,194,0,34,79,126,34,71,0,39,239,66,33,7,124,169,66,36,37,66,136,33,2,84,251,130,16,119,226,66,255,162,106,119,170,194,36,162,68,39,207,212,39,199,84,39,207,16,47,231,146,169,34,186,40,34,134,33,2,84,241,2,124,115,130,84,241,2,126,114,74,168,33,130,100,34,143,124,34,135,124,33,15,254,37,71,124,165,66,254,36,66,76,39,226,64,253,194,64,119,226,90,245,66,90,116,74,254,37,66,140,33,15,126,36,135,126,37,207,106,36,135,126,169,2,190,53,34,30,4,67,248,5,15,254,12,131,82,199,224,136,31,192,36,2,3,254,0,15,190,80,135,8,80,135,8,80,133,200,240,129,8,18,129,16,1,15,144,87,199,84,87,199,84,85,69,254,116,77,68,21,65,72,1,15,208,82,135,68,89,39,0,87,197,132,240,129,40,17,1,8,1,15,136,87,229,66,112,5,126,112,133,8,88,143,8,18,129,16,0,15,136,83,5,16,113,5,124,113,5,56,90,143,40,19,129,40,0,143,190,82,165,62,112,133,62,112,5,62,90,175,42,17,65,34,34,7,62,37,79,148,64,135,54,191,193,16,31,1,30,127,0,16,255,224,160,127,196,164,127,194,8,63,130,8,63,128,64,255,224,64,0,15,124,33,2,124,36,79,212,37,66,84,37,66,40,36,66,130,24,6,126,65,4,124,124,69,84,85,69,84,85,69,40,82,137,68,64,2,126,249,0,124,116,69,84,85,69,84,81,5,168,84,72,130,32,2,124,249,2,32,39,199,68,5,71,84,85,69,16,114,128,68,32,5,124,137,0,32,119,192,68,5,71,84,85,69,16,114,128,68,83,230,8,73,3,190,18,33,106,218,165,170,84,137,84,81,66,34,64,2,124,241,4,124,84,73,84,229,68,84,149,66,40,98,137,68,39,197,16,138,2,124,4,79,84,21,66,84,117,69,40,82,135,68,251,234,136,249,0,62,114,32,42,250,164,42,122,160,148,41,65,34,32,10,190,168,143,190,2,47,170,34,175,170,170,170,148,137,73,162,251,229,8,113,5,62,114,37,170,242,161,42,250,170,148,81,74,162,80,15,190,80,143,190,34,47,170,170,170,170,218,168,136,169,73,34,120,4,190,48,132,190,250,42,170,82,170,170,34,175,136,113,74,162,119,197,16,114,5,124,116,66,84,253,69,84,117,66,16,170,134,68,248,2,62,248,138,190,82,32,42,250,162,42,250,170,136,169,73,162,93,229,8,255,229,34,156,130,148,255,162,72,63,129,32,127,224,32,4,0,124,4,3,252,36,66,64,39,131,192,36,4,68,67,200,0,7,128,64,63,194,68,39,3,196,39,194,32,63,196,144,71,11,142,17,1,16,17,7,208,85,5,80,125,1,16,29,39,82,0,224,0,32,2,56,34,143,168,170,138,168,250,130,40,42,163,170,228,96,128,255,224,128,15,193,4,36,196,64,63,130,72,63,128,68,255,224,2,1,15,144,87,197,84,85,69,124,81,5,20,87,197,2,79,232,0,33,2,16,35,239,192,171,234,132,168,143,144,34,34,162,249,224,128,33,2,8,32,15,190,169,10,144,169,15,144,33,3,144,233,224,0,33,2,16,39,207,144,169,10,254,249,2,16,42,131,168,196,64,130,34,130,40,34,143,170,171,202,168,170,143,170,34,162,170,251,96,128,32,130,8,32,143,190,170,170,170,170,175,182,34,34,162,250,160,164,32,2,62,34,47,170,170,170,170,170,175,170,32,131,154,234,160,70,32,194,112,33,15,156,175,10,144,169,239,240,33,2,146,253,32,78,33,2,16,34,143,164,172,42,164,250,66,36,42,67,164,234,64,68,32,130,40,34,79,164,172,42,144,169,15,144,34,2,164,255,224,130,32,66,36,33,79,132,170,74,148,248,98,60,40,67,132,232,64,4,35,162,10,32,175,186,170,42,162,171,175,138,32,162,138,250,160,146,4,4,68,127,192,64,255,224,64,63,130,72,63,128,68,7,231,194,34,66,36,34,79,254,170,74,164,251,194,36,42,67,164,235,192,0,32,130,8,32,143,190,168,138,136,171,239,162,34,34,162,251,224,128,32,2,126,32,79,132,171,202,172,250,194,60,40,67,196,229,64,8,32,2,62,34,15,190,170,138,174,170,175,170,34,163,178,229,160,164,32,130,8,32,143,190,170,170,170,251,226,42,42,163,170,235,224,0,33,2,16,39,207,84,165,74,124,165,79,84,47,226,68,245,65,72,34,2,32,35,239,208,169,10,158,249,2,16,41,227,208,229,0,16,32,2,6,35,143,160,170,10,190,250,130,40,42,131,168,239,224,0,32,130,8,33,79,162,168,138,132,171,239,130,34,66,152], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+136477);
/* memory initializer */ allocate([248,128,132,32,2,62,34,47,148,168,138,148,170,175,136,35,226,136,248,128,190,34,130,40,34,143,94,164,170,122,162,175,74,39,162,146,250,160,196,247,130,72,38,131,90,232,161,70,63,130,72,63,128,68,127,224,2,33,2,16,39,207,144,173,74,184,249,2,126,41,3,168,234,128,68,33,2,30,39,79,136,169,170,166,248,2,126,42,131,170,234,160,70,32,2,126,33,15,164,171,234,138,248,130,62,40,131,136,235,224,0,40,2,190,40,143,136,171,234,170,170,175,170,42,162,174,248,129,8,34,130,40,34,143,254,170,170,170,175,239,170,42,162,170,255,225,0,32,66,216,36,143,72,169,202,136,164,143,72,45,194,64,251,225,0,32,98,56,32,143,136,171,234,136,248,130,62,42,35,162,235,224,34,33,2,8,39,239,168,169,10,168,172,111,168,34,131,168,228,128,136,34,2,16,39,239,128,170,74,194,170,143,168,33,3,168,236,64,130,34,34,20,32,15,190,168,138,190,248,130,8,43,227,136,232,128,8,32,130,16,34,79,190,168,170,168,171,239,200,39,226,136,248,128,136,63,194,0,63,130,164,41,130,200,34,98,248,42,132,248,66,73,254,16,199,176,18,1,190,114,65,68,63,130,72,63,128,68,127,224,2,32,130,42,33,207,136,171,234,162,251,226,34,43,227,162,234,160,36,32,2,60,34,79,188,168,10,252,249,2,126,41,3,168,228,64,130,32,162,114,33,47,146,171,170,146,251,162,86,41,35,146,233,160,20,32,130,8,33,79,162,169,202,136,251,226,8,42,195,170,236,160,24,32,98,120,34,175,148,171,234,132,248,130,62,40,131,136,234,128,16,36,66,40,39,207,144,171,138,144,255,226,16,42,163,170,228,96,128,33,2,126,33,15,188,169,10,254,250,66,60,42,67,188,234,64,44,34,66,36,39,239,164,171,202,164,251,194,36,39,227,128,234,64,66,36,34,92,37,15,240,165,234,244,245,66,84,37,67,84,230,64,68,33,66,16,47,239,16,175,74,180,255,130,24,47,47,42,20,96,130,10,7,188,10,3,188,10,7,188,14,3,248,36,131,248,4,71,252,35,226,42,251,234,170,171,234,136,251,226,8,41,195,170,232,128,8,32,2,62,34,47,190,170,170,190,250,162,46,42,163,190,234,32,62,39,194,68,39,207,68,167,202,32,247,226,170,34,163,82,234,160,4,33,2,62,34,175,190,170,170,190,249,2,40,47,227,136,232,128,8,47,226,146,43,175,146,175,234,130,251,162,170,59,172,130,8,161,4,37,66,16,39,207,144,175,234,164,255,162,40,43,131,162,201,224,0,33,2,254,40,47,64,166,234,170,246,162,46,36,131,74,200,161,6,36,2,14,46,175,170,174,202,170,254,162,202,42,195,216,232,128,8,35,194,4,32,143,190,168,138,168,249,2,124,37,67,212,229,64,254,32,130,62,32,143,188,169,10,254,250,66,126,34,67,188,234,64,60,34,130,254,34,143,128,175,234,210,249,2,124,43,131,84,233,32,16,33,2,254,33,15,254,170,170,146,251,162,146,47,227,146,201,32,134,35,226,0,35,239,162,171,234,128,251,226,42,43,227,170,235,224,0,33,2,252,34,143,212,171,170,144,255,194,16,43,131,144,231,192,0,33,66,108,34,79,172,175,74,164,250,226,116,42,195,164,202,64,36,39,226,64,43,207,164,171,202,164,251,194,32,39,195,164,233,128,102,33,2,86,41,47,214,169,42,254,249,2,126,36,67,168,233,0,110,33,2,40,36,79,186,160,10,234,250,162,234,42,163,226,234,160,164,40,130,72,254,234,144,168,234,226,250,66,174,58,76,164,18,66,108,37,66,16,47,239,184,173,74,146,249,2,126,42,67,164,225,128,102,34,34,20,35,239,136,171,234,170,251,98,34,43,227,162,235,224,34,32,130,62,34,47,190,170,10,190,250,162,106,39,227,106,234,161,38,125,2,144,19,239,212,52,133,20,180,35,248,36,131,248,4,71,254,33,2,124,33,15,184,169,10,254,250,66,122,57,14,254,5,64,146,17,7,222,19,79,212,32,131,148,78,35,248,36,131,248,4,71,252,33,66,20,35,239,148,171,234,136,251,226,42,42,163,182,234,32,38,34,66,126,34,79,144,169,74,254,250,130,68,42,163,252,234,128,72,33,66,62,33,79,190,170,42,190,250,34,62,40,131,190,233,64,34,32,2,126,36,143,92,165,74,92,245,66,92,36,131,220,234,161,24,33,2,60,34,79,188,170,74,188,250,66,60,33,3,212,234,160,184,33,2,254,34,143,146,170,170,254,241,2,254,42,175,186,8,160,134,33,2,254,41,15,188,169,74,254,249,66,188,57,14,252,20,66,124,33,2,126,34,79,254,173,42,136,251,226,16,41,195,164,229,64,136,17,7,222,18,79,212,108,138,148,78,35,248,36,131,248,4,71,254,33,66,62,249,74,190,168,138,190,250,162,62,42,163,190,233,64,34,34,130,254,242,138,254,170,170,254,250,162,254,36,67,124,228,64,124,47,226,40,47,239,170,175,234,128,251,194,0,47,227,84,233,32,48,37,66,56,47,239,130,171,138,168,251,130,16,39,195,144,239,224,0,32,226,240,37,79,184,175,234,152,251,66,82,34,3,148,234,161,56,34,2,124,40,143,124,165,74,124,242,2,82,43,207,90,10,128,88,31,130,144,6,3,152,196,98,40,251,234,170,251,226,8,251,224,130,32,130,62,33,79,254,170,42,190,250,34,62,40,131,190,232,128,8,33,2,254,37,15,162,171,202,212,251,162,16,47,227,144,233,0,16,31,128,80,2,15,254,18,38,96,32,143,190,170,175,190,32,143,190,34,34,250,34,79,112,160,10,114,245,66,112,40,35,210,234,64,120,33,2,254,33,15,124,165,74,124,165,79,254,34,3,84,236,161,58,32,194,112,37,79,56,175,234,84,169,47,124,37,66,124,245,65,124,34,130,254,33,15,124,161,10,254,165,79,254,32,2,124,244,65,124,34,130,254,34,143,126,172,138,126,164,143,254,36,67,168,225,0,238,34,66,126,34,79,254,172,42,188,249,2,42,37,195,172,232,160,24,34,2,124,40,143,126,165,74,98,244,130,126,36,3,190,234,33,62,33,2,254,42,79,254,170,138,254,170,175,254,42,130,236,242,160,40,36,66,254,36,79,254,170,170,254,161,79,254,41,66,136,245,98,2,9,15,254,12,3,116,10,131,38,38,143,190,170,175,190,32,143,190,4,15,254,4,15,254,144,35,248,96,139,254,170,175,190,32,143,190,46,226,170,46,239,170,174,234,72,175,239,72,39,226,36,249,128,230,16,1,0,63,132,64,4,7,252,4,0,64,36,130,72,63,128,8,251,232,162,170,170,170,81,74,162,63,132,64,255,224,64,68,71,252,17,199,214,18,7,222,85,39,204,65,40,64,127,224,64,68,71,252,65,196,16,119,234,82,39,207,66,39,194,234,189,206,126,8,129,24,16,102,120,36,130,72,252,130,126,116,133,72,84,165,74,118,96,66,32,130,8,125,229,20,138,32,0,63,128,0,0,0,0,127,192,0,65,7,158,162,129,4,0,3,248,4,15,254,4,0,64,20,0,128,65,7,158,162,128,0,126,1,32,19,130,136,37,4,32,141,131,6,65,7,158,162,129,68,63,0,16,17,1,252,0,79,228,1,64,8,33,3,222,82,136,132,63,192,144,9,15,254,9,0,144,17,2,16,65,7,158,82,136,132,63,130,8,36,130,72,36,128,162,18,38,30,65,7,158,162,129,4,3,131,208,37,2,72,36,130,68,68,40,64,65,7,158,162,129,68,7,131,192,36,3,252,12,65,84,36,132,64,65,7,158,162,128,132,8,1,252,37,68,148,10,65,36,37,64,136,65,7,222,146,128,0,121,225,18,17,65,18,29,175,20,65,0,16,65,7,158,162,128,0,127,196,0,95,5,16,95,4,0,127,192,0,65,7,158,162,128,0,63,130,8,63,130,8,63,128,0,255,224,0,65,7,158,162,129,4,4,2,64,63,132,64,63,128,64,4,15,254,65,7,158,162,129,0,31,194,128,79,128,128,15,192,128,8,0,128,65,7,158,162,129,0,31,194,4,94,65,36,18,65,228,1,64,8,65,7,158,162,128,0,8,0,64,63,128,0,17,0,160,4,7,252,65,7,158,162,129,4,127,192,4,127,64,4,62,66,36,62,64,12,65,7,158,162,129,4,127,129,8,18,130,16,127,138,8,32,131,248,65,7,158,146,128,132,16,7,220,21,65,84,21,66,84,53,196,128,65,7,158,162,128,0,34,0,252,98,66,36,37,66,136,80,8,254,65,7,158,162,128,4,17,2,8,127,192,4,63,130,8,32,131,248,65,7,158,162,129,4,16,7,188,18,65,164,114,65,60,82,66,0,33,3,222,82,136,132,34,131,176,34,67,156,4,15,254,4,0,64,65,7,158,146,128,128,36,3,248,68,15,254,10,0,164,18,70,28,65,7,158,162,128,12,247,1,16,37,195,80,149,5,124,32,5,254,65,7,158,162,129,4,4,0,160,49,141,246,4,3,248,4,7,252,65,7,158,146,131,240,34,5,248,4,143,254,4,131,248,4,0,192,65,7,158,162,129,4,34,2,60,116,66,36,33,67,164,229,64,8,65,7,158,162,129,4,0,7,252,4,2,72,36,133,84,4,15,254,65,7,158,162,143,254,4,3,248,36,131,248,164,135,248,24,14,126,65,7,158,162,129,4,32,2,124,245,66,84,55,206,64,36,38,62,65,7,158,146,66,72,21,3,248,32,131,248,32,131,248,32,130,24,65,7,158,162,129,68,33,2,144,107,202,232,42,130,144,34,130,198,65,7,158,162,128,64,127,192,64,255,226,8,63,130,8,34,130,16,65,7,158,162,128,64,63,128,64,255,224,0,63,130,72,10,7,28,65,7,158,162,129,4,127,228,32,95,196,168,127,196,80,72,135,254,65,7,190,164,129,248,5,7,252,4,1,248,48,133,248,16,129,248,65,7,158,162,129,16,127,193,16,8,15,254,16,3,248,208,129,248,66,7,190,164,129,36,18,71,254,18,65,164,115,193,36,82,66,60,65,7,158,146,130,0,47,207,68,35,131,84,235,162,16,175,228,16,65,7,222,162,67,250,36,131,248,36,131,248,0,15,254,17,2,16,65,7,190,164,128,160,63,130,72,63,130,72,63,128,64,255,224,64,65,7,158,162,128,132,4,7,252,81,66,8,95,64,64,4,7,252,65,7,222,162,128,64,127,229,2,163,195,164,75,74,168,50,44,30,65,7,158,162,128,64,127,128,72,255,224,72,127,130,232,53,132,72,65,7,158,162,129,36,127,228,32,126,68,20,93,133,74,93,104,34,65,7,158,162,128,64,63,130,72,255,224,0,63,130,72,10,7,28,66,7,190,164,129,240,17,1,240,17,7,252,4,3,248,4,15,254,66,7,188,165,1,120,32,134,254,164,2,124,41,2,254,34,130,198,66,7,190,164,129,16,127,193,16,255,226,72,63,130,72,255,226,8,66,7,190,164,135,252,74,7,188,74,7,184,74,7,188,74,7,252,65,7,222,146,135,252,10,3,248,42,131,248,4,15,254,21,6,76,65,7,222,146,135,252,81,68,228,81,71,252,34,67,168,35,35,158,65,7,158,162,131,252,34,2,254,42,162,244,41,197,56,82,170,70,65,7,158,146,135,208,17,231,226,84,135,200,56,133,84,146,65,66,65,7,222,146,135,252,74,71,252,5,7,252,68,134,48,82,168,70,65,7,158,162,128,64,46,196,164,110,196,164,110,193,16,17,38,14,66,7,190,148,131,252,42,3,248,42,131,248,50,69,184,82,41,158,65,7,158,162,133,70,213,139,144,253,235,148,213,73,20,253,64,36,33,3,222,82,67,248,36,131,248,34,67,152,0,67,248,42,143,254,121,234,40,127,192,160,63,130,168,63,129,16,31,0,64,127,192,64,65,7,158,162,131,188,145,15,190,49,133,170,144,227,248,36,131,248,66,7,190,164,135,164,9,133,106,32,69,250,16,129,248,9,7,254,65,7,158,162,69,8,255,229,74,116,133,124,253,64,84,84,136,182,65,7,158,162,79,144,33,207,164,168,143,190,34,167,42,169,66,34,65,7,158,146,130,78,37,175,106,33,67,126,229,34,126,165,36,126,20,2,92,68,68,68,117,196,68,68,71,252,4,0,160,49,140,6,16,6,60,64,71,188,64,71,252,17,1,16,255,225,16,33,4,16,4,7,252,8,3,248,16,15,254,32,133,60,160,163,184,32,131,248,16,6,56,64,135,56,64,135,248,32,7,252,128,69,84,85,64,8,8,3,248,32,131,248,32,131,248,32,131,248,4,15,254,21,6,76,8,1,60,33,71,212,85,69,124,85,69,84,95,78,20,7,224,0,32,7,128,75,230,136,88,143,136,72,134,136,88,132,136,107,233,0,33,7,16,81,7,84,85,79,84,85,71,84,85,69,84,87,203,4,34,7,16,85,71,68,84,79,40,82,135,16,81,5,40,84,75,130,32,135,72,84,135,74,86,207,72,84,135,72,84,165,106,84,107,0,33,7,16,81,7,124,85,79,84,85,71,124,81,5,16,81,11,16,32,103,120,84,7,64,87,207,84,85,71,84,84,133,84,89,75,34,34,7,16,87,231,32,82,15,60,82,71,36,82,69,68,85,75,136,32,7,126,80,71,4,87,79,84,85,71,84,87,69,4,81,75,8,33,7,30,81,7,124,84,79,68,87,199,64,84,5,64,88,11,0,33,7,16,81,7,124,85,79,84,87,199,84,85,69,84,87,203,0,34,7,32,83,231,80,89,15,30,81,7,16,81,229,16,81,11,16,32,7,126,82,135,40,87,239,106,86,167,110,84,37,66,87,235,0,33,7,84,83,135,16,87,207,68,87,199,68,87,197,68,85,75,72,39,199,68,87,199,64,84,111,120,84,231,120,84,229,120,84,171,134,32,7,124,80,135,16,87,207,16,83,7,124,85,69,84,95,235,0,36,71,40,95,231,16,87,207,68,87,199,68,87,197,68,87,203,0,34,135,126,82,135,254,90,175,254,90,167,254,84,69,124,84,75,124,33,7,124,82,135,254,85,79,124,85,71,124,81,5,124,81,11,126,34,135,124,82,135,126,88,47,124,82,7,84,91,133,84,89,43,48,4,1,176,100,203,242,1,0,160,255,224,196,26,134,144,140,192,128,8,3,240,41,2,80,63,192,4,4,143,254,10,3,148,200,128,198,32,15,188,42,68,164,171,193,64,255,224,64,26,70,152,138,128,198,4,135,252,36,1,104,37,4,72,8,15,254,18,67,24,84,129,134,65,2,84,137,36,0,32,228,112,2,15,254,10,3,20,212,129,134,120,132,190,121,68,62,184,130,156,58,143,254,9,1,138,106,64,194,136,69,14,7,143,200,36,135,126,36,143,202,36,164,102,69,40,8,136,5,124,0,143,144,34,135,68,40,47,124,33,4,16,79,232,0,136,133,16,2,79,126,34,71,66,34,15,188,34,66,88,65,72,98,139,197,36,3,207,164,35,199,64,39,239,146,37,36,106,71,168,6,137,5,84,5,79,124,34,7,126,34,143,42,37,196,72,73,73,34,17,7,252,4,15,254,9,7,20,17,15,254,84,203,168,9,97,162,33,10,144,113,2,84,253,66,84,117,74,212,37,66,124,32,66,0,33,2,16,170,7,62,36,79,164,34,71,40,169,2,40,36,66,130,32,10,252,117,66,84,253,66,84,119,202,192,36,34,66,35,226,0,32,10,190,114,2,32,251,226,40,114,234,170,34,162,74,41,34,38,4,2,72,63,132,68,127,192,0,36,129,80,127,193,80,36,132,68,32,10,254,114,130,40,255,226,170,122,170,174,44,34,130,47,226,130,68,2,126,9,34,40,76,66,72,21,15,254,21,2,72,68,64,64,59,194,4,121,68,136,179,66,74,85,15,254,14,3,88,196,96,64,84,161,10,254,165,148,149,69,40,101,75,244,68,165,74,158,160,64,33,10,136,119,226,66,251,194,0,119,234,144,37,66,146,37,2,32,33,10,164,119,194,16,255,226,36,117,42,160,33,2,100,33,130,96,34,10,188,116,66,254,245,2,92,118,138,200,39,226,72,37,66,98,32,74,164,115,98,84,251,66,46,116,10,188,34,66,60,34,66,60,34,42,148,119,226,36,250,66,72,118,234,36,36,130,238,34,34,0,32,10,190,113,34,92,245,2,190,114,74,188,34,66,60,34,66,44,35,234,148,112,130,126,250,162,72,113,138,254,35,130,84,41,34,16,33,10,252,116,66,124,244,66,124,116,74,124,33,34,254,34,130,70,38,10,190,114,34,254,248,130,190,122,170,254,34,130,42,43,226,66,0,3,240,33,3,240,33,3,240,36,2,68,34,130,144,48,130,4,123,196,136,122,132,190,120,133,26,106,99,248,32,131,248,32,143,254,123,192,132,41,65,140,41,68,164,17,1,16,255,225,16,33,4,16,35,98,18,85,40,186,65,98,18,243,97,90,161,36,18,37,160,36,4,0,160,63,140,6,63,130,8,63,128,0,123,196,164,41,68,164,8,131,240,10,15,254,25,3,240,209,1,240,121,194,164,25,70,172,10,7,188,10,3,184,10,7,188,10,7,156,41,65,140,107,65,140,17,7,252,0,3,168,42,131,168,40,135,188,74,66,148,74,65,140,32,1,54,121,36,210,123,164,22,125,37,118,253,165,82,85,36,246,251,96,18,113,37,90,115,96,18,251,109,218,169,47,146,173,170,164,253,202,20,186,109,28,253,73,8,169,111,188,74,66,148,74,65,140,4,0,128,17,3,224,4,0,144,63,128,64,36,132,68,20,0,128,34,15,120,34,143,106,37,166,134,18,35,224,8,135,252,37,4,200,17,7,252,17,1,240,17,15,254,40,133,20,191,161,80,36,128,192,17,7,158,75,71,136,75,73,34,60,0,136,63,194,80,68,128,192,8,207,48,168,132,18,123,202,8,33,47,190,32,138,172,252,160,24,4,15,254,4,7,252,41,3,164,41,143,208,19,197,136,149,195,42,16,135,200,17,195,136,16,135,200,35,227,136,104,137,20,41,68,34,34,15,190,36,42,146,117,98,58,215,226,146,115,173,86,33,45,6,16,65,4,125,65,20,255,65,20,81,197,212,80,69,4,191,224,0,16,1,28,125,65,28,17,79,220,17,69,212,83,229,0,191,224,0,32,34,242,116,162,106,42,175,106,34,171,74,164,42,134,224,9,254,16,135,200,18,225,18,252,129,40,20,133,212,81,37,32,191,224,0,36,130,254,244,130,254,36,143,90,47,227,84,165,74,40,127,224,0,16,1,62,122,33,42,254,66,160,106,234,234,42,162,164,74,169,178,17,1,18,123,225,20,255,226,136,109,234,178,45,226,146,73,233,128,0,7,128,3,231,136,72,135,136,0,132,136,48,129,200,227,224,0,1,15,16,15,239,16,145,15,124,2,73,40,97,3,168,228,64,130,0,15,190,32,143,136,168,138,136,216,136,136,248,136,136,250,128,16,0,15,190,32,143,136,168,138,190,216,136,136,248,136,136,248,128,8,0,71,196,16,71,222,84,69,68,109,68,76,124,68,68,125,64,8,0,143,136,34,175,174,171,170,234,218,168,174,250,136,170,250,32,30,0,143,136,32,143,190,168,138,136,219,232,162,250,40,162,251,224,34,2,15,160,35,239,208,169,10,158,217,8,144,249,232,144,249,0,16,1,15,136,35,239,162,169,10,148,217,136,144,249,40,146,248,224,0,1,15,80,39,207,208,169,10,254,218,136,168,250,136,170,250,96,64,1,15,144,33,207,164,173,138,144,219,200,212,249,72,148,249,192,0,2,79,168,35,15,162,169,234,128,219,232,162,251,232,162,251,224,0,0,15,190,33,79,182,169,74,190,218,8,160,250,8,160,250,0,64,0,15,190,32,15,190,170,170,170,219,168,174,250,168,170,250,160,34,249,194,20,249,74,156,168,10,190,216,136,156,248,136,136,251,224,0,0,143,148,34,47,128,169,202,136,219,232,136,250,200,202,250,128,16,0,207,176,32,175,164,169,74,190,216,72,164,249,72,132,249,64,8,0,15,188,34,79,188,170,74,188,218,168,188,250,136,170,251,96,0,1,15,136,35,207,164,169,138,190,216,8,188,250,72,164,251,192,0,2,15,174,39,175,170,170,234,250,221,168,222,255,168,138,249,32,38,3,207,164,35,207,164,171,202,128,219,232,136,250,232,168,253,224,0,7,239,138,34,143,174,170,138,222,218,72,188,250,72,188,250,64,44,0,143,190,33,15,188,173,74,156,216,8,190,250,168,170,250,160,126,0,143,190,34,143,190,170,170,190,218,168,190,250,136,190,253,32,158,7,111,146,37,175,182,173,170,146,217,136,164,252,168,176,248,64,56,10,175,108,39,239,168,175,234,144,223,200,144,255,232,144,250,128,68,1,79,144,34,239,228,171,234,164,219,232,164,251,232,128,254,160,170,0,143,190,33,15,188,168,74,170,218,168,202,248,8,190,250,160,126,0,239,136,35,239,170,170,202,190,218,136,182,250,200,182,250,64,76,2,143,254,42,175,254,170,170,254,216,8,252,252,72,252,250,128,254,0,111,184,32,143,190,170,170,190,218,168,190,248,136,190,248,0,170,0,7,252,8,3,64,202,65,40,103,0,168,50,140,36,10,32,64,34,34,20,59,226,8,249,200,136,219,234,144,219,232,200,248,128,62,255,193,0,31,130,8,33,5,248,16,129,248,4,2,120,36,5,254,247,130,72,52,172,106,9,99,252,32,67,252,4,2,124,36,5,254,19,199,160,19,231,164,20,67,248,32,131,248,4,2,124,36,5,254,1,71,254,73,71,232,92,170,182,8,35,248,32,131,248,68,11,254,17,9,80,81,239,228,149,75,200,213,67,250,32,131,248,68,11,254,121,4,144,73,231,162,20,33,18,92,165,10,80,37,194,240,160,4,0,7,124,84,69,72,117,194,68,182,74,84,184,140,148,18,34,64,0,7,124,82,133,40,114,130,254,34,139,168,162,139,72,196,128,136,113,5,16,87,199,16,33,2,126,185,10,16,162,139,168,228,64,130,1,7,40,84,69,130,115,194,36,162,75,180,162,139,162,226,32,30,120,4,190,72,135,136,17,1,30,91,37,82,81,37,210,241,224,0,114,69,36,84,71,222,36,66,84,180,202,68,164,75,68,229,64,72,112,5,124,85,71,84,37,66,254,181,74,84,165,75,84,229,64,140,112,197,112,84,7,80,37,2,126,185,10,16,165,75,146,229,0,32,1,7,8,87,229,66,114,2,36,34,139,48,162,43,162,225,224,0,8,14,128,168,11,238,234,164,170,106,164,170,106,173,46,42,4,64,112,133,8,87,229,74,116,130,126,181,42,82,165,75,200,233,65,34,1,7,16,82,5,36,119,226,2,160,11,188,162,75,164,194,64,60,1,7,16,87,197,16,127,226,16,177,10,124,161,11,16,239,224,0,2,7,62,94,5,40,113,34,110,176,10,126,162,139,42,228,160,134,4,135,74,86,197,72,118,162,70,177,10,254,161,11,144,225,0,16,1,7,16,85,5,124,121,2,16,175,235,40,162,139,42,228,160,134,8,71,88,80,133,8,115,226,200,180,138,72,164,139,64,235,225,0,1,7,8,87,229,36,114,130,24,182,74,170,162,139,40,228,128,136,2,7,16,87,229,0,114,66,66,178,138,40,162,139,16,226,128,68,2,7,16,87,197,68,119,194,68,183,202,80,165,75,72,230,64,66,119,197,4,87,199,64,36,66,60,177,10,8,186,44,170,17,128,0,1,7,30,81,5,124,116,66,124,36,75,124,161,11,126,193,0,16,0,7,124,85,69,124,117,66,124,49,10,254,163,139,84,201,32,16,4,7,64,87,5,174,114,162,42,175,171,42,162,171,94,233,1,8,112,101,120,84,135,126,36,130,126,182,42,106,182,172,136,9,65,34,0,135,126,84,5,72,116,130,78,36,139,72,165,235,82,201,33,30,1,7,8,87,229,36,113,130,126,176,10,60,162,75,164,195,192,36,10,7,78,80,165,234,116,194,74,180,170,234,164,203,168,202,129,24,0,135,30,92,165,126,116,162,158,180,138,126,180,140,190,20,130,62,1,71,84,95,229,84,117,194,64,183,234,16,175,235,56,197,64,146,1,7,82,87,229,0,127,226,16,47,235,170,170,171,162,200,160,132,0,199,112,81,5,254,113,2,124,37,75,124,165,75,124,193,0,254,112,197,112,81,7,124,37,66,124,177,10,254,169,43,186,200,160,134,1,7,8,87,229,84,119,226,84,37,203,64,167,203,84,200,129,54,116,69,40,87,199,16,39,131,32,175,202,64,175,203,16,207,224,0,1,7,8,87,229,66,119,226,64,39,235,106,167,235,106,202,161,38,119,229,20,80,135,126,34,162,88,177,10,254,179,140,84,9,32,16,119,229,36,83,199,36,35,195,166,167,202,4,175,235,90,226,64,218,114,133,254,82,135,0,47,227,40,47,234,170,170,171,214,200,32,134,0,103,248,85,69,36,119,130,36,183,202,16,175,235,16,226,128,68,239,234,132,175,78,142,72,68,244,106,196,228,104,77,164,37,68,232,119,229,100,85,71,126,37,162,84,183,202,84,181,76,164,10,161,82,114,133,170,86,199,254,34,130,124,177,10,124,177,12,254,2,128,68,112,197,112,85,71,56,47,226,84,185,42,124,165,75,124,197,64,124,116,133,232,80,167,232,43,226,232,180,138,232,165,171,74,213,160,166,119,197,84,87,199,32,39,226,162,63,170,170,175,171,34,239,160,14,114,133,254,82,135,94,42,162,254,186,170,190,186,172,190,10,32,166,113,5,126,85,71,124,37,66,124,53,10,126,165,75,122,233,1,124,114,165,84,82,167,126,38,162,82,182,170,126,165,75,124,229,64,90,114,133,126,90,135,254,38,194,182,176,10,124,165,75,84,226,128,198,114,69,116,80,103,124,37,66,116,176,170,252,180,140,48,4,129,134,6,1,128,101,129,32,12,7,32,5,1,144,99,0,208,49,0,48,16,2,124,218,69,36,98,73,76,40,13,188,42,76,164,43,193,36,16,2,126,216,133,16,99,201,36,42,77,188,42,76,164,43,193,36,34,134,168,148,134,94,76,138,72,85,203,106,84,137,72,84,130,72,18,130,126,218,133,124,36,77,124,52,77,124,49,13,254,82,130,68,17,2,124,222,197,84,38,205,124,48,13,74,54,205,72,86,162,70,32,67,148,72,201,4,125,69,76,124,101,92,124,69,68,84,72,196,65,7,16,151,207,148,169,79,148,175,239,144,169,10,168,138,65,194,66,7,62,148,15,188,168,143,144,171,239,170,172,170,146,138,161,132,64,71,56,146,143,168,170,207,170,170,175,170,170,170,168,140,225,130,18,133,176,82,79,156,32,3,240,66,3,248,36,131,248,36,132,24,65,7,16,149,66,56,249,10,254,250,138,168,250,170,170,138,161,198,64,135,190,144,143,190,170,175,170,171,239,136,169,202,170,136,129,136,66,39,20,147,226,42,251,234,170,251,234,136,251,234,136,168,129,136,17,69,216,81,47,206,4,15,254,0,7,252,0,3,248,32,131,248,17,207,212,18,103,220,85,71,200,65,72,64,255,226,8,63,128,0,32,15,252,36,71,84,37,79,212,85,71,84,81,7,42,82,165,70,63,128,64,127,197,84,0,1,248,0,7,252,8,1,248,0,128,48,63,128,64,127,197,84,0,3,252,36,3,248,36,132,136,74,137,16,63,128,64,127,196,68,53,128,0,4,7,252,16,128,144,6,7,158,63,128,64,127,197,84,0,7,124,17,2,124,145,5,124,32,5,254,63,128,64,127,197,84,0,0,64,127,193,16,14,15,30,17,2,16,63,128,64,127,197,84,0,8,32,95,200,32,95,193,36,82,200,32,63,128,64,127,197,84,10,7,188,10,3,184,10,7,188,10,0,160,63,128,64,127,197,84,8,3,248,17,0,160,127,193,16,14,7,28,63,128,64,127,197,84,4,4,12,47,4,84,34,128,254,33,4,124,63,128,64,127,197,84,143,132,168,15,205,36,74,68,212,111,68,12,127,192,64,255,233,106,41,7,208,41,239,228,69,71,200,69,68,226,127,192,64,255,233,82,32,5,190,210,163,62,90,162,190,232,129,62,17,5,16,93,5,18,253,64,24,87,5,80,109,36,82,124,224,64,32,10,60,186,74,36,251,194,36,170,74,188,218,72,164,255,224,128,34,10,32,187,234,66,251,160,42,171,170,166,218,8,162,249,224,128,16,5,62,93,37,18,253,96,32,85,229,82,109,36,82,125,224,64,34,138,40,186,170,44,251,130,40,170,138,168,218,168,170,255,96,128,32,10,60,186,74,60,250,66,60,170,138,170,218,72,180,250,32,128,32,10,124,185,10,124,250,66,126,168,10,188,218,72,164,251,192,128,32,10,60,186,74,36,251,194,8,170,234,168,218,136,184,252,224,128,35,234,34,187,234,32,250,224,36,170,170,174,218,72,174,252,64,158,63,130,8,63,128,64,127,196,68,127,196,68,127,192,66,4,32,62,63,0,0,255,193,18,32,231,248,36,131,248,36,131,250,4,32,62,123,196,164,123,195,248,36,143,254,36,131,248,36,131,250,4,32,62,20,1,32,32,7,254,162,3,252,34,3,252,34,2,32,63,226,0,18,1,16,63,198,32,191,194,32,63,194,64,255,224,64,4,0,64,18,3,252,98,11,252,34,3,252,32,7,248,17,1,60,32,68,24,2,135,36,84,5,126,124,133,126,116,133,126,84,135,200,199,224,64,34,130,36,116,13,254,84,130,126,84,136,254,116,133,72,87,231,64,59,130,168,59,130,168,59,130,32,127,202,32,47,130,32,63,194,0,36,131,12,77,15,254,85,71,222,85,71,222,87,71,222,65,4,16,119,130,74,54,174,86,10,1,16,110,200,66,127,194,72,21,7,252,4,7,252,17,5,20,149,32,160,49,140,230,4,3,248,21,7,252,79,138,32,95,192,80,72,136,96,9,3,248,196,99,248,21,7,254,35,207,160,83,231,168,18,135,72,26,1,240,100,203,250,21,7,252,121,1,30,255,67,72,85,73,162,49,141,246,4,3,248,21,7,252,34,15,188,38,143,144,70,135,228,73,9,232,100,107,248,21,7,252,65,2,254,132,4,254,37,68,84,27,102,232,132,99,248,21,7,252,120,132,190,121,68,62,120,138,220,58,129,248,100,75,250,21,7,252,4,1,176,96,203,250,21,7,252,32,133,20,138,39,28,170,175,190,66,135,36,146,15,254,170,15,168,170,143,168,2,161,170,228,96,128,65,7,8,151,239,144,169,15,156,169,79,148,2,67,164,197,64,136,66,135,36,146,2,126,250,10,190,250,170,170,250,160,36,52,172,146,64,7,124,145,2,84,251,138,144,255,234,144,249,0,16,25,14,16,65,7,16,145,226,16,249,10,188,250,74,164,250,64,36,27,206,0,64,135,8,144,226,8,251,234,162,251,234,160,250,0,32,52,12,128,64,103,56,144,130,8,251,234,136,249,202,170,248,128,8,24,142,8,65,71,20,146,66,110,250,74,164,251,74,172,250,64,36,27,78,40,40,129,80,127,201,4,63,4,32,63,130,72,63,130,72,255,224,0,64,135,8,145,2,36,251,234,130,251,202,164,250,64,36,27,206,0,64,135,136,139,225,8,251,234,136,248,138,190,248,128,8,27,238,0,65,7,16,151,194,16,249,10,184,248,10,184,250,128,40,27,142,40,64,135,8,151,226,16,251,234,210,249,234,146,249,224,18,25,174,20,64,7,62,144,130,16,251,234,170,250,170,170,250,160,34,58,172,36,66,7,16,151,194,40,249,10,168,252,106,168,250,128,40,58,140,72,66,7,16,151,194,0,250,74,194,250,138,168,249,0,40,52,76,130,21,7,252,8,15,254,40,133,244,162,39,248,36,131,248,36,135,252,67,231,2,145,226,2,251,234,132,251,234,132,250,64,20,56,76,12,64,7,62,144,130,62,250,170,190,250,170,190,252,128,48,58,236,64,64,7,126,144,2,62,250,170,174,251,170,170,250,160,42,58,172,38,68,71,36,145,226,104,251,74,190,250,74,174,250,64,36,53,236,128,65,7,94,149,162,84,249,170,144,248,138,190,248,128,8,27,238,0,64,71,4,151,66,94,245,74,116,245,202,84,247,64,4,57,76,8,65,7,30,147,34,12,251,42,136,251,234,136,249,192,42,24,142,24,64,103,56,144,130,18,251,202,136,249,74,190,248,128,44,52,172,24,65,2,84,137,36,56,92,8,240,50,7,248,36,131,248,36,143,254,65,7,8,151,226,66,251,202,128,255,234,168,250,128,42,52,172,134,64,7,224,154,226,234,250,170,234,248,170,202,250,224,216,40,140,8,65,7,124,145,2,60,249,10,254,250,74,188,250,64,60,26,78,44,65,7,124,145,2,126,250,74,210,251,202,212,249,64,8,57,76,34,95,6,160,171,228,234,250,170,170,254,170,170,255,64,36,50,172,50,65,71,20,147,98,20,249,74,182,249,74,148,251,96,20,57,76,20,67,199,36,147,194,36,251,202,128,250,170,172,251,128,42,59,108,32,64,7,60,146,66,60,250,74,188,248,10,254,252,32,126,52,44,126,79,231,130,153,34,146,255,234,146,251,170,170,251,160,130,47,236,130,66,7,76,148,66,108,252,74,252,250,138,168,250,160,42,52,108,128,64,135,148,138,33,8,251,202,132,248,138,144,248,160,98,58,76,28,67,231,170,147,226,42,251,234,162,251,234,182,251,224,34,58,172,68,64,7,124,145,66,100,250,74,252,250,202,252,250,64,44,55,172,8,66,167,170,149,66,42,250,170,128,251,234,170,251,224,42,59,236,0,64,135,62,144,130,20,251,234,148,251,234,162,250,160,42,57,76,34,65,71,84,159,226,84,253,202,192,255,234,136,251,224,28,58,172,8,71,199,84,151,194,0,251,202,128,255,234,144,251,192,4,57,76,8,65,71,100,146,66,44,255,106,164,255,74,172,250,64,42,59,44,32,71,231,64,155,194,36,251,202,164,251,202,144,251,192,84,24,142,54,64,135,190,146,34,62,250,42,190,248,10,190,248,128,28,24,142,62,64,135,190,146,34,62,250,10,190,250,170,190,250,160,42,26,46,70,71,199,84,146,130,16,250,202,210,255,202,212,255,192,18,55,236,2,34,15,188,38,143,144,66,135,244,146,3,248,36,131,248,36,143,254,65,7,122,145,66,126,251,74,218,248,234,188,250,64,60,58,76,60,67,199,36,147,194,36,251,202,128,251,106,218,251,96,90,49,44,54,64,7,124,149,66,124,249,10,180,253,42,144,251,64,82,57,12,16,64,103,120,146,162,20,250,10,190,252,138,190,248,128,42,58,172,62,74,71,244,170,68,254,244,170,250,245,170,250,244,160,234,53,172,100,71,231,40,159,226,170,255,234,128,251,202,128,255,224,16,53,76,178,71,231,16,151,226,82,250,202,128,251,202,132,251,192,4,59,204,4,65,199,148,145,194,20,251,234,170,251,234,128,251,224,18,56,204,50,64,143,232,85,239,234,84,71,202,9,35,248,36,131,248,36,143,254,65,7,254,152,130,190,248,170,254,250,170,190,250,160,190,210,162,38,64,6,254,168,64,212,250,106,250,250,10,164,255,64,164,210,162,80,66,135,124,145,2,124,249,10,254,249,74,254,248,0,124,52,76,124,65,71,62,144,130,62,250,170,182,250,42,190,248,64,62,57,76,12,66,134,254,170,160,254,250,170,254,248,10,252,252,64,124,50,140,254,80,15,188,82,71,36,35,207,164,170,79,188,32,15,128,39,226,0,81,15,144,87,199,84,37,79,212,175,239,144,33,15,168,34,130,68,80,143,136,84,135,62,44,143,72,165,79,84,38,47,64,43,226,0,80,79,184,81,7,126,33,143,164,172,47,164,34,79,164,36,66,132,82,15,188,82,71,72,35,239,170,170,175,190,33,143,170,34,162,70,81,79,190,81,71,8,39,239,144,170,239,226,34,79,174,34,66,44,82,15,190,85,39,58,32,47,186,168,47,186,34,175,186,32,162,4,83,207,132,80,135,126,33,175,168,169,143,254,35,143,84,41,34,16,82,143,252,82,135,254,33,15,124,165,79,124,37,79,254,36,66,76,81,79,190,81,71,126,33,15,190,174,175,190,34,175,190,34,162,38,113,5,16,82,143,196,136,39,40,82,135,40,82,135,40,82,133,72,121,196,148,73,79,214,134,7,156,73,71,148,73,71,136,73,69,162,112,133,8,80,143,190,136,135,8,83,231,34,82,39,34,83,229,0,113,5,60,82,79,180,138,199,32,83,231,2,87,167,2,80,165,4,112,69,120,85,15,208,141,7,126,85,7,72,84,167,102,85,37,8,112,69,56,82,15,160,139,231,32,82,7,62,85,39,82,89,229,18,113,5,16,83,239,162,141,71,24,82,71,66,83,199,36,82,69,60,119,197,84,87,207,212,143,199,16,95,231,56,85,71,146,81,5,16,113,5,62,82,175,190,138,167,62,81,7,40,87,231,8,80,133,8,117,69,16,87,239,144,139,71,82,82,7,254,82,71,24,82,69,66,113,5,126,84,47,160,139,199,36,85,135,36,84,39,60,82,69,60,113,5,126,84,47,168,143,231,40,87,199,68,85,71,16,82,165,78,113,5,126,84,47,136,139,7,32,83,199,40,87,231,0,82,69,66,119,197,84,87,207,160,135,231,146,87,231,86,87,231,18,87,229,6,33,15,144,171,143,144,175,207,144,35,130,84,105,5,82,80,40,254,34,143,164,175,239,160,171,207,180,37,69,72,89,69,34,79,232,0,127,228,72,127,228,144,84,135,254,82,133,248,84,133,248,74,43,30,32,4,126,250,138,168,255,234,170,250,162,86,40,37,70,80,8,254,34,164,28,248,138,190,250,42,190,250,34,62,42,37,38,80,8,254,47,228,170,255,234,146,255,234,162,251,162,130,88,101,0,80,40,254,32,132,62,249,74,170,251,234,136,251,226,42,43,229,98,82,104,254,65,4,40,150,74,146,199,132,72,151,143,72,39,164,84,132,128,100,63,226,40,63,194,80,42,131,252,40,130,248,40,132,250,73,72,206,249,2,40,117,69,34,180,130,176,84,194,250,10,128,250,9,64,206,113,197,16,255,226,82,117,193,84,46,97,24,126,105,40,25,1,8,4,15,254,36,132,254,116,130,126,78,3,24,222,97,40,25,1,8,60,66,8,57,2,32,56,66,8,253,33,2,36,71,200,5,0,32,56,130,16,58,2,8,249,2,36,120,128,16,255,225,32,34,36,30,40,131,16,250,66,8,121,0,56,60,0,120,124,0,122,124,32,62,40,131,16,250,66,72,117,3,248,36,131,248,36,143,254,32,130,24,40,131,20,250,130,20,124,128,80,63,193,4,32,197,248,16,129,248,40,67,56,32,79,184,32,35,92,4,15,254,4,7,252,32,131,248,36,130,144,50,79,200,35,71,136,19,5,20,93,133,18,93,46,14,40,131,48,32,207,176,32,199,176,17,2,254,99,138,84,41,34,16,40,131,16,250,66,8,125,1,72,255,193,16,126,201,34,20,128,248,40,131,16,34,79,136,33,7,168,16,167,172,18,131,148,85,65,34,41,3,40,249,66,40,121,0,64,127,197,4,31,1,64,255,226,16,40,131,52,248,162,20,120,128,0,63,130,168,255,227,72,211,1,140,40,131,16,250,66,8,121,2,72,73,7,252,36,131,106,36,99,98,2,3,254,36,131,254,45,131,108,36,162,32,37,4,160,68,136,252,2,3,254,36,131,254,45,195,106,37,130,224,35,197,224,66,40,30,2,3,254,36,131,254,45,195,74,34,130,64,47,196,168,82,72,96,2,3,252,42,3,248,42,131,248,41,66,216,32,196,240,73,73,12,2,3,254,37,3,252,37,67,252,32,2,248,34,7,254,74,137,36,2,3,254,37,3,252,37,67,252,34,3,252,34,4,248,66,11,254,2,3,252,37,3,252,37,67,252,32,2,168,39,5,252,74,137,36,17,71,212,83,231,212,85,199,212,81,197,148,83,229,128,81,72,34,2,3,252,37,3,252,37,67,252,37,2,136,63,196,168,71,11,254,2,7,252,74,7,252,74,71,252,84,69,222,84,71,212,148,66,204,18,160,156,127,229,28,126,165,84,125,229,36,89,229,36,148,64,4,18,66,62,110,10,26,32,103,252,85,71,252,4,15,254,82,72,146,248,138,136,250,170,170,250,162,62,248,130,42,58,174,42,3,234,128,250,138,168,250,138,222,254,162,42,244,162,106,56,174,18,1,170,164,249,10,144,255,234,144,249,2,124,248,2,60,58,78,36,3,202,128,249,10,156,250,74,200,251,2,40,252,226,18,58,206,8,9,10,96,249,10,164,255,234,128,250,66,82,251,194,68,58,142,16,18,138,198,248,138,190,248,138,254,250,34,24,250,130,24,55,238,8,1,74,162,113,2,30,250,167,18,170,103,252,85,71,252,4,15,254,42,68,82,248,138,190,248,10,190,250,34,34,251,226,8,58,206,74,2,170,144,249,10,164,251,202,144,255,226,36,252,162,48,56,142,48,8,106,184,249,10,254,248,10,164,249,130,126,248,2,60,58,78,60,2,74,188,88,136,168,218,72,194,248,0,60,169,74,148,250,74,164,229,74,136,64,137,136,136,141,190,138,175,170,3,234,170,170,175,170,171,234,64,64,9,188,137,13,188,137,79,254,0,10,188,170,79,164,171,202,64,91,200,164,219,200,164,255,224,66,169,10,254,250,74,164,165,139,38,88,104,248,218,168,144,251,192,8,169,42,190,248,138,190,165,75,34,34,7,32,87,143,168,170,143,168,170,143,168,2,175,170,84,105,130,16,3,156,40,135,200,84,135,254,84,135,200,0,143,232,40,132,136,33,7,16,87,239,180,173,47,188,170,79,188,2,79,188,80,9,126,33,2,146,15,234,80,165,2,254,89,4,254,201,4,254,73,4,255,65,4,16,31,242,72,164,74,131,56,132,72,195,4,16,66,132,76,1,15,20,146,41,79,151,25,0,151,233,66,244,41,66,132,32,126,33,7,191,74,23,129,75,223,229,150,95,253,148,31,225,72,24,134,64,4,124,4,74,124,160,2,254,73,44,146,79,228,128,72,20,127,65,7,159,162,143,190,8,39,190,66,7,190,40,161,134,40,167,28,32,130,127,48,2,254,172,42,126,160,2,126,32,66,127,32,130,48,34,242,57,66,150,41,191,82,37,42,98,178,50,82,37,42,146,81,35,255,226,34,74,168,170,74,162,250,18,33,34,210,162,50,2,32,32,132,255,168,20,255,200,4,128,79,244,213,85,85,127,85,85,83,79,247,16,66,72,66,255,244,74,240,132,255,64,133,8,96,132,255,85,231,250,145,175,250,42,200,138,63,146,9,36,162,104,9,131,8,7,242,20,39,255,213,171,234,162,251,226,34,35,226,136,63,254,136,125,198,162,80,207,241,72,111,255,10,79,255,10,71,252,42,140,167,252,129,62,34,175,254,170,138,191,186,42,190,170,43,190,170,175,241,127,132,72,127,143,254,170,175,254,64,15,254,4,3,252,132,47,255,16,241,184,32,132,8,103,252,8,64,132,63,66,20,33,67,244,33,14,15,10,150,149,80,240,146,136,255,5,79,254,146,9,76,152,111,64,5,255,2,67,72,169,251,241,43,84,149,73,84,140,72,165,17,244,145,73,20,159,127,128,136,127,244,33,66,18,65,24,146,70,66,249,114,98,34,36,34,119,125,34,82,37,34,82,39,34,82,36,34,9,15,255,9,1,199,235,170,170,170,170,105,166,154,171,170,171,109,33,2,126,249,10,254,169,10,255,170,79,202,163,211,8,47,239,136,32,175,136,171,255,168,170,191,170,50,195,185,50,85,243,80,40,254,71,244,6,250,132,127,161,154,42,250,130,16,39,247,152,162,194,74,39,242,6,34,130,255,49,154,42,58,130,16,47,245,24,74,196,202,0,127,248,32,130,8,56,132,255,72,140,136,48,129,20,34,36,65,65,2,255,0,200,74,137,243,250,36,244,170,223,244,74,68,244,136,32,1,31,16,79,232,131,242,21,255,84,85,73,83,4,44,164,113,64,130,127,249,66,33,45,247,0,183,242,144,35,226,18,32,34,14,67,196,68,79,231,66,135,238,137,78,239,146,79,228,41,100,180,135,105,225,18,105,41,35,252,7,191,202,23,146,72,199,138,73,53,97,4,2,126,40,69,8,79,236,146,73,36,254,66,132,73,72,149,7,0,128,4,248,74,255,170,15,160,170,10,160,170,15,160,138,8,62,35,228,34,122,40,34,251,226,34,250,34,62,32,2,128,48,2,127,66,228,93,73,79,255,85,73,220,149,78,221,37,85,218,133,96,249,255,241,16,127,229,18,255,240,64,24,15,254,0,195,240,192,3,255,0,64,127,248,10,128,171,255,165,170,90,191,170,95,165,139,248,33,253,240,82,125,64,84,253,129,20,255,33,18,81,17,26,17,70,16,240,129,255,240,8,127,132,31,127,144,129,74,20,145,136,162,132,16,4,15,255,4,7,254,68,36,66,68,36,66,68,164,68,4,0,64,0,2,16,33,0,0,97,2,16,33,2,16,35,1,216,0,0,0,124,68,136,107,255,210,139,23,162,74,39,148,73,71,136,72,134,182,123,244,132,72,135,136,17,5,63,93,21,17,81,21,209,97,248,17,1,0,62,251,37,42,82,165,38,250,5,63,80], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+146717);
/* memory initializer */ allocate([25,121,144,89,2,254,129,30,17,33,26,85,37,84,85,251,161,145,209,1,28,30,6,147,198,16,209,5,60,177,13,126,50,3,248,40,131,255,0,31,246,0,0,0,0,0,0,102,102,102,0,0,0,0,0,0,0,0,0,14,3,24,68,68,164,145,43,186,138,36,164,78,67,24,14,0,0,14,3,24,78,68,164,138,43,186,145,36,164,68,67,24,14,0,0,14,3,24,68,68,196,151,170,10,151,164,196,68,67,24,14,0,0,14,3,24,68,68,100,189,42,10,189,36,100,68,67,24,14,0,0,14,3,24,68,68,164,145,42,10,174,165,20,64,67,24,14,0,0,14,3,24,64,69,20,174,170,10,145,36,164,68,67,24,14,0,0,0,16,3,0,96,12,1,128,48,199,14,224,124,3,192,24,0,128,41,244,82,133,65,24,41,68,82,129,23,209,69,215,210,69,4,16,33,239,210,33,39,146,2,63,224,181,242,18,248,163,4,106,202,19,255,240,32,23,229,210,87,229,209,246,241,66,39,220,196,19,130,238,35,255,162,34,79,232,34,66,34,250,18,33,34,211,162,226,8,32,32,143,255,9,1,16,34,7,63,173,18,145,49,18,17,33,18,31,35,242,34,254,34,36,170,138,164,170,47,161,34,18,45,34,35,32,4,143,126,148,137,136,144,143,255,144,137,8,241,72,36,2,32,65,63,2,16,33,4,30,128,3,248,33,1,16,10,0,64,11,3,14,0,130,255,32,130,20,242,50,255,32,34,122,36,163,122,100,168,6,17,15,255,90,181,221,180,148,191,164,147,221,106,185,9,40,156,11,32,130,15,64,135,190,130,47,34,35,239,34,34,2,64,56,2,128,34,36,34,114,40,250,242,34,119,38,175,170,42,162,34,34,35,47,32,130,255,64,135,255,128,15,127,36,31,127,34,34,255,36,17,127,68,71,31,137,95,85,33,66,95,249,18,154,41,162,148,58,162,201,39,244,73,118,184,93,247,242,8,247,242,8,39,242,0,42,163,85,32,132,127,120,136,127,248,130,127,250,2,63,35,18,74,48,66,59,48,4,128,72,3,0,72,4,128,48,0,0,0,0,0,0,0,0,144,10,128,168,10,128,168,10,128,144,0,0,0,0,0,0,0,0,48,0,128,8,11,0,8,0,128,48,0,0,0,0,0,0,0,0,24,2,0,32,11,128,36,2,64,24,0,0,0,0,0,0,0,0,48,4,128,72,3,128,136,0,128,48,0,0,0,0,0,0,0,0,72,5,64,212,5,64,84,4,128,0,0,0,0,0,0,0,0,0,72,5,64,84,12,128,84,5,64,72,0,0,0,0,0,0,0,0,106,2,160,170,6,224,66,4,32,98,0,0,0,0,0,0,0,0,4,1,80,14,1,80,4,0,0,32,138,170,113,202,170,32,128,0,136,5,127,96,137,190,18,163,62,82,169,62,18,129,16,166,132,135,123,244,164,146,79,191,171,95,181,171,90,181,251,80,86,24,78,4,248,201,18,146,57,65,251,225,0,48,5,63,82,25,33,83,242,0,67,247,130,138,73,24,248,138,191,248,154,136,248,128,8,56,140,48,249,5,62,83,37,42,82,175,166,82,5,63,80,21,121,144,17,6,71,199,4,66,72,36,242,68,36,67,255,1,79,212,1,64,22,6,96,2,0,32,7,0,0,15,128,0,15,0,16,15,0,128,15,0,136,5,255,34,6,32,146,65,62,52,69,68,23,193,68,160,68,255,73,7,255,137,73,32,255,250,136,254,138,138,254,64,165,58,188,241,33,2,95,253,146,85,117,38,214,173,154,16,32,130,63,32,130,127,69,119,144,139,137,80,245,122,186,249,42,186,249,32,146,59,172,132,40,143,232,40,143,239,16,135,200,84,135,223,85,23,209,41,20,95,35,231,162,75,41,42,250,170,255,250,42,162,250,32,34,250,160,68,32,135,136,75,249,8,248,138,255,249,74,154,250,144,94,56,140,127,175,196,32,175,195,32,98,11,254,68,1,248,20,129,254,0,47,236,37,18,127,250,138,252,170,143,190,162,131,127,45,83,255,237,80,93,17,15,255,21,0,127,127,196,2,127,228,2,127,224,32,255,240,32,48,5,0,144,15,128,16,0,0,254,3,0,80,9,0,248,1,0,7,239,74,36,162,74,39,239,64,36,2,64,36,3,65,196,16,63,15,224,16,241,9,146,149,41,84,145,9,255,145,9,16,241,9,16,15,79,136,142,248,141,190,154,138,190,138,143,174,26,191,170,27,34,98,9,80,133,14,80,149,9,80,149,6,32,0,0,0,0,0,0,96,2,0,32,7,0,0,15,192,0,9,0,168,10,128,168,9,0,0,0,0,0,0,0,0,9,0,168,8,128,144,10,0,184,0,0,72,10,64,36,4,128,36,2,64,164,4,128,0,0,0,0,0,0,208,6,128,72,4,128,72,14,192,0,0,0,0,0,0,0,0,0,96,9,0,144,9,0,144,6,0,0,0,0,0,0,0,0,0,0,12,0,64,4,0,224,0,15,255,0,9,68,170,170,170,170,169,68,32,5,0,136,0,0,112,8,128,136,15,0,128,9,128,112,0,0,16,3,0,16,3,128,0,15,192,16,3,0,80,9,0,248,1,0,0,9,0,96,0,0,112,8,128,128,8,0,128,8,128,112,0,0,92,5,0,80,13,192,68,5,64,72,0,0,0,0,0,0,0,0,112,0,128,48,0,128,112,0,0,252,3,0,80,9,0,248,1,0,68,151,201,143,249,16,251,250,194,254,42,148,248,128,16,58,12,64,24,142,0,35,239,170,170,170,162,170,74,191,168,26,189,176,18,6,254,36,10,124,172,138,48,174,134,127,133,8,127,224,2,255,32,4,243,225,34,147,233,34,147,233,0,255,240,136,106,232,168,45,129,15,225,2,16,167,234,18,161,47,18,31,241,16,82,137,40,20,98,3,32,135,255,84,154,127,252,154,255,252,170,236,253,128,108,60,188,89,32,135,255,84,26,18,249,10,255,250,74,200,250,128,16,57,140,102,32,74,149,112,234,149,32,64,0,2,0,168,7,0,168,2,0,0,0,0,0,0,0,0,0,0,128,24,0,128,8,0,128,8,1,192,2,71,175,79,151,221,69,148,122,122,134,175,111,26,161,170,219,163,0,66,232,197,244,81,69,84,85,239,52,80,69,244,65,71,212,67,66,39,34,130,40,250,242,36,119,70,175,170,74,36,34,82,38,47,122,100,184,146,31,161,171,255,128,171,250,161,251,240,33,26,30,63,1,0,255,244,36,36,79,244,145,225,4,126,69,36,82,101,104,16,250,117,125,80,87,125,84,231,126,80,85,125,121,93,127,81,65,100,17,15,255,17,15,190,138,42,172,81,40,161,255,242,24,30,3,28,17,15,255,17,0,128,255,233,82,255,232,210,20,143,255,10,7,30,66,6,255,130,8,254,226,5,255,68,14,124,68,68,168,65,6,110,65,71,255,73,89,127,253,74,255,249,90,149,170,95,166,4,79,132,17,15,255,17,3,252,0,143,255,2,0,160,4,7,254,73,47,255,121,4,191,146,31,129,169,223,149,169,90,157,249,16,1,28,46,6,47,242,82,66,199,255,137,31,255,34,15,190,38,66,216,32,131,246,65,7,191,162,128,40,255,240,32,122,36,146,121,64,8,57,92,99,4,15,255,128,18,10,72,72,66,127,209,16,74,64,64,255,240,64,255,250,145,169,159,149,173,90,177,253,18,21,33,146,17,37,18,34,64,22,255,65,136,54,229,20,144,65,14,16,79,228,130,72,38,254,114,133,40,83,231,40,84,133,127,113,69,20,82,89,37,148,82,131,124,68,127,85,143,230,130,39,228,69,71,200,68,135,212,70,52,194,17,14,82,149,37,126,96,9,255,49,4,255,154,146,169,88,82,130,127,228,2,127,228,0,79,228,130,79,228,16,95,249,17,145,89,18,248,136,255,136,136,208,251,210,42,37,91,156,160,138,127,176,140,8,64,7,128,75,249,4,248,74,132,248,74,132,248,64,4,28,78,63,80,134,255,68,152,74,244,133,94,70,46,98,69,69,72,89,134,167,64,79,8,215,251,65,148,27,20,129,79,148,10,78,164,10,35,193,1,2,63,250,144,41,138,56,224,75,245,1,27,222,1,0,80,2,33,36,147,85,41,20,239,242,40,66,136,40,242,128,41,228,152,71,147,229,34,35,229,34,147,227,0,31,245,8,148,242,200,107,128,15,145,5,126,37,37,126,149,35,126,49,37,12,144,129,53,36,86,131,0,0,0,0,0,0,112,8,128,136,1,0,32,4,0,128,15,128,124,4,0,120,0,64,56,0,0,254,11,128,132,11,128,160,11,192,98,41,85,133,94,85,149,89,85,98,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,5,0,32,5,0,216,0,0,24,0,128,8,1,192,0,7,248,0,7,112,17,2,112,36,2,112,14,3,24,64,69,20,145,41,242,145,37,20,64,67,24,14,0,0,88,10,0,0,0,0,120,8,128,136,8,128,136,7,128,0,0,0,34,162,127,36,143,254,36,134,126,116,138,255,161,34,19,34,18,198,251,246,224,132,225,17,224,128,40,78,114,8,86,228,172,209,53,0,32,10,128,112,10,128,32,0,0,0,0,0,0,0,0,0,0,0,0,3,0,72,8,64,0,0,0,0,0,0,0,0,0,0,0,0,240,9,127,144,15,0,159,249,8,240,137,42,148,153,73,152,138,24,35,255,160,170,74,175,170,90,165,250,82,41,50,146,177,61,28,162,32,130,127,240,2,66,115,54,20,175,250,0,39,242,65,36,18,127,0,0,0,0,7,0,144,8,0,240,8,128,136,8,128,112,0,0,18,74,127,66,74,127,16,131,127,84,153,127,20,145,127,18,38,65,64,135,8,64,248,8,227,244,33,242,20,63,66,4,64,68,6,128,34,15,191,34,79,212,112,138,148,255,250,72,149,8,224,141,139,70,152,202,82,165,42,68,164,138,80,153,224,0,0,0,0,0,0,0,226,8,96,202,2,160,47,10,32,67,0,0,0,0,0,0,0,0,34,6,80,161,10,32,244,2,64,119,0,0,0,0,0,0,0,0,99,9,64,148,7,112,21,5,80,102,0,0,0,0,0,0,0,0,228,8,64,196,2,64,36,10,64,68,0,0,0,0,0,0,0,0,56,4,64,68,4,64,60,0,64,36,3,128,0,0,0,0,0,0,68,10,160,42,4,160,42,2,160,170,4,64,0,0,0,0,0,0,68,44,198,68,164,82,69,244,66,238,112,0,0,0,0,0,0,0,98,10,80,133,14,80,149,9,80,149,6,32,0,0,0,0,0,0,0,0,0,0,0,0,16,3,0,80,5,0,144,15,128,16,3,128,76,109,41,82,149,41,82,149,41,236,96,0,0,0,0,0,0,0,34,6,80,165,10,80,245,2,80,114,0,0,0,0,0,0,0,0,0,1,128,48,0,0,252,8,128,24,3,0,96,12,64,252,0,0,0,0,0,0,0,0,48,4,128,8,1,0,8,0,128,72,3,0,188,10,0,184,8,64,164,9,128,0,0,0,0,0,0,0,0,0,72,5,64,68,12,128,80,5,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,0,32,15,128,32,2,0,32,0,0,152,10,64,164,9,128,164,10,64,152,0,0,0,0,0,0,0,0,66,10,96,42,4,160,143,8,32,231,0,0,0,0,0,0,0,0,98,9,80,149,9,80,117,1,80,85,6,32,0,0,0,0,0,0,34,6,80,165,10,32,165,15,80,37,3,32,0,0,0,0,0,0,103,9,80,145,1,32,34,4,32,130,15,32,0,0,0,0,0,0,152,202,82,165,42,76,165,42,82,152,192,0,0,0,0,0,0,0,247,8,80,129,14,32,18,9,32,98,0,0,0,0,0,0,0,0,32,130,127,64,135,127,128,15,127,36,18,127,242,34,255,36,19,127,31,254,40,162,155,41,170,170,40,255,250,2,21,17,84,20,98,60,17,15,255,17,15,252,68,72,132,19,134,144,4,74,34,160,161,248,47,244,213,123,120,185,255,242,16,255,242,16,47,242,0,42,163,85,32,82,4,255,250,164,171,95,165,47,83,166,43,35,102,234,160,105,34,164,127,121,200,106,240,146,74,39,255,146,34,162,111,36,33,130,247,249,1,147,249,1,151,255,4,159,248,4,130,64,20,0,64,8,68,70,166,139,57,69,239,228,2,94,255,41,74,84,163,82,86,107,9,15,162,39,242,17,249,6,127,98,75,66,169,18,228,40,146,50,120,4,152,146,127,165,170,90,165,250,90,165,250,112,54,26,78,4,65,7,223,161,73,34,2,7,255,34,65,40,255,240,80,8,129,6,8,143,255,8,132,16,41,18,86,31,254,48,37,66,18,80,8,255,64,135,191,136,137,8,251,250,169,250,154,189,249,160,41,26,158,72,224,74,239,170,158,173,170,218,171,234,136,175,202,30,205,168,24,134,162,74,36,255,250,40,34,163,42,100,202,72,37,146,105,36,146,135,8,143,255,8,143,255,36,15,255,37,95,218,37,87,127,108,74,148,72,132,159,73,159,213,73,52,144,73,255,193,83,148,129,132,16,6,1,0,16,241,9,31,145,9,16,151,239,66,148,32,66,4,32,126,23,241,42,1,72,8,67,101,201,16,129,127,36,158,127,32,146,127,89,8,191,218,24,209,248,170,140,235,59,255,234,27,161,230,26,127,132,40,66,255,224,64,10,1,16,32,205,2,19,145,192,16,64,248,120,72,134,144,95,255,168,79,244,173,95,246,5,64,5,246,176,17,2,39,4,87,247,9,87,245,72,119,245,25,81,149,43,148,139,8,64,9,190,136,141,136,138,175,170,168,171,140,235,251,136,232,138,200,66,7,126,152,66,8,255,234,146,249,42,254,242,128,40,52,156,143,65,7,167,146,95,165,171,223,165,170,90,165,251,112,36,248,64,4,117,69,255,81,7,255,90,87,126,93,37,126,85,37,126,144,10,127,152,10,64,132,8,128,144,10,0,188,0,0,0,0,0,0,0,0,99,8,64,132,14,112,149,9,80,102,0,0,0,0,0,0,0,0,198,2,160,40,4,224,41,2,144,198,0,0,0,0,0,0,0,0,18,1,80,17,13,32,17,1,80,18,0,0,0,0,0,0,0,0,34,6,80,165,10,80,245,2,80,34,0,0,0,0,0,0,0,0,68,10,64,164,2,64,68,4,64,132,14,64,0,0,0,0,0,0,98,10,80,133,14,80,149,9,80,98,0,0,0,0,0,0,0,0,68,74,170,42,36,164,42,42,170,68,64,0,0,0,0,0,0,0,80,197,20,81,69,36,83,229,4,80,224,0,0,0,0,0,0,0,0,3,0,72,8,64,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,8,64,72,3,0,0,0,0,243,233,34,146,175,127,34,42,50,180,170,74,167,251,2,192,160,4,123,244,161,146,31,175,170,191,171,170,186,175,250,16,33,30,30,63,66,23,249,138,25,37,255,218,173,250,218,253,170,95,241,10,159,42,18,15,254,18,15,248,8,143,254,8,143,248,32,7,248,160,131,248,0,14,56,65,2,32,20,0,128,127,0,128,127,0,128,8,1,192,0,0,0,27,131,108,102,102,102,54,193,248,6,0,96,6,0,0,56,4,64,146,9,32,146,9,32,146,4,64,56,0,0,0,0,0,56,4,64,186,8,160,186,10,32,186,4,64,56,0,0,0,0,0,56,4,64,186,8,160,186,8,160,186,4,64,56,0,0,0,0,0,0,0,0,222,7,240,99,6,48,99,6,48,99,6,48,94,0,0,0,15,192,0,4,64,68,4,64,40,2,128,40,1,0,0,0,0,0,15,192,0,2,0,32,2,0,32,2,0,32,3,192,0,0,0,0,15,224,0,3,128,68,4,0,64,4,0,68,4,64,56,0,0,0,15,224,0,7,128,68,4,64,68,4,64,68,7,128,0,0,0,0,15,192,0,8,128,136,13,128,216,10,128,168,10,128,168,0,0,0,15,192,0,13,128,80,7,0,32,7,0,80,13,128,0,0,0,16,2,0,0,3,0,8,6,128,152,8,128,136,9,128,108,0,0,2,0,16,0,128,0,4,0,64,8,0,128,16,1,0,39,199,128,0,1,252,0,0,0,9,0,144,9,0,144,9,1,17,33,20,14,0,64,8,1,0,0,9,0,144,9,0,144,9,1,17,33,20,14,2,32,20,0,128,0,9,0,144,9,0,144,9,1,17,33,20,14,1,0,8,0,64,0,9,0,144,9,0,144,9,1,17,33,20,14,0,3,248,0,0,0,4,2,72,36,130,72,63,128,64,4,7,252,0,128,16,2,0,0,4,2,72,36,130,72,63,128,64,4,7,252,2,32,20,0,128,0,4,2,72,36,130,72,63,128,64,4,7,252,2,0,16,0,128,0,4,2,72,36,130,72,63,128,64,4,7,252,63,128,0,2,0,64,9,3,32,4,0,192,52,0,64,4,0,64,0,64,8,1,0,64,9,3,32,4,0,192,52,0,64,4,0,64,2,32,20,0,128,64,8,3,32,4,0,192,52,0,64,4,0,64,2,0,16,0,128,64,8,3,32,4,0,192,52,0,64,4,0,64,31,128,0,0,1,248,0,128,16,30,1,0,16,1,0,32,4,0,3,0,64,0,3,240,1,0,32,60,2,0,32,2,0,64,8,0,4,128,48,0,1,248,0,128,16,30,1,0,16,1,0,32,4,0,4,0,32,0,1,248,0,128,16,30,1,0,16,1,0,32,4,0,1,0,8,0,64,112,57,2,16,41,2,80,37,2,16,39,3,144,126,0,0,0,0,240,113,1,16,17,1,144,22,1,0,16,1,0,0,32,4,0,0,240,113,1,16,17,1,144,22,1,0,16,1,0,2,64,24,0,0,240,113,1,16,17,1,144,22,1,0,16,1,0,1,0,8,0,0,240,113,1,16,17,1,144,22,1,0,16,1,0,0,3,248,0,0,64,255,192,128,31,128,8,1,0,16,2,0,64,0,128,16,0,0,64,255,192,128,31,128,8,1,0,16,2,0,64,4,64,40,1,0,64,255,192,128,31,128,8,1,0,16,2,0,64,4,0,32,1,0,64,255,192,128,31,128,8,1,0,16,2,0,64,0,0,252,0,0,0,4,0,64,8,0,128,16,1,16,39,135,132,0,64,8,1,0,0,4,0,64,8,0,128,16,1,16,39,135,132,4,0,32,1,0,0,4,0,64,8,0,128,16,1,16,39,135,132,0,0,0,3,129,200,16,129,72,18,129,40,16,129,56,28,128,0,2,3,255,36,131,255,36,130,120,82,165,252,82,73,252,130,27,255,94,192,37,202,245,4,139,242,138,5,210,32,152,188,20,12,161,0,165,201,244,36,176,65,144,68,168,63,120,160,112,244,0,58,164,4,141,64,2,188,144,80,104,32,33,120,192,42,89,28,1,56,192,16,0,0,0,0,0,0,0,0,0,14,0,224,6,0,192,24,0,0,4,0,64,4,1,240,4,0,64,4,1,240,4,0,64,4,0,0,4,0,64,4,0,64,4,3,248,4,0,64,4,0,64,4,0,64,0,7,128,48,3,0,50,3,192,112,3,0,48,195,12,127,128,0,0,3,184,110,68,198,199,232,64,132,8,64,196,38,236,59,128,0,96,9,0,96,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,7,0,216,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,13,128,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,1,128,48,0,0,0,7,0,136,8,128,136,8,128,120,0,0,0,13,128,112,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,7,128,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,96,3,0,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,3,248,0,0,0,255,192,160,10,0,160,18,2,34,66,40,30,0,9,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,48,4,128,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,0,4,128,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,48,4,128,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,128,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,96,9,0,0,0,0,144,9,0,144,9,0,144,6,128,0,0,0,32,1,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,0,0,0,120,8,64,128,8,0,128,8,64,120,0,0,16,2,0,0,3,0,72,4,128,48,0,0,0,0,0,0,0,0,0,0,0,0,3,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,252,17,143,233,144,134,9,32,204,3,192,0,0,0,0,0,0,112,8,128,136,15,0,128,8,128,112,0,0,48,6,0,0,1,128,24,0,128,48,0,0,0,0,0,0,0,0,0,0,0,248,64,132,8,64,132,8,79,252,136,8,128,136,8,128,143,192,0,16,2,0,64,0,0,248,8,0,128,15,128,128,8,0,248,0,0,32,130,126,32,143,190,168,138,254,168,10,190,250,34,170,57,76,162,16,2,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,0,6,0,48,0,0,112,8,128,136,8,128,136,7,128,0,0,0,48,6,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,64,2,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,0,7,128,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,16,2,0,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,0,7,128,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,24,3,0,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,64,2,0,0,0,0,144,9,0,144,9,0,144,6,128,0,0,0,16,2,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,120,0,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,16,2,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,72,3,0,0,7,0,136,8,128,136,8,128,136,8,128,0,0,0,12,7,0,160,2,0,32,2,0,32,2,0,32,2,0,32,0,0,135,232,64,132,8,64,132,15,254,4,32,66,4,32,66,252,32,0,48,4,128,48,0,124,4,0,64,4,0,124,4,0,64,4,0,64,0,2,224,59,3,16,33,2,16,1,0,16,1,3,48,30,0,0,0,1,224,33,18,6,32,137,176,206,97,20,97,10,16,30,0,0,0,0,0,0,8,1,192,54,6,48,193,152,31,128,240,6,0,0,0,1,248,32,68,2,64,36,2,64,36,2,48,192,144,121,224,0,0,0,0,0,0,128,16,11,0,224,4,0,0,0,0,0,0,0,64,2,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,0,0,0,0,7,128,136,8,128,136,7,128,8,0,128,136,7,0,64,2,0,0,15,0,168,10,128,168,10,128,168,10,128,0,0,0,0,7,0,0,2,0,80,8,128,136,15,128,136,8,128,0,0,0,16,2,0,0,2,0,80,8,128,136,15,128,136,8,128,0,0,0,144,6,0,0,2,0,80,8,128,136,15,128,136,8,128,0,0,0,64,2,0,0,2,0,80,8,128,136,15,128,136,8,128,0,0,0,0,7,0,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,1,0,32,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,128,48,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,0,32,0,0,112,8,128,136,8,128,136,7,0,0,0,0,240,0,0,0,6,0,144,0,0,248,8,0,248,8,0,128,15,128,32,4,0,0,6,0,144,0,0,248,8,0,248,8,0,128,15,128,144,6,0,0,6,0,144,0,0,248,8,0,248,8,0,128,15,128,4,0,128,16,0,0,255,192,160,10,0,160,18,2,34,66,40,30,34,1,64,8,0,0,255,192,160,10,0,160,18,2,34,66,40,30,32,1,0,8,0,0,255,192,160,10,0,160,18,2,34,66,40,30,0,128,16,226,0,0,0,0,32,2,2,16,33,132,14,128,64,0,0,0,0,255,192,4,0,64,4,255,192,0,0,0,0,0,0,0,16,133,0,87,231,144,81,9,30,25,35,34,210,33,34,20,161,68,65,2,16,135,201,16,17,2,254,34,12,62,64,36,4,66,132,16,76,11,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,80,7,128,212,13,0,80,7,0,88,5,64,212,7,128,80,0,0,4,4,68,68,71,252,17,0,160,4,1,176,96,203,248,32,131,248,64,2,0,0,6,0,144,0,0,248,8,0,248,8,0,128,15,128,16,2,0,64,0,0,248,8,0,128,15,0,128,8,0,248,0,0,64,2,0,16,0,0,248,8,0,128,15,0,128,8,0,248,0,0,8,1,0,0,8,128,216,10,128,168,8,128,136,8,128,136,0,0,32,1,0,0,8,128,216,10,128,168,8,128,136,8,128,136,0,0,8,1,0,32,0,0,136,12,128,168,10,128,152,8,128,136,0,0,136,5,0,32,0,0,136,12,128,168,10,128,152,8,128,136,0,0,128,4,0,32,0,0,136,12,128,168,10,128,152,8,128,136,0,0,0,7,128,0,3,0,72,0,0,112,8,128,240,8,0,136,7,0,16,2,0,0,3,0,72,0,0,112,8,128,240,8,0,136,7,0,80,2,0,0,3,0,72,0,0,112,8,128,240,8,0,136,7,0,64,2,0,0,3,0,72,0,0,112,8,128,240,8,0,136,7,0,136,5,0,32,0,0,248,8,0,128,15,0,128,8,0,248,0,0,64,4,248,65,15,238,106,45,170,202,68,234,67,36,96,95,224,0,18,15,254,84,142,254,4,142,126,4,142,72,15,238,36,161,142,100,32,143,188,32,143,190,170,175,190,49,202,170,37,194,96,73,3,8,32,7,0,168,15,128,168,2,0,112,7,0,32,2,0,32,0,0,32,2,255,240,2,119,117,86,213,173,90,119,37,82,85,37,82,85,48,0,128,56,4,128,48,14,0,64,4,0,64,4,0,64,14,0,0,2,0,32,2,128,48,6,0,160,2,0,32,2,0,32,2,0,0,0,0,24,4,129,80,111,107,91,85,233,180,238,88,230,224,0,0,0,0,16,1,3,57,193,52,28,67,68,236,131,112,0,0,0,0,0,16,2,32,32,51,149,110,151,170,210,254,76,4,1,128,0,0,0,0,0,0,0,32,132,4,255,228,4,32,128,0,0,0,0,72,164,95,245,40,18,237,228,80,69,238,82,69,228,82,106,5,31,32,130,16,249,66,34,119,246,128,168,10,62,34,34,34,35,226,0,32,65,8,255,242,149,255,89,49,149,55,208,85,245,65,93,209,3,9,7,254,66,39,234,66,165,226,82,101,224,83,245,225,147,217,98,17,15,255,17,2,32,18,2,32,18,15,255,2,0,80,8,129,12,73,20,145,15,240,0,174,250,169,46,244,169,206,244,169,83,20,183,95,245,33,100,168,132,151,174,16,65,4,16,255,244,16,65,6,16,64,135,127,132,136,127,228,132,84,69,254,68,71,244,132,104,69,4,16,65,31,255,145,21,255,81,17,255,52,16,125,246,65,153,210,67,32,79,223,133,159,213,133,31,211,17,15,223,76,25,93,254,17,7,64,135,148,137,41,35,252,26,190,250,42,166,250,0,33,58,28,31,8,143,255,16,142,127,32,143,127,35,22,94,186,74,20,32,130,118,15,240,8,240,137,16,145,249,49,147,25,81,249,25,17,129,16,31,14,79,95,151,148,149,33,31,243,37,12,159,48,16,157,54,28,7,16,79,255,133,147,21,77,80,19,253,2,31,32,18,29,32,31,231,241,9,255,148,79,68,148,73,170,241,9,255,145,9,16,241,9,16,247,249,8,159,255,16,162,66,66,186,90,36,162,75,68,196,64,132,241,9,254,146,137,68,248,74,255,32,43,242,169,42,242,176,172,4,32,130,9,35,250,161,170,26,191,170,11,160,226,8,32,132,0,128,34,82,245,34,74,255,173,74,164,175,170,170,175,171,169,232,152,145,17,15,254,17,1,62,92,133,62,254,33,42,86,168,170,17,78,34,33,2,62,251,34,170,42,98,160,255,242,1,83,213,1,136,24,134,124,132,95,125,148,85,125,48,16,253,241,1,93,213,1,176,81,194,32,4,0,123,248,8,248,130,8,248,130,8,32,130,136,48,130,127,33,2,255,73,36,148,243,2,48,67,15,80,5,16,145,49,28,15,255,248,33,255,248,145,169,92,147,255,248,113,138,155,37,128,31,255,39,242,9,248,148,77,82,186,11,162,213,73,136,159,137,10,208,18,39,255,128,35,230,34,115,234,128,175,242,85,36,146,127,36,146,67,207,248,10,4,204,104,79,245,65,71,244,65,71,246,65,68,32,0,2,15,255,16,14,14,143,14,16,159,250,56,197,65,146,40,204,195,66,2,255,34,128,84,143,233,17,37,68,255,196,68,132,72,69,4,64,228,112,65,15,144,73,8,255,145,5,16,33,5,17,137,16,143,19,249,18,157,41,18,255,240,22,164,173,74,141,41,226,228,160,4,19,241,2,159,169,42,146,175,234,3,170,66,164,45,66,156,46,68,241,9,124,164,76,68,164,73,124,148,13,120,164,136,137,144,154,7,171,250,136,169,11,190,226,32,42,250,162,42,250,162,20,58,62,65,47,242,146,33,3,126,162,11,40,36,130,126,80,132,8,143,248,8,4,64,255,5,78,40,164,74,146,161,27,254,161,14,84,169,56,32,0,243,240,42,55,84,65,12,254,73,36,254,73,37,255,72,36,140,252,72,4,188,74,127,164,74,100,165,74,92,189,72,4,253,64,8,79,244,16,79,244,146,245,4,36,95,244,16,79,230,170,202,168,174,119,101,68,191,176,81,154,8,168,254,120,168,152,17,1,254,117,69,47,66,20,42,79,111,34,71,254,102,218,117,170,66,36,34,66,68,240,225,48,81,5,16,81,7,255,9,6,144,137,0,145,41,17,15,171,250,132,251,240,33,250,80,165,122,84,37,74,85,37,96,172,49,64,132,14,64,143,127,85,21,92,87,37,92,93,69,84,154,88,163,22,50,20,47,246,137,79,252,137,79,244,8,79,244,8,64,132,8,47,146,81,101,84,85,207,212,85,69,84,149,73,21,17,65,86,2,129,4,16,103,192,16,207,228,0,65,4,92,69,5,80,107,4,31,2,128,254,226,170,254,170,138,255,162,158,41,164,208,74,8,128,136,1,2,8,32,146,63,34,26,191,170,26,160,186,14,32,132,0,128,34,131,127,36,132,254,68,142,126,68,132,126,65,36,39,66,20,71,1,0,63,2,16,65,251,217,37,146,89,37,243,217,1,0,16,3,64,4,0,120,4,64,68,4,94,121,0,16,1,224,16,1,0,30,65,68,18,127,248,144,151,224,82,39,226,82,39,226,210,53,34,86,32,19,206,36,36,138,158,190,42,82,174,175,20,0,160,49,12,15,0,192,48,12,3,0,64,3,0,76,3,48,12,192,48,0,192,0,48,0,192,3,0,12,0,32,12,3,32,204,51,0,192,48,0,0,0,3,24,66,72,66,136,36,132,48,128,0,0,15,254,0,0,0,0,1,254,32,4,0,64,4,0,64,2,0,31,224,0,0,0,0,0,0,16,0,143,252,0,32,1,0,47,252,0,128,16,0,0,0,181,22,1,128,197,80,138,160,1,226,64,168,116,21,16,224,100,85,0,0,64,4,0,64,4,0,64,4,0,64,127,224,0,0,0,0,0,0,0,15,1,8,16,96,248,12,131,8,79,0,0,0,0,0,0,0,0,0,15,4,81,133,96,88,197,82,117,237,80,84,224,0,0,0,0,0,1,230,33,130,112,57,6,16,163,1,216,0,0,0,7,129,128,32,4,0,64,7,248,64,4,0,32,1,128,7,128,0,0,15,240,0,128,4,0,32,2,0,32,4,0,143,240,0,0,0,0,0,0,0,0,0,123,200,66,132,40,66,123,192,0,0,0,0,0,0,255,8,0,128,8,0,128,8,0,128,72,10,128,24,0,128,15,240,128,8,1,0,16,3,0,16,12,0,32,12,0,32,12,0,48,51,251,108,246,255,239,247,191,127,246,111,108,247,131,112,240,0,64,135,148,146,63,193,171,239,162,170,175,164,2,19,161,193,240,0,8,143,255,8,143,8,39,255,136,47,246,163,173,226,36,45,194,35,0,0,0,0,1,0,255,2,0,126,12,32,126,4,32,126,4,96,0,0,0,0,0,0,32,35,226,82,173,106,86,164,202,82,38,22,0,0,0,0,1,16,10,3,252,32,67,252,0,5,36,80,169,248,0,0,0,0,0,0,32,15,252,137,7,252,76,75,84,74,135,196,49,212,21,46,245,1,162,96,34,111,250,162,70,96,68,43,244,21,217,97,21,239,228,81,131,42,32,157,122,0,4,208,65,159,177,65,144,204,17,12,197,21,107,4,26,165,194,136,193,113,2,198,209,81,93,84,16,43,193,21,195,128,162,103,8,2,121,16,128,43,196,1,13,82,129,148,224,80,224,41,40,64,82,34,93,1,196,196,212,21,150,209,88,254,5,21,50,34,0,215,128,2,77,148,20,251,196,17,70,96,96,48,52,4,169,176,80,146,154,10,4,20,37,24,5,68,0,196,80,48,180,84,218,132,0,113,176,42,85,16,1,172,164,80,119,101,68,191,176,81,154,8,168,254,120,168,152,17,1,254,117,69,90,85,112,248,4,85,201,168,16,94,128,10,54,16,84,239,0,69,0,0,0,0,0,0,0,8,2,192,103,28,63,128,224,0,0,0,0,0,0,31,0,112,15,1,144,49,6,0,192,8,0,0,0,0,63,192,0,0,4,8,32,129,16,10,0,64,4,0,64,4,0,64,2,0,64,8,4,8,32,129,16,10,0,64,4,0,64,4,0,64,1,16,10,0,64,0,32,129,16,10,0,64,4,0,64,4,0,64,2,0,16,0,128,0,32,129,16,10,0,64,4,0,64,4,0,64,63,128,0,0,0,64,127,192,64,28,2,0,32,2,0,16,192,240,1,0,32,0,0,64,127,192,64,28,2,0,32,2,0,16,192,240,9,0,96,0,0,64,127,192,64,28,2,0,32,2,0,16,192,240,24,0,64,0,0,64,127,192,64,28,2,0,32,2,0,16,192,240,0,3,252,0,1,16,17,1,16,31,207,32,18,1,32,16,0,252,1,0,32,4,1,16,17,1,16,31,207,32,18,1,32,16,0,252,17,0,160,4,1,16,17,1,16,31,207,32,18,1,32,16,0,252,16,0,128,4,1,16,17,1,16,31,207,32,18,1,32,16,0,252,0,7,252,0,0,0,4,0,64,4,0,64,4,0,64,4,0,64,0,128,16,2,0,0,4,0,64,4,0,64,4,0,64,4,0,64,2,32,20,0,128,0,4,0,64,4,0,64,4,0,64,4,0,64,4,0,32,1,0,0,4,0,64,4,0,64,4,0,64,4,0,64,31,192,0,0,0,0,63,224,16,1,1,248,16,1,0,8,0,112,1,0,32,4,0,0,63,224,16,1,1,248,16,1,0,8,0,112,8,128,80,2,0,0,63,224,16,1,1,248,16,1,0,8,0,112,8,0,64,2,0,0,63,224,16,1,1,248,16,1,0,8,0,112,31,192,0,0,0,4,16,64,136,4,128,48,3,0,72,8,67,0,1,0,32,4,0,8,32,129,16,9,0,96,6,0,144,16,134,0,17,0,160,4,0,8,32,129,16,9,0,96,6,0,144,16,134,0,16,0,128,4,0,8,32,129,16,9,0,96,6,0,144,16,134,0,0,3,248,0,0,0,0,66,4,32,66,4,32,66,28,62,64,0,0,0,16,2,0,64,0,66,4,32,66,4,32,66,28,62,64,0,34,1,64,8,0,0,0,132,8,64,132,8,64,132,56,124,128,0,0,1,0,8,0,64,0,66,4,32,66,4,32,66,28,62,64,0,2,0,64,8,0,0,3,131,200,32,130,8,32,130,8,32,128,0,32,1,0,8,0,0,3,131,200,32,130,8,32,130,8,32,128,0,0,64,8,1,7,192,4,0,128,31,0,16,1,0,16,10,0,64,4,64,40,1,7,192,4,0,128,31,0,16,1,0,16,10,0,64,4,0,32,1,7,192,4,0,128,31,0,16,1,0,16,10,0,64,63,0,0,0,7,248,72,4,128,72,7,240,8,129,8,33,4,32,0,32,4,0,143,224,144,9,0,144,15,224,17,2,16,65,8,32,2,32,20,0,143,224,144,9,0,144,15,224,17,2,16,65,8,32,2,0,16,0,143,224,144,9,0,144,15,224,17,2,16,65,8,32,0,3,248,0,3,192,4,0,64,4,0,32,2,0,16,1,0,8,0,128,16,0,3,192,4,0,64,4,0,32,2,0,16,1,0,8,2,64,24,0,3,192,4,0,64,4,0,32,2,0,16,1,0,8,2,0,16,0,131,192,4,0,64,4,0,32,2,0,16,1,0,8,63,128,0,4,0,64,8,1,16,33,3,224,4,0,144,16,131,252,0,64,8,1,0,128,16,2,32,66,7,192,8,1,32,33,7,248,2,32,20,0,128,64,8,1,16,33,3,224,4,0,144,16,131,252,2,0,16,0,128,64,8,1,16,33,3,224,4,0,144,16,131,252,31,0,0,0,3,240,0,129,16,10,0,96,5,0,136,16,6,0,0,16,2,0,67,240,0,129,16,10,0,96,5,0,136,16,6,0,2,32,20,0,135,224,1,2,32,20,0,192,10,1,16,32,12,0,0,128,4,14,39,16,1,2,32,20,0,192,10,1,16,32,12,0,126,0,0,0,7,224,66,4,32,68,7,248,1,0,16,2,0,32,0,32,4,0,135,224,66,4,32,68,7,248,1,0,16,2,0,32,2,32,20,0,135,224,66,4,32,68,7,248,1,0,16,2,0,32,2,0,16,0,135,224,66,4,32,68,7,248,1,0,16,2,0,32,0,1,240,0,2,0,32,2,0,32,4,124,120,64,4,0,128,8,0,64,8,1,2,0,32,2,0,32,4,124,120,64,4,0,128,8,8,128,80,2,2,0,32,2,0,32,4,124,120,64,4,0,128,8,4,64,40,1,2,0,32,2,0,32,4,124,120,64,4,0,128,8,63,192,0,0,0,64,4,7,252,10,0,160,18,2,32,66,0,30,2,0,64,8,0,0,4,7,252,10,0,160,18,2,32,66,0,30,2,32,20,0,128,64,4,7,252,10,0,160,18,2,32,66,0,30,2,0,16,0,128,64,4,7,252,10,0,160,18,2,32,66,0,30,63,192,0,0,0,0,4,0,64,8,0,128,16,1,0,39,199,128,0,32,4,0,128,0,4,0,64,8,0,128,16,1,0,39,199,128,2,32,20,0,128,0,4,0,64,8,0,128,16,1,0,39,199,128,255,250,170,85,85,85,255,245,85,170,170,170,255,250,170,85,85,85,255,42,167,85,53,85,255,133,83,170,186,168,255,218,170,85,117,84,241,200,186,238,65,4,198,15,243,223,136,162,214,7,140,187,129,84,8,10,236,8,48,64,12,117,212,4,80,2,8,10,169,12,48,1,224,116,168,240,36,4,208,34,82,208,16,2,48,53,171,160,0,0,198,16,64,234,192,1,198,35,144,230,234,10,92,69,5,191,128,1,164,94,85,191,197,81,238,60,169,85,194,2,129,89,16,207,128,21,166,174,56,18,240,81,219,165,50,9,82,136,226,43,100,51,32,64,17,80,110,207,65,69,200,136,219,231,122,130,223,132,168,166,161,16,4,248,168,48,240,64,203,12,244,52,242,8,146,106,47,138,32,0,159,153,8,63,129,121,77,172,220,177,162,26,223,3,101,201,132,9,165,126,66,190,53,68,236,172,171,85,18,2,129,249,3,206,128,20,28,31,217,36,192,80,50,165,69,208,66,40,151,26,162,161,96,21,30,236,164,202,241,5,43,228,202,229,210,32,8,141,148,76,177,0,83,82,166,36,36,22,136,241,100,176,58,137,6,118,99,48,20,22,159,188,161,74,161,4,234,48,192,101,218,40,200,25,145,12,189,1,83,114,167,36,36,20,136,241,71,176,26,136,6,118,98,49,36,5,209,86,38,191,32,17,132,79,236,220,104,136,246,118,226,187,32,20,236,1,26,232,192,80,58,170,37,86,64,40,177,13,2,191,97,20,0,10,170,0,0,0,48,7,85,0,0,0,8,10,170,16,0,0,59,139,171,10,176,1,58,5,125,25,50,2,18,153,170,15,225,1,34,198,65,51,132,17,190,1,104,149,226,8,86,89,132,203,244,69,26,153,172,192,0,1,165,37,84,64,104,2,26,194,169,96,5,1,232,90,2,191,32,69,171,44,163,87,146,42,139,105,18,202,144,4,164,10,170,236,4,64,168,13,181,72,0,160,144,10,74,172,1,64,223,252,170,149,81,85,103,252,213,98,162,170,135,249,106,193,81,85,255,250,170,85,85,85,255,245,85,170,170,170,255,250,170,85,85,85,255,250,170,85,85,85,255,245,85,170,170,170,255,250,170,85,85,85,255,250,170,85,85,85,255,245,85,170,170,170,255,250,170,85,85,85,193,25,71,67,117,113,239,52,252,163,122,248,252,234,187,80,53,117,0,7,128,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,1,128,48,0,0,0,7,0,136,8,128,136,8,128,120,0,0,0,13,128,112,0,0,112,8,128,136,8,128,136,7,128,0,0,0,96,3,0,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,120,0,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,48,6,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,144,6,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,192,6,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,0,7,128,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,16,2,0,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,0,4,128,48,0,0,32,2,0,32,2,0,32,7,0,0,0,0,64,2,0,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,0,7,128,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,16,2,0,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,128,48,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,0,32,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,15,0,0,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,1,0,32,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,9,0,96,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,8,0,64,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,15,0,0,0,0,144,0,0,144,9,0,144,6,128,0,0,0,0,2,0,64,0,0,144,0,0,144,9,0,144,6,128,0,0,0,0,9,0,96,0,0,144,0,0,144,9,0,144,6,128,0,0,0,0,4,0,32,0,0,144,0,0,144,9,0,144,6,128,0,0,0,0,0,0,0,0,0,144,0,0,144,9,0,144,6,128,0,0,0,48,4,128,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,0,0,0,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,16,2,0,0,15,0,168,10,128,168,10,128,168,10,128,0,0,0,16,2,0,0,11,192,196,8,64,132,8,64,132,8,64,0,0,0,72,3,0,0,11,192,196,8,64,132,8,64,132,8,64,0,0,0,0,0,0,112,9,128,128,6,0,128,9,128,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,0,0,0,0,0,0,0,0,13,0,168,2,128,240,10,0,168,13,0,0,0,0,0,0,0,32,2,0,112,5,0,216,8,128,136,0,0,0,0,0,0,0,0,0,7,128,132,8,64,132,8,64,132,15,128,0,0,0,0,0,0,224,1,0,8,7,128,136,8,128,240,0,0,0,0,0,0,7,0,216,8,128,136,15,128,136,8,128,216,7,0,0,0,0,16,13,0,32,5,0,136,0,128,120,8,128,136,7,0,0,0,0,16,2,128,32,2,0,32,2,0,32,2,0,32,10,0,64,0,0,0,0,0,248,1,0,32,7,0,8,0,128,8,8,128,112,0,0,0,11,0,216,8,128,136,8,128,8,0,128,8,13,128,112,0,0,0,0,0,112,12,128,8,3,0,8,12,128,112,0,0,0,0,0,0,0,0,112,8,128,8,0,128,8,8,128,112,0,0,0,0,0,0,6,128,148,1,0,32,1,0,144,6,0,0,0,0,0,0,0,0,0,0,0,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,0,0,0,13,128,80,8,128,136,8,128,112,0,0,0,0,0,0,9,128,96,4,0,64,14,0,0,0,0,0,0,0,0,0,0,112,2,0,32,2,0,112,0,0,112,0,128,120,8,128,112,0,0,216,5,0,136,8,128,112,0,0,240], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+156957);
/* memory initializer */ allocate([128,120,8,128,112,0,0,0,0,0,240,8,128,136,8,128,136,8,128,136,0,0,48,3,0,0,0,0,192,10,128,56,6,64,144,9,0,144,9,0,96,0,0,0,6,0,32,2,0,32,2,0,32,2,0,112,0,0,32,0,0,0,0,0,0,0,0,112,2,0,32,2,0,32,2,0,112,0,0,8,1,128,56,7,128,56,1,128,8,0,0,0,0,0,0,0,0,0,0,0,0,0,64,120,9,128,168,12,128,240,0,0,0,0,0,0,0,0,0,0,0,240,10,128,168,10,128,168,10,128,0,2,0,104,9,0,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,80,0,0,0,0,0,112,8,128,8,0,128,136,7,0,0,0,0,80,10,0,0,7,0,136,0,128,8,0,128,136,7,0,0,0,0,72,11,0,0,7,0,168,2,128,112,10,0,168,5,0,0,0,0,0,5,128,160,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,6,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,0,0,0,7,128,136,8,128,136,7,128,8,0,128,136,7,0,32,2,0,32,2,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,0,248,2,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,168,10,128,168,0,0,0,0,0,0,0,0,0,0,0,48,4,128,72,7,0,64,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,72,4,128,72,4,128,0,0,0,0,0,0,240,8,0,224,1,0,16,9,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,6,0,32,2,0,32,2,0,112,0,0,0,0,0,0,0,0,48,4,128,8,1,0,32,4,0,120,0,0,0,0,0,0,0,0,48,4,128,8,3,0,8,4,128,48,0,0,0,0,0,0,0,0,16,1,0,48,5,0,144,15,128,16,1,0,0,0,0,0,0,0,240,8,0,224,1,0,16,9,0,96,0,0,0,0,0,0,0,0,112,8,0,128,15,0,136,8,128,112,0,0,0,0,0,0,0,0,240,2,0,32,4,0,64,4,0,64,0,0,0,0,0,0,0,0,112,8,128,136,7,0,136,8,128,112,0,0,0,0,0,0,0,0,112,8,128,136,7,128,8,0,128,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,1,0,144,1,0,16,3,128,0,0,0,0,0,0,0,0,0,112,4,0,96,1,0,96,15,128,0,9,128,160,11,0,168,9,0,184,10,0,176,8,128,176,15,128,0,9,128,160,11,0,168,9,0,96,5,0,112,1,0,96,15,128,0,11,128,160,11,0,136,11,0,112,4,0,96,1,0,96,15,128,0,6,0,80,7,0,16,6,0,16,2,128,8,13,0,32,3,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,6,0,0,0,0,0,0,0,0,0,0,0,2,0,168,7,0,168,2,0,0,2,0,168,7,0,168,2,0,0,0,0,0,0,0,248,15,128,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,76,105,98,32,108,101,110,103,116,104,58,37,100,10,0,123,32,105,102,32,40,119,105,110,100,111,119,46,98,97,121,101,32,61,61,32,117,110,100,101,102,105,110,101,100,41,32,123,32,119,105,110,100,111,119,46,98,97,121,101,32,61,32,123,125,59,32,125,32,105,102,32,40,119,105,110,100,111,119,46,98,97,121,101,46,104,111,111,107,115,32,61,61,32,117,110,100,101,102,105,110,101,100,41,32,123,32,119,105,110,100,111,119,46,98,97,121,101,46,104,111,111,107,115,32,61,32,123,125,59,32,125,32,119,105,110,100,111,119,46,98,97,121,101,46,100,97,116,97,32,61,32,98,97,121,101,95,98,114,105,100,103,101,95,118,97,108,117,101,40,95,98,97,121,101,71,101,116,71,108,111,98,97,108,40,41,41,59,32,125,0,123,32,118,97,114,32,115,99,114,105,112,116,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,59,32,101,118,97,108,40,115,99,114,105,112,116,41,59,32,125,0,123,32,118,97,114,32,110,97,109,101,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,59,32,118,97,114,32,114,118,32,61,32,48,59,32,105,102,32,40,119,105,110,100,111,119,46,98,97,121,101,32,61,61,32,117,110,100,101,102,105,110,101,100,32,124,124,32,119,105,110,100,111,119,46,98,97,121,101,46,104,111,111,107,115,32,61,61,32,117,110,100,101,102,105,110,101,100,32,124,124,32,119,105,110,100,111,119,46,98,97,121,101,46,104,111,111,107,115,91,110,97,109,101,93,32,61,61,32,117,110,100,101,102,105,110,101,100,41,32,123,32,114,118,32,61,32,45,49,59,32,125,32,101,108,115,101,32,123,32,118,97,114,32,99,67,111,110,116,101,120,116,32,61,32,36,49,59,32,105,102,32,40,99,67,111,110,116,101,120,116,32,33,61,32,48,41,32,123,32,118,97,114,32,106,115,67,111,110,116,101,120,116,32,61,32,98,97,121,101,95,98,114,105,100,103,101,95,118,97,108,117,101,40,99,67,111,110,116,101,120,116,41,59,32,114,118,32,61,32,98,97,121,101,46,99,97,108,108,72,111,111,107,40,110,97,109,101,44,32,106,115,67,111,110,116,101,120,116,41,59,32,125,32,101,108,115,101,32,123,32,114,118,32,61,32,98,97,121,101,46,99,97,108,108,72,111,111,107,40,110,97,109,101,44,32,117,110,100,101,102,105,110,101,100,41,59,32,125,32,125,32,114,101,116,117,114,110,32,114,118,59,32,125,0,123,32,114,101,116,117,114,110,32,98,97,121,101,46,99,97,108,108,67,97,108,108,98,97,99,107,40,36,48,41,59,32,125,0,123,32,118,97,114,32,110,97,109,101,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,59,32,105,102,32,40,119,105,110,100,111,119,46,98,97,121,101,32,38,38,32,119,105,110,100,111,119,46,98,97,121,101,46,104,111,111,107,115,32,38,38,32,119,105,110,100,111,119,46,98,97,121,101,46,104,111,111,107,115,91,110,97,109,101,93,41,32,123,32,114,101,116,117,114,110,32,49,59,32,125,32,101,108,115,101,32,123,32,114,101,116,117,114,110,32,48,59,32,125,32,125,0,123,32,118,97,114,32,110,111,119,32,61,32,110,101,119,32,68,97,116,101,40,41,59,32,114,101,116,117,114,110,32,110,111,119,46,103,101,116,84,105,109,101,40,41,59,32,125,0,241,15,255,1,102,105,103,104,116,32,111,118,101,114,10,0,99,111,117,110,116,77,111,118,101,0,103,101,110,101,114,97,108,73,110,100,101,120,0,5,4,4,5,6,3,99,111,117,110,116,65,116,116,97,99,107,72,117,114,116,0,38,104,117,114,116,0,98,97,116,116,108,101,66,117,105,108,100,65,116,116,97,99,107,65,116,116,114,105,117,116,101,115,0,105,110,100,101,120,0,99,111,117,110,116,83,107,105,108,108,72,117,114,116,0,115,107,105,108,108,73,100,0,104,117,114,116,0,111,114,105,103,105,110,0,115,116,97,116,101,0,112,114,111,118,0,99,111,117,110,116,77,111,118,101,82,97,110,103,101,0,99,111,117,110,116,76,97,110,100,82,101,115,105,115,116,97,110,99,101,0,114,101,115,117,108,116,0,204,236,209,161,214,174,215,211,163,172,206,225,202,196,203,192,202,216,187,164,163,161,0,202,243,177,178,176,178,184,210,208,208,180,203,177,176,177,201,214,174,202,194,33,0,202,232,178,187,188,228,199,215,163,172,184,243,207,194,215,212,214,216,163,161,0,214,247,182,224,210,201,182,248,178,187,211,195,163,172,206,225,181,177,200,231,186,206,180,166,214,174,163,161,0,201,205,183,163,178,187,195,247,163,172,186,206,210,212,183,254,214,218,163,161,0,211,197,200,225,185,209,182,207,163,172,183,199,195,247,214,247,214,174,207,241,163,161,0,202,243,196,191,180,231,185,226,163,172,198,241,206,170,195,247,214,247,208,176,163,161,0,209,224,200,184,176,178,214,170,186,232,240,192,214,174,214,190,212,213,33,0,206,222,196,220,214,174,177,178,163,172,209,201,184,210,200,231,180,203,163,161,0,214,210,179,188,178,187,202,203,182,254,214,247,163,161,0,193,188,199,221,212,241,196,190,182,248,198,220,163,172,207,205,179,188,212,241,214,247,182,248,202,203,0,183,252,180,166,210,187,183,189,163,172,206,168,180,253,195,247,214,247,163,172,198,228,212,218,190,253,186,245,63,0,206,197,190,253,207,205,195,251,190,195,210,211,163,172,212,184,206,170,190,253,199,163,194,237,215,185,239,235,163,161,0,185,204,203,249,212,184,210,178,163,172,178,187,184,210,199,235,182,251,33,0,184,176,204,192,181,184,187,240,163,172,212,218,203,249,178,187,180,199,163,161,0,190,253,179,188,207,224,181,195,163,172,198,241,208,188,208,161,203,249,191,201,179,195,210,178,163,161,0,179,224,181,168,214,210,208,196,163,172,202,196,215,244,195,247,214,247,182,168,204,236,207,194,163,161,0,205,245,186,238,189,171,207,224,163,172,196,254,211,208,214,214,186,245,163,161,0,189,210,184,205,182,248,198,240,163,172,206,170,195,241,199,235,195,252,163,161,0,187,253,193,184,190,219,177,248,163,172,214,240,194,185,204,236,207,194,163,161,0,119,105,108,108,69,120,101,99,117,116,101,79,114,100,101,114,0,99,105,116,121,77,97,107,101,67,111,109,109,97,110,100,0,99,105,116,121,73,110,100,101,120,0,99,111,109,109,97,110,100,73,110,100,101,120,0,119,105,108,108,71,105,118,101,84,111,111,108,0,112,101,114,115,111,110,73,110,100,101,120,0,116,111,111,108,73,110,100,101,120,0,193,184,178,221,178,187,215,227,0,179,246,213,247,195,252,193,238,182,211,193,208,210,209,194,250,0,195,252,193,238,182,211,193,208,210,209,194,250,0,119,105,108,108,65,100,100,79,114,100,101,114,0,79,114,100,101,114,73,100,0,80,101,114,115,111,110,0,67,105,116,121,0,79,98,106,101,99,116,0,65,114,109,115,0,70,111,111,100,0,77,111,110,101,121,0,67,111,110,115,117,109,101,0,84,105,109,101,67,111,117,110,116,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+167197);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}

var EMTSTACKTOP = getMemory(1048576);
var EMT_STACK_MAX = EMTSTACKTOP + 1048576;

var eb = getMemory(188512);
//assert(eb % 8 === 0);
__ATPRERUN__.push(function() {
  HEAPU8.set([140,3,58,1,0,0,0,0,2,200,0,0,158,0,0,0,2,201,0,0,127,166,2,0,2,202,0,0,255,255,0,0,1,203,0,0,143,203,55,1,136,204,0,0,0,203,204,0,143,203,56,1,136,203,0,0,1,204,176,0,3,203,203,204,137,203,0,0,141,203,56,1,1,204,255,0,19,204,1,204,95,203,200,204,141,204,56,1,3,204,204,200,42,203,1,8,107,204,1,203,141,204,56,1,1,205,139,0,3,203,204,205,143,203,54,1,141,205,54,1,25,203,205,11,143,203,57,1,141,203,54,1,1,205,0,0,83,203,205,0,141,203,54,1,25,205,203,1,143,205,54,1,141,205,54,1,141,203,57,1,54,205,205,203,128,0,0,0,1,30,0,0,1,36,0,0,2,205,0,0,191,214,2,0,1,203,0,0,83,205,203,0,79,203,0,0,103,205,0,1,41,205,205,8,20,203,203,205,0,139,203,0,2,203,0,0,192,214,2,0,1,205,255,0,19,205,139,205,83,203,205,0,103,205,0,4,25,203,0,4,103,203,203,1,41,203,203,8,20,205,205,203,0,152,205,0,2,205,0,0,194,214,2,0,1,203,255,0,19,203,152,203,83,205,203,0,103,203,0,2,25,205,0,2,103,205,205,1,41,205,205,8,20,203,203,205,0,162,203,0,2,203,0,0,193,214,2,0,1,205,255,0,19,205,162,205,83,203,205,0,103,205,0,6,25,203,0,6,103,203,203,1,41,203,203,8,20,205,205,203,0,184,205,0,2,205,0,0,195,214,2,0,1,203,255,0,19,203,184,203,83,205,203,0,1,203,6,19,135,194,0,0,203,0,0,0,33,203,194,0,121,203,68,0,1,39,6,19,0,203,39,0,143,203,3,1,141,203,3,1,1,205,0,0,53,203,203,205,160,1,0,0,119,0,60,0,135,203,1,0,143,203,15,1,141,203,15,1,0,43,203,0,0,203,43,0,143,203,23,1,141,203,23,1,1,205,0,0,53,203,203,205,204,1,0,0,119,0,47,0,0,203,43,0,143,203,29,1,141,205,29,1,82,203,205,0,143,203,30,1,141,205,30,1,106,203,205,8,143,203,32,1,141,203,32,1,0,46,203,0,0,203,46,0,143,203,33,1,141,203,33,1,1,205,0,0,53,203,203,205,16,2,0,0,119,0,23,0,0,203,46,0,143,203,34,1,141,205,34,1,1,204,1,0,141,206,56,1,3,206,206,200,1,207,0,0,1,208,0,0,135,203,2,0,205,201,204,206,207,208,0,0,0,203,39,0,143,203,35,1,0,203,43,0,143,203,36,1,141,208,35,1,141,207,36,1,134,203,0,0,16,21,1,0,208,207,0,0,1,46,0,0,119,0,228,255,0,203,43,0,143,203,37,1,141,207,37,1,135,203,3,0,207,0,0,0,1,43,0,0,119,0,204,255,1,39,0,0,119,0,191,255,1,207,19,19,135,203,0,0,207,0,0,0,143,203,38,1,141,203,38,1,33,203,203,0,121,203,68,0,1,50,19,19,0,203,50,0,143,203,39,1,141,203,39,1,1,207,0,0,53,203,203,207,200,2,0,0,119,0,60,0,135,203,1,0,143,203,41,1,141,203,41,1,0,55,203,0,0,203,55,0,143,203,42,1,141,203,42,1,1,207,0,0,53,203,203,207,244,2,0,0,119,0,47,0,0,203,55,0,143,203,43,1,141,207,43,1,82,203,207,0,143,203,44,1,141,207,44,1,106,203,207,8,143,203,45,1,141,203,45,1,0,60,203,0,0,203,60,0,143,203,46,1,141,203,46,1,1,207,0,0,53,203,203,207,56,3,0,0,119,0,23,0,0,203,60,0,143,203,48,1,141,207,48,1,1,208,1,0,141,206,56,1,3,206,206,200,1,204,0,0,1,205,0,0,135,203,2,0,207,201,208,206,204,205,0,0,0,203,50,0,143,203,49,1,0,203,55,0,143,203,50,1,141,205,49,1,141,204,50,1,134,203,0,0,16,21,1,0,205,204,0,0,1,60,0,0,119,0,228,255,0,203,55,0,143,203,51,1,141,204,51,1,135,203,3,0,204,0,0,0,1,55,0,0,119,0,204,255,1,50,0,0,119,0,191,255,2,204,0,0,194,214,2,0,78,203,204,0,143,203,52,1,2,204,0,0,192,214,2,0,78,203,204,0,143,203,53,1,141,203,52,1,1,204,255,0,19,203,203,204,141,204,53,1,1,205,255,0,19,204,204,205,4,203,203,204,28,203,203,6,38,203,203,255,19,203,203,202,0,3,203,0,2,203,0,0,195,214,2,0,78,4,203,0,2,203,0,0,193,214,2,0,78,5,203,0,1,203,255,0,19,203,4,203,1,204,255,0,19,204,5,204,4,203,203,204,1,204,12,0,1,205,255,0,19,204,204,205,6,203,203,204,38,203,203,255,19,203,203,202,0,13,203,0,135,7,4,0,2,0,0,0,19,203,3,202,7,203,7,203,38,203,203,255,19,203,203,202,0,6,203,0,1,9,0,0,0,8,13,0,19,203,8,202,19,204,6,202,47,203,203,204,160,4,0,0,141,203,56,1,91,203,203,200,141,204,56,1,3,204,204,200,103,204,204,1,41,204,204,8,20,203,203,204,0,10,203,0,0,9,10,0,0,11,13,0,19,203,6,202,19,204,11,202,47,203,203,204,184,4,0,0,0,13,6,0,2,203,0,0,192,214,2,0,78,12,203,0,141,203,56,1,1,204,128,0,1,205,255,0,19,205,12,205,26,205,205,3,19,205,205,202,1,206,255,0,19,205,205,206,95,203,204,205,141,205,56,1,1,204,128,0,3,205,205,204,1,204,255,0,19,204,12,204,26,204,204,3,19,204,204,202,42,204,204,8,107,205,1,204,2,204,0,0,193,214,2,0,78,14,204,0,141,204,56,1,1,205,128,0,3,204,204,205,1,205,255,0,19,205,14,205,26,205,205,3,19,205,205,202,1,203,255,0,19,205,205,203,107,204,2,205,141,205,56,1,1,204,128,0,3,205,205,204,25,205,205,2,1,204,255,0,19,204,14,204,26,204,204,3,19,204,204,202,42,204,204,8,107,205,1,204,2,204,0,0,194,214,2,0,78,15,204,0,141,204,56,1,1,205,128,0,3,204,204,205,1,205,255,0,19,205,15,205,25,205,205,2,19,205,205,202,1,203,255,0,19,205,205,203,107,204,4,205,141,205,56,1,1,204,128,0,3,205,205,204,25,205,205,4,1,204,255,0,19,204,15,204,25,204,204,2,19,204,204,202,42,204,204,8,107,205,1,204,2,204,0,0,195,214,2,0,78,17,204,0,141,204,56,1,1,205,128,0,3,204,204,205,1,205,255,0,19,205,17,205,25,205,205,2,19,205,205,202,1,203,255,0,19,205,205,203,107,204,6,205,141,205,56,1,1,204,128,0,3,205,205,204,25,205,205,6,1,204,255,0,19,204,17,204,25,204,204,2,19,204,204,202,42,204,204,8,107,205,1,204,2,204,0,0,192,214,2,0,78,18,204,0,2,204,0,0,193,214,2,0,78,20,204,0,2,204,0,0,194,214,2,0,78,21,204,0,2,204,0,0,195,214,2,0,78,22,204,0,1,205,255,0,19,205,18,205,26,205,205,3,19,205,205,202,1,203,255,0,19,203,20,203,26,203,203,3,19,203,203,202,1,206,255,0,19,206,21,206,25,206,206,2,19,206,206,202,1,208,255,0,19,208,22,208,25,208,208,2,19,208,208,202,135,204,5,0,205,203,206,208,141,204,56,1,1,208,128,0,91,204,204,208,141,208,56,1,1,206,128,0,3,208,208,206,103,208,208,1,41,208,208,8,20,204,204,208,0,23,204,0,141,204,56,1,1,208,128,0,3,204,204,208,103,204,204,2,141,208,56,1,1,206,128,0,3,208,208,206,25,208,208,2,103,208,208,1,41,208,208,8,20,204,204,208,0,24,204,0,141,204,56,1,1,208,128,0,3,204,204,208,103,204,204,4,141,208,56,1,1,206,128,0,3,208,208,206,25,208,208,4,103,208,208,1,41,208,208,8,20,204,204,208,0,25,204,0,141,204,56,1,1,208,128,0,3,204,204,208,103,204,204,6,141,208,56,1,1,206,128,0,3,208,208,206,25,208,208,6,103,208,208,1,41,208,208,8,20,204,204,208,0,26,204,0,135,204,6,0,23,24,25,26,0,27,13,0,19,204,27,202,19,208,6,202,47,204,204,208,4,9,0,0,2,204,0,0,194,214,2,0,78,28,204,0,2,204,0,0,193,214,2,0,78,29,204,0,2,204,0,0,194,214,2,0,78,31,204,0,2,204,0,0,195,214,2,0,78,32,204,0,1,208,255,0,19,208,28,208,25,208,208,2,19,208,208,202,1,206,255,0,19,206,29,206,26,206,206,3,19,206,206,202,1,203,255,0,19,203,31,203,25,203,203,6,19,203,203,202,1,205,255,0,19,205,32,205,25,205,205,2,19,205,205,202,135,204,5,0,208,206,203,205,2,204,0,0,194,214,2,0,78,33,204,0,2,204,0,0,193,214,2,0,78,34,204,0,2,204,0,0,194,214,2,0,78,35,204,0,2,204,0,0,195,214,2,0,78,37,204,0,1,205,255,0,19,205,33,205,25,205,205,2,19,205,205,202,1,203,255,0,19,203,34,203,26,203,203,3,19,203,203,202,1,206,255,0,19,206,35,206,25,206,206,6,19,206,206,202,1,208,255,0,19,208,37,208,25,208,208,2,19,208,208,202,135,204,6,0,205,203,206,208,2,204,0,0,194,214,2,0,78,38,204,0,2,204,0,0,193,214,2,0,78,40,204,0,2,204,0,0,194,214,2,0,78,41,204,0,2,204,0,0,195,214,2,0,78,42,204,0,1,208,255,0,19,208,38,208,25,208,208,2,19,208,208,202,1,206,255,0,19,206,40,206,26,206,206,1,19,206,206,202,1,203,255,0,19,203,41,203,25,203,203,6,19,203,203,202,1,205,255,0,19,205,42,205,135,204,6,0,208,206,203,205,0,44,9,0,0,45,13,0,19,204,6,202,19,205,44,202,19,203,45,202,3,205,205,203,47,204,204,205,4,9,0,0,0,47,13,0,19,204,6,202,19,205,47,202,4,204,204,205,19,204,204,202,0,9,204,0,0,48,9,0,0,16,48,0,0,49,16,0,19,204,49,202,19,205,3,202,5,51,204,205,19,205,51,202,0,16,205,0,2,205,0,0,192,214,2,0,78,52,205,0,2,205,0,0,193,214,2,0,78,53,205,0,0,54,16,0,1,204,255,0,19,204,52,204,1,203,255,0,19,203,53,203,19,206,54,202,3,206,2,206,135,205,7,0,204,203,206,0,2,205,0,0,193,214,2,0,78,56,205,0,141,205,56,1,91,205,205,200,141,206,56,1,3,206,206,200,103,206,206,1,41,206,206,8,20,205,205,206,0,57,205,0,0,58,9,0,19,205,57,202,19,206,58,202,4,205,205,206,1,206,12,0,1,203,255,0,19,206,206,203,5,59,205,206,1,206,255,0,19,206,56,206,3,206,206,59,19,206,206,202,0,193,206,0,2,206,0,0,192,214,2,0,78,61,206,0,0,62,193,0,2,206,0,0,194,214,2,0,78,63,206,0,0,64,193,0,1,205,255,0,19,205,61,205,1,203,255,0,19,203,63,203,19,204,64,202,1,208,12,0,1,207,255,0,19,208,208,207,3,204,204,208,19,204,204,202,135,206,8,0,205,62,203,204,2,206,0,0,193,214,2,0,78,65,206,0,1,204,255,0,19,204,65,204,0,206,204,0,143,206,31,1,1,206,1,0,143,206,47,1,1,206,43,19,135,66,0,0,206,0,0,0,33,206,66,0,121,206,46,0,1,69,43,19,0,67,69,0,1,206,0,0,53,206,67,206,96,10,0,0,119,0,40,0,135,68,1,0,0,77,68,0,0,70,77,0,1,206,0,0,53,206,70,206,124,10,0,0,119,0,31,0,0,71,77,0,82,72,71,0,106,73,72,8,0,83,73,0,0,74,83,0,1,206,0,0,53,206,74,206,160,10,0,0,119,0,17,0,0,75,83,0,1,204,1,0,141,203,56,1,3,203,203,200,1,205,0,0,1,208,0,0,135,206,2,0,75,201,204,203,205,208,0,0,0,76,69,0,0,78,77,0,134,206,0,0,16,21,1,0,76,78,0,0,1,83,0,0,119,0,236,255,0,79,77,0,135,206,3,0,79,0,0,0,1,77,0,0,119,0,222,255,1,69,0,0,119,0,213,255,0,80,13,0,19,206,80,202,19,208,6,202,47,206,206,208,40,13,0,0,141,206,47,1,0,81,206,0,41,206,81,16,42,206,206,16,33,206,206,0,121,206,106,0,2,206,0,0,194,214,2,0,78,82,206,0,141,206,31,1,0,84,206,0,2,206,0,0,194,214,2,0,78,85,206,0,141,206,31,1,0,86,206,0,1,208,255,0,19,208,82,208,25,208,208,3,19,208,208,202,1,205,255,0,19,205,85,205,25,205,205,5,19,205,205,202,19,203,86,202,25,203,203,2,19,203,203,202,135,206,9,0,208,84,205,203,2,206,0,0,194,214,2,0,78,87,206,0,141,206,31,1,0,88,206,0,1,203,255,0,19,203,87,203,25,203,203,4,19,203,203,202,19,205,88,202,25,205,205,1,19,205,205,202,1,208,0,0,135,206,10,0,203,205,208,0,141,206,56,1,91,206,206,200,141,208,56,1,3,208,208,200,103,208,208,1,41,208,208,8,20,206,206,208,0,89,206,0,19,206,89,202,76,206,206,0,58,19,206,0,58,90,19,0,19,206,6,202,26,206,206,1,76,206,206,0,66,19,90,206,58,91,19,0,2,206,0,0,195,214,2,0,78,92,206,0,2,206,0,0,193,214,2,0,78,93,206,0,2,206,0,0,193,214,2,0,78,94,206,0,1,208,255,0,19,208,92,208,1,205,255,0,19,205,93,205,4,208,208,205,26,208,208,3,76,208,208,0,65,208,91,208,1,205,255,0,19,205,94,205,76,205,205,0,63,208,208,205,75,208,208,0,19,208,208,202,0,206,208,0,143,206,31,1,2,206,0,0,194,214,2,0,78,95,206,0,141,206,31,1,0,96,206,0,2,206,0,0,194,214,2,0,78,97,206,0,141,206,31,1,0,99,206,0,1,208,255,0,19,208,95,208,25,208,208,3,19,208,208,202,1,205,255,0,19,205,97,205,25,205,205,5,19,205,205,202,19,203,99,202,25,203,203,2,19,203,203,202,135,206,6,0,208,96,205,203,1,206,0,0,143,206,47,1,2,206,0,0,194,214,2,0,78,100,206,0,141,206,31,1,0,101,206,0,2,206,0,0,194,214,2,0,78,103,206,0,141,206,31,1,0,104,206,0,1,203,255,0,19,203,100,203,25,203,203,3,19,203,203,202,1,205,255,0,19,205,103,205,25,205,205,5,19,205,205,202,19,208,104,202,25,208,208,2,19,208,208,202,135,206,8,0,203,101,205,208,1,206,0,0,143,206,40,1,141,208,56,1,1,205,150,0,3,208,208,205,134,206,0,0,100,208,2,0,208,0,0,0,141,206,56,1,1,208,150,0,90,105,206,208,1,206,255,0,19,206,105,206,32,206,206,16,121,206,106,1,141,206,56,1,1,208,160,0,141,205,56,1,1,203,150,0,90,205,205,203,95,206,208,205,141,205,56,1,1,208,160,0,3,205,205,208,141,208,56,1,1,206,150,0,3,208,208,206,102,208,208,1,107,205,1,208,141,208,56,1,1,205,160,0,3,208,208,205,141,205,56,1,1,206,150,0,3,205,205,206,102,205,205,2,107,208,2,205,141,205,56,1,1,208,160,0,3,205,205,208,141,208,56,1,1,206,150,0,3,208,208,206,102,208,208,3,107,205,3,208,141,208,56,1,1,205,160,0,3,208,208,205,141,205,56,1,1,206,150,0,3,205,205,206,102,205,205,4,107,208,4,205,141,205,56,1,1,208,160,0,3,205,205,208,141,208,56,1,1,206,150,0,3,208,208,206,102,208,208,5,107,205,5,208,141,208,56,1,1,205,160,0,3,208,208,205,141,205,56,1,1,206,150,0,3,205,205,206,102,205,205,6,107,208,6,205,141,208,56,1,1,206,139,0,3,208,208,206,141,206,56,1,1,203,160,0,3,206,206,203,135,205,11,0,208,206,0,0,141,205,56,1,1,206,150,0,3,205,205,206,103,205,205,1,141,206,56,1,1,208,150,0,3,206,206,208,25,206,206,1,103,206,206,1,41,206,206,8,20,205,205,206,0,107,205,0,19,205,107,202,1,208,1,0,1,203,3,0,138,205,208,203,172,14,0,0,52,16,0,0,212,17,0,0,119,0,8,2,0,108,9,0,1,206,255,0,19,206,108,206,0,30,206,0,141,206,56,1,1,208,139,0,3,206,206,208,103,206,206,7,141,208,56,1,1,203,139,0,3,208,208,203,25,208,208,7,103,208,208,1,41,208,208,8,20,206,206,208,0,109,206,0,141,206,56,1,1,208,139,0,3,206,206,208,103,206,206,9,141,208,56,1,1,203,139,0,3,208,208,203,25,208,208,9,103,208,208,1,41,208,208,8,20,206,206,208,0,110,206,0,0,112,9,0,141,206,56,1,141,208,56,1,1,203,128,0,92,208,208,203,108,206,112,208,141,208,56,1,25,208,208,112,141,206,56,1,1,203,128,0,3,206,206,203,104,206,206,2,108,208,2,206,141,206,56,1,25,206,206,112,141,208,56,1,1,203,128,0,3,208,208,203,104,208,208,4,108,206,4,208,141,208,56,1,25,208,208,112,141,206,56,1,1,203,128,0,3,206,206,203,104,206,206,6,108,208,6,206,141,206,56,1,25,206,206,112,1,208,3,0,1,203,3,0,1,204,12,0,1,207,255,0,19,204,204,207,135,113,12,0,109,110,206,208,203,112,6,204,1,204,0,0,41,203,113,16,42,203,203,16,56,204,204,203,200,15,0,0,119,0,193,1,141,204,56,1,91,204,204,200,141,203,56,1,3,203,203,200,103,203,203,1,41,203,203,8,20,204,204,203,0,115,204,0,41,204,113,16,42,204,204,16,19,203,115,202,53,204,204,203,0,16,0,0,119,0,179,1,141,204,56,1,1,203,255,0,19,203,113,203,95,204,200,203,141,203,56,1,3,203,203,200,42,204,113,8,107,203,1,204,1,204,1,0,143,204,40,1,1,204,1,0,143,204,47,1,119,0,166,1,141,204,56,1,1,203,139,0,90,116,204,203,1,204,255,0,19,204,116,204,33,204,204,0,120,204,2,0,119,0,158,1,141,204,56,1,1,203,139,0,3,204,204,203,102,117,204,2,41,204,117,24,42,204,204,24,33,204,204,0,120,204,150,1,141,204,56,1,1,203,139,0,3,204,204,203,103,204,204,7,141,203,56,1,1,208,139,0,3,203,203,208,25,203,203,7,103,203,203,1,41,203,203,8,20,204,204,203,0,119,204,0,141,204,56,1,1,203,139,0,3,204,204,203,103,204,204,9,141,203,56,1,1,208,139,0,3,203,203,208,25,203,203,9,103,203,203,1,41,203,203,8,20,204,204,203,0,120,204,0,0,121,9,0,141,204,56,1,141,203,56,1,1,208,128,0,92,203,203,208,108,204,120,203,141,203,56,1,25,203,203,120,141,204,56,1,1,208,128,0,3,204,204,208,104,204,204,2,108,203,2,204,141,204,56,1,25,204,204,120,141,203,56,1,1,208,128,0,3,203,203,208,104,203,203,4,108,204,4,203,141,203,56,1,25,203,203,120,141,204,56,1,1,208,128,0,3,204,204,208,104,204,204,6,108,203,6,204,141,204,56,1,25,204,204,120,1,203,3,0,1,208,3,0,1,206,12,0,1,207,255,0,19,206,206,207,135,122,12,0,119,120,204,203,208,121,6,206,41,206,122,16,42,206,206,16,34,206,206,0,121,206,4,0,1,206,50,0,143,206,55,1,119,0,64,2,2,206,0,0,187,214,2,0,78,124,206,0,1,206,255,0,19,206,124,206,33,206,206,0,120,206,2,0,119,0,56,2,0,125,36,0,41,206,122,16,42,206,206,16,1,208,255,0,19,208,125,208,53,206,206,208,196,17,0,0,119,0,48,2,1,206,255,0,19,206,122,206,0,36,206,0,119,0,62,1,141,206,56,1,1,208,139,0,3,206,206,208,103,206,206,9,141,208,56,1,1,203,139,0,3,208,208,203,25,208,208,9,103,208,208,1,41,208,208,8,20,206,206,208,0,127,206,0,141,206,56,1,1,208,139,0,3,206,206,208,103,206,206,5,141,208,56,1,1,203,139,0,3,208,208,203,25,208,208,5,103,208,208,1,41,208,208,8,20,206,206,208,0,128,206,0,0,130,30,0,1,206,255,0,19,206,130,206,41,208,127,16,42,208,208,16,41,203,128,16,42,203,203,16,4,208,208,203,19,208,208,202,41,208,208,16,42,208,208,16,1,203,12,0,1,204,255,0,19,203,203,204,6,208,208,203,38,208,208,255,19,208,208,202,41,208,208,16,42,208,208,16,4,206,206,208,19,206,206,202,0,98,206,0,0,132,98,0,0,133,13,0,41,206,132,16,42,206,206,16,1,208,0,0,19,203,6,202,19,204,133,202,4,203,203,204,135,134,13,0,206,208,203,0,19,203,134,202,0,98,203,0,0,135,98,0,0,136,9,0,41,203,135,16,42,203,203,16,19,208,136,202,53,203,203,208,220,18,0,0,119,0,252,0,0,137,98,0,0,9,137,0,0,138,9,0,19,203,138,202,19,208,3,202,5,140,203,208,19,208,140,202,0,16,208,0,1,208,1,0,143,208,40,1,119,0,241,0,141,205,56,1,1,208,150,0,90,141,205,208,1,205,255,0,19,205,141,205,33,205,205,5,120,205,247,253,141,205,56,1,1,208,150,0,3,205,205,208,103,205,205,1,141,208,56,1,1,203,150,0,3,208,208,203,25,208,208,1,103,208,208,1,41,208,208,8,20,205,205,208,0,142,205,0,19,205,142,202,1,203,34,0,1,208,7,0,138,205,203,208,132,19,0,0,48,21,0,0,128,19,0,0,128,19,0,0,128,19,0,0,184,22,0,0,188,22,0,0,119,0,210,0,141,208,56,1,91,208,208,200,141,203,56,1,3,203,203,200,103,203,203,1,41,203,203,8,20,208,208,203,0,143,208,0,41,208,143,16,42,208,208,16,33,208,208,0,120,208,32,0,141,208,56,1,19,203,6,202,26,203,203,1,19,203,203,202,1,206,255,0,19,203,203,206,95,208,200,203,141,203,56,1,3,203,203,200,19,208,6,202,26,208,208,1,19,208,208,202,42,208,208,8,107,203,1,208,0,144,13,0,19,208,6,202,19,203,144,202,4,208,208,203,19,208,208,202,0,9,208,0,0,145,9,0,19,208,145,202,19,203,3,202,5,146,208,203,19,203,146,202,0,16,203,0,1,203,1,0,143,203,40,1,1,203,1,0,143,203,47,1,119,0,167,0,141,203,56,1,91,203,203,200,141,208,56,1,3,208,208,200,103,208,208,1,41,208,208,8,20,203,203,208,0,147,203,0,41,203,147,16,42,203,203,16,33,203,203,0,121,203,25,0,141,203,56,1,91,203,203,200,141,208,56,1,3,208,208,200,103,208,208,1,41,208,208,8,20,203,203,208,0,148,203,0,141,203,56,1,19,208,148,202,26,208,208,1,19,208,208,202,1,206,255,0,19,208,208,206,95,203,200,208,141,208,56,1,3,208,208,200,19,203,148,202,26,203,203,1,19,203,203,202,42,203,203,8,107,208,1,203,1,203,1,0,143,203,47,1,141,203,56,1,91,203,203,200,141,208,56,1,3,208,208,200,103,208,208,1,41,208,208,8,20,203,203,208,0,149,203,0,0,150,9,0,19,203,149,202,19,208,150,202,54,203,203,208,248,20,0,0,119,0,117,0,0,151,9,0,19,203,151,202,26,203,203,1,19,203,203,202,0,9,203,0,0,153,16,0,19,203,153,202,19,208,3,202,4,203,203,208,19,203,203,202,0,16,203,0,1,203,1,0,143,203,40,1,119,0,103,0,141,203,56,1,91,203,203,200,141,208,56,1,3,208,208,200,103,208,208,1,41,208,208,8,20,203,203,208,0,154,203,0,19,203,154,202,19,208,6,202,26,208,208,1,45,203,203,208,168,21,0,0,141,203,56,1,1,208,0,0,1,206,255,0,19,208,208,206,95,203,200,208,141,208,56,1,3,208,208,200,1,203,0,0,42,203,203,8,107,208,1,203,1,9,0,0,1,16,0,0,1,203,1,0,143,203,40,1,1,203,1,0,143,203,47,1,119,0,73,0,141,203,56,1,91,203,203,200,141,208,56,1,3,208,208,200,103,208,208,1,41,208,208,8,20,203,203,208,0,155,203,0,19,203,155,202,19,208,6,202,26,208,208,1,47,203,203,208,60,22,0,0,141,203,56,1,91,203,203,200,141,208,56,1,3,208,208,200,103,208,208,1,41,208,208,8,20,203,203,208,0,156,203,0,141,203,56,1,19,208,156,202,25,208,208,1,19,208,208,202,1,206,255,0,19,208,208,206,95,203,200,208,141,208,56,1,3,208,208,200,19,203,156,202,25,203,203,1,19,203,203,202,42,203,203,8,107,208,1,203,1,203,1,0,143,203,47,1,141,203,56,1,91,203,203,200,141,208,56,1,3,208,208,200,103,208,208,1,41,208,208,8,20,203,203,208,0,157,203,0,0,158,9,0,0,159,13,0,19,203,159,202,19,208,157,202,19,206,158,202,4,208,208,206,56,203,203,208,128,22,0,0,119,0,19,0,0,160,9,0,19,203,160,202,25,203,203,1,19,203,203,202,0,9,203,0,0,161,16,0,19,203,161,202,19,208,3,202,3,203,203,208,19,203,203,202,0,16,203,0,1,203,1,0,143,203,40,1,119,0,5,0,119,0,242,0,1,208,70,0,143,208,55,1,119,0,239,0,141,205,40,1,0,163,205,0,19,205,163,202,33,205,205,0,120,205,7,0,141,205,47,1,0,164,205,0,19,205,164,202,33,205,205,0,120,205,2,0,119,0,3,253,1,205,19,19,135,165,0,0,205,0,0,0,33,205,165,0,121,205,46,0,1,102,19,19,0,166,102,0,1,205,0,0,53,205,166,205,32,23,0,0,119,0,40,0,135,167,1,0,0,106,167,0,0,168,106,0,1,205,0,0,53,205,168,205,60,23,0,0,119,0,31,0,0,169,106,0,82,170,169,0,106,171,170,8,0,111,171,0,0,172,111,0,1,205,0,0,53,205,172,205,96,23,0,0,119,0,17,0,0,173,111,0,1,203,1,0,141,208,56,1,3,208,208,200,1,206,0,0,1,204,0,0,135,205,2,0,173,201,203,208,206,204,0,0,0,174,102,0,0,175,106,0,134,205,0,0,16,21,1,0,174,175,0,0,1,111,0,0,119,0,236,255,0,176,106,0,135,205,3,0,176,0,0,0,1,106,0,0,119,0,222,255,1,102,0,0,119,0,213,255,2,205,0,0,192,214,2,0,78,177,205,0,2,205,0,0,193,214,2,0,78,178,205,0,2,205,0,0,194,214,2,0,78,179,205,0,2,205,0,0,195,214,2,0,78,180,205,0,1,204,255,0,19,204,177,204,1,206,255,0,19,206,178,206,1,208,255,0,19,208,179,208,1,203,255,0,19,203,180,203,135,205,5,0,204,206,208,203,2,205,0,0,192,214,2,0,78,181,205,0,2,205,0,0,193,214,2,0,78,182,205,0,0,183,16,0,1,203,255,0,19,203,181,203,1,208,255,0,19,208,182,208,19,206,183,202,3,206,2,206,135,205,7,0,203,208,206,0,141,205,56,1,91,205,205,200,141,206,56,1,3,206,206,200,103,206,206,1,41,206,206,8,20,205,205,206,0,185,205,0,0,186,9,0,19,205,186,202,19,206,185,202,49,205,205,206,92,25,0,0,141,205,56,1,91,205,205,200,141,206,56,1,3,206,206,200,103,206,206,1,41,206,206,8,20,205,205,206,0,187,205,0,0,188,9,0,0,189,13,0,19,205,187,202,19,206,188,202,19,208,189,202,3,206,206,208,47,205,205,206,92,25,0,0,2,205,0,0,193,214,2,0,78,190,205,0,141,205,56,1,91,205,205,200,141,206,56,1,3,206,206,200,103,206,206,1,41,206,206,8,20,205,205,206,0,191,205,0,0,192,9,0,1,205,255,0,19,205,190,205,19,206,191,202,19,208,192,202,4,206,206,208,27,206,206,12,3,205,205,206,19,205,205,202,0,193,205,0,2,205,0,0,192,214,2,0,78,195,205,0,0,196,193,0,2,205,0,0,194,214,2,0,78,197,205,0,0,198,193,0,1,206,255,0,19,206,195,206,1,208,255,0,19,208,197,208,19,203,198,202,25,203,203,12,19,203,203,202,135,205,8,0,206,196,208,203,1,205,43,19,135,199,0,0,205,0,0,0,33,205,199,0,120,205,2,0,119,0,99,252,1,114,43,19,0,205,114,0,143,205,0,1,141,205,0,1,1,203,0,0,53,205,205,203,148,25,0,0,119,0,91,252,135,205,1,0,143,205,1,1,141,205,1,1,0,118,205,0,0,205,118,0,143,205,2,1,141,205,2,1,1,203,0,0,53,205,205,203,192,25,0,0,119,0,47,0,0,205,118,0,143,205,4,1,141,203,4,1,82,205,203,0,143,205,5,1,141,203,5,1,106,205,203,8,143,205,6,1,141,205,6,1,0,123,205,0,0,205,123,0,143,205,7,1,141,205,7,1,1,203,0,0,53,205,205,203,4,26,0,0,119,0,23,0,0,205,123,0,143,205,8,1,141,203,8,1,1,208,1,0,141,206,56,1,3,206,206,200,1,204,0,0,1,207,0,0,135,205,2,0,203,201,208,206,204,207,0,0,0,205,114,0,143,205,9,1,0,205,118,0,143,205,10,1,141,207,9,1,141,204,10,1,134,205,0,0,16,21,1,0,207,204,0,0,1,123,0,0,119,0,228,255,0,205,118,0,143,205,11,1,141,204,11,1,135,205,3,0,204,0,0,0,1,118,0,0,119,0,204,255,1,114,0,0,119,0,191,255,141,205,55,1,32,205,205,50,121,205,12,0,141,205,56,1,1,204,255,255,1,207,255,0,19,204,204,207,95,205,200,204,141,204,56,1,3,204,204,200,1,205,255,255,42,205,205,8,107,204,1,205,119,0,14,0,141,205,55,1,32,205,205,70,121,205,11,0,141,205,56,1,1,204,255,255,1,207,255,0,19,204,204,207,95,205,200,204,141,204,56,1,3,204,204,200,1,205,255,255,42,205,205,8,107,204,1,205,2,205,0,0,191,214,2,0,1,204,1,0,83,205,204,0,2,204,0,0,192,214,2,0,1,205,0,0,83,204,205,0,2,205,0,0,193,214,2,0,1,204,0,0,83,205,204,0,1,205,161,32,79,205,205,0,1,207,161,32,103,207,207,1,41,207,207,8,20,205,205,207,0,204,205,0,143,204,12,1,2,204,0,0,194,214,2,0,141,205,12,1,19,205,205,202,26,205,205,1,1,207,255,0,19,205,205,207,83,204,205,0,1,204,163,32,79,204,204,0,1,207,163,32,103,207,207,1,41,207,207,8,20,204,204,207,0,205,204,0,143,205,13,1,2,205,0,0,195,214,2,0,141,204,13,1,19,204,204,202,26,204,204,1,1,207,255,0,19,204,204,207,83,205,204,0,1,205,66,19,135,204,0,0,205,0,0,0,143,204,14,1,141,204,14,1,33,204,204,0,120,204,14,0,141,205,56,1,91,205,205,200,141,207,56,1,3,207,207,200,103,207,207,1,41,207,207,8,20,205,205,207,0,204,205,0,143,204,28,1,141,204,56,1,137,204,0,0,141,204,28,1,139,204,0,0,1,126,66,19,0,204,126,0,143,204,16,1,141,204,16,1,1,205,0,0,53,204,204,205,12,28,0,0,119,0,60,0,135,204,1,0,143,204,17,1,141,204,17,1,0,129,204,0,0,204,129,0,143,204,18,1,141,204,18,1,1,205,0,0,53,204,204,205,56,28,0,0,119,0,47,0,0,204,129,0,143,204,19,1,141,205,19,1,82,204,205,0,143,204,20,1,141,205,20,1,106,204,205,8,143,204,21,1,141,204,21,1,0,131,204,0,0,204,131,0,143,204,22,1,141,204,22,1,1,205,0,0,53,204,204,205,124,28,0,0,119,0,23,0,0,204,131,0,143,204,24,1,141,205,24,1,1,207,1,0,141,206,56,1,3,206,206,200,1,208,0,0,1,203,0,0,135,204,2,0,205,201,207,206,208,203,0,0,0,204,126,0,143,204,25,1,0,204,129,0,143,204,26,1,141,203,25,1,141,208,26,1,134,204,0,0,16,21,1,0,203,208,0,0,1,131,0,0,119,0,228,255,0,204,129,0,143,204,27,1,141,208,27,1,135,204,3,0,208,0,0,0,1,129,0,0,119,0,204,255,1,126,0,0,119,0,191,255,141,208,56,1,91,208,208,200,141,203,56,1,3,203,203,200,103,203,203,1,41,203,203,8,20,208,208,203,0,204,208,0,143,204,28,1,141,204,56,1,137,204,0,0,141,204,28,1,139,204,0,0,140,2,19,1,0,0,0,0,2,200,0,0,127,166,2,0,2,201,0,0,59,166,2,0,2,202,0,0,255,0,0,0,1,203,0,0,143,203,16,1,136,204,0,0,0,203,204,0,143,203,17,1,136,203,0,0,1,204,192,0,3,203,203,204,137,203,0,0,1,203,136,20,78,128,203,0,135,135,14,0,136,203,0,0,0,138,203,0,136,203,0,0,19,204,128,202,27,204,204,1,25,204,204,15,38,204,204,240,3,203,203,204,137,203,0,0,141,204,17,1,1,205,153,0,3,203,204,205,143,203,15,1,141,205,15,1,25,203,205,11,143,203,18,1,141,203,15,1,1,205,0,0,83,203,205,0,141,203,15,1,25,205,203,1,143,205,15,1,141,205,15,1,141,203,18,1,54,205,205,203,188,29,0,0,1,25,0,0,135,205,15,0,141,205,17,1,1,203,0,0,19,203,203,202,107,205,64,203,141,203,17,1,25,203,203,64,1,205,0,0,42,205,205,8,19,205,205,202,107,203,1,205,141,205,17,1,25,205,205,64,1,203,0,0,42,203,203,16,19,203,203,202,107,205,2,203,141,203,17,1,25,203,203,64,1,205,0,0,42,205,205,24,107,203,3,205,141,205,17,1,103,205,205,64,141,203,17,1,25,203,203,64,103,203,203,1,41,203,203,8,20,205,205,203,141,203,17,1,25,203,203,64,103,203,203,2,41,203,203,16,20,205,205,203,141,203,17,1,25,203,203,64,103,203,203,3,41,203,203,24,20,205,205,203,0,145,205,0,141,205,17,1,103,205,205,64,141,203,17,1,25,203,203,64,103,203,203,1,41,203,203,8,20,205,205,203,141,203,17,1,25,203,203,64,103,203,203,2,41,203,203,16,20,205,205,203,141,203,17,1,25,203,203,64,103,203,203,3,41,203,203,24,20,205,205,203,0,163,205,0,55,205,145,1,220,30,0,0,119,0,105,0,27,205,163,6,143,205,9,1,141,205,17,1,103,205,205,64,141,203,17,1,25,203,203,64,103,203,203,1,41,203,203,8,20,205,205,203,141,203,17,1,25,203,203,64,103,203,203,2,41,203,203,16,20,205,205,203,141,203,17,1,25,203,203,64,103,203,203,3,41,203,203,24,20,205,205,203,0,171,205,0,41,205,171,1,91,205,0,205,41,203,171,1,3,203,0,203,103,203,203,1,41,203,203,8,20,205,205,203,0,178,205,0,141,205,9,1,0,182,205,0,2,203,0,0,73,191,2,0,3,203,203,182,134,205,0,0,116,120,2,0,178,203,0,0,2,205,0,0,73,191,2,0,135,194,4,0,205,0,0,0,141,203,9,1,0,205,203,0,143,205,5,1,141,205,5,1,25,205,205,6,47,205,194,205,200,31,0,0,141,203,9,1,0,205,203,0,143,205,6,1,2,203,0,0,73,191,2,0,3,203,203,194,1,204,32,0,141,206,6,1,25,206,206,6,4,206,206,194,135,205,16,0,203,204,206,0,141,206,17,1,103,206,206,64,141,204,17,1,25,204,204,64,103,204,204,1,41,204,204,8,20,206,206,204,141,204,17,1,25,204,204,64,103,204,204,2,41,204,204,16,20,206,206,204,141,204,17,1,25,204,204,64,103,204,204,3,41,204,204,24,20,206,206,204,0,205,206,0,143,205,7,1,141,205,17,1,141,206,7,1,25,206,206,1,19,206,206,202,107,205,64,206,141,206,17,1,25,206,206,64,141,205,7,1,25,205,205,1,42,205,205,8,19,205,205,202,107,206,1,205,141,205,17,1,25,205,205,64,141,206,7,1,25,206,206,1,42,206,206,16,19,206,206,202,107,205,2,206,141,206,17,1,25,206,206,64,141,205,7,1,25,205,205,1,42,205,205,24,107,206,3,205,119,0,114,255,2,205,0,0,73,191,2,0,27,206,163,6,1,204,0,0,95,205,206,204,1,206,161,32,79,206,206,0,1,205,161,32,103,205,205,1,41,205,205,8,20,206,206,205,0,204,206,0,143,204,8,1,1,206,163,32,79,206,206,0,1,205,163,32,103,205,205,1,41,205,205,8,20,206,206,205,0,204,206,0,143,204,10,1,1,206,0,0,1,205,0,0,141,203,8,1,2,207,0,0,255,255,0,0,19,203,203,207,26,203,203,1,2,207,0,0,255,255,0,0,19,203,203,207,141,207,10,1,2,208,0,0,255,255,0,0,19,207,207,208,26,207,207,1,2,208,0,0,255,255,0,0,19,207,207,208,135,204,6,0,206,205,203,207,1,207,1,0,1,203,45,0,135,204,17,0,207,203,138,0,1,203,72,0,1,207,4,0,135,204,7,0,203,207,138,0,1,207,47,0,1,203,1,0,1,205,60,0,1,206,20,0,1,208,1,0,135,204,18,0,207,203,205,206,208,0,0,0,1,208,163,32,79,208,208,0,1,206,163,32,103,206,206,1,41,206,206,8,20,208,208,206,0,204,208,0,143,204,11,1,141,204,11,1,2,208,0,0,255,255,0,0,19,204,204,208,26,204,204,1,26,204,204,6,26,204,204,13,1,208,12,0,19,208,208,202,6,204,204,208,38,204,204,255,2,208,0,0,255,255,0,0,19,204,204,208,0,32,204,0,141,204,17,1,1,208,144,0,1,206,13,0,19,206,206,202,95,204,208,206,141,206,17,1,1,208,144,0,3,206,206,208,1,208,13,0,42,208,208,8,107,206,1,208,141,208,17,1,1,206,144,0,3,208,208,206,1,206,13,0,19,206,206,202,107,208,2,206,141,206,17,1,1,208,144,0,3,206,206,208,25,206,206,2,1,208,13,0,42,208,208,8,107,206,1,208,141,208,17,1,1,206,144,0,3,208,208,206,1,206,53,0,19,206,206,202,107,208,4,206,141,206,17,1,1,208,144,0,3,206,206,208,25,206,206,4,1,208,53,0,42,208,208,8,107,206,1,208,1,206,12,0,19,206,206,202,2,204,0,0,255,255,0,0,19,204,32,204,5,208,206,204,143,208,12,1,141,208,17,1,1,204,144,0,3,208,208,204,141,204,12,1,25,204,204,13,2,206,0,0,255,255,0,0,19,204,204,206,19,204,204,202,107,208,6,204,141,204,17,1,1,208,144,0,3,204,204,208,25,204,204,6,141,208,12,1,25,208,208,13,2,206,0,0,255,255,0,0,19,208,208,206,42,208,208,8,107,204,1,208,141,204,17,1,1,206,144,0,91,204,204,206,141,206,17,1,1,205,144,0,3,206,206,205,103,206,206,1,41,206,206,8,20,204,204,206,0,208,204,0,143,208,13,1,141,204,17,1,1,206,144,0,3,204,204,206,103,204,204,2,141,206,17,1,1,205,144,0,3,206,206,205,25,206,206,2,103,206,206,1,41,206,206,8,20,204,204,206,0,208,204,0,143,208,14,1,141,208,17,1,1,204,144,0,3,208,208,204,103,208,208,4,141,204,17,1,1,206,144,0,3,204,204,206,25,204,204,4,103,204,204,1,41,204,204,8,20,208,208,204,0,3,208,0,141,208,17,1,1,204,144,0,3,208,208,204,103,208,208,6,141,204,17,1,1,206,144,0,3,204,204,206,25,204,204,6,103,204,204,1,41,204,204,8,20,208,208,204,0,4,208,0,141,204,13,1,141,206,14,1,41,206,206,16,42,206,206,16,26,206,206,3,2,205,0,0,255,255,0,0,19,206,206,205,41,205,4,16,42,205,205,16,25,205,205,2,2,203,0,0,255,255,0,0,19,205,205,203,135,208,6,0,204,206,3,205,1,208,161,32,79,208,208,0,1,205,161,32,103,205,205,1,41,205,205,8,20,208,208,205,0,5,208,0,141,205,17,1,1,206,136,0,3,205,205,206,2,206,0,0,255,255,0,0,19,206,5,206,26,206,206,28,2,204,0,0,255,255,0,0,19,206,206,204,1,204,0,0,1,203,27,0,1,207,15,0,135,208,19,0,205,206,204,203,207,0,0,0,141,208,17,1,141,207,17,1,1,203,136,0,92,207,207,203,108,208,104,207,141,207,17,1,25,207,207,104,141,208,17,1,1,203,136,0,3,208,208,203,104,208,208,2,108,207,2,208,141,208,17,1,25,208,208,104,141,207,17,1,1,203,136,0,3,207,207,203,104,207,207,4,108,208,4,207,141,207,17,1,25,207,207,104,141,208,17,1,1,203,136,0,3,208,208,203,104,208,208,6,108,207,6,208,141,207,17,1,25,207,207,104,1,203,225,20,135,208,20,0,207,203,0,0,2,208,0,0,24,180,2,0,82,7,208,0,1,208,2,0,1,203,6,0,135,8,21,0,208,203,7,0,1,203,0,0,143,203,9,1,141,203,17,1,1,208,0,0,19,208,208,202,107,203,64,208,141,208,17,1,25,208,208,64,1,203,0,0,42,203,203,8,19,203,203,202,107,208,1,203,141,203,17,1,25,203,203,64,1,208,0,0,42,208,208,16,19,208,208,202,107,203,2,208,141,208,17,1,25,208,208,64,1,203,0,0,42,203,203,24,107,208,3,203,1,13,0,0,141,203,9,1,0,9,203,0,2,208,0,0,73,191,2,0,19,207,9,202,135,203,22,0,208,207,0,0,141,203,17,1,103,203,203,64,141,207,17,1,25,207,207,64,103,207,207,1,41,207,207,8,20,203,203,207,141,207,17,1,25,207,207,64,103,207,207,2,41,207,207,16,20,203,203,207,141,207,17,1,25,207,207,64,103,207,207,3,41,207,207,24,20,203,203,207,0,10,203,0,141,203,9,1,0,11,203,0,4,203,10,11,1,207,12,0,19,207,207,202,5,12,203,207,25,207,12,0,25,6,207,13,0,14,6,0,0,15,6,0,1,203,16,0,2,208,0,0,255,255,0,0,19,208,14,208,1,204,51,0,1,206,12,0,19,206,206,202,3,206,15,206,2,205,0,0,255,255,0,0,19,206,206,205,135,207,8,0,203,208,204,206,141,207,17,1,103,207,207,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,207,207,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,207,207,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,207,207,206,0,16,207,0,41,207,16,1,91,207,0,207,41,206,16,1,3,206,0,206,103,206,206,1,41,206,206,8,20,207,207,206,0,17,207,0,135,18,23,0,17,138,0,0,19,207,18,202,0,2,207,0,141,207,9,1,0,19,207,0,2,206,0,0,73,191,2,0,19,204,19,202,135,207,22,0,206,204,0,0,141,207,17,1,103,207,207,64,141,204,17,1,25,204,204,64,103,204,204,1,41,204,204,8,20,207,207,204,141,204,17,1,25,204,204,64,103,204,204,2,41,204,204,16,20,207,207,204,141,204,17,1,25,204,204,64,103,204,204,3,41,204,204,24,20,207,207,204,0,20,207,0,141,207,9,1,0,21,207,0,4,207,20,21,1,204,12,0,19,204,204,202,5,22,207,204,25,204,22,0,25,6,204,13,0,23,6,0,1,204,13,0,49,204,204,23,80,39,0,0,0,24,6,0,1,204,12,0,19,204,204,202,2,207,0,0,255,255,0,0,19,207,32,207,5,26,204,207,1,207,12,0,19,207,207,202,3,207,24,207,25,204,26,13,49,207,207,204,80,39,0,0,0,27,6,0,0,28,6,0,1,204,16,0,2,206,0,0,255,255,0,0,19,206,27,206,1,208,51,0,1,203,12,0,19,203,203,202,3,203,28,203,2,205,0,0,255,255,0,0,19,203,203,205,135,207,8,0,204,206,208,203,141,207,17,1,103,207,207,64,141,203,17,1,25,203,203,64,103,203,203,1,41,203,203,8,20,207,207,203,141,203,17,1,25,203,203,64,103,203,203,2,41,203,203,16,20,207,207,203,141,203,17,1,25,203,203,64,103,203,203,3,41,203,203,24,20,207,207,203,0,29,207,0,41,207,29,1,91,207,0,207,41,203,29,1,3,203,0,203,103,203,203,1,41,203,203,8,20,207,207,203,0,30,207,0,135,31,23,0,30,138,0,0,19,207,31,202,0,2,207,0,1,207,230,20,135,33,0,0,207,0,0,0,33,207,33,0,121,207,73,0,1,51,230,20,0,34,51,0,1,207,0,0,53,207,34,207,244,39,0,0,119,0,67,0,135,35,1,0,0,54,35,0,0,36,54,0], eb + 0);
  HEAPU8.set([1,207,0,0,53,207,36,207,16,40,0,0,119,0,58,0,0,37,54,0,82,38,37,0,106,39,38,8,0,58,39,0,0,40,58,0,1,207,0,0,53,207,40,207,52,40,0,0,119,0,44,0,0,41,58,0,1,203,0,0,141,208,17,1,25,208,208,64,1,206,0,0,1,204,0,0,135,207,2,0,41,200,203,208,206,204,0,0,0,42,58,0,141,207,17,1,103,207,207,64,141,204,17,1,25,204,204,64,103,204,204,1,41,204,204,8,20,207,207,204,141,204,17,1,25,204,204,64,103,204,204,2,41,204,204,16,20,207,207,204,141,204,17,1,25,204,204,64,103,204,204,3,41,204,204,24,20,207,207,204,0,43,207,0,1,204,0,0,41,206,43,1,3,206,0,206,1,208,0,0,1,203,0,0,135,207,2,0,42,201,204,206,208,203,0,0,0,44,51,0,0,45,54,0,134,207,0,0,16,21,1,0,44,45,0,0,1,58,0,0,119,0,209,255,0,46,54,0,135,207,3,0,46,0,0,0,1,54,0,0,119,0,195,255,1,51,0,0,119,0,186,255,141,203,17,1,1,208,164,0,3,203,203,208,134,207,0,0,100,208,2,0,203,0,0,0,141,207,17,1,1,203,164,0,90,47,207,203,19,207,47,202,32,207,207,5,121,207,170,1,0,48,6,0,1,207,13,0,49,207,207,48,172,41,0,0,0,49,6,0,1,207,12,0,19,207,207,202,2,203,0,0,255,255,0,0,19,203,32,203,5,52,207,203,1,203,12,0,19,203,203,202,3,203,49,203,25,207,52,13,49,203,203,207,172,41,0,0,0,53,6,0,0,55,6,0,1,207,16,0,2,208,0,0,255,255,0,0,19,208,53,208,1,206,51,0,1,204,12,0,19,204,204,202,3,204,55,204,2,205,0,0,255,255,0,0,19,204,204,205,135,203,8,0,207,208,206,204,0,56,13,0,41,203,56,24,42,203,203,24,33,203,203,0,121,203,6,0,0,57,2,0,19,204,57,202,135,203,24,0,204,138,8,0,1,13,0,0,141,203,17,1,1,204,164,0,3,203,203,204,103,203,203,1,141,204,17,1,1,206,164,0,3,204,204,206,25,204,204,1,103,204,204,1,41,204,204,8,20,203,203,204,0,59,203,0,2,203,0,0,255,255,0,0,19,203,59,203,1,204,34,0,1,206,7,0,138,203,204,206,60,42,0,0,148,43,0,0,56,42,0,0,56,42,0,0,56,42,0,0,4,45,0,0,16,45,0,0,119,0,185,0,141,204,17,1,103,204,204,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,204,204,206,0,60,204,0,33,204,60,0,121,204,165,0,141,204,17,1,103,204,204,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,204,204,206,0,61,204,0,141,204,9,1,0,62,204,0,45,204,61,62,244,42,0,0,141,204,9,1,0,63,204,0,26,204,63,1,143,204,9,1,141,204,17,1,103,204,204,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,204,204,206,0,65,204,0,141,204,17,1,26,206,65,1,19,206,206,202,107,204,64,206,141,206,17,1,25,206,206,64,26,204,65,1,42,204,204,8,19,204,204,202,107,206,1,204,141,204,17,1,25,204,204,64,26,206,65,1,42,206,206,16,19,206,206,202,107,204,2,206,141,206,17,1,25,206,206,64,26,204,65,1,42,204,204,24,107,206,3,204,119,0,99,0,141,204,17,1,103,204,204,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,204,204,206,0,66,204,0,26,204,1,1,48,204,66,204,0,45,0,0,141,204,17,1,103,204,204,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,204,204,206,0,67,204,0,141,204,17,1,25,206,67,1,19,206,206,202,107,204,64,206,141,206,17,1,25,206,206,64,25,204,67,1,42,204,204,8,19,204,204,202,107,206,1,204,141,204,17,1,25,204,204,64,25,206,67,1,42,206,206,16,19,206,206,202,107,204,2,206,141,206,17,1,25,206,206,64,25,204,67,1,42,204,204,24,107,206,3,204,141,204,17,1,103,204,204,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,204,204,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,204,204,206,0,68,204,0,141,204,9,1,0,69,204,0,2,204,0,0,255,255,0,0,19,204,32,204,26,204,204,1,4,206,68,69,47,204,204,206,0,45,0,0,141,204,9,1,0,71,204,0,25,204,71,1,143,204,9,1,119,0,7,0,1,204,34,0,143,204,16,1,119,0,196,3,1,204,33,0,143,204,16,1,119,0,193,3,141,203,9,1,0,75,203,0,2,204,0,0,73,191,2,0,19,206,75,202,135,203,22,0,204,206,0,0,141,203,17,1,103,203,203,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,203,203,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,203,203,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,203,203,206,0,76,203,0,141,203,9,1,0,77,203,0,4,203,76,77,1,206,12,0,19,206,206,202,5,78,203,206,25,206,78,0,25,6,206,13,0,80,6,0,1,206,13,0,49,206,206,80,32,46,0,0,0,81,6,0,1,206,12,0,19,206,206,202,2,203,0,0,255,255,0,0,19,203,32,203,5,82,206,203,1,203,12,0,19,203,203,202,3,203,81,203,25,206,82,13,49,203,203,206,32,46,0,0,0,83,6,0,0,84,6,0,1,206,16,0,2,204,0,0,255,255,0,0,19,204,83,204,1,208,51,0,1,207,12,0,19,207,207,202,3,207,84,207,2,205,0,0,255,255,0,0,19,207,207,205,135,203,8,0,206,204,208,207,141,203,17,1,103,203,203,64,141,207,17,1,25,207,207,64,103,207,207,1,41,207,207,8,20,203,203,207,141,207,17,1,25,207,207,64,103,207,207,2,41,207,207,16,20,203,203,207,141,207,17,1,25,207,207,64,103,207,207,3,41,207,207,24,20,203,203,207,0,86,203,0,41,203,86,1,91,203,0,203,41,207,86,1,3,207,0,207,103,207,207,1,41,207,207,8,20,203,203,207,0,87,203,0,135,88,23,0,87,138,0,0,19,203,88,202,0,2,203,0,1,203,230,20,135,89,0,0,203,0,0,0,33,203,89,0,120,203,2,0,119,0,148,254,1,70,230,20,0,90,70,0,1,203,0,0,53,203,90,203,200,46,0,0,119,0,142,254,135,92,1,0,0,73,92,0,0,93,73,0,1,203,0,0,53,203,93,203,228,46,0,0,119,0,58,0,0,94,73,0,82,95,94,0,106,96,95,8,0,79,96,0,0,97,79,0,1,203,0,0,53,203,97,203,8,47,0,0,119,0,44,0,0,99,79,0,1,207,0,0,141,208,17,1,25,208,208,64,1,204,0,0,1,206,0,0,135,203,2,0,99,200,207,208,204,206,0,0,0,100,79,0,141,203,17,1,103,203,203,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,203,203,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,203,203,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,203,203,206,0,101,203,0,1,206,0,0,41,204,101,1,3,204,0,204,1,208,0,0,1,207,0,0,135,203,2,0,100,201,206,204,208,207,0,0,0,102,70,0,0,103,73,0,134,203,0,0,16,21,1,0,102,103,0,0,1,79,0,0,119,0,209,255,0,104,73,0,135,203,3,0,104,0,0,0,1,73,0,0,119,0,195,255,1,70,0,0,119,0,186,255,141,203,17,1,1,207,164,0,90,105,203,207,19,203,105,202,32,203,203,16,120,203,18,0,0,203,13,0,143,203,1,1,141,203,1,1,41,203,203,24,42,203,203,24,33,203,203,0,40,203,203,1,38,203,203,1,19,203,203,202,0,13,203,0,0,203,2,0,143,203,2,1,141,207,2,1,19,207,207,202,135,203,24,0,207,138,8,0,119,0,53,254,141,203,17,1,1,207,172,0,141,208,17,1,1,204,164,0,90,208,208,204,95,203,207,208,141,208,17,1,1,207,172,0,3,208,208,207,141,207,17,1,1,203,164,0,3,207,207,203,102,207,207,1,107,208,1,207,141,207,17,1,1,208,172,0,3,207,207,208,141,208,17,1,1,203,164,0,3,208,208,203,102,208,208,2,107,207,2,208,141,208,17,1,1,207,172,0,3,208,208,207,141,207,17,1,1,203,164,0,3,207,207,203,102,207,207,3,107,208,3,207,141,207,17,1,1,208,172,0,3,207,207,208,141,208,17,1,1,203,164,0,3,208,208,203,102,208,208,4,107,207,4,208,141,208,17,1,1,207,172,0,3,208,208,207,141,207,17,1,1,203,164,0,3,207,207,203,102,207,207,5,107,208,5,207,141,207,17,1,1,208,172,0,3,207,207,208,141,208,17,1,1,203,164,0,3,208,208,203,102,208,208,6,107,207,6,208,141,207,17,1,1,203,153,0,3,207,207,203,141,203,17,1,1,204,172,0,3,203,203,204,135,208,11,0,207,203,0,0,141,208,17,1,1,203,164,0,3,208,208,203,103,208,208,1,141,203,17,1,1,207,164,0,3,203,203,207,25,203,203,1,103,203,203,1,41,203,203,8,20,208,208,203,0,106,208,0,2,208,0,0,255,255,0,0,19,208,106,208,1,206,1,0,1,204,3,0,138,208,206,204,124,49,0,0,152,49,0,0,12,56,0,0,119,0,225,253,141,205,9,1,0,160,205,0,2,205,0,0,255,255,0,0,19,205,160,205,0,25,205,0,119,0,218,253,141,203,17,1,1,207,153,0,90,107,203,207,41,203,107,24,42,203,203,24,33,203,203,0,120,203,2,0,119,0,210,253,141,203,17,1,1,207,153,0,3,203,203,207,102,108,203,2,19,203,108,202,33,203,203,0,120,203,203,253,141,203,17,1,1,207,153,0,3,203,203,207,103,203,203,7,141,207,17,1,1,204,153,0,3,207,207,204,25,207,207,7,103,207,207,1,41,207,207,8,20,203,203,207,0,109,203,0,141,203,17,1,1,207,153,0,3,203,203,207,103,203,203,9,141,207,17,1,1,204,153,0,3,207,207,204,25,207,207,9,103,207,207,1,41,207,207,8,20,203,203,207,0,110,203,0,141,203,9,1,0,111,203,0,141,203,17,1,141,207,17,1,1,204,144,0,92,207,207,204,108,203,112,207,141,207,17,1,25,207,207,112,141,203,17,1,1,204,144,0,3,203,203,204,104,203,203,2,108,207,2,203,141,203,17,1,25,203,203,112,141,207,17,1,1,204,144,0,3,207,207,204,104,207,207,4,108,203,4,207,141,207,17,1,25,207,207,112,141,203,17,1,1,204,144,0,3,203,203,204,104,203,203,6,108,207,6,203,141,203,17,1,25,203,203,112,1,207,2,0,1,204,2,0,2,206,0,0,255,255,0,0,19,206,111,206,2,205,0,0,255,255,0,0,19,205,1,205,1,209,12,0,19,209,209,202,135,113,12,0,109,110,203,207,204,206,205,209,1,209,0,0,41,205,113,16,42,205,205,16,56,209,209,205,232,51,0,0,141,209,17,1,1,205,153,0,3,209,209,205,103,209,209,7,141,205,17,1,1,206,153,0,3,205,205,206,25,205,205,7,103,205,205,1,41,205,205,8,20,209,209,205,0,157,209,0,141,209,17,1,1,205,153,0,3,209,209,205,103,209,209,9,141,205,17,1,1,206,153,0,3,205,205,206,25,205,205,9,103,205,205,1,41,205,205,8,20,209,209,205,0,158,209,0,141,209,17,1,141,205,17,1,1,206,136,0,92,205,205,206,108,209,120,205,141,205,17,1,25,205,205,120,141,209,17,1,1,206,136,0,3,209,209,206,104,209,209,2,108,205,2,209,141,209,17,1,25,209,209,120,141,205,17,1,1,206,136,0,3,205,205,206,104,205,205,4,108,209,4,205,141,205,17,1,25,205,205,120,141,209,17,1,1,206,136,0,3,209,209,206,104,209,209,6,108,205,6,209,141,209,17,1,25,209,209,120,135,159,25,0,157,158,209,0,41,209,159,24,42,209,209,24,33,209,209,0,121,209,73,253,1,209,74,0,143,209,16,1,119,0,14,2,141,209,17,1,103,209,209,64,141,205,17,1,25,205,205,64,103,205,205,1,41,205,205,8,20,209,209,205,141,205,17,1,25,205,205,64,103,205,205,2,41,205,205,16,20,209,209,205,141,205,17,1,25,205,205,64,103,205,205,3,41,205,205,24,20,209,209,205,0,114,209,0,41,209,113,16,42,209,209,16,45,209,209,114,76,52,0,0,1,209,54,0,143,209,16,1,119,0,245,1,0,118,6,0,1,209,13,0,49,209,209,118,204,52,0,0,0,119,6,0,1,209,12,0,19,209,209,202,2,205,0,0,255,255,0,0,19,205,32,205,5,121,209,205,1,205,12,0,19,205,205,202,3,205,119,205,25,209,121,13,49,205,205,209,204,52,0,0,0,122,6,0,0,123,6,0,1,209,16,0,2,206,0,0,255,255,0,0,19,206,122,206,1,204,51,0,1,207,12,0,19,207,207,202,3,207,123,207,2,203,0,0,255,255,0,0,19,207,207,203,135,205,8,0,209,206,204,207,0,125,13,0,41,205,125,24,42,205,205,24,33,205,205,0,121,205,6,0,0,126,2,0,19,207,126,202,135,205,24,0,207,138,8,0,1,13,0,0,141,205,17,1,41,207,113,16,42,207,207,16,19,207,207,202,107,205,64,207,141,207,17,1,25,207,207,64,41,205,113,16,42,205,205,16,42,205,205,8,19,205,205,202,107,207,1,205,141,205,17,1,25,205,205,64,41,207,113,16,42,207,207,16,42,207,207,16,19,207,207,202,107,205,2,207,141,207,17,1,25,207,207,64,41,205,113,16,42,205,205,16,42,205,205,24,107,207,3,205,141,205,9,1,0,127,205,0,2,207,0,0,73,191,2,0,19,204,127,202,135,205,22,0,207,204,0,0,141,205,17,1,103,205,205,64,141,204,17,1,25,204,204,64,103,204,204,1,41,204,204,8,20,205,205,204,141,204,17,1,25,204,204,64,103,204,204,2,41,204,204,16,20,205,205,204,141,204,17,1,25,204,204,64,103,204,204,3,41,204,204,24,20,205,205,204,0,129,205,0,141,205,9,1,0,130,205,0,4,205,129,130,1,204,12,0,19,204,204,202,5,131,205,204,25,204,131,0,25,6,204,13,0,132,6,0,1,204,13,0,49,204,204,132,92,54,0,0,0,133,6,0,1,204,12,0,19,204,204,202,2,205,0,0,255,255,0,0,19,205,32,205,5,134,204,205,1,205,12,0,19,205,205,202,3,205,133,205,25,204,134,13,49,205,205,204,92,54,0,0,0,136,6,0,0,137,6,0,1,204,16,0,2,207,0,0,255,255,0,0,19,207,136,207,1,206,51,0,1,209,12,0,19,209,209,202,3,209,137,209,2,203,0,0,255,255,0,0,19,209,209,203,135,205,8,0,204,207,206,209,141,205,17,1,103,205,205,64,141,209,17,1,25,209,209,64,103,209,209,1,41,209,209,8,20,205,205,209,141,209,17,1,25,209,209,64,103,209,209,2,41,209,209,16,20,205,205,209,141,209,17,1,25,209,209,64,103,209,209,3,41,209,209,24,20,205,205,209,0,139,205,0,41,205,139,1,91,205,0,205,41,209,139,1,3,209,0,209,103,209,209,1,41,209,209,8,20,205,205,209,0,140,205,0,135,141,23,0,140,138,0,0,19,205,141,202,0,2,205,0,1,205,230,20,135,142,0,0,205,0,0,0,33,205,142,0,120,205,2,0,119,0,133,252,1,85,230,20,0,143,85,0,1,205,0,0,53,205,143,205,4,55,0,0,119,0,127,252,135,144,1,0,0,91,144,0,0,146,91,0,1,205,0,0,53,205,146,205,32,55,0,0,119,0,58,0,0,147,91,0,82,148,147,0,106,149,148,8,0,98,149,0,0,150,98,0,1,205,0,0,53,205,150,205,68,55,0,0,119,0,44,0,0,151,98,0,1,209,0,0,141,206,17,1,25,206,206,64,1,207,0,0,1,204,0,0,135,205,2,0,151,200,209,206,207,204,0,0,0,152,98,0,141,205,17,1,103,205,205,64,141,204,17,1,25,204,204,64,103,204,204,1,41,204,204,8,20,205,205,204,141,204,17,1,25,204,204,64,103,204,204,2,41,204,204,16,20,205,205,204,141,204,17,1,25,204,204,64,103,204,204,3,41,204,204,24,20,205,205,204,0,153,205,0,1,204,0,0,41,207,153,1,3,207,0,207,1,206,0,0,1,209,0,0,135,205,2,0,152,201,204,207,206,209,0,0,0,154,85,0,0,155,91,0,134,205,0,0,16,21,1,0,154,155,0,0,1,98,0,0,119,0,209,255,0,156,91,0,135,205,3,0,156,0,0,0,1,91,0,0,119,0,195,255,1,85,0,0,119,0,186,255,141,205,17,1,1,209,153,0,3,205,205,209,102,161,205,1,41,205,161,24,42,205,205,24,33,205,205,0,120,205,2,0,119,0,52,252,141,205,17,1,1,209,153,0,3,205,205,209,103,205,205,9,141,209,17,1,1,206,153,0,3,209,209,206,25,209,209,9,103,209,209,1,41,209,209,8,20,205,205,209,0,162,205,0,141,205,17,1,1,209,153,0,3,205,205,209,103,205,205,5,141,209,17,1,1,206,153,0,3,209,209,206,25,209,209,5,103,209,209,1,41,209,209,8,20,205,205,209,0,164,205,0,0,165,25,0,41,205,165,16,42,205,205,16,41,209,162,16,42,209,209,16,41,206,164,16,42,206,206,16,4,209,209,206,2,206,0,0,255,255,0,0,19,209,209,206,41,209,209,16,42,209,209,16,1,206,12,0,19,206,206,202,6,209,209,206,38,209,209,255,19,209,209,202,41,209,209,24,42,209,209,24,4,205,205,209,2,209,0,0,255,255,0,0,19,205,205,209,0,112,205,0,0,166,112,0,41,205,166,16,42,205,205,16,1,209,0,0,2,206,0,0,255,255,0,0,19,206,32,206,4,206,1,206,135,167,13,0,205,209,206,0,2,206,0,0,255,255,0,0,19,206,167,206,0,112,206,0,0,168,112,0,141,206,9,1,0,169,206,0,41,206,168,16,42,206,206,16,53,206,206,169,76,57,0,0,119,0,237,251,0,170,112,0,41,209,170,16,42,209,209,16,0,206,209,0,143,206,9,1,141,206,9,1,0,172,206,0,2,209,0,0,73,191,2,0,19,205,172,202,135,206,22,0,209,205,0,0,141,206,17,1,103,206,206,64,141,205,17,1,25,205,205,64,103,205,205,1,41,205,205,8,20,206,206,205,141,205,17,1,25,205,205,64,103,205,205,2,41,205,205,16,20,206,206,205,141,205,17,1,25,205,205,64,103,205,205,3,41,205,205,24,20,206,206,205,0,173,206,0,141,206,9,1,0,174,206,0,4,206,173,174,1,205,12,0,19,205,205,202,5,175,206,205,25,205,175,0,25,6,205,13,0,176,6,0,1,205,13,0,49,205,205,176,100,58,0,0,0,177,6,0,1,205,12,0,19,205,205,202,2,206,0,0,255,255,0,0,19,206,32,206,5,179,205,206,1,206,12,0,19,206,206,202,3,206,177,206,25,205,179,13,49,206,206,205,100,58,0,0,0,180,6,0,0,181,6,0,1,205,16,0,2,209,0,0,255,255,0,0,19,209,180,209,1,207,51,0,1,204,12,0,19,204,204,202,3,204,181,204,2,203,0,0,255,255,0,0,19,204,204,203,135,206,8,0,205,209,207,204,141,206,17,1,103,206,206,64,141,204,17,1,25,204,204,64,103,204,204,1,41,204,204,8,20,206,206,204,141,204,17,1,25,204,204,64,103,204,204,2,41,204,204,16,20,206,206,204,141,204,17,1,25,204,204,64,103,204,204,3,41,204,204,24,20,206,206,204,0,183,206,0,41,206,183,1,91,206,0,206,41,204,183,1,3,204,0,204,103,204,204,1,41,204,204,8,20,206,206,204,0,184,206,0,135,185,23,0,184,138,0,0,19,206,185,202,0,2,206,0,1,206,230,20,135,186,0,0,206,0,0,0,33,206,186,0,120,206,2,0,119,0,131,251,1,116,230,20,0,187,116,0,1,206,0,0,53,206,187,206,12,59,0,0,119,0,125,251,135,188,1,0,0,120,188,0,0,189,120,0,1,206,0,0,53,206,189,206,40,59,0,0,119,0,60,0,0,190,120,0,82,191,190,0,106,192,191,8,0,124,192,0,0,193,124,0,1,206,0,0,53,206,193,206,76,59,0,0,119,0,44,0,0,195,124,0,1,204,0,0,141,207,17,1,25,207,207,64,1,209,0,0,1,205,0,0,135,206,2,0,195,200,204,207,209,205,0,0,0,196,124,0,141,206,17,1,103,206,206,64,141,205,17,1,25,205,205,64,103,205,205,1,41,205,205,8,20,206,206,205,141,205,17,1,25,205,205,64,103,205,205,2,41,205,205,16,20,206,206,205,141,205,17,1,25,205,205,64,103,205,205,3,41,205,205,24,20,206,206,205,0,197,206,0,1,205,0,0,41,209,197,1,3,209,0,209,1,207,0,0,1,204,0,0,135,206,2,0,196,201,205,209,207,204,0,0,0,198,116,0,0,199,120,0,134,206,0,0,16,21,1,0,198,199,0,0,1,124,0,0,119,0,209,255,0,206,120,0,143,206,0,1,141,204,0,1,135,206,3,0,204,0,0,0,1,120,0,0,119,0,193,255,1,116,0,0,119,0,184,255,141,208,16,1,32,208,208,33,121,208,15,0,1,50,255,255,1,64,1,0,0,208,135,0,143,208,3,1,141,206,3,1,135,208,26,0,206,0,0,0,0,208,50,0,143,208,4,1,141,208,17,1,137,208,0,0,141,208,4,1,139,208,0,0,119,0,103,0,141,208,16,1,32,208,208,34,121,208,41,0,141,208,17,1,103,208,208,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,208,208,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,208,208,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,208,208,206,0,72,208,0,41,208,72,1,91,208,0,208,41,206,72,1,3,206,0,206,103,206,206,1,41,206,206,8,20,208,208,206,0,74,208,0,0,50,74,0,1,64,1,0,0,208,135,0,143,208,3,1,141,206,3,1,135,208,26,0,206,0,0,0,0,208,50,0,143,208,4,1,141,208,17,1,137,208,0,0,141,208,4,1,139,208,0,0,119,0,60,0,141,208,16,1,32,208,208,54,121,208,41,0,141,208,17,1,103,208,208,64,141,206,17,1,25,206,206,64,103,206,206,1,41,206,206,8,20,208,208,206,141,206,17,1,25,206,206,64,103,206,206,2,41,206,206,16,20,208,208,206,141,206,17,1,25,206,206,64,103,206,206,3,41,206,206,24,20,208,208,206,0,115,208,0,41,208,115,1,91,208,0,208,41,206,115,1,3,206,0,206,103,206,206,1,41,206,206,8,20,208,208,206,0,117,208,0,0,50,117,0,1,64,1,0,0,208,135,0,143,208,3,1,141,206,3,1,135,208,26,0,206,0,0,0,0,208,50,0,143,208,4,1,141,208,17,1,137,208,0,0,141,208,4,1,139,208,0,0,119,0,17,0,141,208,16,1,32,208,208,74,121,208,14,0,1,50,255,255,1,64,1,0,0,208,135,0,143,208,3,1,141,206,3,1,135,208,26,0,206,0,0,0,0,208,50,0,143,208,4,1,141,208,17,1,137,208,0,0,141,208,4,1,139,208,0,0,1,208,0,0,139,208,0,0,140,1,179,0,0,0,0,0,2,171,0,0,255,255,0,0,2,172,0,0,164,215,2,0,2,173,0,0,255,0,0,0,1,167,0,0,136,174,0,0,0,168,174,0,136,174,0,0,25,174,174,64,137,174,0,0,2,174,0,0,140,180,2,0,82,17,174,0,2,174,0,0,140,180,2,0,82,23,174,0,2,174,0,0,144,180,2,0,82,27,174,0,103,174,0,1,25,175,0,1,103,175,175,1,41,175,175,8,20,174,174,175,0,38,174,0,19,174,38,171,1,175,0,0,95,27,174,175,1,72,20,0,103,175,0,1,25,174,0,1,103,174,174,1,41,174,174,8,20,175,175,174,0,59,175,0,0,68,72,0,19,175,68,171,19,174,59,171,5,77,175,174,19,174,77,171,0,72,174,0,2,174,0,0,148,180,2,0,82,85,174,0,0,3,85,0,0,91,3,0,0,94,72,0,19,174,94,171,41,174,174,1,3,3,91,174,2,166,0,0,232,214,2,0,25,170,166,40,1,174,0,0,83,166,174,0,25,166,166,1,54,174,166,170,228,62,0,0,103,174,0,4,25,175,0,4,103,175,175,1,41,175,175,8,20,174,174,175,0,116,174,0,19,174,116,171,0,7,174,0,2,174,0,0,20,108,3,0,27,175,7,37,3,174,174,175,103,174,174,1,2,175,0,0,20,108,3,0,27,176,7,37,3,175,175,176,25,175,175,1,103,175,175,1,41,175,175,8,20,174,174,175,0,136,174,0,0,141,3,0,79,174,141,0,103,175,141,1,41,175,175,8,20,174,174,175,0,145,174,0,19,174,145,171,26,174,174,1,27,174,174,19,3,174,172,174,25,151,174,2,79,174,151,0,103,175,151,1,41,175,175,8,20,174,174,175,0,152,174,0,1,175,2,0,1,176,15,0,135,174,27,0,175,176,23,0,90,153,23,7,2,174,0,0,226,214,2,0,19,176,153,173,25,176,176,110,19,176,176,171,19,176,176,173,83,174,176,0,2,176,0,0,226,214,2,0,19,174,153,173,25,174,174,110,19,174,174,171,42,174,174,8,107,176,1,174,102,154,0,3,19,174,7,173,135,155,28,0,174,154,0,0,2,174,0,0,225,214,2,0,83,174,155,0,2,174,0,0,16,215,2,0,19,176,7,173,83,174,176,0,19,174,152,171,26,174,174,1,19,174,174,171,19,175,7,173,134,176,0,0,160,190,2,0,174,175,0,0,2,176,0,0,158,215,2,0,79,176,176,0,2,175,0,0,158,215,2,0,103,175,175,1,41,175,175,8,20,176,176,175,0,157,176,0,2,176,0,0,158,215,2,0,79,176,176,0,2,175,0,0,158,215,2,0,103,175,175,1,41,175,175,8,20,176,176,175,0,159,176,0,19,176,136,171,19,175,157,171,25,175,175,1,45,176,176,175,144,67,0,0,19,176,152,171,19,175,159,171,25,175,175,1,52,176,176,175,208,66,0,0,2,176,0,0,224,214,2,0,1,175,0,0,83,176,175,0,2,175,0,0,20,108,3,0,27,176,7,37,3,175,175,176,103,175,175,25,2,176,0,0,20,108,3,0,27,174,7,37,3,176,176,174,25,176,176,25,103,176,176,1,41,176,176,8,20,175,175,176,0,4,175,0,2,175,0,0,228,214,2,0,19,176,4,173,83,175,176,0,2,176,0,0,228,214,2,0,42,175,4,8,107,176,1,175,103,175,0,8,25,176,0,8,103,176,176,1,41,176,176,8,20,175,175,176,0,5,175,0,2,175,0,0,230,214,2,0,19,176,5,173,83,175,176,0,2,176,0,0,230,214,2,0,42,175,5,8,107,176,1,175,1,158,0,0,0,6,158,0,35,175,6,10,120,175,2,0,119,0,84,0,19,175,7,173,135,8,29,0,175,17,0,0,0,111,8,0,135,175,30,0,0,9,111,0,1,175,161,32,79,175,175,0,1,176,161,32,103,176,176,1,41,176,176,8,20,175,175,176,0,10,175,0,1,175,163,32,79,175,175,0,1,176,163,32,103,176,176,1,41,176,176,8,20,175,175,176,0,11,175,0,1,175,0,0,1,176,4,0,1,174,2,0,19,177,10,171,26,177,177,1,26,177,177,4,19,177,177,173,19,178,11,171,26,178,178,1,26,178,178,2,19,178,178,173,134,12,0,0,24,121,0,0,17,9,175,176,174,177,178,0,19,178,12,171,53,178,171,178,228,65,0,0,119,0,45,0,19,178,12,171,41,178,178,1,91,178,17,178,19,177,12,171,41,177,177,1,3,177,17,177,103,177,177,1,41,177,177,8,20,178,178,177,0,13,178,0,0,14,158,0,2,178,0,0,232,214,2,0,41,177,14,1,19,174,13,171,25,174,174,1,19,174,174,171,19,174,174,173,95,178,177,174,2,174,0,0,232,214,2,0,41,177,14,1,3,174,174,177,19,177,13,171,25,177,177,1,19,177,177,171,42,177,177,8,107,174,1,177,19,177,12,171,41,177,177,1,91,177,17,177,19,174,12,171,41,174,174,1,3,174,17,174,103,174,174,1,41,174,174,8,20,177,177,174,0,15,177,0,19,174,7,173,135,177,31,0,174,15,0,0,0,16,158,0,25,158,16,1,119,0,170,255,0,18,3,0,2,177,0,0,232,214,2,0,25,166,177,20,0,169,18,0,25,170,166,20,78,177,169,0,83,166,177,0,25,166,166,1,25,169,169,1,54,177,166,170,172,66,0,0,134,177,0,0,128,187,2,0,119,0,88,3,1,158,0,0,0,160,158,0,35,177,160,10,120,177,2,0,119,0,34,0,0,161,3,0,0,162,158,0,41,177,162,1,91,177,161,177,41,174,162,1,3,174,161,174,103,174,174,1,41,174,174,8,20,177,177,174,0,163,177,0,41,177,163,16,42,177,177,16,33,177,177,0,121,177,17,0,0,164,3,0,0,165,158,0,41,177,165,1,91,177,164,177,41,174,165,1,3,174,164,174,103,174,174,1,41,174,174,8,20,177,177,174,0,1,177,0,19,174,7,173,19,178,1,171,26,178,178,1,19,178,178,171,135,177,32,0,174,178,0,0,0,2,158,0,25,158,2,1,119,0,220,255,19,178,152,171,26,178,178,1,19,178,178,171,134,177,0,0,12,195,2,0,178,0,0,0,137,168,0,0,1,177,1,0,139,177,0,0,119,0,40,3,19,177,152,171,19,178,159,171,25,178,178,1,45,177,177,178,248,73,0,0,41,177,136,16,42,177,177,16,33,177,177,0,120,177,61,0,1,158,0,0,0,19,158,0,35,177,19,10,120,177,2,0,119,0,34,0,0,20,3,0,0,21,158,0,41,177,21,1,91,177,20,177,41,178,21,1,3,178,20,178,103,178,178,1,41,178,178,8,20,177,177,178,0,22,177,0,41,177,22,16,42,177,177,16,33,177,177,0,121,177,17,0,0,24,3,0,0,25,158,0,41,177,25,1,91,177,24,177,41,178,25,1,3,178,24,178,103,178,178,1,41,178,178,8,20,177,177,178,0,26,177,0,19,178,7,173,19,174,26,171,26,174,174,1,19,174,174,171,135,177,32,0,178,174,0,0,0,28,158,0,25,158,28,1,119,0,220,255,2,177,0,0,20,108,3,0,27,174,7,37,3,177,177,174,19,174,152,173,107,177,1,174,2,174,0,0,20,108,3,0,27,177,7,37,3,174,174,177,25,174,174,1,42,177,152,8,107,174,1,177,19,174,152,171,26,174,174,1,19,174,174,171,134,177,0,0,12,195,2,0,174,0,0,0,137,168,0,0,1,177,1,0,139,177,0,0,2,177,0,0,158,215,2,0,79,177,177,0,2,174,0,0,158,215,2,0,103,174,174,1,41,174,174,8,20,177,177,174,0,29,177,0,19,177,136,171,19,174,29,171,25,174,174,1,45,177,177,174,152,69,0,0,1,158,0,0,0,30,158,0,35,177,30,10,120,177,2,0,119,0,40,0,0,31,3,0,0,32,158,0,41,177,32,1,91,177,31,177,41,174,32,1,3,174,31,174,103,174,174,1,41,174,174,8,20,177,177,174,0,33,177,0,41,177,33,16,42,177,177,16,33,177,177,0,121,177,17,0,0,34,3,0,0,35,158,0,41,177,35,1,91,177,34,177,41,174,35,1,3,174,34,174,103,174,174,1,41,174,174,8,20,177,177,174,0,36,177,0,19,174,7,173,19,178,36,171,26,178,178,1,19,178,178,171,135,177,32,0,174,178,0,0,19,178,152,171,26,178,178,1,19,178,178,171,134,177,0,0,12,195,2,0,178,0,0,0,0,37,158,0,25,158,37,1,119,0,214,255,137,168,0,0,1,177,1,0,139,177,0,0,2,177,0,0,224,214,2,0,1,178,1,0,83,177,178,0,103,178,0,8,25,177,0,8,103,177,177,1,41,177,177,8,20,178,178,177,0,39,178,0,2,178,0,0,228,214,2,0,19,177,39,173,83,178,177,0,2,177,0,0,228,214,2,0,42,178,39,8,107,177,1,178,2,178,0,0,20,108,3,0,27,177,7,37,3,178,178,177,103,178,178,25,2,177,0,0,20,108,3,0,27,174,7,37,3,177,177,174,25,177,177,25,103,177,177,1,41,177,177,8,20,178,178,177,0,40,178,0,2,178,0,0,230,214,2,0,19,177,40,173,83,178,177,0,2,177,0,0,230,214,2,0,42,178,40,8,107,177,1,178,0,41,3,0,2,166,0,0,232,214,2,0,0,169,41,0,25,170,166,20,78,178,169,0,83,166,178,0,25,166,166,1,25,169,169,1,54,178,166,170,76,70,0,0,19,178,7,173,135,42,29,0,178,17,0,0,0,111,42,0,0,43,111,0,33,178,43,0,121,178,220,0,1,149,0,0,1,149,0,0,0,44,149,0,0,45,111,0,26,178,45,1,55,178,44,178,160,70,0,0,119,0,125,0,0,46,149,0,25,158,46,1,0,47,158,0,0,48,111,0,55,178,47,48,188,70,0,0,119,0,115,0,0,49,149,0,41,178,49,1,91,178,17,178,41,177,49,1,3,177,17,177,103,177,177,1,41,177,177,8,20,178,178,177,0,50,178,0,19,178,50,171,27,178,178,19,3,178,172,178,103,178,178,12,19,177,50,171,27,177,177,19,3,177,172,177,25,177,177,12,103,177,177,1,41,177,177,8,20,178,178,177,0,51,178,0,0,52,158,0,41,178,52,1,91,178,17,178,41,177,52,1,3,177,17,177,103,177,177,1,41,177,177,8,20,178,178,177,0,53,178,0,19,178,53,171,27,178,178,19,3,178,172,178,103,178,178,12,19,177,53,171,27,177,177,19,3,177,172,177,25,177,177,12,103,177,177,1,41,177,177,8,20,178,178,177,0,54,178,0,19,178,51,171,19,177,54,171,47,178,178,177,4,72,0,0,0,55,158,0,41,178,55,1,91,178,17,178,41,177,55,1,3,177,17,177,103,177,177,1,41,177,177,8,20,178,178,177,0,56,178,0,0,156,56,0,0,57,149,0,41,178,57,1,91,178,17,178,41,177,57,1,3,177,17,177,103,177,177,1,41,177,177,8,20,178,178,177,0,58,178,0,0,60,158,0,41,178,60,1,19,177,58,173,95,17,178,177,41,177,60,1,3,177,17,177,42,178,58,8,107,177,1,178,0,61,156,0,0,62,149,0,41,178,62,1,19,177,61,173,95,17,178,177,41,177,62,1,3,177,17,177,42,178,61,8,107,177,1,178,0,63,111,0,26,178,63,1,41,178,178,1,91,178,17,178,26,177,63,1,41,177,177,1,3,177,17,177,103,177,177,1,41,177,177,8,20,178,178,177,0,64,178,0,19,178,64,171,27,178,178,19,3,178,172,178,103,178,178,12,19,177,64,171,27,177,177,19,3,177,172,177,25,177,177,12,103,177,177,1,41,177,177,8,20,178,178,177,0,65,178,0,41,178,65,16,42,178,178,16,33,178,178,0,120,178,3,0,0,66,111,0,26,111,66,1,0,67,158,0,25,158,67,1,119,0,138,255,0,69,149,0,25,149,69,1,119,0,127,255,0,70,111,0,33,178,70,0,120,178,30,0,79,178,17,0,103,177,17,1,41,177,177,8,20,178,178,177,0,71,178,0,2,178,0,0,232,214,2,0,19,177,71,171,25,177,177,1,19,177,177,171,19,177,177,173,107,178,20,177,2,177,0,0,232,214,2,0,25,177,177,20,19,178,71,171,25,178,178,1,19,178,178,171,42,178,178,8,107,177,1,178,79,178,17,0,103,177,17,1,41,177,177,8,20,178,178,177,0,73,178,0,19,177,7,173,135,178,31,0,177,73,0,0,119,0,56,0,0,74,111,0,1,178,10,0,48,178,178,74,36,73,0,0,1,111,10,0,1,158,0,0,0,75,158,0,0,76,111,0,55,178,75,76,60,73,0,0,119,0,45,0,0,78,158,0,41,178,78,1,91,178,17,178,41,177,78,1,3,177,17,177,103,177,177,1,41,177,177,8,20,178,178,177,0,79,178,0,19,177,7,173,135,178,31,0,177,79,0,0,0,80,158,0,41,178,80,1,91,178,17,178,41,177,80,1,3,177,17,177,103,177,177,1,41,177,177,8,20,178,178,177,0,81,178,0,0,82,158,0,2,178,0,0,232,214,2,0,25,177,82,10,41,177,177,1,19,174,81,171,25,174,174,1,19,174,174,171,19,174,174,173,95,178,177,174,2,174,0,0,232,214,2,0,25,177,82,10,41,177,177,1,3,174,174,177,19,177,81,171,25,177,177,1,19,177,177,171,42,177,177,8,107,174,1,177,0,83,158,0,25,158,83,1,119,0,208,255,134,177,0,0,128,187,2,0,119,0,142,1,41,177,136,16,42,177,177,16,33,177,177,0,120,177,61,0,1,158,0,0,0,84,158,0,35,177,84,10,120,177,2,0,119,0,34,0,0,86,3,0,0,87,158,0,41,177,87,1,91,177,86,177,41,174,87,1,3,174,86,174,103,174,174,1,41,174,174,8,20,177,177,174,0,88,177,0,41,177,88,16,42,177,177,16,33,177,177,0,121,177,17,0,0,89,3,0,0,90,158,0,41,177,90,1,91,177,89,177,41,174,90,1,3,174,89,174,103,174,174,1,41,174,174,8,20,177,177,174,0,92,177,0,19,174,7,173,19,178,92,171,26,178,178,1,19,178,178,171,135,177,32,0,174,178,0,0,0,93,158,0,25,158,93,1,119,0,220,255,2,177,0,0,20,108,3,0,27,178,7,37,3,177,177,178,19,178,152,173,107,177,1,178,2,178,0,0,20,108,3,0,27,177,7,37,3,178,178,177,25,178,178,1,42,177,152,8,107,178,1,177,19,178,152,171,26,178,178,1,19,178,178,171,134,177,0,0,12,195,2,0,178,0,0,0,137,168,0,0,1,177,1,0,139,177,0,0,19,177,136,171,19,178,152,171,45,177,177,178,196,75,0,0,1,158,0,0,0,95,158,0,35,177,95,10,120,177,2,0,119,0,34,0,0,96,3,0,0,97,158,0,41,177,97,1,91,177,96,177,41,178,97,1,3,178,96,178,103,178,178,1,41,178,178,8,20,177,177,178,0,98,177,0,41,177,98,16,42,177,177,16,33,177,177,0,121,177,17,0,0,99,3,0,0,100,158,0,41,177,100,1,91,177,99,177,41,178,100,1,3,178,99,178,103,178,178,1,41,178,178,8,20,177,177,178,0,101,177,0,19,178,7,173,19,174,101,171,26,174,174,1,19,174,174,171,135,177,32,0,178,174,0,0,0,102,158,0,25,158,102,1,119,0,220,255,19,174,152,171,26,174,174,1,19,174,174,171,134,177,0,0,12,195,2,0,174,0,0,0,137,168,0,0,1,177,1,0,139,177,0,0,0,103,3,0,2,166,0,0,232,214,2,0,0,169,103,0,25,170,166,20,78,177,169,0,83,166,177,0,25,166,166,1,25,169,169,1,54,177,166,170,216,75,0,0,19,177,7,173,135,104,29,0,177,17,0,0,0,111,104,0,0,105,111,0,33,177,105,0,121,177,214,0,1,149,0,0,1,149,0,0,0,106,149,0,0,107,111,0,26,177,107,1,55,177,106,177,44,76,0,0,119,0,125,0,0,108,149,0,25,158,108,1,0,109,158,0,0,110,111,0,55,177,109,110,72,76,0,0,119,0,115,0,0,112,149,0,41,177,112,1,91,177,17,177,41,174,112,1,3,174,17,174,103,174,174,1,41,174,174,8,20,177,177,174,0,113,177,0,19,177,113,171,27,177,177,19,3,177,172,177,103,177,177,12,19,174,113,171,27,174,174,19,3,174,172,174,25,174,174,12,103,174,174,1,41,174,174,8,20,177,177,174,0,114,177,0,0,115,158,0,41,177,115,1,91,177,17,177,41,174,115,1,3,174,17,174,103,174,174,1,41,174,174,8,20,177,177,174,0,117,177,0,19,177,117,171,27,177,177,19,3,177,172,177,103,177,177,12,19,174,117,171,27,174,174,19,3,174,172,174,25,174,174,12,103,174,174,1,41,174,174,8,20,177,177,174,0,118,177,0,19,177,114,171,19,174,118,171,47,177,177,174,144,77,0,0,0,119,158,0,41,177,119,1,91,177,17,177,41,174,119,1,3,174,17,174,103,174,174,1,41,174,174,8,20,177,177,174,0,120,177,0,0,156,120,0,0,121,149,0,41,177,121,1,91,177,17,177,41,174,121,1,3,174,17,174,103,174,174,1,41,174,174,8,20,177,177,174,0,122,177,0,0,123,158,0,41,177,123,1,19,174,122,173,95,17,177,174,41,174,123,1,3,174,17,174,42,177,122,8,107,174,1,177,0,124,156,0,0,125,149,0,41,177,125,1,19,174,124,173,95,17,177,174,41,174,125,1,3,174,17,174,42,177,124,8,107,174,1,177,0,126,111,0,26,177,126,1,41,177,177,1,91,177,17,177,26,174,126,1,41,174,174,1,3,174,17,174,103,174,174,1,41,174,174,8,20,177,177,174,0,127,177,0,19,177,127,171,27,177,177,19,3,177,172,177,103,177,177,12,19,174,127,171,27,174,174,19,3,174,172,174,25,174,174,12,103,174,174,1,41,174,174,8,20,177,177,174,0,128,177,0,41,177,128,16,42,177,177,16,33,177,177,0,120,177,3,0,0,129,111,0,26,111,129,1,0,130,158,0,25,158,130,1,119,0,138,255,0,131,149,0,25,149,131,1,119,0,127,255,0,132,111,0,33,177,132,0,120,177,24,0,79,177,17,0,103,174,17,1,41,174,174,8,20,177,177,174,0,133,177,0,2,177,0,0,232,214,2,0,19,174,133,173,107,177,20,174,2,174,0,0,232,214,2,0,25,174,174,20,42,177,133,8,107,174,1,177,79,177,17,0,103,174,17,1,41,174,174,8,20,177,177,174,0,134,177,0,19,174,7,173,135,177,31,0,174,134,0,0,119,0,56,0,0,135,111,0,1,177,10,0,48,177,177,135,152,78,0,0,1,111,10,0,1,158,0,0,0,137,158,0,0,138,111,0,55,177,137,138,176,78,0,0,119,0,45,0,0,139,158,0,41,177,139,1,91,177,17,177,41,174,139,1,3,174,17,174,103,174,174,1,41,174,174,8,20,177,177,174,0,140,177,0,19,174,7,173,135,177,31,0,174,140,0,0,0,142,158,0,41,177,142,1,91,177,17,177,41,174,142,1,3,174,17,174,103,174,174,1,41,174,174,8,20,177,177,174,0,143,177,0,0,144,158,0,2,177,0,0,232,214,2,0,25,174,144,10,41,174,174,1,19,178,143,171,25,178,178,1,19,178,178,171,19,178,178,173,95,177,174,178,2,178,0,0,232,214,2,0,25,174,144,10,41,174,174,1,3,178,178,174,19,174,143,171,25,174,174,1,19,174,174,171,42,174,174,8,107,178,1,174,0,146,158,0,25,158,146,1,119,0,208,255,2,174,0,0,224,214,2,0,1,178,2,0,83,174,178,0,103,178,0,8,25,174,0,8,103,174,174,1,41,174,174,8,20,178,178,174,0,147,178,0,2,178,0,0,228,214,2,0,19,174,147,173,83,178,174,0,2,174,0,0,228,214,2,0,42,178,147,8,107,174,1,178,2,178,0,0,20,108,3,0,27,174,7,37,3,178,178,174,103,178,178,25,2,174,0,0,20,108,3,0,27,177,7,37,3,174,174,177,25,174,174,25,103,174,174,1,41,174,174,8,20,178,178,174,0,148,178,0,2,178,0,0,230,214,2,0,19,174,148,173,83,178,174,0,2,174,0,0,230,214,2,0,42,178,148,8,107,174,1,178], eb + 10240);
  HEAPU8.set([19,174,152,171,26,174,174,1,19,174,174,171,19,177,136,171,26,177,177,1,19,177,177,171,134,178,0,0,184,196,2,0,174,177,0,0,134,178,0,0,128,187,2,0,2,178,0,0,217,214,2,0,78,150,178,0,19,177,7,173,134,178,0,0,64,46,1,0,177,150,0,0,137,168,0,0,1,178,1,0,139,178,0,0,140,1,129,0,0,0,0,0,2,115,0,0,179,0,0,0,2,116,0,0,168,0,0,0,2,117,0,0,255,0,0,0,2,118,0,0,190,0,0,0,2,119,0,0,255,255,0,0,1,112,0,0,136,120,0,0,0,113,120,0,136,120,0,0,1,121,208,0,3,120,120,121,137,120,0,0,1,99,0,0,3,111,113,116,25,114,111,11,1,120,0,0,83,111,120,0,25,111,111,1,54,120,111,114,172,80,0,0,1,120,160,0,1,121,0,0,19,121,121,117,95,113,120,121,1,121,160,0,3,121,113,121,1,120,0,0,42,120,120,8,107,121,1,120,1,120,160,0,3,120,113,120,1,121,0,0,19,121,121,117,107,120,2,121,1,121,160,0,3,121,113,121,25,121,121,2,1,120,0,0,42,120,120,8,107,121,1,120,1,120,161,32,79,120,120,0,1,121,161,32,103,121,121,1,41,121,121,8,20,120,120,121,0,42,120,0,19,120,42,119,26,120,120,1,26,120,120,0,25,120,120,1,25,120,120,1,28,120,120,16,38,120,120,255,26,120,120,2,41,120,120,4,25,120,120,0,19,120,120,119,0,67,120,0,1,120,160,0,3,120,113,120,19,121,67,117,107,120,4,121,1,121,160,0,3,121,113,121,25,121,121,4,42,120,67,8,107,121,1,120,1,120,163,32,79,120,120,0,1,121,163,32,103,121,121,1,41,121,121,8,20,120,120,121,0,71,120,0,19,120,71,119,26,120,120,1,26,120,120,0,25,120,120,1,28,120,120,16,38,120,120,255,41,120,120,4,25,120,120,0,19,120,120,119,0,97,120,0,1,120,160,0,3,120,113,120,19,121,97,117,107,120,6,121,1,121,160,0,3,121,113,121,25,121,121,6,42,120,97,8,107,121,1,120,1,120,161,32,79,120,120,0,1,121,161,32,103,121,121,1,41,121,121,8,20,120,120,121,0,98,120,0,1,120,161,32,79,120,120,0,1,121,161,32,103,121,121,1,41,121,121,8,20,120,120,121,0,100,120,0,1,120,161,32,79,120,120,0,1,121,161,32,103,121,121,1,41,121,121,8,20,120,120,121,0,101,120,0,1,121,152,0,3,121,113,121,19,122,98,119,26,122,122,1,26,122,122,0,25,122,122,1,25,122,122,1,28,122,122,16,38,122,122,255,26,122,122,2,41,122,122,4,25,122,122,0,19,123,100,119,26,123,123,1,19,124,101,119,26,124,124,1,26,124,124,0,25,124,124,1,25,124,124,1,28,124,124,16,38,124,124,255,26,124,124,2,41,124,124,4,25,124,124,0,4,123,123,124,26,123,123,24,28,123,123,2,38,123,123,255,3,122,122,123,19,122,122,119,1,123,4,0,1,124,24,0,1,125,24,0,135,120,19,0,121,122,123,124,125,0,0,0,1,120,152,0,91,120,113,120,1,125,152,0,3,125,113,125,103,125,125,1,41,125,125,8,20,120,120,125,0,102,120,0,1,120,152,0,3,120,113,120,103,120,120,6,1,125,152,0,3,125,113,125,25,125,125,6,103,125,125,1,41,125,125,8,20,120,120,125,0,103,120,0,1,125,144,0,3,125,113,125,41,124,103,16,42,124,124,16,25,124,124,2,19,124,124,119,1,123,24,0,1,122,24,0,135,120,19,0,125,102,124,123,122,0,0,0,1,120,144,0,91,120,113,120,1,122,144,0,3,122,113,122,103,122,122,1,41,122,122,8,20,120,120,122,0,104,120,0,1,120,163,32,79,120,120,0,1,122,163,32,103,122,122,1,41,122,122,8,20,120,120,122,0,105,120,0,1,122,136,0,3,122,113,122,19,123,105,119,26,123,123,1,26,123,123,24,19,123,123,119,1,124,24,0,1,125,24,0,135,120,19,0,122,104,123,124,125,0,0,0,1,8,0,0,1,11,0,0,1,52,1,0,1,80,0,0,1,120,161,32,79,120,120,0,1,125,161,32,103,125,125,1,41,125,125,8,20,120,120,125,0,106,120,0,1,120,163,32,79,120,120,0,1,125,163,32,103,125,125,1,41,125,125,8,20,120,120,125,0,107,120,0,2,120,0,0,36,180,2,0,82,108,120,0,1,125,0,0,1,124,0,0,19,123,106,119,26,123,123,1,19,123,123,119,19,122,107,119,26,122,122,1,19,122,122,119,135,120,33,0,125,124,123,122,108,0,0,0,0,109,52,0,0,110,80,0,19,120,109,117,32,120,120,0,41,122,110,24,42,122,122,24,33,122,122,0,20,120,120,122,120,120,10,0,135,2,34,0,0,0,0,0,0,99,2,0,1,52,0,0,1,122,116,19,1,123,0,0,134,120,0,0,16,21,1,0,122,123,0,0,3,123,113,115,134,120,0,0,100,208,2,0,123,0,0,0,90,3,113,115,19,120,3,117,32,120,120,5,121,120,3,0,1,112,6,0,119,0,22,1,90,49,113,115,19,120,49,117,32,120,120,16,120,120,2,0,119,0,224,255,90,123,113,115,95,113,118,123,3,123,113,118,3,120,113,115,102,120,120,1,107,123,1,120,3,120,113,118,3,123,113,115,102,123,123,2,107,120,2,123,3,123,113,118,3,120,113,115,102,120,120,3,107,123,3,120,3,120,113,118,3,123,113,115,102,123,123,4,107,120,4,123,3,123,113,118,3,120,113,115,102,120,120,5,107,123,5,120,3,120,113,118,3,123,113,115,102,123,123,6,107,120,6,123,3,120,113,116,3,122,113,118,135,123,11,0,120,122,0,0,0,50,80,0,3,123,113,115,103,123,123,1,3,122,113,115,25,122,122,1,103,122,122,1,41,122,122,8,20,123,123,122,0,51,123,0,41,123,50,24,42,123,123,24,33,123,123,0,121,123,3,0,1,112,36,0,119,0,228,0,19,123,51,119,1,122,1,0,1,120,3,0,138,123,122,120,128,85,0,0,136,85,0,0,140,85,0,0,119,0,171,255,1,112,39,0,119,0,218,0,119,0,3,0,1,112,54,0,119,0,215,0,90,55,113,116,41,123,55,24,42,123,123,24,33,123,123,0,120,123,2,0,119,0,160,255,3,123,113,116,102,56,123,2,19,123,56,117,33,123,123,0,120,123,155,255,3,123,113,116,103,123,123,7,3,122,113,116,25,122,122,7,103,122,122,1,41,122,122,8,20,123,123,122,0,57,123,0,3,123,113,116,103,123,123,9,3,122,113,116,25,122,122,9,103,122,122,1,41,122,122,8,20,123,123,122,0,58,123,0,1,122,160,0,92,122,113,122,108,113,24,122,25,122,113,24,1,123,160,0,3,123,113,123,104,123,123,2,108,122,2,123,25,123,113,24,1,122,160,0,3,122,113,122,104,122,122,4,108,123,4,122,25,122,113,24,1,123,160,0,3,123,113,123,104,123,123,6,108,122,6,123,25,123,113,24,135,59,25,0,57,58,123,0,3,123,113,116,103,123,123,7,3,122,113,116,25,122,122,7,103,122,122,1,41,122,122,8,20,123,123,122,0,60,123,0,41,123,59,24,42,123,123,24,33,123,123,0,121,123,3,0,1,112,43,0,119,0,153,0,3,123,113,116,103,123,123,9,3,122,113,116,25,122,122,9,103,122,122,1,41,122,122,8,20,123,123,122,0,72,123,0,1,122,152,0,92,122,113,122,108,113,32,122,25,122,113,32,1,123,152,0,3,123,113,123,104,123,123,2,108,122,2,123,25,123,113,32,1,122,152,0,3,122,113,122,104,122,122,4,108,123,4,122,25,122,113,32,1,123,152,0,3,123,113,123,104,123,123,6,108,122,6,123,25,123,113,32,135,73,25,0,60,72,123,0,41,123,73,24,42,123,123,24,33,123,123,0,121,123,13,0,1,122,5,0,95,113,115,122,3,122,113,115,1,123,40,0,19,123,123,117,107,122,1,123,3,123,113,115,25,123,123,1,1,122,40,0,42,122,122,8,107,123,1,122,119,0,81,255,3,122,113,116,103,122,122,7,3,123,113,116,25,123,123,7,103,123,123,1,41,123,123,8,20,122,122,123,0,74,122,0,3,122,113,116,103,122,122,9,3,123,113,116,25,123,123,9,103,123,123,1,41,123,123,8,20,122,122,123,0,75,122,0,1,123,144,0,92,123,113,123,108,113,40,123,25,123,113,40,1,122,144,0,3,122,113,122,104,122,122,2,108,123,2,122,25,122,113,40,1,123,144,0,3,123,113,123,104,123,123,4,108,122,4,123,25,123,113,40,1,122,144,0,3,122,113,122,104,122,122,6,108,123,6,122,25,122,113,40,135,76,25,0,74,75,122,0,41,122,76,24,42,122,122,24,33,122,122,0,121,122,13,0,1,123,5,0,95,113,115,123,3,123,113,115,1,122,51,0,19,122,122,117,107,123,1,122,3,122,113,115,25,122,122,1,1,123,51,0,42,123,123,8,107,122,1,123,119,0,28,255,3,123,113,116,103,123,123,7,3,122,113,116,25,122,122,7,103,122,122,1,41,122,122,8,20,123,123,122,0,77,123,0,3,123,113,116,103,123,123,9,3,122,113,116,25,122,122,9,103,122,122,1,41,122,122,8,20,123,123,122,0,78,123,0,1,122,136,0,92,122,113,122,108,113,48,122,25,122,113,48,1,123,136,0,3,123,113,123,104,123,123,2,108,122,2,123,25,123,113,48,1,122,136,0,3,122,113,122,104,122,122,4,108,123,4,122,25,122,113,48,1,123,136,0,3,123,113,123,104,123,123,6,108,122,6,123,25,123,113,48,135,79,25,0,77,78,123,0,41,123,79,24,42,123,123,24,33,123,123,0,120,123,2,0,119,0,220,254,1,122,5,0,95,113,115,122,3,122,113,115,1,123,38,0,19,123,123,117,107,122,1,123,3,123,113,115,25,123,123,1,1,122,38,0,42,122,122,8,107,123,1,122,119,0,230,254,32,122,112,6,121,122,64,1,1,112,0,0,0,4,80,0,41,122,4,24,42,122,122,24,33,122,122,0,121,122,4,0,1,80,0,0,1,52,1,0,119,0,197,254,3,122,113,115,103,122,122,1,3,123,113,115,25,123,123,1,103,123,123,1,41,123,123,8,20,122,122,123,0,5,122,0,19,122,5,119,1,127,34,0,1,123,18,0,138,122,127,123,148,89,0,0,232,89,0,0,196,90,0,0,24,91,0,0,4,92,0,0,180,92,0,0,208,92,0,0,144,89,0,0,144,89,0,0,144,89,0,0,144,89,0,0,144,89,0,0,144,89,0,0,144,89,0,0,144,89,0,0,144,89,0,0,144,89,0,0,216,92,0,0,119,0,166,254,102,6,0,3,41,123,6,24,42,123,123,24,33,123,123,0,120,123,2,0,119,0,160,254,102,7,0,3,19,120,7,117,26,120,120,1,19,120,120,117,107,0,3,120,102,9,0,3,102,10,0,1,19,120,9,117,19,123,10,117,47,120,120,123,224,89,0,0,102,12,0,3,107,0,1,12,1,52,1,0,119,0,145,254,102,18,0,3,1,123,138,20,78,19,123,0,19,123,18,117,19,120,19,117,26,120,120,1,54,123,123,120,12,90,0,0,119,0,136,254,102,20,0,3,19,120,20,117,25,120,120,1,19,120,120,117,107,0,3,120,102,21,0,3,102,22,0,1,1,120,163,32,79,120,120,0,1,123,163,32,103,123,123,1,41,123,123,8,20,120,120,123,0,23,120,0,19,120,22,117,19,123,23,119,26,123,123,1,26,123,123,0,25,123,123,1,28,123,123,16,38,123,123,255,3,120,120,123,19,123,21,117,49,120,120,123,188,90,0,0,102,24,0,3,1,120,163,32,79,120,120,0,1,123,163,32,103,123,123,1,41,123,123,8,20,120,120,123,0,26,120,0,19,123,24,117,19,124,26,119,26,124,124,1,26,124,124,0,25,124,124,1,28,124,124,16,38,124,124,255,4,123,123,124,25,123,123,1,19,123,123,117,107,0,1,123,1,52,1,0,119,0,90,254,102,13,0,2,41,120,13,24,42,120,120,24,33,120,120,0,120,120,2,0,119,0,84,254,102,14,0,2,19,123,14,117,26,123,123,1,19,123,123,117,107,0,2,123,102,15,0,2,78,16,0,0,19,123,15,117,19,120,16,117,47,123,123,120,16,91,0,0,102,17,0,2,83,0,17,0,1,52,1,0,119,0,69,254,102,28,0,2,1,123,137,20,78,29,123,0,19,123,28,117,19,120,29,117,26,120,120,1,54,123,123,120,60,91,0,0,119,0,60,254,102,31,0,2,19,120,31,117,25,120,120,1,19,120,120,117,107,0,2,120,102,32,0,2,78,34,0,0,1,120,161,32,79,120,120,0,1,123,161,32,103,123,123,1,41,123,123,8,20,120,120,123,0,35,120,0,19,120,34,117,19,123,35,119,26,123,123,1,26,123,123,0,25,123,123,1,25,123,123,1,28,123,123,16,38,123,123,255,26,123,123,2,3,120,120,123,19,123,32,117,49,120,120,123,252,91,0,0,102,36,0,2,1,120,161,32,79,120,120,0,1,123,161,32,103,123,123,1,41,123,123,8,20,120,120,123,0,37,120,0,19,120,36,117,19,123,37,119,26,123,123,1,26,123,123,0,25,123,123,1,25,123,123,1,28,123,123,16,38,123,123,255,26,123,123,2,4,120,120,123,25,120,120,1,19,120,120,117,83,0,120,0,1,52,1,0,119,0,10,254,1,123,143,19,1,127,0,0,134,46,0,0,16,21,1,0,123,127,0,0,32,127,46,255,121,127,36,0,1,127,94,14,85,113,127,0,25,123,113,64,1,126,156,19,135,127,35,0,123,126,113,0,1,127,161,32,79,127,127,0,1,126,161,32,103,126,126,1,41,126,126,8,20,127,127,126,0,47,127,0,1,127,163,32,79,127,127,0,1,126,163,32,103,126,126,1,41,126,126,8,20,127,127,126,0,48,127,0,1,126,0,0,1,123,0,0,19,120,47,119,26,120,120,1,19,120,120,119,19,124,48,119,26,124,124,1,19,124,124,119,135,127,5,0,126,123,120,124,1,124,0,0,1,120,0,0,25,123,113,64,135,127,7,0,124,120,123,0,1,80,1,0,119,0,222,253,0,38,99,0,41,120,38,24,42,120,120,24,33,120,120,0,121,120,217,253,1,112,26,0,119,0,37,1,1,112,27,0,119,0,35,1,1,120,131,19,1,123,0,0,134,40,0,0,16,21,1,0,120,123,0,0,32,123,40,255,121,123,62,0,1,123,161,32,79,123,123,0,1,120,161,32,103,120,120,1,41,120,120,8,20,123,123,120,0,41,123,0,1,123,163,32,79,123,123,0,1,120,163,32,103,120,120,1,41,120,120,8,20,123,123,120,0,43,123,0,1,120,0,0,1,124,0,0,19,125,41,119,26,125,125,1,19,125,125,119,19,121,43,119,26,121,121,1,19,121,121,119,135,123,5,0,120,124,125,121,1,123,161,32,79,123,123,0,1,121,161,32,103,121,121,1,41,121,121,8,20,123,123,121,0,44,123,0,1,123,163,32,79,123,123,0,1,121,163,32,103,121,121,1,41,121,121,8,20,123,123,121,0,45,123,0,1,121,75,0,1,125,0,0,1,124,1,0,19,120,44,119,26,120,120,1,26,120,120,0,26,120,120,84,28,120,120,2,38,120,120,255,25,120,120,0,19,120,120,119,19,126,45,119,26,126,126,1,26,126,126,0,26,126,126,64,28,126,126,2,38,126,126,255,25,126,126,0,19,126,126,119,1,127,1,0,135,123,36,0,121,125,124,120,126,127,0,0,1,80,1,0,119,0,143,253,32,122,112,36,121,122,9,0,1,112,0,0,19,122,51,119,32,122,122,2,120,122,2,0,119,0,136,253,1,80,0,0,1,52,1,0,119,0,133,253,32,122,112,39,121,122,7,0,1,112,0,0,78,53,0,0,0,8,53,0,102,54,0,1,0,11,54,0,119,0,125,253,32,122,112,43,121,122,85,0,1,112,0,0,1,122,160,0,91,122,113,122,1,127,160,0,3,127,113,127,103,127,127,1,41,127,127,8,20,122,122,127,0,61,122,0,3,122,113,116,103,122,122,9,3,127,113,116,25,127,127,9,103,127,127,1,41,127,127,8,20,122,122,127,0,62,122,0,1,122,160,0,3,122,113,122,103,122,122,2,1,127,160,0,3,127,113,127,25,127,127,2,103,127,127,1,41,127,127,8,20,122,122,127,0,63,122,0,78,64,0,0,19,122,64,117,41,127,60,16,42,127,127,16,41,123,61,16,42,123,123,16,4,127,127,123,19,127,127,119,41,127,127,16,42,127,127,16,28,127,127,16,38,127,127,255,19,127,127,119,41,127,127,16,42,127,127,16,3,122,122,127,19,122,122,117,0,25,122,0,102,65,0,1,19,122,65,117,41,127,62,16,42,127,127,16,41,123,63,16,42,123,123,16,4,127,127,123,19,127,127,119,41,127,127,16,42,127,127,16,28,127,127,16,38,127,127,255,19,127,127,119,41,127,127,16,42,127,127,16,3,122,122,127,19,122,122,117,0,27,122,0,102,66,0,2,19,122,25,117,19,127,66,117,45,122,122,127,128,95,0,0,102,68,0,3,19,122,27,117,19,127,68,117,45,122,122,127,128,95,0,0,0,69,99,0,41,122,69,24,42,122,122,24,33,122,122,0,121,122,45,253,1,112,46,0,119,0,121,0,107,0,2,25,107,0,3,27,1,52,1,0,119,0,39,253,32,122,112,54,121,122,37,253,1,112,0,0,3,122,113,116,102,81,122,1,41,122,81,24,42,122,122,24,33,122,122,0,120,122,2,0,119,0,29,253,1,122,137,20,78,82,122,0,1,122,161,32,79,122,122,0,1,127,161,32,103,127,127,1,41,127,127,8,20,122,122,127,0,83,122,0,19,122,82,117,19,127,83,119,26,127,127,1,26,127,127,0,25,127,127,1,25,127,127,1,28,127,127,16,38,127,127,255,26,127,127,2,4,30,122,127,1,127,138,20,78,84,127,0,1,127,163,32,79,127,127,0,1,122,163,32,103,122,122,1,41,122,122,8,20,127,127,122,0,85,127,0,19,127,84,117,19,122,85,119,26,122,122,1,26,122,122,0,25,122,122,1,28,122,122,16,38,122,122,255,4,33,127,122,0,86,8,0,1,122,0,0,15,122,122,30,1,127,0,0,125,87,122,30,127,0,0,0,0,88,11,0,1,127,0,0,15,127,127,33,1,122,0,0,125,89,127,33,122,0,0,0,25,127,113,56,3,123,113,116,19,120,86,117,19,124,87,119,1,126,16,0,19,125,88,117,19,121,89,119,1,128,16,0,135,122,37,0,127,123,120,124,126,125,121,128,103,122,113,56,25,128,113,56,103,128,128,1,41,128,128,8,20,122,122,128,0,90,122,0,78,91,0,0,41,122,90,16,42,122,122,16,19,128,91,117,53,122,122,128,16,97,0,0,25,122,113,56,103,122,122,2,25,128,113,56,25,128,128,2,103,128,128,1,41,128,128,8,20,122,122,128,0,92,122,0,102,93,0,1,41,122,92,16,42,122,122,16,19,128,93,117,53,122,122,128,16,97,0,0,119,0,199,252,103,122,113,56,25,128,113,56,103,128,128,1,41,128,128,8,20,122,122,128,0,94,122,0,19,122,94,117,83,0,122,0,25,122,113,56,103,122,122,2,25,128,113,56,25,128,128,2,103,128,128,1,41,128,128,8,20,122,122,128,0,95,122,0,19,128,95,117,107,0,1,128,1,52,1,0,119,0,179,252,32,128,112,26,121,128,10,0,0,39,99,0,19,128,39,117,26,128,128,1,19,128,128,117,0,1,128,0,0,96,1,0,137,113,0,0,139,96,0,0,119,0,18,0,32,128,112,27,121,128,6,0,1,1,255,255,0,96,1,0,137,113,0,0,139,96,0,0,119,0,11,0,32,128,112,46,121,128,9,0,0,70,99,0,19,128,70,117,26,128,128,1,19,128,128,117,0,1,128,0,0,96,1,0,137,113,0,0,139,96,0,0,1,128,0,0,139,128,0,0,140,3,126,0,0,0,0,0,2,112,0,0,255,0,0,0,2,113,0,0,255,255,0,0,2,114,0,0,161,32,0,0,2,115,0,0,168,0,0,0,2,116,0,0,157,0,0,0,2,117,0,0,216,0,0,0,2,118,0,0,144,0,0,0,2,119,0,0,136,0,0,0,1,108,0,0,136,120,0,0,0,109,120,0,136,120,0,0,1,121,224,0,3,120,120,121,137,120,0,0,0,100,1,0,0,101,2,0,3,107,109,116,25,111,107,11,1,120,0,0,83,107,120,0,25,107,107,1,54,120,107,111,76,98,0,0,1,19,0,0,2,120,0,0,72,191,2,0,78,90,120,0,41,120,90,24,42,120,120,24,33,120,120,0,121,120,2,0,1,100,16,39,79,120,114,0,103,121,114,1,41,121,121,8,20,120,120,121,0,98,120,0,19,120,98,113,26,120,120,1,25,120,120,0,26,120,120,0,26,120,120,72,28,120,120,2,38,120,120,255,19,120,120,112,0,21,120,0,1,120,163,32,79,120,120,0,1,121,163,32,103,121,121,1,41,121,121,8,20,120,120,121,0,99,120,0,19,120,99,113,26,120,120,1,25,120,120,0,26,120,120,0,26,120,120,36,28,120,120,2,38,120,120,255,25,120,120,12,19,120,120,112,0,23,120,0,19,120,23,112,25,120,120,24,25,120,120,3,19,120,120,112,0,26,120,0,3,121,109,118,19,122,21,112,26,122,122,10,19,122,122,113,19,123,26,112,1,124,30,0,19,124,124,112,1,125,14,0,19,125,125,112,135,120,19,0,121,122,123,124,125,0,0,0,3,120,109,118,103,120,120,4,3,125,109,118,25,125,125,4,103,125,125,1,41,125,125,8,20,120,120,125,0,102,120,0,3,125,109,119,41,124,102,16,42,124,124,16,25,124,124,2,19,124,124,113,19,123,26,112,1,122,30,0,19,122,122,112,1,121,14,0,19,121,121,112,135,120,19,0,125,124,123,122,121,0,0,0,3,120,109,119,103,120,120,4,3,121,109,119,25,121,121,4,103,121,121,1,41,121,121,8,20,120,120,121,0,104,120,0,1,121,128,0,3,121,109,121,41,122,104,16,42,122,122,16,25,122,122,2,19,122,122,113,19,123,26,112,1,124,30,0,19,124,124,112,1,125,14,0,19,125,125,112,135,120,19,0,121,122,123,124,125,0,0,0,92,125,109,118,108,109,48,125,25,125,109,48,3,120,109,118,104,120,120,2,108,125,2,120,25,120,109,48,3,125,109,118,104,125,125,4,108,120,4,125,25,125,109,48,3,120,109,118,104,120,120,6,108,125,6,120,25,125,109,48,1,124,42,25,135,120,20,0,125,124,0,0,92,124,109,119,108,109,56,124,25,124,109,56,3,120,109,119,104,120,120,2,108,124,2,120,25,120,109,56,3,124,109,119,104,124,124,4,108,120,4,124,25,124,109,56,3,120,109,119,104,120,120,6,108,124,6,120,25,124,109,56,1,125,47,25,135,120,20,0,124,125,0,0,1,125,128,0,92,125,109,125,108,109,64,125,25,125,109,64,1,120,128,0,3,120,109,120,104,120,120,2,108,125,2,120,25,120,109,64,1,125,128,0,3,125,109,125,104,125,125,4,108,120,4,125,25,125,109,64,1,120,128,0,3,120,109,120,104,120,120,6,108,125,6,120,25,125,109,64,1,124,52,25,135,120,20,0,125,124,0,0,1,9,1,0,1,124,64,0,1,125,44,0,1,123,184,0,3,123,109,123,135,120,17,0,124,125,123,0,19,123,21,112,19,125,23,112,1,124,184,0,3,124,109,124,135,120,7,0,123,125,124,0,1,124,64,0,1,125,45,0,1,123,184,0,3,123,109,123,135,120,17,0,124,125,123,0,0,106,100,0,1,123,184,0,3,123,109,123,25,123,123,7,1,125,10,0,135,120,38,0,106,123,125,0,19,125,21,112,19,123,23,112,25,123,123,12,19,123,123,113,1,124,184,0,3,124,109,124,135,120,7,0,125,123,124,0,1,120,184,0,3,120,109,120,25,120,120,7,135,4,4,0,120,0,0,0,26,120,4,1,19,120,120,112,0,5,120,0,0,3,5,0,79,120,114,0,103,124,114,1,41,124,124,8,20,120,120,124,0,6,120,0,19,120,6,113,26,120,120,1,25,120,120,0,26,120,120,0,26,120,120,72,28,120,120,2,38,120,120,255,25,120,120,42,19,120,120,112,0,38,120,0,1,120,163,32,79,120,120,0,1,124,163,32,103,124,124,1,41,124,124,8,20,120,120,124,0,8,120,0,19,120,8,113,26,120,120,1,25,120,120,0,26,120,120,0,26,120,120,36,28,120,120,2,38,120,120,255,25,120,120,12,19,120,120,112,0,39,120,0,79,120,114,0,103,124,114,1,41,124,124,8,20,120,120,124,0,10,120,0,19,120,10,113,19,124,5,112,25,124,124,1,6,120,120,124,38,120,120,255,19,120,120,112,0,44,120,0,19,120,39,112,26,120,120,1,19,120,120,112,0,52,120,0,2,120,0,0,185,214,2,0,78,11,120,0,19,120,11,112,33,120,120,0,1,124,2,0,1,123,1,0,125,12,120,124,123,0,0,0,19,123,12,112,0,103,123,0,135,123,39,0,0,13,103,0,41,123,13,24,42,123,123,24,33,123,123,0,121,123,147,0,2,123,0,0,185,214,2,0,78,14,123,0,19,123,14,112,33,123,123,0,121,123,5,0,1,123,0,0,19,124,5,112,15,16,123,124,119,0,2,0,1,16,0,0,38,124,16,1,0,15,124,0,0,17,101,0,0,7,17,0,0,18,103,0,19,124,18,112,32,124,124,2,121,124,22,0,19,124,15,112,41,124,124,24,42,124,124,24,33,124,124,0,121,124,15,0,79,124,114,0,103,123,114,1,41,123,123,8,20,124,124,123,0,20,124,0,1,123,0,0,19,120,52,112,19,125,52,112,25,125,125,12,25,125,125,2,19,125,125,113,135,124,5,0,123,120,20,125,119,0,3,0,135,124,40,0,119,0,1,0,0,105,5,0,0,22,105,0,1,124,1,0,19,125,22,112,25,125,125,1,19,125,125,112,19,125,125,112,56,124,124,125,80,103,0,0,119,0,70,0,19,124,15,112,41,124,124,24,42,124,124,24,33,124,124,0,121,124,41,0,0,24,105,0,19,124,44,112,19,125,24,112,5,25,124,125,0,27,105,0,19,125,44,112,19,124,27,112,25,124,124,1,5,28,125,124,19,125,25,113,19,120,52,112,19,123,28,113,19,122,52,112,25,122,122,12,25,122,122,2,19,122,122,113,135,124,6,0,125,120,123,122,0,29,105,0,19,124,44,112,19,122,29,112,5,30,124,122,0,31,7,0,19,124,44,112,28,124,124,2,38,124,124,255,3,124,30,124,26,124,124,3,19,124,124,112,19,124,124,112,19,123,52,112,25,123,123,1,19,123,123,113,31,120,31,10,38,120,120,255,25,120,120,48,19,120,120,112,135,122,41,0,124,123,120,0,119,0,15,0,0,32,105,0,0,33,7,0,19,120,38,112,19,123,32,112,27,123,123,6,3,120,120,123,19,120,120,113,19,123,39,112,31,124,33,10,38,124,124,255,25,124,124,48,19,124,124,112,135,122,41,0,120,123,124,0,0,34,7,0,29,122,34,10,38,122,122,255,0,7,122,0,0,35,105,0,26,122,35,1,41,122,122,24,42,122,122,24,0,105,122,0,119,0,179,255,19,122,15,112,41,122,122,24,42,122,122,24,33,122,122,0,120,122,22,0,0,36,3,0,0,37,3,0,19,124,38,112,19,123,36,112,27,123,123,6,3,124,124,123,19,124,124,113,19,123,39,112,19,120,38,112,19,125,37,112,27,125,125,6,3,120,120,125,25,120,120,6,26,120,120,1,19,120,120,113,19,125,39,112,25,125,125,12,26,125,125,1,19,125,125,113,135,122,8,0,124,123,120,125,1,103,0,0,3,125,109,115,134,122,0,0,100,208,2,0,125,0,0,0,90,40,109,115,19,122,40,112,32,122,122,5,120,122,26,1,90,66,109,115,19,122,66,112,32,122,122,16,120,122,2,0,119,0,93,255,90,125,109,115,95,109,117,125,3,125,109,117,3,122,109,115,102,122,122,1,107,125,1,122,3,122,109,117,3,125,109,115,102,125,125,2,107,122,2,125,3,125,109,117,3,122,109,115,102,122,122,3,107,125,3,122,3,122,109,117,3,125,109,115,102,125,125,4,107,122,4,125,3,125,109,117,3,122,109,115,102,122,122,5,107,125,5,122,3,122,109,117,3,125,109,115,102,125,125,6,107,122,6,125,3,122,109,116,3,120,109,117,135,125,11,0,122,120,0,0,3,125,109,115,103,125,125,1,3,120,109,115,25,120,120,1,103,120,120,1,41,120,120,8,20,125,125,120,0,67,125,0,19,125,67,113,1,123,1,0,1,120,3,0,138,125,123,120,188,105,0,0,200,105,0,0,172,107,0,0,119,0,47,255,0,68,101,0,0,19,68,0,119,0,44,255,90,69,109,116,41,120,69,24,42,120,120,24,33,120,120,0,120,120,2,0,119,0,38,255,3,120,109,116,102,70,120,2,19,120,70,112,33,120,120,0,120,120,33,255,3,120,109,116,103,120,120,7,3,122,109,116,25,122,122,7,103,122,122,1,41,122,122,8,20,120,120,122,0,71,120,0,3,120,109,116,103,120,120,9,3,122,109,116,25,122,122,9,103,122,122,1,41,122,122,8,20,120,120,122,0,72,120,0,92,122,109,118,108,109,72,122,25,122,109,72,3,120,109,118,104,120,120,2,108,122,2,120,25,120,109,72,3,122,109,118,104,122,122,4,108,120,4,122,25,122,109,72,3,120,109,118,104,120,120,6,108,122,6,120,25,120,109,72,135,73,25,0,71,72,120,0,41,120,73,24,42,120,120,24,33,120,120,0,121,120,3,0,1,108,43,0,119,0,16,1,1,122,128,0,92,122,109,122,108,109,80,122,25,122,109,80,1,120,128,0,3,120,109,120,104,120,120,2,108,122,2,120,25,120,109,80,1,122,128,0,3,122,109,122,104,122,122,4,108,120,4,122,25,122,109,80,1,120,128,0,3,120,109,120,104,120,120,6,108,122,6,120,25,120,109,80,135,75,25,0,71,72,120,0,41,120,75,24,42,120,120,24,33,120,120,0,121,120,3,0,1,108,45,0,119,0,245,0,92,122,109,119,108,109,88,122,25,122,109,88,3,120,109,119,104,120,120,2,108,122,2,120,25,120,109,88,3,122,109,119,104,122,122,4,108,120,4,122,25,122,109,88,3,120,109,119,104,120,120,6,108,122,6,120,25,120,109,88,135,76,25,0,71,72,120,0,41,120,76,24,42,120,120,24,33,120,120,0,121,120,10,0,0,77,101,0,0,78,100,0,0,79,100,0,13,120,77,78,125,80,120,0,79,0,0,0,0,101,80,0,1,103,1,0,119,0,193,254,1,103,2,0,2,120,0,0,185,214,2,0,78,81,120,0,2,120,0,0,185,214,2,0,41,122,81,24,42,122,122,24,33,122,122,0,40,122,122,1,38,122,122,1,19,122,122,112,83,120,122,0,119,0,179,254,25,107,109,96,1,110,57,25,25,111,107,24,78,122,110,0,83,107,122,0,25,107,107,1,25,110,110,1,54,122,107,111,184,107,0,0,3,122,109,116,103,122,122,9,3,120,109,116,25,120,120,9,103,120,120,1,41,120,120,8,20,122,122,120,0,82,122,0,3,122,109,116,103,122,122,5,3,120,109,116,25,120,120,5,103,120,120,1,41,120,120,8,20,122,122,120,0,83,122,0,79,122,114,0,103,120,114,1,41,120,120,8,20,122,122,120,0,84,122,0,3,122,109,116,103,122,122,3,3,120,109,116,25,120,120,3,103,120,120,1,41,120,120,8,20,122,122,120,0,85,122,0,79,122,114,0,103,120,114,1,41,120,120,8,20,122,122,120,0,86,122,0,41,122,85,16,42,122,122,16,1,120,0,0,19,123,86,113,26,123,123,1,135,87,13,0,122,120,123,0,19,123,5,112,25,123,123,1,19,120,84,113,4,120,120,87,26,120,120,1,19,120,120,113,19,120,120,113,5,88,123,120,79,120,114,0,103,123,114,1,41,123,123,8,20,120,120,123,0,89,120,0,25,120,109,96,19,123,89,113,6,123,88,123,38,123,123,255,19,123,123,113,19,123,123,113,41,123,123,2,3,91,120,123,79,123,91,0,103,120,91,1,41,120,120,8,20,123,123,120,103,120,91,2,41,120,120,16,20,123,123,120,103,120,91,3,41,120,120,24,20,123,123,120,0,92,123,0,1,123,0,0,41,120,82,16,42,120,120,16,41,122,83,16,42,122,122,16,4,120,120,122,19,120,120,113,41,120,120,16,42,120,120,16,4,123,123,120,28,123,123,10,38,123,123,255,19,123,123,113,41,123,123,16,42,123,123,16,5,93,123,92,0,94,19,0,0,95,100,0,3,123,94,93,135,96,13,0,123,0,95,0,0,101,96,0,1,103,1,0,119,0,73,254,3,125,109,115,103,125,125,1,3,123,109,115,25,123,123,1,103,123,123,1,41,123,123,8,20,125,125,123,0,41,125,0,19,125,41,113,1,123,34,0,1,120,7,0,138,125,123,120,164,109,0,0,212,109,0,0,20,110,0,0,80,110,0,0,148,110,0,0,188,110,0,0,196,110,0,0,119,0,53,254,0,42,101,0,0,43,9,0,0,45,100,0,3,123,42,43,57,123,123,45,192,109,0,0,119,0,46,254,0,46,9,0,0,47,101,0,3,101,47,46,1,103,1,0,119,0,41,254,0,48,101,0,0,49,9,0,57,123,49,48,232,109,0,0,119,0,36,254,0,50,101,0,0,51,9,0,4,123,50,51,57,123,0,123,0,110,0,0,119,0,30,254,0,53,9,0,0,54,101,0,4,101,54,53,1,103,1,0,119,0,25,254,0,55,3,0,41,123,55,24,42,123,123,24,33,123,123,0,120,123,2,0,119,0,19,254,0,56,3,0,19,123,56,112,26,123,123,1,19,123,123,112,0,3,123,0,0,57,9,0,27,9,57,10,1,103,1,0,119,0,10,254,0,58,3,0,19,123,58,112,19,120,5,112,54,123,123,120,104,110,0,0,119,0,4,254,0,59,3,0,19,123,59,112,25,123,123,1,19,123,123,112,0,3,123,0,0,61,9,0,29,123,61,10,38,123,123,255,0,9,123,0,1,103,1,0,119,0,249,253,0,63,101,0,0,64,100,0,46,123,63,64,176,110,0,0,0,65,100,0,0,101,65,0,119,0,2,0,0,101,0,0,1,103,1,0,119,0,239,253,1,108,31,0,119,0,3,0,1,108,36,0,119,0,1,0,32,125,108,31,121,125,7,0,0,62,101,0,0,60,62,0,0,97,60,0,137,109,0,0,139,97,0,0,119,0,23,0,32,125,108,36,121,125,6,0,1,60,255,255,0,97,60,0,137,109,0,0,139,97,0,0,119,0,16,0,32,125,108,43,121,125,7,0,0,74,101,0,0,60,74,0,0,97,60,0,137,109,0,0,139,97,0,0,119,0,8,0,32,125,108,45,121,125,6,0,2,60,0,0,255,255,0,0,0,97,60,0,137,109,0,0,139,97,0,0,1,125,0,0,139,125,0,0,140,7,193,0,0,0,0,0,2,185,0,0,255,0,0,0,2,186,0,0,255,255,0,0,2,187,0,0,9,173,0,0,1,183,0,0,136,188,0,0,0,184,188,0,136,188,0,0,1,189,96,12,3,188,188,189,137,188,0,0,0,11,3,0,1,73,0,0,1,82,1,0,1,87,1,0,2,188,0,0,24,180,2,0,82,140,188,0,19,188,1,186,25,188,188,1,19,188,188,186,135,145,21,0,0,188,140,0,0,36,145,0,0,149,36,0,1,188,0,0,45,188,188,149,8,112,0,0,19,188,0,186,85,184,188,0,19,189,1,186,109,184,4,189,1,188,241,18,135,189,42,0,188,184,0,0,19,188,0,186,134,189,0,0,216,221,2,0,188,0,0,0,1,172,255,255,0,160,172,0,137,184,0,0,139,160,0,0,0,162,36,0,102,163,162,5,0,164,11,0,19,189,164,185,19,188,163,185,47,189,189,188,48,112,0,0,0,165,11,0,0,7,165,0,119,0,4,0,0,166,36,0,102,167,166,5,0,7,167,0,19,189,7,185,0,168,189,0,19,189,168,185,0,11,189,0,0,169,36,0,102,170,169,2,0,171,36,0,102,173,171,3,0,174,36,0,25,36,174,6,0,175,36,0,19,189,170,185,19,189,189,186,0,73,189,0,0,176,73,0,0,177,36,0,19,189,176,186,27,189,189,5,3,36,177,189,1,77,0,0,0,178,77,0,0,179,11,0,19,189,179,185,19,188,2,185,4,189,189,188,57,189,178,189,172,112,0,0,119,0,24,0,0,180,77,0,19,189,2,185,3,189,180,189,27,189,189,5,3,189,175,189,102,181,189,3,0,182,77,0,1,189,80,10,3,189,184,189,95,189,182,181,0,8,77,0,19,189,2,185,3,189,8,189,27,189,189,5,3,189,175,189,102,9,189,2,0,10,77,0,1,189,80,8,3,189,184,189,95,189,10,9,0,12,77,0,25,77,12,1,119,0,226,255,1,77,0,0,0,13,77,0,19,189,173,185,55,189,13,189,32,113,0,0,119,0,71,0,0,14,36,0,0,42,14,0,0,15,42,0,79,189,15,0,103,188,15,1,41,188,188,8,20,189,189,188,0,16,189,0,0,52,16,0,0,17,42,0,103,189,17,2,25,188,17,2,103,188,188,1,41,188,188,8,20,189,189,188,0,18,189,0,0,54,18,0,0,19,42,0,102,20,19,6,19,189,20,185,0,67,189,0,0,21,52,0,19,189,21,186,28,189,189,8,38,189,189,255,19,189,189,186,0,60,189,0,0,22,52,0,19,189,22,186,30,189,189,8,38,189,189,255,33,189,189,0,121,189,6,0,0,23,60,0,25,189,23,1,41,189,189,16,42,189,189,16,0,60,189,0,0,24,54,0,0,25,60,0,19,189,25,186,19,188,24,186,5,26,189,188,19,188,26,186,0,60,188,0,0,27,67,0,0,28,60,0,19,188,28,186,19,189,27,186,25,189,189,1,5,29,188,189,19,189,29,186,0,60,189,0,0,30,60,0,19,189,30,186,25,189,189,7,19,189,189,186,0,60,189,0,0,31,36,0,0,32,77,0,25,189,184,56,41,188,32,2,97,189,188,31,0,33,60,0,0,34,36,0,19,188,33,186,3,36,34,188,0,35,77,0,25,77,35,1,119,0,182,255,1,90,0,0,0,37,90,0,19,188,37,185,0,103,188,0,1,77,0,0,0,38,77,0,0,39,90,0,57,188,38,39,96,114,0,0,119,0,105,0,0,40,77,0,1,188,80,8,3,188,184,188,90,41,188,40,19,188,41,185,32,188,188,1,121,188,77,0,19,188,4,185,38,188,188,2,33,188,188,2,121,188,72,0,0,43,77,0,19,188,2,185,3,188,43,188,27,188,188,5,3,188,175,188,102,44,188,4,25,188,184,56,19,189,44,185,41,189,189,2,94,45,188,189,0,42,45,0,0,46,42,0,79,188,46,0,103,189,46,1,41,189,189,8,20,188,188,189,0,47,188,0,0,52,47,0,0,48,42,0,103,188,48,2,25,189,48,2,103,189,189,1,41,189,189,8,20,188,188,189,0,49,188,0,0,54,49,0,0,50,77,0,19,188,2,185,3,188,50,188,27,188,188,5,90,51,175,188,41,188,5,16,42,188,188,16,19,189,51,185,3,93,188,189,0,53,77,0,19,189,2,185,3,189,53,189,27,189,189,5,3,189,175,189,102,55,189,1,41,189,6,16,42,189,189,16,19,188,55,185,3,99,189,188,0,56,93,0,0,57,99,0,0,58,93,0,0,59,52,0,0,61,99,0,0,62,54,0,2,188,0,0,36,180,2,0,82,63,188,0,19,189,56,186,19,190,57,186,19,191,59,186,28,191,191,2,38,191,191,255,3,191,58,191,26,191,191,1,19,191,191,186,19,192,62,186,28,192,192,2,38,192,192,255,3,192,61,192,26,192,192,1,19,192,192,186,135,188,33,0,189,190,191,192,63,0,0,0,1,82,1,0,0,64,77,0,1,188,80,8,3,188,184,188,90,65,188,64,19,188,65,185,25,188,188,1,33,188,188,1,121,188,11,0,0,66,77,0,1,188,80,8,3,188,184,188,90,68,188,66,1,188,80,8,3,188,184,188,26,192,68,1,41,192,192,24,42,192,192,24,95,188,66,192,0,69,77,0,25,77,69,1,119,0,148,255,0,70,82,0,32,192,70,1,121,192,103,0,1,77,0,0,0,71,77,0,0,72,103,0,19,192,72,185,57,192,71,192,40,116,0,0,119,0,96,0,0,74,77,0,1,192,80,8,3,192,184,192,90,75,192,74,19,192,75,185,25,192,192,1,33,192,192,1,121,192,85,0,0,76,77,0,19,192,2,185,3,192,76,192,27,192,192,5,3,192,175,192,102,78,192,4,25,192,184,56,19,188,78,185,41,188,188,2,94,79,192,188,0,42,79,0,0,80,42,0,79,192,80,0,103,188,80,1,41,188,188,8,20,192,192,188,0,81,192,0,0,52,81,0,0,83,42,0,103,192,83,2,25,188,83,2,103,188,188,1,41,188,188,8,20,192,192,188,0,84,192,0,0,54,84,0,0,85,42,0,102,86,85,6,19,192,86,185,0,67,192,0,0,88,77,0,19,192,2,185,3,192,88,192,27,192,192,5,90,89,175,192,41,192,5,16,42,192,192,16,19,188,89,185,3,93,192,188,0,91,77,0,19,188,2,185,3,188,91,188,27,188,188,5,3,188,175,188,102,92,188,1,41,188,6,16,42,188,188,16,19,192,92,185,3,99,188,192,0,94,67,0,0,95,93,0,0,96,99,0,0,97,52,0,0,98,54,0,0,100,77,0,19,192,2,185,3,192,100,192,27,192,192,5,3,192,175,192,102,101,192,4,25,192,184,56,19,188,101,185,41,188,188,2,94,102,192,188,2,192,0,0,36,180,2,0,82,104,192,0,19,192,94,186,32,192,192,1,121,192,8,0,19,188,95,186,19,191,96,186,25,190,102,7,135,192,43,0,188,191,97,98,190,104,0,0,119,0,8,0,19,190,95,186,19,191,96,186,25,188,102,7,135,192,44,0,190,191,97,98,188,104,0,0,119,0,1,0,0,105,77,0,25,77,105,1,119,0,156,255,0,106,87,0,32,192,106,1,121,192,107,0,0,107,103,0,19,192,107,185,25,77,192,1,0,108,77,0,0,109,90,0,57,192,108,109,208,117,0,0,119,0,96,0,0,110,77,0,1,192,80,8,3,192,184,192,90,111,192,110,19,192,111,185,25,192,192,1,33,192,192,1,121,192,85,0,0,112,77,0,19,192,2,185,3,192,112,192,27,192,192,5,3,192,175,192,102,113,192,4,25,192,184,56,19,188,113,185,41,188,188,2,94,114,192,188,0,42,114,0,0,115,42,0,79,192,115,0,103,188,115,1,41,188,188,8,20,192,192,188,0,116,192,0,0,52,116,0,0,117,42,0,103,192,117,2,25,188,117,2,103,188,188,1,41,188,188,8,20,192,192,188,0,118,192,0,0,54,118,0,0,119,42,0,102,120,119,6,19,192,120,185,0,67,192,0,0,121,77,0,19,192,2,185,3,192,121,192,27,192,192,5,90,122,175,192,41,192,5,16,42,192,192,16,19,188,122,185,3,93,192,188,0,123,77,0,19,188,2,185,3,188,123,188,27,188,188,5,3,188,175,188,102,124,188,1,41,188,6,16,42,188,188,16,19,192,124,185,3,99,188,192,0,125,67,0,0,126,93,0,0,127,99,0,0,128,52,0,0,129,54,0,0,130,77,0,19,192,2,185,3,192,130,192,27,192,192,5,3,192,175,192,102,131,192,4,25,192,184,56,19,188,131,185,41,188,188,2,94,132,192,188,2,192,0,0,36,180,2,0,82,133,192,0,19,192,125,186,32,192,192,1,121,192,8,0,19,188,126,186,19,191,127,186,25,190,132,7,135,192,43,0,188,191,128,129,190,133,0,0,119,0,8,0,19,190,126,186,19,191,127,186,25,188,132,7,135,192,44,0,190,191,128,129,188,133,0,0,119,0,1,0,0,134,77,0,25,77,134,1,119,0,157,255,0,135,90,0,19,192,135,185,0,103,192,0,0,136,87,0,0,137,82,0,32,192,136,1,32,188,137,1,20,192,192,188,121,192,9,0,2,192,0,0,36,180,2,0,82,138,192,0,135,192,45,0,138,0,0,0,1,87,0,0,1,82,0,0,119,0,14,0,1,192,1,0,134,139,0,0,16,135,2,0,192,4,0,0,19,192,139,185,33,192,192,0,121,192,7,0,19,192,4,185,38,192,192,1,33,192,192,0,121,192,3,0,1,183,45,0,119,0,71,0,0,141,90,0,1,192,80,10,3,192,184,192,90,142,192,141,1,192,1,0,19,188,142,185,49,192,192,188,12,120,0,0,0,143,90,0,1,192,80,10,3,192,184,192,90,144,192,143,1,192,80,10,3,192,184,192,26,188,144,1], eb + 20480);
  HEAPU8.set([41,188,188,24,42,188,188,24,95,192,143,188,0,146,90,0,1,188,80,10,3,188,184,188,90,147,188,146,19,188,147,185,36,188,188,1,121,188,8,0,0,148,90,0,0,150,11,0,19,188,2,185,3,188,148,188,19,192,150,185,16,161,188,192,119,0,2,0,1,161,0,0,0,151,90,0,120,161,2,0,119,0,4,0,25,90,151,1,1,87,1,0,119,0,236,255,0,152,11,0,19,192,152,185,19,188,2,185,3,188,151,188,57,192,192,188,124,120,0,0,119,0,116,254,1,77,0,0,0,153,77,0,0,154,90,0,57,192,153,154,148,120,0,0,119,0,12,0,0,155,77,0,1,192,80,8,3,192,184,192,90,156,192,155,1,192,1,0,19,188,156,185,54,192,192,188,192,120,0,0,0,157,77,0,25,77,157,1,119,0,241,255,0,158,77,0,0,159,90,0,48,192,159,158,216,120,0,0,1,183,58,0,119,0,2,0,119,0,92,254,32,192,183,45,121,192,6,0,0,172,139,0,0,160,172,0,137,184,0,0,139,160,0,0,119,0,7,0,32,192,183,58,121,192,5,0,1,172,255,255,0,160,172,0,137,184,0,0,139,160,0,0,1,192,0,0,139,192,0,0,140,7,163,0,0,0,0,0,2,150,0,0,255,0,0,0,2,151,0,0,255,255,0,0,2,152,0,0,164,22,0,0,1,148,0,0,136,153,0,0,0,149,153,0,136,153,0,0,25,153,153,112,137,153,0,0,0,11,3,0,0,18,4,0,0,25,5,0,0,29,6,0,1,84,0,0,1,89,0,0,33,153,1,0,120,153,5,0,1,140,255,255,0,130,140,0,137,149,0,0,139,130,0,0,0,116,25,0,0,125,11,0,19,153,116,150,19,154,125,150,4,153,153,154,25,153,153,1,26,153,153,2,19,153,153,150,0,72,153,0,0,131,29,0,0,132,18,0,19,153,131,150,19,154,132,150,4,153,153,154,25,153,153,1,26,153,153,2,28,153,153,12,38,153,153,255,26,47,153,1,0,133,47,0,48,153,1,133,220,121,0,0,0,47,1,0,0,134,18,0,0,135,47,0,19,153,134,150,27,154,135,12,3,153,153,154,25,153,153,12,19,153,153,150,0,29,153,0,0,136,11,0,0,137,18,0,0,138,25,0,0,139,29,0,19,154,136,150,19,155,137,150,19,156,138,150,19,157,139,150,25,157,157,1,19,157,157,151,135,153,6,0,154,155,156,157,0,141,11,0,19,157,141,150,19,157,157,150,107,149,64,157,25,157,149,64,19,153,141,150,42,153,153,8,107,157,1,153,0,142,18,0,25,153,149,64,19,157,142,150,19,157,157,150,107,153,2,157,25,157,149,64,25,157,157,2,19,153,142,150,42,153,153,8,107,157,1,153,0,143,11,0,25,153,149,64,19,157,143,150,25,157,157,60,26,157,157,1,19,157,157,151,19,157,157,150,107,153,4,157,25,157,149,64,25,157,157,4,19,153,143,150,25,153,153,60,26,153,153,1,19,153,153,151,42,153,153,8,107,157,1,153,0,144,29,0,25,153,149,64,19,157,144,150,19,157,157,150,107,153,6,157,25,157,149,64,25,157,157,6,19,153,144,150,42,153,153,8,107,157,1,153,0,145,11,0,19,153,145,150,25,153,153,1,19,153,153,150,0,11,153,0,0,146,18,0,19,153,146,150,25,153,153,1,19,153,153,150,0,18,153,0,0,147,25,0,19,153,147,150,26,153,153,1,19,153,153,150,0,25,153,0,19,153,2,151,0,52,153,0,0,7,52,0,0,8,47,0,1,153,0,0,4,157,1,8,135,9,13,0,7,153,157,0,0,52,9,0,19,157,2,151,0,56,157,0,0,10,56,0,1,157,0,0,26,153,1,1,135,12,13,0,10,157,153,0,0,56,12,0,1,59,0,0,1,157,0,0,107,149,93,157,1,40,1,0,0,13,40,0,33,157,13,0,121,157,105,0,0,14,11,0,0,15,18,0,0,16,25,0,0,17,29,0,19,153,14,150,19,156,15,150,19,155,16,150,19,154,17,150,135,157,5,0,153,156,155,154,0,19,59,0,25,157,149,93,19,154,19,150,90,20,157,154,0,21,11,0,0,22,18,0,134,23,0,0,124,250,1,0,20,21,22,72,0,24,59,0,25,157,149,93,19,154,24,150,25,154,154,1,95,157,154,23,1,36,0,0,0,26,36,0,0,27,47,0,55,154,26,27,240,123,0,0,119,0,35,0,0,28,36,0,57,154,1,28,120,124,0,0,0,30,52,0,0,31,36,0,3,154,30,31,41,154,154,1,91,154,0,154,3,157,30,31,41,157,157,1,3,157,0,157,103,157,157,1,41,157,157,8,20,154,154,157,0,32,154,0,0,33,59,0,25,154,149,93,19,157,33,150,90,34,154,157,0,35,11,0,0,37,18,0,0,38,36,0,19,157,37,150,27,155,38,12,3,157,157,155,25,157,157,12,19,157,157,150,134,154,0,0,208,115,2,0,32,34,35,157,72,0,0,0,0,39,36,0,25,36,39,1,119,0,218,255,0,41,56,0,0,42,52,0,50,154,42,41,20,125,0,0,0,43,56,0,0,44,52,0,0,45,47,0,3,154,44,45,48,154,43,154,20,125,0,0,0,46,11,0,0,48,18,0,0,49,56,0,0,50,52,0,0,51,11,0,0,53,18,0,0,54,56,0,0,55,52,0,19,157,46,150,19,155,48,150,4,156,49,50,25,156,156,1,27,156,156,12,3,155,155,156,19,155,155,151,19,156,51,150,25,156,156,48,26,156,156,1,19,156,156,151,19,153,53,150,4,158,54,55,25,158,158,1,27,158,158,12,3,153,153,158,25,153,153,12,26,153,153,1,19,153,153,151,135,154,8,0,157,155,156,153,1,40,0,0,25,153,149,85,134,154,0,0,100,208,2,0,153,0,0,0,102,57,149,85,19,154,57,150,32,154,154,5,120,154,225,0,102,97,149,85,19,154,97,150,32,154,154,16,120,154,2,0,119,0,137,255,102,153,149,85,107,149,105,153,25,153,149,105,25,154,149,85,102,154,154,1,107,153,1,154,25,154,149,105,25,153,149,85,102,153,153,2,107,154,2,153,25,153,149,105,25,154,149,85,102,154,154,3,107,153,3,154,25,154,149,105,25,153,149,85,102,153,153,4,107,154,4,153,25,153,149,105,25,154,149,85,102,154,154,5,107,153,5,154,25,154,149,105,25,153,149,85,102,153,153,6,107,154,6,153,25,154,149,74,25,156,149,105,135,153,11,0,154,156,0,0,25,153,149,85,103,153,153,1,25,156,149,85,25,156,156,1,103,156,156,1,41,156,156,8,20,153,153,156,0,98,153,0,19,153,98,151,1,159,1,0,1,162,3,0,138,153,159,162,4,126,0,0,252,126,0,0,48,127,0,0,119,0,91,255,0,99,52,0,19,156,99,150,0,84,156,0,0,100,59,0,0,89,100,0,25,156,149,74,103,156,156,7,25,154,149,74,25,154,154,7,103,154,154,1,41,154,154,8,20,156,156,154,0,101,156,0,25,156,149,74,103,156,156,9,25,154,149,74,25,154,154,9,103,154,154,1,41,154,154,8,20,156,156,154,0,102,156,0,0,103,52,0,104,154,149,64,108,149,40,154,25,154,149,40,25,156,149,64,104,156,156,2,108,154,2,156,25,156,149,40,25,154,149,64,104,154,154,4,108,156,4,154,25,154,149,40,25,156,149,64,104,156,156,6,108,154,6,156,25,156,149,40,1,154,13,0,1,155,1,0,19,157,103,151,19,158,1,151,1,159,12,0,135,104,12,0,101,102,156,154,155,157,158,159,1,159,0,0,41,158,104,16,42,158,158,16,56,159,159,158,208,126,0,0,119,0,40,255,0,105,56,0,41,159,104,16,42,159,159,16,53,159,105,159,232,126,0,0,119,0,34,255,41,159,104,16,42,159,159,16,0,56,159,0,1,40,1,0,119,0,29,255,102,106,149,74,41,159,106,24,42,159,159,24,33,159,159,0,120,159,2,0,119,0,23,255,25,159,149,74,102,107,159,2,19,159,107,150,33,159,159,0,120,159,18,255,1,148,48,0,119,0,249,0,25,159,149,74,102,112,159,1,41,159,112,24,42,159,159,24,33,159,159,0,120,159,2,0,119,0,9,255,0,113,89,0,0,114,84,0,0,115,47,0,25,158,149,56,25,157,149,74,19,155,113,150,1,154,100,0,19,154,154,150,1,156,30,0,19,160,114,150,4,161,1,115,19,161,161,151,1,162,12,0,135,159,37,0,158,157,155,154,156,160,161,162,0,117,59,0,103,159,149,56,25,162,149,56,103,162,162,1,41,162,162,8,20,159,159,162,0,118,159,0,19,159,117,150,41,162,118,16,42,162,162,16,53,159,159,162,244,127,0,0,0,119,52,0,25,159,149,56,103,159,159,2,25,162,149,56,25,162,162,2,103,162,162,1,41,162,162,8,20,159,159,162,0,120,159,0,41,159,120,16,42,159,159,16,53,159,119,159,244,127,0,0,119,0,223,254,25,159,149,56,103,159,159,2,25,162,149,56,25,162,162,2,103,162,162,1,41,162,162,8,20,159,159,162,0,121,159,0,41,159,121,16,42,159,159,16,0,52,159,0,103,159,149,56,25,162,149,56,103,162,162,1,41,162,162,8,20,159,159,162,0,122,159,0,0,123,59,0,19,159,123,150,41,162,122,16,42,162,162,16,47,159,159,162,144,128,0,0,0,124,59,0,25,159,149,93,19,162,124,150,25,162,162,1,90,126,159,162,78,127,152,0,19,159,126,150,19,162,127,150,47,159,159,162,140,128,0,0,0,128,59,0,19,159,128,150,25,159,159,1,19,159,159,150,0,59,159,0,119,0,9,0,103,159,149,56,25,162,149,56,103,162,162,1,41,162,162,8,20,159,159,162,0,129,159,0,19,159,129,150,0,59,159,0,1,40,1,0,119,0,174,254,25,153,149,85,103,153,153,1,25,159,149,85,25,159,159,1,103,159,159,1,41,159,159,8,20,153,153,159,0,58,153,0,19,153,58,151,1,159,32,0,1,162,20,0,138,153,159,162,60,129,0,0,64,129,0,0,68,129,0,0,124,129,0,0,200,129,0,0,8,130,0,0,80,130,0,0,184,130,0,0,192,130,0,0,56,129,0,0,56,129,0,0,56,129,0,0,56,129,0,0,56,129,0,0,56,129,0,0,56,129,0,0,56,129,0,0,56,129,0,0,56,129,0,0,200,130,0,0,119,0,141,254,119,0,99,0,119,0,68,0,0,66,56,0,33,159,66,0,120,159,2,0,119,0,135,254,0,67,56,0,26,56,67,1,0,68,56,0,0,69,52,0,48,159,68,69,116,129,0,0,0,70,56,0,0,52,70,0,1,40,1,0,119,0,125,254,0,80,56,0,26,159,1,1,55,159,80,159,144,129,0,0,119,0,120,254,0,81,56,0,25,56,81,1,0,82,56,0,0,83,52,0,0,85,47,0,3,159,83,85,50,159,159,82,192,129,0,0,0,86,56,0,0,87,47,0,25,159,86,1,4,52,159,87,1,40,1,0,119,0,106,254,0,88,59,0,25,159,149,93,19,162,88,150,90,90,159,162,41,159,90,24,42,159,159,24,33,159,159,0,120,159,2,0,119,0,97,254,0,91,59,0,19,159,91,150,26,159,159,1,19,159,159,150,0,59,159,0,1,40,1,0,119,0,90,254,0,92,59,0,25,159,149,93,19,162,92,150,25,162,162,1,90,93,159,162,78,94,152,0,19,159,93,150,19,162,94,150,54,159,159,162,52,130,0,0,119,0,79,254,0,95,59,0,19,159,95,150,25,159,159,1,19,159,159,150,0,59,159,0,1,40,1,0,119,0,72,254,0,71,56,0,26,159,1,1,55,159,71,159,100,130,0,0,119,0,67,254,0,73,47,0,0,74,56,0,26,159,73,1,3,56,74,159,0,75,56,0,26,159,1,1,50,159,159,75,136,130,0,0,26,56,1,1,1,40,1,0,0,76,56,0,0,52,76,0,0,77,52,0,0,78,47,0,4,159,1,78,55,159,159,77,172,130,0,0,119,0,49,254,0,79,47,0,4,52,1,79,119,0,46,254,1,148,39,0,119,0,21,0,1,148,40,0,119,0,19,0,0,60,56,0,33,159,60,0,120,159,2,0,119,0,38,254,0,61,56,0,0,62,47,0,48,159,61,62,240,130,0,0,1,56,0,0,119,0,5,0,0,63,47,0,0,64,56,0,26,159,63,1,4,56,64,159,0,65,56,0,0,52,65,0,1,40,1,0,119,0,24,254,32,153,148,39,121,153,8,0,0,96,56,0,19,153,96,151,0,140,153,0,0,130,140,0,137,149,0,0,139,130,0,0,119,0,63,0,32,153,148,40,121,153,6,0,1,140,255,255,0,130,140,0,137,149,0,0,139,130,0,0,119,0,56,0,32,153,148,48,121,153,54,0,25,153,149,74,103,153,153,7,25,159,149,74,25,159,159,7,103,159,159,1,41,159,159,8,20,153,153,159,0,108,153,0,25,153,149,74,103,153,153,9,25,159,149,74,25,159,159,9,103,159,159,1,41,159,159,8,20,153,153,159,0,109,153,0,0,110,52,0,104,159,149,64,108,149,48,159,25,159,149,48,25,153,149,64,104,153,153,2,108,159,2,153,25,153,149,48,25,159,149,64,104,159,159,4,108,153,4,159,25,159,149,48,25,153,149,64,104,153,153,6,108,159,6,153,25,153,149,48,1,159,13,0,1,162,1,0,19,161,110,151,19,160,1,151,1,156,12,0,135,111,12,0,108,109,153,159,162,161,160,156,41,156,111,16,42,156,156,16,34,156,156,0,121,156,6,0,1,140,255,255,0,130,140,0,137,149,0,0,139,130,0,0,119,0,5,0,0,140,111,0,0,130,140,0,137,149,0,0,139,130,0,0,1,156,0,0,139,156,0,0,140,7,150,0,0,0,0,0,2,137,0,0,255,0,0,0,2,138,0,0,255,255,0,0,2,139,0,0,165,23,0,0,1,135,0,0,136,140,0,0,0,136,140,0,136,140,0,0,25,140,140,112,137,140,0,0,0,11,3,0,0,17,4,0,0,21,5,0,0,27,6,0,1,80,0,0,1,84,0,0,41,140,1,16,42,140,140,16,33,140,140,0,120,140,5,0,1,126,255,255,0,116,126,0,137,136,0,0,139,116,0,0,0,112,21,0,0,117,11,0,19,140,112,137,19,141,117,137,4,140,140,141,25,140,140,1,19,140,140,137,0,67,140,0,0,118,27,0,0,119,17,0,19,140,118,137,19,141,119,137,4,140,140,141,25,140,140,1,28,140,140,12,38,140,140,255,26,43,140,1,0,120,43,0,19,140,1,138,48,140,140,120,0,133,0,0,19,140,1,138,0,43,140,0,0,121,17,0,0,122,43,0,19,140,121,137,27,141,122,12,3,140,140,141,25,140,140,12,19,140,140,137,0,27,140,0,0,123,11,0,19,141,123,137,19,141,141,137,107,136,64,141,25,141,136,64,19,140,123,137,42,140,140,8,107,141,1,140,0,124,17,0,25,140,136,64,19,141,124,137,19,141,141,137,107,140,2,141,25,141,136,64,25,141,141,2,19,140,124,137,42,140,140,8,107,141,1,140,0,125,11,0,25,140,136,64,19,141,125,137,25,141,141,60,26,141,141,1,19,141,141,138,19,141,141,137,107,140,4,141,25,141,136,64,25,141,141,4,19,140,125,137,25,140,140,60,26,140,140,1,19,140,140,138,42,140,140,8,107,141,1,140,0,127,27,0,25,140,136,64,19,141,127,137,19,141,141,137,107,140,6,141,25,141,136,64,25,141,141,6,19,140,127,137,42,140,140,8,107,141,1,140,0,128,11,0,0,129,17,0,0,130,21,0,0,131,27,0,19,141,128,137,19,142,129,137,19,143,130,137,19,144,131,137,25,144,144,1,19,144,144,138,135,140,6,0,141,142,143,144,0,132,11,0,19,140,132,137,25,140,140,1,19,140,140,137,0,11,140,0,0,133,17,0,19,140,133,137,25,140,140,1,19,140,140,137,0,17,140,0,0,134,21,0,19,140,134,137,26,140,140,1,19,140,140,137,0,21,140,0,19,140,2,138,0,50,140,0,0,7,50,0,0,8,43,0,1,140,0,0,19,144,1,138,4,144,144,8,135,9,13,0,7,140,144,0,0,50,9,0,19,144,2,138,0,54,144,0,0,10,54,0,1,144,0,0,19,140,1,138,26,140,140,1,135,12,13,0,10,144,140,0,0,54,12,0,1,58,0,0,1,144,0,0,107,136,94,144,1,39,1,0,0,13,39,0,33,144,13,0,121,144,112,0,0,14,11,0,0,15,17,0,0,16,21,0,0,18,17,0,0,19,43,0,19,140,14,137,19,143,15,137,19,142,16,137,19,141,18,137,27,145,19,12,3,141,141,145,25,141,141,12,26,141,141,1,19,141,141,138,135,144,5,0,140,143,142,141,0,20,58,0,25,144,136,94,19,141,20,137,90,22,144,141,0,23,11,0,0,24,17,0,134,25,0,0,216,246,1,0,22,23,24,67,0,26,58,0,25,144,136,94,19,141,26,137,25,141,141,1,95,144,141,25,1,32,0,0,0,28,32,0,0,29,43,0,55,141,28,29,52,135,0,0,119,0,36,0,0,30,32,0,19,141,1,138,57,141,141,30,192,135,0,0,0,31,50,0,0,33,32,0,3,141,31,33,41,141,141,1,91,141,0,141,3,144,31,33,41,144,144,1,3,144,0,144,103,144,144,1,41,144,144,8,20,141,141,144,0,34,141,0,0,35,58,0,25,141,136,94,19,144,35,137,90,36,141,144,0,37,11,0,0,38,17,0,0,40,32,0,19,144,38,137,27,142,40,12,3,144,144,142,25,144,144,12,19,144,144,137,134,141,0,0,36,118,2,0,34,36,37,144,67,0,0,0,0,41,32,0,25,32,41,1,119,0,217,255,0,42,54,0,0,44,50,0,50,141,44,42,92,136,0,0,0,45,54,0,0,46,50,0,0,47,43,0,3,141,46,47,48,141,45,141,92,136,0,0,0,48,11,0,0,49,17,0,0,51,54,0,0,52,50,0,0,53,11,0,0,55,17,0,0,56,54,0,0,57,50,0,19,144,48,137,19,142,49,137,4,143,51,52,25,143,143,1,27,143,143,12,3,142,142,143,19,142,142,138,19,143,53,137,25,143,143,60,26,143,143,1,19,143,143,138,19,140,55,137,4,145,56,57,25,145,145,1,27,145,145,12,3,140,140,145,25,140,140,12,26,140,140,1,19,140,140,138,135,141,8,0,144,142,143,140,1,39,0,0,25,140,136,85,134,141,0,0,100,208,2,0,140,0,0,0,102,59,136,85,19,141,59,137,32,141,141,5,121,141,93,0,25,141,136,85,103,141,141,1,25,140,136,85,25,140,140,1,103,140,140,1,41,140,140,8,20,141,141,140,0,60,141,0,19,141,60,138,1,140,34,0,1,143,7,0,138,141,140,143,208,136,0,0,8,137,0,0,88,137,0,0,152,137,0,0,204,136,0,0,224,137,0,0,232,137,0,0,119,0,115,255,0,61,54,0,33,140,61,0,120,140,2,0,119,0,111,255,0,62,54,0,26,54,62,1,0,63,54,0,0,64,50,0,48,140,63,64,0,137,0,0,0,65,54,0,0,50,65,0,1,39,1,0,119,0,101,255,0,66,54,0,19,140,1,138,26,140,140,1,55,140,66,140,32,137,0,0,119,0,95,255,0,68,54,0,25,54,68,1,0,69,54,0,0,70,50,0,0,71,43,0,3,140,70,71,50,140,140,69,80,137,0,0,0,72,54,0,0,73,43,0,25,140,72,1,4,50,140,73,1,39,1,0,119,0,81,255,0,74,58,0,25,140,136,94,19,143,74,137,90,75,140,143,41,140,75,24,42,140,140,24,33,140,140,0,120,140,2,0,119,0,72,255,0,76,58,0,19,140,76,137,26,140,140,1,19,140,140,137,0,58,140,0,1,39,1,0,119,0,65,255,0,77,58,0,25,140,136,94,19,143,77,137,25,143,143,1,90,78,140,143,78,79,139,0,19,140,78,137,19,143,79,137,54,140,140,143,196,137,0,0,119,0,54,255,0,81,58,0,19,140,81,137,25,140,140,1,19,140,140,137,0,58,140,0,1,39,1,0,119,0,47,255,1,135,29,0,119,0,227,0,1,135,30,0,119,0,225,0,102,83,136,85,19,141,83,137,32,141,141,16,120,141,2,0,119,0,38,255,102,140,136,85,107,136,105,140,25,140,136,105,25,141,136,85,102,141,141,1,107,140,1,141,25,141,136,105,25,140,136,85,102,140,140,2,107,141,2,140,25,140,136,105,25,141,136,85,102,141,141,3,107,140,3,141,25,141,136,105,25,140,136,85,102,140,140,4,107,141,4,140,25,140,136,105,25,141,136,85,102,141,141,5,107,140,5,141,25,141,136,105,25,140,136,85,102,140,140,6,107,141,6,140,25,141,136,74,25,143,136,105,135,140,11,0,141,143,0,0,25,140,136,85,103,140,140,1,25,143,136,85,25,143,143,1,103,143,143,1,41,143,143,8,20,140,140,143,0,85,140,0,19,140,85,138,1,145,1,0,1,149,3,0,138,140,145,149,188,138,0,0,176,139,0,0,228,139,0,0,119,0,248,254,0,86,50,0,19,143,86,137,0,80,143,0,0,87,58,0,0,84,87,0,25,143,136,74,103,143,143,7,25,141,136,74,25,141,141,7,103,141,141,1,41,141,141,8,20,143,143,141,0,88,143,0,25,143,136,74,103,143,143,9,25,141,136,74,25,141,141,9,103,141,141,1,41,141,141,8,20,143,143,141,0,89,143,0,0,90,50,0,104,141,136,64,108,136,40,141,25,141,136,40,25,143,136,64,104,143,143,2,108,141,2,143,25,143,136,40,25,141,136,64,104,141,141,4,108,143,4,141,25,141,136,40,25,143,136,64,104,143,143,6,108,141,6,143,25,143,136,40,1,141,13,0,1,142,1,0,19,144,90,138,1,145,12,0,135,91,12,0,88,89,143,141,142,144,1,145,1,145,0,0,41,144,91,16,42,144,144,16,56,145,145,144,132,139,0,0,119,0,198,254,0,92,54,0,41,145,91,16,42,145,145,16,53,145,92,145,156,139,0,0,119,0,192,254,41,145,91,16,42,145,145,16,0,54,145,0,1,39,1,0,119,0,187,254,102,93,136,74,41,145,93,24,42,145,145,24,33,145,145,0,120,145,2,0,119,0,181,254,25,145,136,74,102,94,145,2,19,145,94,137,33,145,145,0,120,145,176,254,1,135,38,0,119,0,100,0,25,145,136,74,102,99,145,1,41,145,99,24,42,145,145,24,33,145,145,0,120,145,2,0,119,0,167,254,0,100,84,0,0,101,80,0,0,102,43,0,25,144,136,56,25,142,136,74,19,141,100,137,1,143,100,0,19,143,143,137,1,146,30,0,19,147,101,137,19,148,1,138,4,148,148,102,19,148,148,138,1,149,12,0,135,145,37,0,144,142,141,143,146,147,148,149,0,103,58,0,103,145,136,56,25,149,136,56,103,149,149,1,41,149,149,8,20,145,145,149,0,104,145,0,19,145,103,137,41,149,104,16,42,149,149,16,53,145,145,149,172,140,0,0,0,105,50,0,25,145,136,56,103,145,145,2,25,149,136,56,25,149,149,2,103,149,149,1,41,149,149,8,20,145,145,149,0,106,145,0,41,145,106,16,42,145,145,16,53,145,105,145,172,140,0,0,119,0,124,254,25,145,136,56,103,145,145,2,25,149,136,56,25,149,149,2,103,149,149,1,41,149,149,8,20,145,145,149,0,107,145,0,41,145,107,16,42,145,145,16,0,50,145,0,103,145,136,56,25,149,136,56,103,149,149,1,41,149,149,8,20,145,145,149,0,108,145,0,0,109,58,0,19,145,109,137,41,149,108,16,42,149,149,16,47,145,145,149,72,141,0,0,0,110,58,0,25,145,136,94,19,149,110,137,25,149,149,1,90,111,145,149,78,113,139,0,19,145,111,137,19,149,113,137,47,145,145,149,68,141,0,0,0,114,58,0,19,145,114,137,25,145,145,1,19,145,145,137,0,58,145,0,119,0,9,0,103,145,136,56,25,149,136,56,103,149,149,1,41,149,149,8,20,145,145,149,0,115,145,0,19,145,115,137,0,58,145,0,1,39,1,0,119,0,75,254,32,140,135,29,121,140,8,0,0,82,54,0,19,140,82,138,0,126,140,0,0,116,126,0,137,136,0,0,139,116,0,0,119,0,62,0,32,140,135,30,121,140,6,0,1,126,255,255,0,116,126,0,137,136,0,0,139,116,0,0,119,0,55,0,32,140,135,38,121,140,53,0,25,140,136,74,103,140,140,7,25,145,136,74,25,145,145,7,103,145,145,1,41,145,145,8,20,140,140,145,0,95,140,0,25,140,136,74,103,140,140,9,25,145,136,74,25,145,145,9,103,145,145,1,41,145,145,8,20,140,140,145,0,96,140,0,0,97,50,0,104,145,136,64,108,136,48,145,25,145,136,48,25,140,136,64,104,140,140,2,108,145,2,140,25,140,136,48,25,145,136,64,104,145,145,4,108,140,4,145,25,145,136,48,25,140,136,64,104,140,140,6,108,145,6,140,25,140,136,48,1,145,13,0,1,149,1,0,19,148,97,138,1,147,12,0,135,98,12,0,95,96,140,145,149,148,1,147,41,147,98,16,42,147,147,16,34,147,147,0,121,147,6,0,1,126,255,255,0,116,126,0,137,136,0,0,139,116,0,0,119,0,5,0,0,126,98,0,0,116,126,0,137,136,0,0,139,116,0,0,1,147,0,0,139,147,0,0,140,1,94,0,0,0,0,0,2,77,0,0,255,0,0,0,2,78,0,0,255,255,0,0,2,79,0,0,206,214,2,0,2,80,0,0,205,214,2,0,2,81,0,0,129,0,0,0,2,82,0,0,208,214,2,0,2,83,0,0,207,214,2,0,2,84,0,0,161,32,0,0,1,74,0,0,136,85,0,0,0,75,85,0,136,85,0,0,1,86,144,0,3,85,85,86,137,85,0,0,25,73,75,108,25,76,73,11,1,85,0,0,83,73,85,0,25,73,73,1,54,85,73,76,252,142,0,0,1,60,0,0,1,65,0,0,1,85,163,32,79,85,85,0,1,86,163,32,103,86,86,1,41,86,86,8,20,85,85,86,0,42,85,0,19,85,42,78,26,85,85,16,19,85,85,77,0,69,85,0,25,86,75,96,1,87,0,0,19,88,69,77,1,89,32,0,1,90,16,0,19,90,90,77,135,85,19,0,86,87,88,89,90,0,0,0,25,85,75,96,103,85,85,4,25,90,75,96,25,90,90,4,103,90,90,1,41,90,90,8,20,85,85,90,0,48,85,0,25,90,75,88,19,89,69,77,1,88,28,0,1,87,16,0,19,87,87,77,135,85,19,0,90,48,89,88,87,0,0,0,25,85,75,88,103,85,85,4,25,87,75,88,25,87,87,4,103,87,87,1,41,87,87,8,20,85,85,87,0,49,85,0,79,85,84,0,103,87,84,1,41,87,87,8,20,85,85,87,0,50,85,0,25,85,75,88,103,85,85,4,25,87,75,88,25,87,87,4,103,87,87,1,41,87,87,8,20,85,85,87,0,51,85,0,25,87,75,80,19,88,69,77,19,89,50,78,41,90,51,16,42,90,90,16,4,89,89,90,19,89,89,78,1,90,16,0,19,90,90,77,135,85,19,0,87,49,88,89,90,0,0,0,79,85,84,0,103,90,84,1,41,90,90,8,20,85,85,90,0,52,85,0,25,90,75,72,1,89,0,0,1,88,0,0,19,87,69,77,135,85,19,0,90,89,88,52,87,0,0,0,1,47,0,0,25,87,75,119,134,85,0,0,100,208,2,0,87,0,0,0,102,53,75,119,19,85,53,77,32,85,85,5,121,85,32,0,25,85,75,119,103,85,85,1,25,87,75,119,25,87,87,1,103,87,87,1,41,87,87,8,20,85,85,87,0,54,85,0,19,85,54,78,32,85,85,39,121,85,3,0,1,74,4,0,119,0,74,2,25,85,75,119,103,85,85,1,25,87,75,119,25,87,87,1,103,87,87,1,41,87,87,8,20,85,85,87,0,55,85,0,19,85,55,78,32,85,85,40,121,85,3,0,1,74,6,0,119,0,61,2,78,56,80,0,78,57,79,0,1,87,0,0,135,85,46,0,56,57,87,0,102,58,75,119,19,85,58,77,1,87,5,0,1,88,12,0,138,85,87,88,68,145,0,0,76,145,0,0,64,145,0,0,64,145,0,0,64,145,0,0,64,145,0,0,64,145,0,0,64,145,0,0,64,145,0,0,64,145,0,0,64,145,0,0,84,145,0,0,119,0,175,0,1,74,9,0,119,0,173,0,1,74,21,0,119,0,171,0,119,0,1,0,102,87,75,119,95,75,81,87,3,87,75,81,25,85,75,119,102,85,85,1,107,87,1,85,3,85,75,81,25,87,75,119,102,87,87,2,107,85,2,87,3,87,75,81,25,85,75,119,102,85,85,3,107,87,3,85,3,85,75,81,25,87,75,119,102,87,87,4,107,85,4,87,3,87,75,81,25,85,75,119,102,85,85,5,107,87,5,85,3,85,75,81,25,87,75,119,102,87,87,6,107,85,6,87,25,85,75,108,3,88,75,81,135,87,11,0,85,88,0,0,25,87,75,119,103,87,87,1,25,88,75,119,25,88,88,1,103,88,88,1,41,88,88,8,20,87,87,88,0,5,87,0,19,87,5,78,1,88,1,0,1,85,3,0,138,87,88,85,16,146,0,0,24,146,0,0,28,146,0,0,119,0,124,0,1,74,23,0,119,0,122,0,119,0,3,0,1,74,39,0,119,0,119,0,102,8,75,108,41,87,8,24,42,87,87,24,33,87,87,0,120,87,2,0,119,0,113,0,25,87,75,108,102,9,87,2,19,87,9,77,33,87,87,0,120,87,108,0,25,87,75,108,103,87,87,7,25,88,75,108,25,88,88,7,103,88,88,1,41,88,88,8,20,87,87,88,0,10,87,0,25,87,75,108,103,87,87,9,25,88,75,108,25,88,88,9,103,88,88,1,41,88,88,8,20,87,87,88,0,11,87,0,104,88,75,96,108,75,8,88,25,88,75,8,25,87,75,96,104,87,87,2,108,88,2,87,25,87,75,8,25,88,75,96,104,88,88,4,108,87,4,88,25,88,75,8,25,87,75,96,104,87,87,6,108,88,6,87,25,87,75,8,135,12,25,0,10,11,87,0,41,87,12,24,42,87,87,24,33,87,87,0,121,87,3,0,1,74,27,0,119,0,188,1,104,88,75,80,108,75,16,88,25,88,75,16,25,87,75,80,104,87,87,2,108,88,2,87,25,87,75,16,25,88,75,80,104,88,88,4,108,87,4,88,25,88,75,16,25,87,75,80,104,87,87,6,108,88,6,87,25,87,75,16,135,13,25,0,10,11,87,0,41,87,13,24,42,87,87,24,33,87,87,0,121,87,13,0,1,88,5,0,107,75,119,88,25,88,75,119,1,87,38,0,19,87,87,77,107,88,1,87,25,87,75,119,25,87,87,1,1,88,38,0,42,88,88,8,107,87,1,88,119,0,100,255,104,87,75,88,108,75,24,87,25,87,75,24,25,88,75,88,104,88,88,2,108,87,2,88,25,88,75,24,25,87,75,88,104,87,87,4,108,88,4,87,25,87,75,24,25,88,75,88,104,88,88,6,108,87,6,88,25,88,75,24,135,14,25,0,10,11,88,0,41,88,14,24,42,88,88,24,33,88,88,0,120,88,3,0,1,74,32,0,119,0,13,0,1,87,5,0,107,75,119,87,25,87,75,119,1,88,51,0,19,88,88,77,107,87,1,88,25,88,75,119,25,88,88,1,1,87,51,0,42,87,87,8,107,88,1,87,119,0,65,255,32,87,74,9,121,87,102,0,1,74,0,0,25,87,75,119,103,87,87,1,25,88,75,119,25,88,88,1,103,88,88,1,41,88,88,8,20,87,87,88,0,59,87,0,19,87,59,78,1,88,34,0,1,85,18,0,138,87,88,85,132,148,0,0,176,148,0,0,236,148,0,0,24,149,0,0,84,149,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,128,148,0,0,96,149,0,0,119,0,59,0,78,61,79,0,41,88,61,24,42,88,88,24,33,88,88,0,121,88,54,0,78,62,79,0,19,88,62,77,26,88,88,1,19,88,88,77,83,79,88,0,119,0,48,0,78,63,79,0,2,88,0,0,204,214,2,0,78,64,88,0,19,88,63,77,19,85,64,77,26,85,85,1,47,88,88,85,232,148,0,0,78,66,79,0,19,88,66,77,25,88,88,1,19,88,88,77,83,79,88,0,119,0,33,0,78,67,80,0,41,88,67,24,42,88,88,24,33,88,88,0,121,88,28,0,78,68,80,0,19,88,68,77,26,88,88,1,19,88,88,77,83,80,88,0,119,0,22,0,78,70,80,0,2,88,0,0,203,214,2,0,78,71,88,0,19,88,70,77,19,85,71,77,26,85,85,1,47,88,88,85,80,149,0,0,78,72,80,0,19,88,72,77,25,88,88,1,19,88,88,77,83,80,88,0,119,0,7,0,134,88,0,0,240,162,0,0,119,0,4,0,134,88,0,0,124,13,1,0,119,0,1,0,2,87,0,0,157,215,2,0,1,88,1,0,83,87,88,0,1,87,0,0,107,75,126,87,38,88,0,31,25,85,75,126,135,87,47,0,88,85,0,0,119,0,5,1,32,87,74,21,121,87,15,0,1,74,0,0,0,2,47,0,41,87,2,24,42,87,87,24,33,87,87,0,40,87,87,1,38,87,87,1,19,87,87,77,0,47,87,0,78,3,83,0,78,4,82,0,135,87,48,0,3,4,0,0,119,0,245,0,32,87,74,23,121,87,7,0,1,74,0,0,78,6,83,0,0,60,6,0,78,7,82,0,0,65,7,0,119,0,237,0,32,87,74,32,121,87,129,0,1,74,0,0,104,88,75,72,108,75,32,88,25,88,75,32,25,87,75,72,104,87,87,2,108,88,2,87,25,87,75,32,25,88,75,72,104,88,88,4,108,87,4,88,25,88,75,32,25,87,75,72,104,87,87,6,108,88,6,87,25,87,75,32,135,15,25,0,10,11,87,0,41,87,15,24,42,87,87,24,33,87,87,0,121,87,213,0,78,16,83,0,19,87,16,77,41,88,10,16,42,88,88,16,28,88,88,16,38,88,88,255,19,88,88,77,19,88,88,77,3,87,87,88,19,87,87,77,0,26,87,0,78,17,82,0,19,87,17,77,41,88,11,16,42,88,88,16,28,88,88,16,38,88,88,255,19,88,88,77,19,88,88,77,3,87,87,88,19,87,87,77,0,31,87,0,78,18,80,0,19,87,26,77,19,88,18,77,45,87,87,88,224,150,0,0,78,19,79,0,19,87,31,77,19,88,19,77,45,87,87,88,224,150,0,0,1,74,35,0,119,0,191,0,78,20,83,0,78,21,82,0,79,87,84,0,103,88,84,1,41,88,88,8,20,87,87,88,0,22,87,0,1,87,163,32,79,87,87,0,1,88,163,32,103,88,88,1,41,88,88,8,20,87,87,88,0,23,87,0,25,88,75,56,19,85,20,77,19,89,21,77,19,90,22,78,28,90,90,16,38,90,90,255,19,90,90,78,19,86,23,78,28,86,86,16,38,86,86,255,26,86,86,1,19,86,86,78,135,87,19,0,88,85,89,90,86,0,0,0,78,24,80,0,78,25,79,0,104,86,75,56,108,75,40,86,25,86,75,40,25,87,75,56,104,87,87,2,108,86,2,87,25,87,75,40,25,86,75,56,104,86,86,4,108,87,4,86,25,86,75,40,25,87,75,56,104,87,87,6,108,86,6,87,19,87,24,77,19,86,25,77,25,90,75,40,135,27,25,0,87,86,90,0,41,90,27,24,42,90,90,24,33,90,90,0,121,90,6,0,78,28,80,0,78,29,79,0,1,86,0,0,135,90,46,0,28,29,86,0,83,80,26,0,83,79,31,0,1,86,0,0,107,75,126,86,2,86,0,0,157,215,2,0,1,90,1,0,83,86,90,0,38,86,0,31,25,87,75,126,135,90,47,0,86,87,0,0,119,0,107,0,32,90,74,39,121,90,105,0,1,74,0,0,25,90,75,108,102,30,90,1,41,90,30,24,42,90,90,24,33,90,90,0,121,90,98,0,0,32,60,0,2,90,0,0,203,214,2,0,78,33,90,0,79,90,84,0,103,86,84,1,41,86,86,8,20,90,90,86,0,34,90,0,0,35,65,0,2,90,0,0,204,214,2,0,78,36,90,0,1,90,163,32,79,90,90,0,1,86,163,32,103,86,86,1,41,86,86,8,20,90,90,86,0,37,90,0,25,86,75,48,25,87,75,108,19,89,32,77,19,85,33,77,19,88,34,78,28,88,88,16,38,88,88,255,4,85,85,88,19,85,85,78,1,88,16,0,19,91,35,77,19,92,36,77,19,93,37,78,28,93,93,16,38,93,93,255,26,93,93,1,4,92,92,93,19,92,92,78,1,93,16,0,135,90,37,0,86,87,89,85,88,91,92,93,103,90,75,48,25,93,75,48,103,93,93,1,41,93,93,8,20,90,90,93,0,38,90,0,78,39,83,0,41,90,38,16,42,90,90,16,19,93,39,77,53,90,90,93,56,153,0,0,25,90,75,48,103,90,90,2,25,93,75,48,25,93,93,2,103,93,93,1,41,93,93,8,20,90,90,93,0,40,90,0,78,41,82,0,41,90,40,16,42,90,90,16,19,93,41,77,53,90,90,93,56,153,0,0,119,0,29,0,103,90,75,48,25,93,75,48,103,93,93,1,41,93,93,8,20,90,90,93,0,43,90,0,19,90,43,77,83,83,90,0,25,90,75,48,103,90,90,2,25,93,75,48,25,93,93,2,103,93,93,1,41,93,93,8,20,90,90,93,0,44,90,0,19,90,44,77,83,82,90,0,2,90,0,0,157,215,2,0,1,93,0,0,83,90,93,0,1,90,0,0,107,75,126,90,38,93,0,31,25,92,75,126,135,90,47,0,93,92,0,0,0,45,47,0,135,90,49,0,45,0,0,0,1,93,1,0,107,75,126,93,38,90,0,31,25,92,75,126,135,93,47,0,90,92,0,0,135,93,50,0,135,93,51,0,119,0,163,253,32,93,74,4,121,93,6,0,1,1,0,0,0,46,1,0,137,75,0,0,139,46,0,0,119,0,21,0,32,93,74,6,121,93,6,0,1,1,255,255,0,46,1,0,137,75,0,0,139,46,0,0,119,0,14,0,32,93,74,27,121,93,6,0,1,1,255,255,0,46,1,0,137,75,0,0,139,46,0,0,119,0,7,0,32,93,74,35,121,93,5,0,1,1,0,0,0,46,1,0,137,75,0,0,139,46,0,0,1,93,0,0,139,93,0,0,140,1,106,0,0,0,0,0,2,92,0,0,255,255,0,0,2,93,0,0,255,0,0,0,2,94,0,0,164,215,2,0,2,95,0,0,56,4,0,0,2,96,0,0,20,108,3,0,2,97,0,0,158,215,2,0,2,98,0,0,163,215,2,0,2,99,0,0,35,173,0,0,2,100,0,0,6,173,0,0,2,101,0,0,36,20,0,0,1,90,0,0,136,102,0,0,0,91,102,0,136,102,0,0,1,103,64,8,3,102,102,103,137,102,0,0,1,4,0,0,135,102,30,0,135,30,52,0,30,102,30,4,38,102,102,255,0,8,102,0,103,102,0,1,25,103,0,1,103,103,103,1,41,103,103,8,20,102,102,103,0,44,102,0,19,102,44,92,27,102,102,19,3,102,94,102,103,102,102,2,19,103,44,92,27,103,103,19,3,103,94,103,25,103,103,2,103,103,103,1,41,103,103,8,20,102,102,103,0,62,102,0,19,102,44,92,27,102,102,19,3,102,94,102,102,63,102,6,2,102,0,0,72,191,2,0,78,64,102,0,41,102,64,24,42,102,102,24,33,102,102,0,121,102,2,0,1,8,1,0,0,65,8,0,1,103,1,0,1,104,3,0,138,65,103,104,112,155,0,0,16,160,0,0,8,161,0,0,119,0,165,1,1,8,0,0,135,66,52,0,1,103,150,0,8,103,66,103,38,103,103,255,0,4,103,0,2,103,0,0,72,191,2,0,78,68,103,0,41,103,68,24,42,103,103,24,33,103,103,0,121,103,5,0,135,69,52,0,30,103,69,2,38,103,103,255,0,4,103,0,0,70,4,0,19,103,63,93,48,103,70,103,12,160,0,0,2,103,0,0,140,180,2,0,82,71,103,0,0,72,4,0,31,103,72,2,38,103,103,255,35,103,103,1,120,103,91,0,2,103,0,0,140,180,2,0,82,12,103,0,102,14,0,3,135,15,53,0,14,12,0,0,41,103,15,16,42,103,103,16,33,103,103,0,120,103,2,0,119,0,125,1,135,16,52,0,19,103,15,92,8,103,16,103,38,103,103,255,0,73,103,0,0,17,73,0,41,103,17,1,91,103,12,103,41,102,17,1,3,102,12,102,103,102,102,1,41,102,102,8,20,103,103,102,0,18,103,0,19,103,18,92,0,13,103,0,78,19,98,0,2,103,0,0,24,180,2,0,82,20,103,0,1,103,67,0,19,102,19,93,135,21,21,0,103,102,20,0,0,67,21,0,0,22,67,0,0,23,13,0,41,102,23,2,3,102,22,102,103,102,102,1,41,103,23,2,3,103,22,103,25,103,103,1,103,103,103,1,41,103,103,8,20,102,102,103,0,24,102,0,19,102,24,92,0,1,102,0,0,25,1,0,33,102,25,0,121,102,7,0,0,26,1,0,26,102,26,1,19,103,44,92,52,102,102,103,208,156,0,0,119,0,77,1,79,102,97,0,103,103,97,1,41,103,103,8,20,102,102,103,0,27,102,0,19,102,62,92,19,103,27,92,25,103,103,1,45,102,102,103,60,157,0,0,1,103,64,0,1,104,99,0,3,105,91,95,135,102,17,0,103,104,105,0,25,105,91,56,135,102,54,0,18,105,0,0,3,105,91,95,25,104,91,56,135,102,55,0,105,104,0,0,3,104,91,95,134,102,0,0,76,29,2,0,44,104,0,0,1,8,1,0,102,28,0,3,135,102,56,0,28,18,0,0,119,0,46,1,102,74,0,3,135,75,57,0,74,71,0,0,19,102,75,93,33,102,102,0,121,102,40,1,135,76,52,0,19,102,75,93,9,102,76,102,38,102,102,255,0,73,102,0,0,77,73,0,41,102,77,1,91,102,71,102,41,104,77,1,3,104,71,104,103,104,104,1,41,104,104,8,20,102,102,104,0,78,102,0,19,102,78,92,0,13,102,0,78,79,98,0,2,102,0,0,24,180,2,0,82,80,102,0,1,102,63,0,19,104,79,93,135,81,21,0,102,104,80,0,0,67,81,0,0,82,67,0,0,83,13,0,41,104,83,2,3,104,82,104,103,104,104,1,41,102,83,2,3,102,82,102,25,102,102,1,103,102,102,1,41,102,102,8,20,104,104,102,0,84,104,0,19,104,84,92,0,1,104,0,1,4,0,0,0,85,1,0,26,104,85,1,19,102,44,92,45,104,104,102,112,158,0,0,1,4,1,0,19,104,78,92,27,104,104,19,3,104,94,104,19,102,62,93,107,104,2,102,19,102,78,92,27,102,102,19,3,102,94,102,25,102,102,2,42,104,62,8,107,102,1,104,135,86,52,0,19,104,78,92,27,104,104,19,3,104,94,104,30,102,86,30,38,102,102,255,25,102,102,70,19,102,102,93,107,104,7,102,119,0,36,0,0,87,1,0,33,102,87,0,120,102,33,0,135,88,52,0,30,102,88,110,38,102,102,255,0,4,102,0,0,89,4,0,19,102,63,93,48,102,89,102,244,158,0,0,1,4,1,0,19,102,78,92,27,102,102,19,3,102,94,102,19,104,62,93,107,102,2,104,19,104,78,92,27,104,104,19,3,104,94,104,25,104,104,2,42,102,62,8,107,104,1,102,135,2,52,0,19,102,78,92,27,102,102,19,3,102,94,102,30,104,2,30,38,104,104,255,25,104,104,70,19,104,104,93,107,102,7,104,119,0,3,0,1,4,2,0,119,0,1,0,79,104,97,0,103,102,97,1,41,102,102,8,20,104,104,102,0,3,104,0,19,104,62,92,19,102,3,92,25,102,102,1,45,104,104,102,12,160,0,0,1,8,1,0,0,5,4,0,33,104,5,0,120,104,11,0,1,102,64,0,1,105,100,0,3,103,91,95,135,104,17,0,102,105,103,0,3,103,91,95,134,104,0,0,76,29,2,0,44,103,0,0,119,0,170,0,1,103,64,0,1,105,99,0,3,102,91,95,135,104,17,0,103,105,102,0,25,102,91,56,134,104,0,0,116,120,2,0,78,102,0,0,3,102,91,95,25,105,91,56,135,104,55,0,102,105,0,0,3,105,91,95,134,104,0,0,76,29,2,0,44,105,0,0,0,6,4,0,32,104,6,1,121,104,7,0,135,7,52,0,1,104,134,0,30,105,7,4,38,105,105,255,3,4,104,105,119,0,9,0,0,9,4,0,32,105,9,2,121,105,6,0,135,10,52,0,1,105,138,0,30,104,10,4,38,104,104,255,3,4,105,104,0,11,4,0,1,105,64,0,19,102,11,92,3,103,91,95,135,104,17,0,105,102,103,0,3,103,91,95], eb + 30720);
  HEAPU8.set([134,104,0,0,76,29,2,0,78,103,0,0,119,0,125,0,135,29,52,0,19,104,63,93,41,104,104,1,9,104,29,104,38,104,104,255,25,4,104,10,78,31,101,0,41,104,31,24,42,104,104,24,33,104,104,0,121,104,30,0,102,32,0,3,19,104,32,93,27,104,104,37,3,104,96,104,103,104,104,23,19,103,32,93,27,103,103,37,3,103,96,103,25,103,103,23,103,103,103,1,41,103,103,8,20,104,104,103,0,33,104,0,0,34,4,0,135,35,58,0,33,34,0,0,102,36,0,3,19,104,36,93,27,104,104,37,3,104,96,104,19,103,35,93,107,104,23,103,19,103,36,93,27,103,103,37,3,103,96,103,25,103,103,23,42,104,35,8,107,103,1,104,119,0,85,0,0,37,4,0,102,38,0,3,19,104,38,93,27,104,104,37,3,104,96,104,25,39,104,23,79,104,39,0,103,103,39,1,41,103,103,8,20,104,104,103,0,40,104,0,19,104,40,92,3,104,104,37,19,104,104,92,19,104,104,93,83,39,104,0,19,103,40,92,3,103,103,37,19,103,103,92,42,103,103,8,107,39,1,103,119,0,63,0,135,41,52,0,19,102,63,93,41,102,102,1,9,102,41,102,38,102,102,255,25,4,102,10,78,42,101,0,41,102,42,24,42,102,102,24,33,102,102,0,121,102,30,0,102,43,0,3,19,102,43,93,27,102,102,37,3,102,96,102,103,102,102,25,19,103,43,93,27,103,103,37,3,103,96,103,25,103,103,25,103,103,103,1,41,103,103,8,20,102,102,103,0,45,102,0,0,46,4,0,135,47,58,0,45,46,0,0,102,48,0,3,19,102,48,93,27,102,102,37,3,102,96,102,19,103,47,93,107,102,25,103,19,103,48,93,27,103,103,37,3,103,96,103,25,103,103,25,42,102,47,8,107,103,1,102,119,0,23,0,0,49,4,0,102,50,0,3,19,102,50,93,27,102,102,37,3,102,96,102,25,51,102,25,79,102,51,0,103,103,51,1,41,103,103,8,20,102,102,103,0,52,102,0,19,102,52,92,3,102,102,49,19,102,102,92,19,102,102,93,83,51,102,0,19,103,52,92,3,103,103,49,19,103,103,92,42,103,103,8,107,51,1,103,119,0,1,0,79,103,97,0,103,104,97,1,41,104,104,8,20,103,103,104,0,53,103,0,0,54,8,0,19,103,62,92,19,104,53,92,25,104,104,1,14,103,103,104,32,104,54,1,20,103,103,104,121,103,10,0,0,58,0,0,25,59,58,3,78,60,59,0,0,61,44,0,135,103,32,0,60,61,0,0,137,91,0,0,1,103,1,0,139,103,0,0,0,55,8,0,33,103,55,0,121,103,18,0,0,56,8,0,1,104,64,0,25,102,56,100,19,102,102,92,3,105,91,95,135,103,17,0,104,102,105,0,0,57,4,0,25,105,91,56,1,102,10,0,135,103,59,0,57,105,102,0,3,102,91,95,25,105,91,56,135,103,55,0,102,105,0,0,119,0,6,0,1,105,64,0,1,102,101,0,3,104,91,95,135,103,17,0,105,102,104,0,3,104,91,95,134,103,0,0,76,29,2,0,44,104,0,0,0,58,0,0,25,59,58,3,78,60,59,0,0,61,44,0,135,103,32,0,60,61,0,0,137,91,0,0,1,103,1,0,139,103,0,0,140,0,95,0,0,0,0,0,2,81,0,0,0,4,0,0,2,82,0,0,94,18,0,0,2,83,0,0,99,18,0,0,2,84,0,0,5,16,0,0,2,85,0,0,255,0,0,0,2,86,0,0,255,255,0,0,2,87,0,0,161,32,0,0,1,79,0,0,136,88,0,0,0,80,88,0,136,88,0,0,1,89,128,0,3,88,88,89,137,88,0,0,1,88,61,18,1,89,0,0,134,45,0,0,16,21,1,0,88,89,0,0,32,89,45,0,121,89,3,0,137,80,0,0,139,0,0,0,79,89,87,0,103,88,87,1,41,88,88,8,20,89,89,88,0,58,89,0,1,89,163,32,79,89,89,0,1,88,163,32,103,88,88,1,41,88,88,8,20,89,89,88,0,67,89,0,1,88,5,0,1,90,5,0,19,91,58,86,26,91,91,1,26,91,91,5,26,91,91,1,19,91,91,86,19,92,67,86,26,92,92,1,26,92,92,5,26,92,92,1,19,92,92,86,135,89,5,0,88,90,91,92,79,89,87,0,103,92,87,1,41,92,92,8,20,89,89,92,0,68,89,0,1,89,163,32,79,89,89,0,1,92,163,32,103,92,92,1,41,92,92,8,20,89,89,92,0,69,89,0,1,92,4,0,1,91,4,0,19,90,68,86,26,90,90,1,26,90,90,5,19,90,90,86,19,88,69,86,26,88,88,1,26,88,88,5,19,88,88,86,135,89,6,0,92,91,90,88,1,89,1,0,135,70,60,0,89,81,0,0,1,89,0,0,45,89,70,89,88,164,0,0,137,80,0,0,139,0,0,0,2,89,0,0,205,214,2,0,78,71,89,0,2,89,0,0,206,214,2,0,78,72,89,0,135,73,61,0,71,72,0,0,19,89,73,85,46,89,85,89,244,169,0,0,2,89,0,0,17,215,2,0,19,88,73,85,27,88,88,7,3,2,89,88,79,88,87,0,103,89,87,1,41,89,89,8,20,88,88,89,0,74,88,0,19,88,74,86,26,88,88,1,26,88,88,5,26,88,88,52,19,88,88,85,0,31,88,0,19,89,31,85,1,90,8,0,19,90,90,85,19,91,31,85,25,91,91,50,19,91,91,86,1,92,8,0,19,92,92,85,25,92,92,40,19,92,92,86,135,88,6,0,89,90,91,92,1,92,8,0,19,92,92,85,107,80,64,92,25,92,80,64,1,88,8,0,42,88,88,8,107,92,1,88,25,88,80,64,1,92,6,0,19,92,92,85,107,88,2,92,25,92,80,64,25,92,92,2,1,88,6,0,42,88,88,8,107,92,1,88,79,88,87,0,103,92,87,1,41,92,92,8,20,88,88,92,0,75,88,0,19,88,75,86,26,88,88,1,26,88,88,5,26,88,88,2,19,88,88,86,0,76,88,0,25,88,80,64,19,92,76,85,107,88,4,92,25,92,80,64,25,92,92,4,42,88,76,8,107,92,1,88,1,88,163,32,79,88,88,0,1,92,163,32,103,92,92,1,41,92,92,8,20,88,88,92,0,77,88,0,19,88,77,86,26,88,88,1,26,88,88,5,26,88,88,2,19,88,88,86,0,78,88,0,25,88,80,64,19,92,78,85,107,88,6,92,25,92,80,64,25,92,92,6,42,88,78,8,107,92,1,88,19,92,31,85,26,92,92,2,19,92,92,86,19,92,92,85,107,80,56,92,25,92,80,56,19,88,31,85,26,88,88,2,19,88,88,86,42,88,88,8,107,92,1,88,25,88,80,56,1,92,8,0,19,92,92,85,19,92,92,85,107,88,2,92,25,92,80,56,25,92,92,2,1,88,8,0,19,88,88,85,42,88,88,8,107,92,1,88,25,88,80,56,19,92,31,85,25,92,92,50,19,92,92,86,19,92,92,85,107,88,4,92,25,92,80,56,25,92,92,4,19,88,31,85,25,88,88,50,19,88,88,86,42,88,88,8,107,92,1,88,25,88,80,56,1,92,8,0,19,92,92,85,25,92,92,42,19,92,92,86,19,92,92,85,107,88,6,92,25,92,80,56,25,92,92,6,1,88,8,0,19,88,88,85,25,88,88,42,19,88,88,86,42,88,88,8,107,92,1,88,1,92,0,0,134,88,0,0,112,32,1,0,92,73,0,0,135,1,62,0,73,0,0,0,25,92,80,102,134,88,0,0,116,120,2,0,1,92,0,0,19,92,31,85,25,92,92,26,19,92,92,86,1,91,8,0,19,91,91,85,25,91,91,28,19,91,91,86,25,90,80,102,135,88,63,0,92,91,90,0,2,88,0,0,163,215,2,0,78,3,88,0,2,88,0,0,24,180,2,0,82,4,88,0,19,88,3,85,25,88,88,47,19,88,88,86,1,90,1,0,135,5,21,0,88,90,4,0,2,90,0,0,163,215,2,0,78,6,90,0,19,88,6,85,25,88,88,47,19,88,88,86,1,91,0,0,19,92,1,86,25,92,92,1,19,92,92,86,19,89,31,85,25,89,89,13,19,89,89,86,1,93,8,0,19,93,93,85,25,93,93,2,19,93,93,86,1,94,1,0,135,90,36,0,88,91,92,89,93,94,0,0,1,90,79,18,135,8,0,0,90,0,0,0,33,90,8,0,121,90,56,0,1,7,79,18,0,9,7,0,1,90,0,0,53,90,9,90,152,167,0,0,1,79,16,0,119,0,50,0,135,10,1,0,0,12,10,0,0,11,12,0,1,90,0,0,53,90,11,90,180,167,0,0,119,0,36,0,0,13,12,0,82,14,13,0,106,15,14,8,0,18,15,0,0,16,18,0,1,90,0,0,53,90,16,90,216,167,0,0,119,0,22,0,107,80,51,73,0,17,18,0,135,90,64,0,17,82,70,81,0,19,18,0,1,94,0,0,25,93,80,51,1,89,0,0,1,92,0,0,135,90,2,0,19,83,94,93,89,92,0,0,0,20,7,0,0,21,12,0,134,22,0,0,16,21,1,0,20,21,0,0,32,90,22,0,120,90,10,0,1,18,0,0,119,0,231,255,0,24,12,0,135,90,3,0,24,0,0,0,1,12,0,0,119,0,217,255,1,7,0,0,119,0,207,255,0,23,12,0,135,90,3,0,23,0,0,0,119,0,2,0,1,79,16,0,32,90,79,16,121,90,96,0,1,92,13,0,135,90,65,0,92,70,0,0,2,90,0,0,164,215,2,0,19,92,1,86,27,92,92,19,3,0,90,92,1,92,63,20,78,25,92,0,102,26,0,4,19,92,26,85,19,90,25,85,47,92,92,90,180,168,0,0,102,27,0,4,19,90,27,85,135,92,66,0,70,90,0,0,119,0,5,0,1,90,77,0,107,70,5,90,1,92,88,0,107,70,6,92,1,90,12,0,25,89,80,72,135,92,65,0,90,89,0,0,135,28,67,0,0,0,0,0,25,92,80,72,19,89,28,85,41,89,89,2,19,89,89,85,19,89,89,85,3,30,92,89,78,92,30,0,107,70,13,92,25,92,70,13,102,89,30,1,107,92,1,89,25,89,70,13,102,92,30,2,107,89,2,92,25,92,70,13,102,89,30,3,107,92,3,89,102,33,0,5,19,92,33,85,135,89,66,0,70,92,0,0,102,34,0,6,19,92,34,85,135,89,66,0,70,92,0,0,102,36,0,9,19,92,36,85,135,89,66,0,70,92,0,0,102,37,2,2,19,92,37,85,135,89,66,0,70,92,0,0,102,38,2,3,19,92,38,85,135,89,66,0,70,92,0,0,2,89,0,0,72,180,2,0,80,39,89,0,135,89,66,0,70,39,0,0,2,89,0,0,74,180,2,0,80,40,89,0,135,89,66,0,70,40,0,0,103,89,0,12,25,92,0,12,103,92,92,1,41,92,92,8,20,89,89,92,0,41,89,0,135,89,66,0,70,41,0,0,102,42,2,6,19,92,42,85,25,92,92,28,19,92,92,85,25,90,80,102,135,89,65,0,92,90,0,0,25,90,80,102,135,89,55,0,70,90,0,0,25,90,80,64,25,92,80,56,135,89,68,0,90,92,70,0,119,0,123,0,2,89,0,0,205,214,2,0,78,43,89,0,2,89,0,0,206,214,2,0,78,44,89,0,135,46,69,0,43,44,0,0,1,89,113,18,135,47,0,0,89,0,0,0,33,89,47,0,121,89,56,0,1,29,113,18,0,48,29,0,1,89,0,0,53,89,48,89,68,170,0,0,1,79,33,0,119,0,50,0,135,49,1,0,0,32,49,0,0,50,32,0,1,89,0,0,53,89,50,89,96,170,0,0,119,0,36,0,0,51,32,0,82,52,51,0,106,53,52,8,0,35,53,0,0,54,35,0,1,89,0,0,53,89,54,89,132,170,0,0,119,0,22,0,107,80,50,46,0,55,35,0,135,89,64,0,55,82,70,81,0,56,35,0,1,92,0,0,25,90,80,50,1,93,0,0,1,94,0,0,135,89,2,0,56,84,92,90,93,94,0,0,0,57,29,0,0,59,32,0,134,60,0,0,16,21,1,0,57,59,0,0,32,89,60,0,120,89,10,0,1,35,0,0,119,0,231,255,0,62,32,0,135,89,3,0,62,0,0,0,1,32,0,0,119,0,217,255,1,29,0,0,119,0,207,255,0,61,32,0,135,89,3,0,61,0,0,0,119,0,2,0,1,79,33,0,32,89,79,33,121,89,6,0,19,94,46,85,25,94,94,14,19,94,94,85,135,89,65,0,94,70,0,0,2,89,0,0,192,214,2,0,1,94,8,0,83,89,94,0,2,94,0,0,193,214,2,0,1,89,8,0,83,94,89,0,79,89,87,0,103,94,87,1,41,94,94,8,20,89,89,94,0,63,89,0,2,89,0,0,194,214,2,0,19,94,63,86,26,94,94,1,26,94,94,5,26,94,94,4,19,94,94,85,83,89,94,0,1,94,163,32,79,94,94,0,1,89,163,32,103,89,89,1,41,89,89,8,20,94,94,89,0,64,94,0,2,94,0,0,195,214,2,0,19,89,64,86,26,89,89,1,26,89,89,5,26,89,89,4,19,89,89,85,83,94,89,0,2,89,0,0,192,214,2,0,78,65,89,0,2,89,0,0,193,214,2,0,78,66,89,0,19,94,65,85,19,93,66,85,135,89,7,0,94,93,70,0,1,93,0,0,1,94,2,0,134,89,0,0,16,135,2,0,93,94,0,0,135,89,70,0,70,0,0,0,137,80,0,0,139,0,0,0,140,0,98,0,0,0,0,0,2,87,0,0,255,255,0,0,2,88,0,0,164,215,2,0,2,89,0,0,255,0,0,0,2,90,0,0,20,108,3,0,2,91,0,0,57,20,0,0,2,92,0,0,48,117,0,0,2,93,0,0,158,215,2,0,2,94,0,0,162,215,2,0,1,85,0,0,136,95,0,0,0,86,95,0,136,95,0,0,25,95,95,48,137,95,0,0,78,8,94,0,19,95,8,89,32,95,95,6,121,95,3,0,1,85,3,0,119,0,6,0,78,19,94,0,19,95,19,89,32,95,95,10,121,95,2,0,1,85,3,0,32,95,85,3,121,95,2,0,135,95,71,0,78,30,94,0,19,95,30,89,30,95,95,3,38,95,95,255,33,95,95,0,120,95,2,0,135,95,72,0,1,0,0,0,0,44,0,0,135,49,73,0,55,95,44,49,204,172,0,0,119,0,27,0,0,57,0,0,27,95,57,19,3,95,88,95,102,60,95,10,27,95,57,19,3,95,88,95,19,96,60,89,25,96,96,4,19,96,96,89,107,95,10,96,0,61,0,0,27,96,61,19,3,96,88,96,102,62,96,10,1,96,100,0,19,95,62,89,47,96,96,95,40,173,0,0,0,63,0,0,27,96,63,19,3,96,88,96,1,95,100,0,107,96,10,95,0,64,0,0,25,0,64,1,119,0,226,255,2,95,0,0,140,180,2,0,82,65,95,0,1,0,0,0,0,66,0,0,1,95,136,20,78,67,95,0,19,95,67,89,55,95,66,95,96,173,0,0,119,0,192,1,0,68,0,0,27,95,68,37,3,81,90,95,103,95,81,1,25,96,81,1,103,96,96,1,41,96,96,8,20,95,95,96,0,70,95,0,41,95,70,16,42,95,95,16,33,95,95,0,121,95,176,1,78,71,94,0,19,95,71,89,30,95,95,3,38,95,95,255,33,95,95,0,120,95,17,0,135,72,52,0,102,74,81,14,30,95,72,4,38,95,95,255,25,95,95,1,19,96,74,89,48,95,95,96,236,173,0,0,102,75,81,14,19,96,75,89,30,97,72,4,38,97,97,255,25,97,97,1,4,96,96,97,19,96,96,89,107,81,14,96,103,96,81,23,25,95,81,23,103,95,95,1,41,95,95,8,20,96,96,95,0,76,96,0,19,96,76,87,47,96,92,96,36,174,0,0,19,95,92,89,107,81,23,95,25,95,81,23,42,96,92,8,107,95,1,96,25,77,81,19,79,96,77,0,103,95,77,1,41,95,95,8,20,96,96,95,103,95,77,2,41,95,95,16,20,96,96,95,103,95,77,3,41,95,95,24,20,96,96,95,0,78,96,0,25,96,78,50,19,96,96,89,83,77,96,0,25,95,78,50,42,95,95,8,19,95,95,89,107,77,1,95,25,96,78,50,42,96,96,16,19,96,96,89,107,77,2,96,25,95,78,50,42,95,95,24,107,77,3,95,103,95,81,19,25,96,81,19,103,96,96,1,41,96,96,8,20,95,95,96,25,96,81,19,103,96,96,2,41,96,96,16,20,95,95,96,25,96,81,19,103,96,96,3,41,96,96,24,20,95,95,96,0,79,95,0,103,95,81,15,25,96,81,15,103,96,96,1,41,96,96,8,20,95,95,96,25,96,81,15,103,96,96,2,41,96,96,16,20,95,95,96,25,96,81,15,103,96,96,3,41,96,96,24,20,95,95,96,0,80,95,0,48,95,80,79,112,175,0,0,103,95,81,15,25,96,81,15,103,96,96,1,41,96,96,8,20,95,95,96,25,96,81,15,103,96,96,2,41,96,96,16,20,95,95,96,25,96,81,15,103,96,96,3,41,96,96,24,20,95,95,96,0,82,95,0,19,96,82,89,107,81,19,96,25,96,81,19,42,95,82,8,19,95,95,89,107,96,1,95,25,95,81,19,42,96,82,16,19,96,96,89,107,95,2,96,25,96,81,19,42,95,82,24,107,96,3,95,103,95,81,27,25,96,81,27,103,96,96,1,41,96,96,8,20,95,95,96,0,83,95,0,0,69,83,0,0,84,0,0,19,95,84,89,135,3,29,0,95,65,0,0,0,2,3,0,1,1,0,0,0,4,1,0,0,5,2,0,55,95,4,5,184,175,0,0,119,0,92,0,0,6,1,0,41,95,6,1,91,95,65,95,41,96,6,1,3,96,65,96,103,96,96,1,41,96,96,8,20,95,95,96,0,7,95,0,19,95,7,87,27,95,95,19,3,95,88,95,103,95,95,12,19,96,7,87,27,96,96,19,3,96,88,96,25,96,96,12,103,96,96,1,41,96,96,8,20,95,95,96,0,9,95,0,0,73,9,0,0,10,0,0,27,95,10,37,90,11,90,95,19,95,11,89,1,96,2,0,1,97,3,0,138,95,96,97,60,176,0,0,100,176,0,0,140,176,0,0,119,0,28,0,0,12,73,0,0,13,73,0,19,96,12,87,19,97,13,87,28,97,97,4,38,97,97,255,4,96,96,97,19,96,96,87,0,73,96,0,119,0,18,0,0,14,73,0,0,15,73,0,19,96,14,87,19,97,15,87,28,97,97,4,38,97,97,255,4,96,96,97,19,96,96,87,0,73,96,0,119,0,8,0,0,16,73,0,19,96,16,87,28,96,96,2,38,96,96,255,19,96,96,87,0,73,96,0,119,0,1,0,0,17,73,0,0,18,69,0,19,95,18,87,19,96,17,87,3,95,95,96,19,95,95,87,0,69,95,0,0,20,73,0,0,21,1,0,41,95,21,1,91,95,65,95,41,96,21,1,3,96,65,96,103,96,96,1,41,96,96,8,20,95,95,96,0,22,95,0,19,95,22,87,27,95,95,19,3,95,88,95,19,96,20,89,107,95,12,96,19,96,22,87,27,96,96,19,3,96,88,96,25,96,96,12,42,95,20,8,107,96,1,95,0,23,1,0,25,1,23,1,119,0,161,255,79,95,91,0,103,96,91,1,41,96,96,8,20,95,95,96,0,24,95,0,41,95,24,16,42,95,95,16,33,95,95,0,121,95,14,0,79,95,91,0,103,96,91,1,41,96,96,8,20,95,95,96,0,25,95,0,0,26,69,0,19,95,26,87,19,96,25,87,6,95,95,96,38,95,95,255,19,95,95,87,0,69,95,0,119,0,7,0,0,27,69,0,19,95,27,87,28,95,95,50,38,95,95,255,19,95,95,87,0,69,95,0,103,95,81,25,25,96,81,25,103,96,96,1,41,96,96,8,20,95,95,96,0,28,95,0,0,29,69,0,19,95,29,87,19,96,28,87,47,95,95,96,20,178,0,0,0,31,69,0,103,95,81,25,25,96,81,25,103,96,96,1,41,96,96,8,20,95,95,96,0,32,95,0,19,96,32,87,19,97,31,87,4,96,96,97,19,96,96,87,19,96,96,89,107,81,25,96,25,96,81,25,19,95,32,87,19,97,31,87,4,95,95,97,19,95,95,87,42,95,95,8,107,96,1,95,119,0,74,0,1,1,0,0,0,33,1,0,0,34,2,0,55,95,33,34,44,178,0,0,119,0,34,0,0,35,1,0,41,95,35,1,91,95,65,95,41,96,35,1,3,96,65,96,103,96,96,1,41,96,96,8,20,95,95,96,0,36,95,0,19,95,36,87,27,95,95,19,3,95,88,95,25,37,95,12,79,95,37,0,103,96,37,1,41,96,96,8,20,95,95,96,0,38,95,0,19,95,38,87,28,95,95,2,38,95,95,255,19,95,95,87,19,95,95,89,83,37,95,0,19,96,38,87,28,96,96,2,38,96,96,255,19,96,96,87,42,96,96,8,107,37,1,96,0,39,1,0,25,1,39,1,119,0,219,255,1,95,0,0,19,95,95,89,107,81,25,95,25,95,81,25,1,96,0,0,42,96,96,8,107,95,1,96,78,40,81,0,1,96,1,0,83,81,96,0,19,96,40,89,33,96,96,1,121,96,22,0,103,96,81,1,25,95,81,1,103,95,95,1,41,95,95,8,20,96,96,95,0,41,96,0,79,96,93,0,103,95,93,1,41,95,95,8,20,96,96,95,0,42,96,0,19,96,41,87,19,95,42,87,25,95,95,1,45,96,96,95,56,179,0,0,0,43,0,0,19,95,43,89,134,96,0,0,124,204,2,0,95,0,0,0,0,45,0,0,19,96,45,89,135,46,74,0,96,65,0,0,19,96,46,89,0,2,96,0,1,1,0,0,0,47,1,0,0,48,2,0,55,96,47,48,104,179,0,0,119,0,59,0,0,50,1,0,41,96,50,1,91,96,65,96,41,95,50,1,3,95,65,95,103,95,95,1,41,95,95,8,20,96,96,95,0,51,96,0,19,96,51,87,27,96,96,19,91,96,88,96,19,95,51,87,27,95,95,19,3,95,88,95,103,95,95,1,41,95,95,8,20,96,96,95,0,52,96,0,103,96,81,1,25,95,81,1,103,95,95,1,41,95,95,8,20,96,96,95,0,53,96,0,19,96,52,87,19,95,53,87,45,96,96,95,68,180,0,0,103,96,81,1,25,95,81,1,103,95,95,1,41,95,95,8,20,96,96,95,0,54,96,0,0,55,1,0,41,96,55,1,91,96,65,96,41,95,55,1,3,95,65,95,103,95,95,1,41,95,95,8,20,96,96,95,0,56,96,0,19,96,56,87,27,96,96,19,3,96,88,96,19,95,54,89,107,96,2,95,19,95,56,87,27,95,95,19,3,95,88,95,25,95,95,2,42,96,54,8,107,95,1,96,0,58,1,0,25,1,58,1,119,0,194,255,0,59,0,0,25,0,59,1,119,0,59,254,137,86,0,0,1,96,1,0,139,96,0,0,140,1,96,0,0,0,0,0,2,84,0,0,255,0,0,0,2,85,0,0,214,166,2,0,2,86,0,0,148,166,2,0,2,87,0,0,5,16,0,0,2,88,0,0,232,214,2,0,2,89,0,0,255,255,0,0,2,90,0,0,17,215,2,0,1,81,0,0,136,91,0,0,0,82,91,0,136,91,0,0,25,91,91,80,137,91,0,0,1,92,255,255,107,82,47,92,1,91,0,0,19,91,91,84,107,82,40,91,25,91,82,40,1,92,0,0,42,92,92,8,107,91,1,92,103,92,0,1,25,91,0,1,103,91,91,1,41,91,91,8,20,92,92,91,0,51,92,0,102,52,0,3,102,53,0,4,135,54,75,0,51,0,0,0,2,92,0,0,72,191,2,0,78,55,92,0,41,92,55,24,42,92,92,24,33,92,92,0,120,92,14,0,102,56,54,6,19,92,52,84,27,92,92,7,3,92,90,92,102,57,92,3,19,92,52,84,27,92,92,7,3,92,90,92,19,91,57,84,19,93,56,84,4,91,91,93,19,91,91,84,107,92,3,91,25,80,82,49,25,83,80,10,1,91,32,0,83,80,91,0,25,80,80,1,54,91,80,83,100,181,0,0,1,91,251,15,135,58,0,0,91,0,0,0,33,91,58,0,121,91,64,0,1,19,251,15,0,59,19,0,1,91,0,0,53,91,59,91,164,181,0,0,119,0,58,0,135,60,1,0,0,21,60,0,0,61,21,0,1,91,0,0,53,91,61,91,192,181,0,0,119,0,49,0,0,62,21,0,82,63,62,0,106,64,63,8,0,25,64,0,0,65,25,0,1,91,0,0,53,91,65,91,228,181,0,0,119,0,35,0,135,66,76,0,52,0,0,0,107,82,46,66,0,67,25,0,1,92,0,0,25,93,82,46,1,94,0,0,1,95,0,0,135,91,2,0,67,87,92,93,94,95,0,0,0,68,25,0,1,95,1,0,25,94,0,1,1,93,0,0,1,92,0,0,135,91,2,0,68,86,95,94,93,92,0,0,0,69,25,0,1,92,0,0,25,93,82,47,1,94,0,0,1,95,0,0,135,91,2,0,69,85,92,93,94,95,0,0,0,70,19,0,0,71,21,0,134,91,0,0,16,21,1,0,70,71,0,0,1,25,0,0,119,0,218,255,0,72,21,0,135,91,3,0,72,0,0,0,1,21,0,0,119,0,204,255,1,19,0,0,119,0,195,255,102,73,82,47,19,91,73,84,45,91,91,84,228,182,0,0,135,74,52,0,2,91,0,0,84,180,2,0,78,75,91,0,2,91,0,0,60,180,2,0,78,76,91,0,19,95,75,84,25,95,95,20,8,95,74,95,38,95,95,255,19,95,95,84,19,95,95,84,19,94,76,84,42,94,94,1,17,95,95,94,38,95,95,1,19,95,95,84,107,82,47,95,2,95,0,0,72,191,2,0,78,77,95,0,41,95,77,24,42,95,95,24,33,95,95,0,121,95,3,0,1,91,1,0,107,82,47,91,102,78,82,47,41,91,78,24,42,91,91,24,33,91,91,0,120,91,24,0,1,95,11,0,25,94,82,49,25,94,94,1,135,91,17,0,95,51,94,0,25,91,82,49,1,94,32,0,107,91,5,94,1,91,26,0,25,95,82,49,25,95,95,7,135,94,65,0,91,95,0,0,25,95,82,49,1,91,1,0,1,93,255,255,134,94,0,0,164,122,2,0,95,91,93,0,1,1,0,0,0,49,1,0,137,82,0,0,139,49,0,0,2,94,0,0,222,214,2,0,78,79,94,0,41,94,79,24,42,94,94,24,33,94,94,0,120,94,12,0,1,93,11,0,25,91,82,49,25,91,91,6,135,94,17,0,93,51,91,0,25,91,82,49,1,93,1,0,1,95,0,0,134,94,0,0,164,122,2,0,91,93,95,0,78,2,54,0,19,94,51,89,32,94,94,22,121,94,7,0,134,94,0,0,92,182,2,0,1,1,8,0,0,49,1,0,137,82,0,0,139,49,0,0,19,94,51,89,32,94,94,27,121,94,13,0,134,3,0,0,96,104,2,0,53,0,0,0,1,95,0,0,134,94,0,0,112,32,1,0,95,52,0,0,19,94,3,84,0,1,94,0,0,49,1,0,137,82,0,0,139,49,0,0,19,94,51,89,32,94,94,30,121,94,41,0,2,94,0,0,230,214,2,0,79,94,94,0,2,95,0,0,230,214,2,0,103,95,95,1,41,95,95,8,20,94,94,95,0,4,94,0,2,94,0,0,201,214,2,0,19,95,4,84,83,94,95,0,2,95,0,0,201,214,2,0,42,94,4,8,107,95,1,94,2,94,0,0,140,180,2,0,82,5,94,0,1,95,55,0,135,94,65,0,95,5,0,0,135,7,62,0,52,0,0,0,2,94,0,0,140,180,2,0,82,8,94,0,134,94,0,0,76,29,2,0,7,8,0,0,2,94,0,0,36,180,2,0,82,9,94,0,135,94,45,0,9,0,0,0,1,1,8,0,0,49,1,0,137,82,0,0,139,49,0,0,25,95,82,42,25,93,82,40,25,91,82,45,134,94,0,0,56,139,1,0,51,95,93,53,91,0,0,0,103,94,82,40,25,91,82,40,103,91,91,1,41,91,91,8,20,94,94,91,0,10,94,0,41,94,10,16,42,94,94,16,33,94,94,0,121,94,127,0,103,94,82,40,25,91,82,40,103,91,91,1,41,91,91,8,20,94,94,91,0,11,94,0,19,91,11,84,107,82,42,91,25,91,82,42,42,94,11,8,107,91,1,94,19,94,52,84,34,94,94,10,121,94,4,0,2,6,0,0,230,214,2,0,119,0,3,0,2,6,0,0,228,214,2,0,0,12,6,0,103,94,82,40,25,91,82,40,103,91,91,1,41,91,91,8,20,94,94,91,0,13,94,0,135,14,77,0,12,13,0,0,19,91,14,84,107,82,40,91,25,91,82,40,42,94,14,8,107,91,1,94,2,94,0,0,222,214,2,0,78,15,94,0,41,94,15,24,42,94,94,24,33,94,94,0,121,94,72,0,1,91,25,0,25,93,82,49,135,94,65,0,91,93,0,0,1,94,161,32,79,94,94,0,1,93,161,32,103,93,93,1,41,93,93,8,20,94,94,93,0,16,94,0,1,94,163,32,79,94,94,0,1,93,163,32,103,93,93,1,41,93,93,8,20,94,94,93,0,17,94,0,19,93,16,89,1,91,130,0,4,93,93,91,28,93,93,2,38,93,93,255,25,93,93,40,19,93,93,89,19,91,17,89,26,91,91,64,28,91,91,2,38,91,91,255,25,91,91,2,19,91,91,89,25,95,82,49,135,94,7,0,93,91,95,0,1,94,161,32,79,94,94,0,1,95,161,32,103,95,95,1,41,95,95,8,20,94,94,95,0,18,94,0,1,94,163,32,79,94,94,0,1,95,163,32,103,95,95,1,41,95,95,8,20,94,94,95,0,20,94,0,103,94,82,42,25,95,82,42,103,95,95,1,41,95,95,8,20,94,94,95,0,22,94,0,19,95,18,89,1,91,130,0,4,95,95,91,28,95,95,2,38,95,95,255,25,95,95,40,19,95,95,84,19,91,20,89,26,91,91,64,28,91,91,2,38,91,91,255,25,91,91,40,19,91,91,84,134,94,0,0,36,125,2,0,95,91,22,0,119,0,11,0,103,94,82,42,25,91,82,42,103,91,91,1,41,91,91,8,20,94,94,91,0,23,94,0,1,91,45,0,134,94,0,0,108,89,2,0,91,53,23,0,1,91,50,0,1,95,0,0,134,94,0,0,16,135,2,0,91,95,0,0,134,24,0,0,28,219,0,0,51,2,52,53,53,0,0,0,19,95,24,84,19,95,95,84,107,82,42,95,25,95,82,42,19,94,24,84,42,94,94,8,107,95,1,94,19,94,2,84,38,94,94,2,33,94,94,0,121,94,98,0,1,36,0,0,0,26,36,0,34,94,26,20,120,94,2,0,119,0,93,0,0,27,36,0,27,94,27,7,3,41,90,94,0,28,36,0,19,94,53,84,52,94,28,94,192,188,0,0,0,29,36,0,41,94,29,1,91,94,88,94,41,95,29,1,3,95,88,95,103,95,95,1,41,95,95,8,20,94,94,95,0,30,94,0,19,94,30,89,32,94,94,0,120,94,71,0,19,94,2,84,38,94,94,4,33,94,94,0,120,94,47,0,102,31,41,6,19,94,31,84,32,94,94,8,120,94,63,0,78,32,41,0,102,33,41,1,135,34,78,0,32,33,0,0,41,94,34,24,42,94,94,24,33,94,94,0,120,94,2,0,119,0,54,0,0,35,36,0,1,94,10,0,19,95,52,84,17,94,94,95,1,95,10,0,17,95,95,35,19,94,94,95,121,94,3,0,1,81,45,0,119,0,10,0,0,37,36,0,19,94,52,84,34,94,94,10,34,95,37,10,19,94,94,95,121,94,3,0,1,81,45,0,119,0,2,0,1,50,0,0,32,94,81,45,121,94,3,0,1,81,0,0,1,50,1,0,0,38,50,0,0,39,36,0,19,94,39,84,135,40,79,0,51,38,94,0,41,94,40,24,42,94,94,24,33,94,94,0,120,94,2,0,119,0,21,0,103,94,82,42,25,95,82,42,103,95,95,1,41,95,95,8,20,94,94,95,0,42,94,0,0,43,36,0,19,94,43,84,134,44,0,0,28,219,0,0,51,2,52,94,53,0,0,0,19,94,44,84,135,45,58,0,42,94,0,0,19,95,45,84,107,82,42,95,25,95,82,42,42,94,45,8,107,95,1,94,0,46,36,0,25,36,46,1,119,0,161,255,134,94,0,0,136,143,2,0,52,0,0,0,103,94,82,42,25,95,82,42,103,95,95,1,41,95,95,8,20,94,94,95,0,47,94,0,135,48,80,0,47,0,0,0,19,94,48,84,0,1,94,0,0,49,1,0,137,82,0,0,139,49,0,0,140,0,89,0,0,0,0,0,2,75,0,0,255,0,0,0,2,76,0,0,255,255,0,0,2,77,0,0,164,215,2,0,2,78,0,0,32,3,0,0,2,79,0,0,20,108,3,0,2,80,0,0,158,215,2,0,2,81,0,0,136,20,0,0,2,82,0,0,163,32,0,0,1,71,0,0,136,83,0,0,0,72,83,0,136,83,0,0,1,84,96,8,3,83,83,84,137,83,0,0,25,70,72,48,1,73,68,20,25,74,70,32,78,83,73,0,83,70,83,0,25,70,70,1,25,73,73,1,54,83,70,74,124,189,0,0,25,70,72,16,1,73,100,20,25,74,70,32,78,83,73,0,83,70,83,0,25,70,70,1,25,73,73,1,54,83,70,74,160,189,0,0,135,83,81,0,1,83,44,0,1,84,100,0,25,85,72,48,1,86,4,0,1,87,0,0,134,5,0,0,176,187,1,0,83,84,85,86,87,0,0,0,19,87,5,75,1,88,0,0,1,83,0,1,138,87,88,83,244,193,0,0,124,194,0,0,168,194,0,0,180,194,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,188,194,0,0,119,0,242,254,1,86,45,0,1,85,104,0,25,84,72,16,1,83,4,0,1,88,1,0,134,12,0,0,176,187,1,0,86,85,84,83,88,0,0,0,0,33,12,0,0,16,33,0,19,88,16,75,52,88,88,75,184,189,0,0,0,24,33,0,19,88,24,75,25,88,88,1,19,88,88,75,25,83,72,80,135,39,82,0,88,83,0,0,19,83,39,75,0,33,83,0,0,47,33,0,25,83,72,80,19,88,47,75,134,48,0,0,44,29,0,0,83,88,0,0,19,88,48,76,52,88,88,76,184,189,0,0,1,71,5,0,119,0,18,0,1,88,1,0,134,44,0,0,20,5,1,0,88,0,0,0,0,33,44,0,0,45,33,0,19,88,45,75,52,88,88,75,184,189,0,0,1,71,32,0,119,0,7,0,134,88,0,0,120,214,2,0,119,0,194,254,1,71,34,0,119,0,2,0,119,0,254,255,32,87,71,5,121,87,161,1,19,87,48,75,83,80,87,0,42,88,48,8,107,80,1,88,1,33,0,0,0,50,33,0,78,51,81,0,19,88,50,75,19,87,51,75,54,88,88,87,248,194,0,0,119,0,32,0,0,52,33,0,19,88,52,75,27,88,88,37,3,88,79,88,103,88,88,1,19,87,52,75,27,87,87,37,3,87,79,87,25,87,87,1,103,87,87,1,41,87,87,8,20,88,88,87,0,53,88,0,79,88,80,0,103,87,80,1,41,87,87,8,20,88,88,87,0,54,88,0,19,88,53,76,19,87,54,76,25,87,87,1,45,88,88,87,92,195,0,0,1,71,8,0,119,0,7,0,0,23,33,0,25,88,23,1,41,88,88,24,42,88,88,24,0,33,88,0,119,0,219,255,32,88,71,8,121,88,251,0,2,88,0,0,24,180,2,0,82,55,88,0,1,88,2,0,1,87,6,0,135,56,21,0,88,87,55,0,0,57,33,0,19,87,57,75,41,87,87,1,90,58,56,87,2,87,0,0,86,176,3,0,83,87,58,0,0,59,33,0,19,87,59,75,41,87,87,1,25,87,87,1,90,60,56,87,2,87,0,0,87,176,3,0,83,87,60,0,2,87,0,0,86,176,3,0,78,61,87,0,1,87,161,32,79,87,87,0,1,88,161,32,103,88,88,1,41,88,88,8,20,87,87,88,0,62,87,0,1,87,137,20,78,63,87,0,19,87,63,75,19,88,61,75,19,83,62,76,26,83,83,1,26,83,83,0,25,83,83,1,25,83,83,1,28,83,83,16,38,83,83,255,26,83,83,2,28,83,83,2,38,83,83,255,3,88,88,83,49,87,87,88,244,196,0,0,1,87,137,20,78,64,87,0,1,87,161,32,79,87,87,0,1,88,161,32,103,88,88,1,41,88,88,8,20,87,87,88,0,65,87,0,19,87,65,76,26,87,87,1,26,87,87,0,25,87,87,1,25,87,87,1,28,87,87,16,38,87,87,255,26,87,87,2,19,88,64,75,47,87,87,88,224,196,0,0,1,87,137,20,78,66,87,0,1,87,161,32,79,87,87,0,1,88,161,32,103,88,88,1,41,88,88,8,20,87,87,88,0,67,87,0,19,87,66,75,19,88,67,76,26,88,88,1,26,88,88,0,25,88,88,1,25,88,88,1,28,88,88,16,38,88,88,255,26,88,88,2,4,69,87,88,119,0,2,0,1,69,0,0,19,88,69,75,0,68,88,0,0,0,68,0,119,0,50,0,2,88,0,0,86,176,3,0,78,3,88,0,1,88,161,32,79,88,88,0,1,87,161,32,103,87,87,1,41,87,87,8,20,88,88,87,0,4,88,0,19,88,3,75,19,87,4,76,26,87,87,1,26,87,87,0,25,87,87,1,25,87,87,1,28,87,87,16,38,87,87,255,26,87,87,2,28,87,87,2,38,87,87,255,47,88,88,87,88,197,0,0,1,0,0,0,119,0,25,0,2,88,0,0,86,176,3,0,78,6,88,0,1,88,161,32,79,88,88,0,1,87,161,32,103,87,87,1,41,87,87,8,20,88,88,87,0,7,88,0,19,88,6,75,19,87,7,76,26,87,87,1,26,87,87,0,25,87,87,1,25,87,87,1,28,87,87,16,38,87,87,255,26,87,87,2,28,87,87,2,38,87,87,255,4,88,88,87,19,88,88,75,0,0,88,0,2,88,0,0,84,176,3,0,83,88,0,0,2,88,0,0,87,176,3,0,78,8,88,0,79,88,82,0,103,87,82,1,41,87,87,8,20,88,88,87,0,9,88,0,1,88,138,20,78,10,88,0,19,88,10,75,19,87,8,75,19,83,9,76,26,83,83,1,26,83,83,0,25,83,83,1,28,83,83,16,38,83,83,255,28,83,83,2,38,83,83,255,3,87,87,83,49,88,88,87,180,198,0,0,1,88,138,20,78,11,88,0,79,88,82,0,103,87,82,1,41,87,87,8,20,88,88,87,0,13,88,0,19,88,13,76,26,88,88,1,26,88,88,0,25,88,88,1,28,88,88,16,38,88,88,255,19,87,11,75,47,88,88,87,160,198,0,0,1,88,138,20,78,14,88,0,79,88,82,0,103,87,82,1,41,87,87,8,20,88,88,87,0,15,88,0,19,88,14,75,19,87,15,76,26,87,87,1,26,87,87,0,25,87,87,1,28,87,87,16,38,87,87,255,4,18,88,87,119,0,2,0,1,18,0,0,19,87,18,75,0,17,87,0,0,1,17,0,119,0,42,0,2,87,0,0,87,176,3,0,78,19,87,0,79,87,82,0,103,88,82,1,41,88,88,8,20,87,87,88,0,20,87,0,19,87,19,75,19,88,20,76,26,88,88,1,26,88,88,0,25,88,88,1,28,88,88,16,38,88,88,255,28,88,88,2,38,88,88,255,47,87,87,88,8,199,0,0,1,1,0,0,119,0,21,0,2,87,0,0,87,176,3,0,78,21,87,0,79,87,82,0,103,88,82,1,41,88,88,8,20,87,87,88,0,22,87,0,19,87,21,75,19,88,22,76,26,88,88,1,26,88,88,0,25,88,88,1,28,88,88,16,38,88,88,255,28,88,88,2,38,88,88,255,4,87,87,88,19,87,87,75,0,1,87,0,2,87,0,0,85,176,3,0,83,87,1,0,1,33,0,0,0,25,33,0,78,26,81,0,19,87,25,75,19,88,26,75,54,87,87,88,132,199,0,0,119,0,100,0,0,27,33,0,19,87,27,75,27,87,87,37,3,87,79,87,103,87,87,1,19,88,27,75,27,88,88,37,3,88,79,88,25,88,88,1,103,88,88,1,41,88,88,8,20,87,87,88,0,28,87,0,79,87,80,0,103,88,80,1,41,88,88,8,20,87,87,88,0,29,87,0,19,87,28,76,19,88,29,76,25,88,88,1,46,87,87,88,248,200,0,0,2,87,0,0,140,180,2,0,82,30,87,0,0,31,33,0,135,32,29,0,31,30,0,0,1,49,0,0,0,34,49,0], eb + 40960);
  HEAPU8.set([19,87,34,75,19,88,32,75,19,88,88,75,54,87,87,88,24,200,0,0,119,0,29,0,0,35,49,0,19,87,35,75,41,87,87,1,91,87,30,87,19,88,35,75,41,88,88,1,3,88,30,88,103,88,88,1,41,88,88,8,20,87,87,88,0,36,87,0,19,87,36,76,27,87,87,19,3,87,77,87,19,88,78,75,107,87,12,88,19,88,36,76,27,88,88,19,3,88,77,88,25,88,88,12,42,87,78,8,107,88,1,87,0,37,49,0,25,87,37,1,41,87,87,24,42,87,87,24,0,49,87,0,119,0,222,255,0,38,33,0,19,87,38,75,27,87,87,37,3,87,79,87,103,87,87,25,19,88,38,75,27,88,88,37,3,88,79,88,25,88,88,25,103,88,88,1,41,88,88,8,20,87,87,88,0,40,87,0,1,87,232,3,135,41,58,0,40,87,0,0,0,42,33,0,19,87,42,75,27,87,87,37,3,87,79,87,19,88,41,75,107,87,25,88,19,88,42,75,27,88,88,37,3,88,79,88,25,88,88,25,42,87,41,8,107,88,1,87,0,43,33,0,25,87,43,1,41,87,87,24,42,87,87,24,0,33,87,0,119,0,151,255,2,87,0,0,186,214,2,0,1,88,0,0,83,87,88,0,1,87,173,20,1,83,0,0,134,88,0,0,16,21,1,0,87,83,0,0,1,2,1,0,0,46,2,0,137,72,0,0,139,46,0,0,119,0,18,0,32,88,71,32,121,88,10,0,2,88,0,0,186,214,2,0,1,83,1,0,83,88,83,0,1,2,1,0,0,46,2,0,137,72,0,0,139,46,0,0,119,0,7,0,32,83,71,34,121,83,5,0,1,2,0,0,0,46,2,0,137,72,0,0,139,46,0,0,1,83,0,0,139,83,0,0,140,1,80,0,0,0,0,0,2,68,0,0,171,0,0,0,2,69,0,0,202,24,0,0,2,70,0,0,255,0,0,0,2,71,0,0,255,255,0,0,2,72,0,0,173,0,0,0,2,73,0,0,161,32,0,0,2,74,0,0,163,32,0,0,1,65,0,0,136,75,0,0,0,66,75,0,136,75,0,0,1,76,192,0,3,75,75,76,137,75,0,0,95,66,68,0,25,64,66,15,25,67,64,11,1,75,0,0,83,64,75,0,25,64,64,1,54,75,64,67,252,201,0,0,1,75,185,24,135,14,0,0,75,0,0,0,33,75,14,0,121,75,54,0,1,61,185,24,0,20,61,0,1,75,0,0,53,75,20,75,60,202,0,0,119,0,48,0,135,26,1,0,0,2,26,0,0,28,2,0,1,75,0,0,53,75,28,75,88,202,0,0,119,0,32,0,0,35,2,0,82,40,35,0,106,43,40,8,0,5,43,0,0,44,5,0,1,75,0,0,53,75,44,75,124,202,0,0,119,0,18,0,0,45,5,0,1,76,0,0,3,77,66,68,1,78,0,0,1,79,0,0,135,75,2,0,45,69,76,77,78,79,0,0,0,46,61,0,0,47,2,0,134,49,0,0,16,21,1,0,46,47,0,0,32,75,49,0,120,75,10,0,1,5,0,0,119,0,235,255,0,51,2,0,135,75,3,0,51,0,0,0,1,2,0,0,119,0,221,255,1,61,0,0,119,0,212,255,0,50,2,0,135,75,3,0,50,0,0,0,1,1,0,0,0,42,1,0,137,66,0,0,139,42,0,0,1,54,0,0,1,48,1,0,0,52,48,0,41,75,52,24,42,75,75,24,33,75,75,0,121,75,184,0,79,75,73,0,103,79,73,1,41,79,79,8,20,75,75,79,0,53,75,0,79,75,73,0,103,79,73,1,41,79,79,8,20,75,75,79,0,55,75,0,79,75,74,0,103,79,74,1,41,79,79,8,20,75,75,79,0,57,75,0,19,79,53,71,26,79,79,1,26,79,79,0,26,79,79,90,28,79,79,2,38,79,79,255,25,79,79,0,26,79,79,5,19,79,79,71,1,78,2,0,19,77,55,71,26,77,77,1,26,77,77,0,26,77,77,90,28,77,77,2,38,77,77,255,25,77,77,0,25,77,77,90,25,77,77,5,19,77,77,71,19,76,57,71,26,76,76,1,26,76,76,1,26,76,76,2,26,76,76,2,28,76,76,13,38,76,76,255,27,76,76,13,25,76,76,2,19,76,76,71,135,75,5,0,79,78,77,76,79,75,73,0,103,76,73,1,41,76,76,8,20,75,75,76,0,58,75,0,79,75,73,0,103,76,73,1,41,76,76,8,20,75,75,76,0,59,75,0,79,75,74,0,103,76,74,1,41,76,76,8,20,75,75,76,0,60,75,0,19,76,58,71,26,76,76,1,26,76,76,0,26,76,76,90,28,76,76,2,38,76,76,255,25,76,76,0,26,76,76,5,26,76,76,1,19,76,76,71,1,77,1,0,19,78,59,71,26,78,78,1,26,78,78,0,26,78,78,90,28,78,78,2,38,78,78,255,25,78,78,0,25,78,78,90,25,78,78,5,25,78,78,1,19,78,78,71,19,79,60,71,26,79,79,1,26,79,79,1,26,79,79,2,26,79,79,2,28,79,79,13,38,79,79,255,27,79,79,13,25,79,79,2,25,79,79,1,19,79,79,71,135,75,6,0,76,77,78,79,90,62,66,68,25,79,66,40,135,75,83,0,62,79,0,0,79,75,73,0,103,79,73,1,41,79,79,8,20,75,75,79,0,63,75,0,19,79,63,71,26,79,79,1,26,79,79,0,26,79,79,90,28,79,79,2,38,79,79,255,25,79,79,0,19,79,79,71,1,78,2,0,25,77,66,40,135,75,7,0,79,78,77,0,1,56,0,0,0,3,56,0,79,75,74,0,103,77,74,1,41,77,77,8,20,75,75,77,0,4,75,0,19,75,3,70,19,77,4,71,26,77,77,1,26,77,77,1,26,77,77,2,26,77,77,2,28,77,77,13,38,77,77,255,26,77,77,1,54,75,75,77,56,205,0,0,119,0,46,0,0,6,56,0,1,75,166,23,78,7,75,0,19,75,7,70,19,77,6,70,56,75,75,77,236,205,0,0,90,9,66,68,0,10,54,0,0,11,56,0,19,77,10,70,19,78,11,70,3,77,77,78,19,77,77,70,25,78,66,40,134,75,0,0,44,37,1,0,9,77,78,0,79,75,73,0,103,78,73,1,41,78,78,8,20,75,75,78,0,12,75,0,0,13,56,0,19,78,12,71,26,78,78,1,26,78,78,0,26,78,78,90,28,78,78,2,38,78,78,255,25,78,78,0,19,78,78,71,19,77,13,70,27,77,77,13,25,77,77,14,19,77,77,71,25,79,66,40,135,75,7,0,78,77,79,0,0,15,56,0,25,75,15,1,41,75,75,24,42,75,75,24,0,56,75,0,119,0,194,255,1,48,0,0,25,79,66,26,134,75,0,0,100,208,2,0,79,0,0,0,102,16,66,26,19,75,16,70,32,75,75,5,120,75,123,0,102,29,66,26,19,75,29,70,32,75,75,16,120,75,2,0,119,0,56,255,102,79,66,26,95,66,72,79,3,79,66,72,25,75,66,26,102,75,75,1,107,79,1,75,3,75,66,72,25,79,66,26,102,79,79,2,107,75,2,79,3,79,66,72,25,75,66,26,102,75,75,3,107,79,3,75,3,75,66,72,25,79,66,26,102,79,79,4,107,75,4,79,3,79,66,72,25,75,66,26,102,75,75,5,107,79,5,75,3,75,66,72,25,79,66,26,102,79,79,6,107,75,6,79,25,75,66,15,3,77,66,72,135,79,11,0,75,77,0,0,25,79,66,26,103,79,79,1,25,77,66,26,25,77,77,1,103,77,77,1,41,77,77,8,20,79,79,77,0,30,79,0,19,79,30,71,32,79,79,2,120,79,2,0,119,0,14,255,102,31,66,15,41,79,31,24,42,79,79,24,33,79,79,0,120,79,2,0,119,0,8,255,25,79,66,15,102,32,79,2,41,79,32,24,42,79,79,24,33,79,79,0,120,79,3,0,1,65,35,0,119,0,156,0,25,79,66,15,103,79,79,9,25,77,66,15,25,77,77,9,103,77,77,1,41,77,77,8,20,79,79,77,0,33,79,0,25,79,66,15,103,79,79,5,25,77,66,15,25,77,77,5,103,77,77,1,41,77,77,8,20,79,79,77,0,34,79,0,41,79,33,16,42,79,79,16,41,77,34,16,42,77,77,16,4,79,79,77,19,79,79,71,0,8,79,0,0,36,8,0,0,37,8,0,41,79,37,16,42,79,79,16,135,38,84,0,79,0,0,0,19,79,38,71,0,8,79,0,0,39,8,0,1,79,30,0,41,77,39,16,42,77,77,16,54,79,79,77,156,207,0,0,119,0,218,254,1,77,5,0,107,66,26,77,41,77,36,16,42,77,77,16,34,77,77,0,38,77,77,1,19,77,77,70,19,77,77,70,33,77,77,0,1,79,35,0,1,75,34,0,125,41,77,79,75,0,0,0,25,75,66,26,19,79,41,71,19,79,79,70,107,75,1,79,25,79,66,26,25,79,79,1,19,75,41,71,42,75,75,8,107,79,1,75,119,0,131,255,25,75,66,26,103,75,75,1,25,79,66,26,25,79,79,1,103,79,79,1,41,79,79,8,20,75,75,79,0,17,75,0,19,75,17,71,1,79,34,0,1,77,7,0,138,75,79,77,72,208,0,0,176,208,0,0,88,209,0,0,92,209,0,0,68,208,0,0,96,209,0,0,104,209,0,0,119,0,175,254,0,18,54,0,41,79,18,24,42,79,79,24,33,79,79,0,120,79,2,0,119,0,169,254,79,79,74,0,103,77,74,1,41,77,77,8,20,79,79,77,0,19,79,0,0,21,54,0,19,79,21,70,19,77,19,71,26,77,77,1,26,77,77,1,26,77,77,2,26,77,77,2,28,77,77,13,38,77,77,255,26,77,77,1,4,79,79,77,19,79,79,70,0,54,79,0,1,48,1,0,119,0,149,254,0,22,54,0,79,79,74,0,103,77,74,1,41,77,77,8,20,79,79,77,0,23,79,0,1,79,166,23,78,24,79,0,19,79,22,70,19,77,23,71,26,77,77,1,26,77,77,1,26,77,77,2,26,77,77,2,28,77,77,13,38,77,77,255,3,79,79,77,26,79,79,1,19,77,24,70,54,79,79,77,8,209,0,0,119,0,127,254,79,79,74,0,103,77,74,1,41,77,77,8,20,79,79,77,0,25,79,0,0,27,54,0,19,79,27,70,19,77,25,71,26,77,77,1,26,77,77,1,26,77,77,2,26,77,77,2,28,77,77,13,38,77,77,255,26,77,77,1,3,79,79,77,19,79,79,70,0,54,79,0,1,48,1,0,119,0,107,254,119,0,188,255,119,0,213,255,1,65,27,0,119,0,3,0,1,65,28,0,119,0,1,0,32,75,65,27,121,75,6,0,1,1,1,0,0,42,1,0,137,66,0,0,139,42,0,0,119,0,14,0,32,75,65,28,121,75,6,0,1,1,0,0,0,42,1,0,137,66,0,0,139,42,0,0,119,0,7,0,32,75,65,35,121,75,5,0,1,1,0,0,0,42,1,0,137,66,0,0,139,42,0,0,1,75,0,0,139,75,0,0,140,1,75,0,0,0,0,0,2,63,0,0,255,0,0,0,2,64,0,0,255,255,0,0,2,65,0,0,20,108,3,0,2,66,0,0,86,176,3,0,2,67,0,0,163,32,0,0,2,68,0,0,161,32,0,0,2,69,0,0,87,176,3,0,1,61,0,0,136,70,0,0,0,62,70,0,136,70,0,0,1,71,48,2,3,70,70,71,137,70,0,0,1,48,0,0,2,70,0,0,140,180,2,0,82,4,70,0,1,39,0,0,0,10,39,0,32,70,10,0,121,70,67,0,135,20,29,0,0,4,0,0,0,39,20,0,0,24,39,0,33,70,24,0,120,70,3,0,1,61,4,0,119,0,27,1,0,33,39,0,79,70,68,0,103,71,68,1,41,71,71,8,20,70,70,71,0,36,70,0,79,70,67,0,103,71,67,1,41,71,71,8,20,70,70,71,0,37,70,0,1,70,0,0,1,71,4,0,1,72,2,0,19,73,36,64,26,73,73,1,26,73,73,4,19,73,73,63,19,74,37,64,26,74,74,1,26,74,74,2,19,74,74,63,134,38,0,0,24,121,0,0,4,33,70,71,72,73,74,0,19,74,38,64,45,74,64,74,224,210,0,0,1,61,36,0,119,0,252,0,19,74,38,64,41,74,74,1,91,74,4,74,19,73,38,64,41,73,73,1,3,73,4,73,103,73,73,1,41,73,73,8,20,74,74,73,0,40,74,0,0,48,40,0,0,41,48,0,1,74,13,0,135,42,85,0,41,74,0,0,41,74,42,24,42,74,74,24,33,74,74,0,121,74,3,0,1,39,1,0,119,0,194,255,1,73,60,0,134,74,0,0,52,222,2,0,73,0,0,0,1,39,0,0,119,0,188,255,0,43,39,0,32,74,43,1,121,74,39,0,19,74,0,63,27,74,74,37,3,74,65,74,103,74,74,25,19,73,0,63,27,73,73,37,3,73,65,73,25,73,73,25,103,73,73,1,41,73,73,8,20,74,74,73,0,44,74,0,1,74,0,0,134,45,0,0,32,44,2,0,74,44,0,0,25,74,62,12,19,73,45,63,107,74,8,73,25,73,62,12,25,73,73,8,42,74,45,8,107,73,1,74,25,74,62,12,103,74,74,8,25,73,62,12,25,73,73,8,103,73,73,1,41,73,73,8,20,74,74,73,0,46,74,0,19,74,46,64,45,74,64,74,232,211,0,0,1,39,0,0,119,0,149,255,1,39,2,0,119,0,147,255,0,47,39,0,32,74,47,2,121,74,39,0,19,74,0,63,27,74,74,37,3,74,65,74,103,74,74,23,19,73,0,63,27,73,73,37,3,73,65,73,25,73,73,23,103,73,73,1,41,73,73,8,20,74,74,73,0,49,74,0,1,74,0,0,134,50,0,0,212,40,2,0,74,49,0,0,25,74,62,12,19,73,50,63,107,74,10,73,25,73,62,12,25,73,73,10,42,74,50,8,107,73,1,74,25,74,62,12,103,74,74,10,25,73,62,12,25,73,73,10,103,73,73,1,41,73,73,8,20,74,74,73,0,51,74,0,19,74,51,64,45,74,64,74,140,212,0,0,1,39,1,0,119,0,108,255,1,39,3,0,119,0,106,255,0,52,39,0,32,74,52,3,121,74,39,0,19,74,0,63,27,74,74,37,3,74,65,74,103,74,74,27,19,73,0,63,27,73,73,37,3,73,65,73,25,73,73,27,103,73,73,1,41,73,73,8,20,74,74,73,0,53,74,0,1,74,0,0,134,54,0,0,108,47,2,0,74,53,0,0,25,74,62,12,19,73,54,63,107,74,6,73,25,73,62,12,25,73,73,6,42,74,54,8,107,73,1,74,25,74,62,12,103,74,74,6,25,73,62,12,25,73,73,6,103,73,73,1,41,73,73,8,20,74,74,73,0,55,74,0,19,74,55,64,45,74,64,74,48,213,0,0,1,39,2,0,119,0,67,255,1,39,4,0,119,0,65,255,0,56,39,0,32,74,56,4,120,74,2,0,119,0,61,255,78,57,66,0,78,58,69,0,1,73,64,0,1,72,93,0,25,71,62,32,135,74,17,0,73,72,71,0,135,74,30,0,0,59,48,0,25,71,62,32,134,74,0,0,76,29,2,0,59,71,0,0,2,74,0,0,84,176,3,0,134,60,0,0,84,80,0,0,74,0,0,0,19,74,60,63,45,74,63,74,164,213,0,0,1,39,3,0,119,0,38,255,19,74,60,63,19,71,0,63,53,74,74,71,184,213,0,0,119,0,33,255,19,74,60,63,27,74,74,37,3,74,65,74,103,74,74,1,19,71,60,63,27,71,71,37,3,71,65,71,25,71,71,1,103,71,71,1,41,71,71,8,20,74,74,71,0,1,74,0,41,74,1,16,42,74,74,16,33,74,74,0,120,74,6,0,1,71,56,0,134,74,0,0,52,222,2,0,71,0,0,0,119,0,12,255,19,74,60,63,27,74,74,37,3,74,65,74,103,74,74,1,19,71,60,63,27,71,71,37,3,71,65,71,25,71,71,1,103,71,71,1,41,71,71,8,20,74,74,71,0,2,74,0,19,74,0,63,27,74,74,37,3,74,65,74,103,74,74,1,19,71,0,63,27,71,71,37,3,71,65,71,25,71,71,1,103,71,71,1,41,71,71,8,20,74,74,71,0,3,74,0,19,74,2,64,19,71,3,64,46,74,74,71,144,214,0,0,1,71,54,0,134,74,0,0,52,222,2,0,71,0,0,0,119,0,235,254,78,5,66,0,78,6,69,0,135,7,86,0,0,57,58,60,5,6,0,0,19,74,7,63,46,74,63,74,184,214,0,0,1,61,30,0,119,0,6,0,1,71,55,0,134,74,0,0,52,222,2,0,71,0,0,0,119,0,220,254,32,74,61,4,121,74,9,0,1,71,84,0,134,74,0,0,52,222,2,0,71,0,0,0,137,62,0,0,1,74,1,0,139,74,0,0,119,0,9,1,32,74,61,30,121,74,2,1,0,8,48,0,1,71,13,0,135,74,87,0,8,71,0,0,1,74,36,20,78,9,74,0,41,74,9,24,42,74,74,24,33,74,74,0,121,74,110,0,19,74,0,63,27,74,74,37,3,74,65,74,103,74,74,25,19,71,0,63,27,71,71,37,3,71,65,71,25,71,71,25,103,71,71,1,41,71,71,8,20,74,74,71,0,11,74,0,25,74,62,12,103,74,74,8,25,71,62,12,25,71,71,8,103,71,71,1,41,71,71,8,20,74,74,71,0,12,74,0,1,74,0,0,19,71,12,64,4,74,74,71,135,13,58,0,11,74,0,0,19,74,0,63,27,74,74,37,3,74,65,74,19,71,13,63,107,74,25,71,19,71,0,63,27,71,71,37,3,71,65,71,25,71,71,25,42,74,13,8,107,71,1,74,19,74,0,63,27,74,74,37,3,74,65,74,103,74,74,23,19,71,0,63,27,71,71,37,3,71,65,71,25,71,71,23,103,71,71,1,41,71,71,8,20,74,74,71,0,14,74,0,25,74,62,12,103,74,74,10,25,71,62,12,25,71,71,10,103,71,71,1,41,71,71,8,20,74,74,71,0,15,74,0,1,74,0,0,19,71,15,64,4,74,74,71,135,16,58,0,14,74,0,0,19,74,0,63,27,74,74,37,3,74,65,74,19,71,16,63,107,74,23,71,19,71,0,63,27,71,71,37,3,71,65,71,25,71,71,23,42,74,16,8,107,71,1,74,19,74,0,63,27,74,74,37,3,74,65,74,103,74,74,27,19,71,0,63,27,71,71,37,3,71,65,71,25,71,71,27,103,71,71,1,41,71,71,8,20,74,74,71,0,17,74,0,25,74,62,12,103,74,74,6,25,71,62,12,25,71,71,6,103,71,71,1,41,71,71,8,20,74,74,71,0,18,74,0,1,74,0,0,19,71,18,64,4,74,74,71,135,19,58,0,17,74,0,0,19,74,0,63,27,74,74,37,3,74,65,74,19,71,19,63,107,74,27,71,19,71,0,63,27,71,71,37,3,71,65,71,25,71,71,27,42,74,19,8,107,71,1,74,119,0,88,0,25,74,62,12,103,74,74,8,25,71,62,12,25,71,71,8,103,71,71,1,41,71,71,8,20,74,74,71,0,21,74,0,19,74,0,63,27,74,74,37,3,74,65,74,25,22,74,25,79,74,22,0,103,71,22,1,41,71,71,8,20,74,74,71,0,23,74,0,19,74,23,64,19,71,21,64,4,74,74,71,19,74,74,64,19,74,74,63,83,22,74,0,19,71,23,64,19,72,21,64,4,71,71,72,19,71,71,64,42,71,71,8,107,22,1,71,25,71,62,12,103,71,71,10,25,74,62,12,25,74,74,10,103,74,74,1,41,74,74,8,20,71,71,74,0,25,71,0,19,71,0,63,27,71,71,37,3,71,65,71,25,26,71,23,79,71,26,0,103,74,26,1,41,74,74,8,20,71,71,74,0,27,71,0,19,71,27,64,19,74,25,64,4,71,71,74,19,71,71,64,19,71,71,63,83,26,71,0,19,74,27,64,19,72,25,64,4,74,74,72,19,74,74,64,42,74,74,8,107,26,1,74,25,74,62,12,103,74,74,6,25,71,62,12,25,71,71,6,103,71,71,1,41,71,71,8,20,74,74,71,0,28,74,0,19,74,0,63,27,74,74,37,3,74,65,74,25,29,74,27,79,74,29,0,103,71,29,1,41,71,71,8,20,74,74,71,0,30,74,0,19,74,30,64,19,71,28,64,4,74,74,71,19,74,74,64,19,74,74,63,83,29,74,0,19,71,30,64,19,72,28,64,4,71,71,72,19,71,71,64,42,71,71,8,107,29,1,71,1,74,64,0,1,72,152,0,25,73,62,32,135,71,17,0,74,72,73,0,0,31,48,0,25,73,62,32,134,71,0,0,76,29,2,0,31,73,0,0,1,73,13,0,107,62,12,73,0,32,48,0,25,73,62,12,19,71,32,63,107,73,1,71,25,71,62,12,25,71,71,1,42,73,32,8,107,71,1,73,25,73,62,12,107,73,3,0,25,73,62,12,19,71,60,63,19,71,71,63,107,73,4,71,25,71,62,12,25,71,71,4,19,73,60,63,42,73,73,8,107,71,1,73,25,73,62,12,107,73,13,7,25,73,62,12,134,34,0,0,12,186,2,0,73,0,0,0,41,73,34,24,42,73,73,24,33,73,73,0,120,73,4,0,137,62,0,0,1,73,1,0,139,73,0,0,0,35,48,0,135,73,31,0,0,35,0,0,137,62,0,0,1,73,1,0,139,73,0,0,119,0,6,0,32,73,61,36,121,73,4,0,137,62,0,0,1,73,1,0,139,73,0,0,1,73,0,0,139,73,0,0,140,5,104,0,0,0,0,0,2,94,0,0,35,18,0,0,2,95,0,0,59,166,2,0,2,96,0,0,255,0,0,0,2,97,0,0,255,255,0,0,1,92,0,0,136,98,0,0,0,93,98,0,136,98,0,0,25,98,98,64,137,98,0,0,0,75,0,0,107,93,61,3,0,64,75,0,135,65,75,0,64,0,0,0,102,66,93,61,1,99,1,0,134,98,0,0,112,32,1,0,99,66,0,0,102,67,65,1,107,93,56,67,102,68,93,61,2,98,0,0,17,215,2,0,19,99,68,96,27,99,99,7,3,98,98,99,102,69,98,6,19,98,69,96,32,98,98,8,1,99,8,0,125,5,98,99,67,0,0,0,107,93,56,5,0,70,75,0,25,98,93,26,25,100,93,58,25,101,93,56,134,99,0,0,56,139,1,0,70,98,100,4,101,0,0,0,102,71,93,61,2,99,0,0,17,215,2,0,19,101,71,96,27,101,101,7,3,99,99,101,102,72,99,6,102,73,93,56,102,74,93,56,102,76,93,61,2,99,0,0,17,215,2,0,19,101,76,96,27,101,101,7,3,99,99,101,107,99,6,74,102,77,93,56,19,99,77,96,32,99,99,3,121,99,9,0,102,78,93,61,2,99,0,0,17,215,2,0,19,101,78,96,27,101,101,7,3,99,99,101,1,101,1,0,107,99,4,101,1,101,10,16,1,99,0,0,134,79,0,0,16,21,1,0,101,99,0,0,0,80,75,0,19,99,80,97,26,99,99,1,19,99,99,97,0,75,99,0,0,81,75,0,1,99,30,16,19,101,81,97,90,82,99,101,41,99,82,24,42,99,99,24,33,99,99,0,121,99,98,0,2,99,0,0,222,214,2,0,78,83,99,0,19,99,83,96,33,99,99,0,32,101,79,255,19,99,99,101,121,99,90,0,0,84,75,0,1,99,130,16,19,101,84,97,90,85,99,101,41,99,85,24,42,99,99,24,33,99,99,0,121,99,32,0,1,99,161,32,79,99,99,0,1,101,161,32,103,101,101,1,41,101,101,8,20,99,99,101,0,86,99,0,1,99,163,32,79,99,99,0,1,101,163,32,103,101,101,1,41,101,101,8,20,99,99,101,0,87,99,0,1,101,16,0,1,100,1,0,19,98,86,97,1,102,130,0,4,98,98,102,28,98,98,2,38,98,98,255,19,98,98,97,19,102,87,97,26,102,102,64,28,102,102,2,38,102,102,255,19,102,102,97,1,103,0,0,135,99,18,0,101,100,98,102,103,0,0,0,0,88,75,0,1,99,30,16,19,103,88,97,90,89,99,103,0,90,75,0,1,99,230,16,19,103,90,97,90,91,99,103,0,6,75,0,1,99,74,17,19,103,6,97,90,7,99,103,1,99,161,32,79,99,99,0,1,103,161,32,103,103,103,1,41,103,103,8,20,99,99,103,0,8,99,0,0,9,75,0,1,99,174,17,19,103,9,97,90,10,99,103,1,99,163,32,79,99,99,0,1,103,163,32,103,103,103,1,41,103,103,8,20,99,99,103,0,11,99,0,19,103,89,96,1,102,0,0,1,98,0,0,19,100,8,97,1,101,130,0,4,100,100,101,28,100,100,2,38,100,100,255,19,101,10,96,3,100,100,101,19,100,100,97,19,101,11,97,26,101,101,64,28,101,101,2,38,101,101,255,19,101,101,97,134,99,0,0,76,111,0,0,103,102,91,7,98,100,101,0,103,99,93,26,25,101,93,26,103,101,101,1,41,101,101,8,20,99,99,101,0,13,99,0,41,99,13,16,42,99,99,16,33,99,99,0,121,99,149,0,19,99,1,96,38,99,99,1,33,99,99,0,121,99,27,0,102,14,93,61,135,15,62,0,14,0,0,0,134,16,0,0,240,136,2,0,15,0,0,0,0,12,16,0,1,18,24,0,2,99,0,0,92,180,2,0,82,17,99,0,103,99,93,26,25,101,93,26,103,101,101,1,41,101,101,8,20,99,99,101,0,19,99,0,0,20,12,0,135,21,88,0,17,19,20,0,19,101,21,96,107,93,26,101,25,101,93,26,42,99,21,8,107,101,1,99,119,0,18,0,1,18,23,0,2,99,0,0,92,180,2,0,82,22,99,0,103,99,93,26,25,101,93,26,103,101,101,1,41,101,101,8,20,99,99,101,0,23,99,0,135,24,77,0,22,23,0,0,19,101,24,96,107,93,26,101,25,101,93,26,42,99,24,8,107,101,1,99,2,99,0,0,222,214,2,0,78,25,99,0,41,99,25,24,42,99,99,24,33,99,99,0,121,99,72,0,0,26,18,0,25,101,93,31,135,99,65,0,26,101,0,0,1,99,161,32,79,99,99,0,1,101,161,32,103,101,101,1,41,101,101,8,20,99,99,101,0,27,99,0,1,99,163,32,79,99,99,0,1,101,163,32,103,101,101,1,41,101,101,8,20,99,99,101,0,28,99,0,19,101,27,97,1,100,130,0,4,101,101,100,28,101,101,2,38,101,101,255,25,101,101,40,19,101,101,97,19,100,28,97,26,100,100,64,28,100,100,2,38,100,100,255,25,100,100,2,19,100,100,97,25,98,93,31,135,99,7,0,101,100,98,0,1,99,161,32,79,99,99,0,1,98,161,32,103,98,98,1,41,98,98,8,20,99,99,98,0,29,99,0,1,99,163,32,79,99,99,0,1,98,163,32,103,98,98,1,41,98,98,8,20,99,99,98,0,30,99,0,103,99,93,26,25,98,93,26,103,98,98,1,41,98,98,8,20,99,99,98,0,32,99,0,19,98,29,97,1,100,130,0,4,98,98,100,28,98,98,2,38,98,98,255,25,98,98,40,19,98,98,96,19,100,30,97,26,100,100,64,28,100,100,2,38,100,100,255,25,100,100,40,19,100,100,96,134,99,0,0,36,125,2,0,98,100,32,0,119,0,19,0,19,99,1,96,38,99,99,1,33,99,99,0,1,100,43,0,1,98,45,0,125,33,99,100,98,0,0,0,102,34,93,61,103,98,93,26,25,100,93,26,103,100,100,1,41,100,100,8,20,98,98,100,0,35,98,0,19,100,33,96,134,98,0,0,108,89,2,0,100,34,35,0,1,100,50,0,1,99,0,0,134,98,0,0,16,135,2,0,100,99,0,0,19,98,72,96,19,99,73,96,14,98,98,99,38,98,98,1,19,98,98,96,19,98,98,96,33,98,98,0,120,98,18,0,1,99,42,18,1,100,0,0,134,98,0,0,16,21,1,0,99,100,0,0,103,98,93,26,25,100,93,26,103,100,100,1,41,100,100,8,20,98,98,100,0,60,98,0,135,62,80,0,60,0,0,0,19,98,62,96,0,63,98,0,137,93,0,0,139,63,0,0,102,36,93,56,19,98,36,96,33,98,98,0,120,98,18,0,1,100,42,18,1,99,0,0,134,98,0,0,16,21,1,0,100,99,0,0,103,98,93,26,25,99,93,26,103,99,99,1,41,99,99,8,20,98,98,99,0,60,98,0,135,62,80,0,60,0,0,0,19,98,62,96,0,63,98,0,137,93,0,0,139,63,0,0,102,37,93,56,19,98,37,96,33,98,98,8,120,98,18,0,1,99,42,18,1,100,0,0,134,98,0,0,16,21,1,0,99,100,0,0,103,98,93,26,25,100,93,26,103,100,100,1,41,100,100,8,20,98,98,100,0,60,98,0,135,62,80,0,60,0,0,0,19,98,62,96,0,63,98,0,137,93,0,0,139,63,0,0,1,98,18,18,135,38,0,0,98,0,0,0,33,98,38,0,121,98,75,0,1,51,18,18,0,39,51,0,1,98,0,0,53,98,39,98,204,225,0,0,119,0,69,0,135,40,1,0,0,58,40,0,0,41,58,0,1,98,0,0,53,98,41,98,232,225,0,0,119,0,40,0,0,42,58,0,82,43,42,0,106,44,43,8,0,61,44,0,0,45,61,0,1,98,0,0,53,98,45,98,12,226,0,0,119,0,26,0,0,46,61,0,1,100,1,0,25,99,93,61,1,101,0,0,1,102,0,0,135,98,2,0,46,95,100,99,101,102,0,0,0,47,61,0,1,102,0,0,25,101,93,56,1,99,0,0,1,100,0,0,135,98,2,0,47,94,102,101,99,100,0,0,0,48,51,0,0,49,58,0,134,50,0,0,16,21,1,0,48,49,0,0,32,98,50,0,120,98,10,0,1,61,0,0,119,0,227,255,0,53,58,0,135,98,3,0,53,0,0,0,1,58,0,0,119,0,213,255,1,51,0,0,119,0,204,255,0,52,58,0,135,98,3,0,52,0,0,0,1,100,42,18,1,99,0,0,134,98,0,0,16,21,1,0,100,99,0,0,103,98,93,26,25,99,93,26,103,99,99,1,41,99,99,8,20,98,98,99,0,60,98,0,135,62,80,0,60,0,0,0,19,98,62,96,0,63,98,0,137,93,0,0,139,63,0,0,102,54,93,61,135,55,62,0,54,0,0,0,25,99,93,31,134,98,0,0,116,120,2,0,55,99,0,0,25,98,93,31,135,56,4,0,98,0,0,0,19,98,56,97,0,12,98,0,0,57,12,0,25,98,93,31,19,99,57,97,3,31,98,99,1,98,27,0,135,99,65,0,98,31,0,0,102,59,93,56,19,98,59,96,25,98,98,28,19,98,98,96,25,100,31,8,135,99,65,0,98,100,0,0,1,100,36,0,25,98,31,8,25,98,98,4,135,99,65,0,100,98,0,0,25,98,93,31,1,100,1,0,134,99,0,0,80,21,2,0,98,100,0,0,1,100,42,18,1,98,0,0,134,99,0,0,16,21,1,0,100,98,0,0,103,99,93,26,25,98,93,26,103,98,98,1,41,98,98,8,20,99,99,98,0,60,99,0,135,62,80,0,60,0,0,0,19,99,62,96,0,63,99,0,137,93,0,0,139,63,0,0,140,1,87,0,0,0,0,0,2,81,0,0,255,255,0,0,2,82,0,0,164,215,2,0,2,83,0,0,255,0,0,0,1,78,0,0,136,84,0,0,0,79,84,0,136,84,0,0,25,84,84,96,137,84,0,0,2,84,0,0,140,180,2,0,82,26,84,0,135,33,73,0,135,44,29,0,0,26,0,0,33,84,44,0,120,84,3,0,137,79,0,0,139,0,0,0,135,45,52,0,9,84,45,44,38,84,84,255,41,84,84,1,91,84,26,84,9,85,45,44,38,85,85,255,41,85,85,1,3,85,26,85,103,85,85,1,41,85,85,8,20,84,84,85,0,46,84,0,1,84,43,20,78,47,84,0,19,84,47,83,32,84,84,0,121,84,14,0,2,84,0,0,162,215,2,0,78,48,84,0,19,84,48,83,30,84,84,3,38,84,84,255,33,84,84,0,120,84,6,0,19,85,46,81,27,85,85,19,3,85,82,85,135,84,89,0,85,0,0,0,1,53,0,0,0,49,53,0,55,84,49,44,164,228,0,0,1,78,36,0,119,0,47,1,135,50,52,0,30,84,50,9,38,84,84,255,0,63,84,0,0,51,63,0,1,85,0,0,1,84,9,0,138,51,85,84,140,229,0,0,152,229,0,0,0,230,0,0,4,230,0,0,8,230,0,0,12,230,0,0,16,230,0,0,28,230,0,0,76,233,0,0,0,38,53,0,41,84,38,1,91,84,26,84,41,85,38,1,3,85,26,85,103,85,85,1,41,85,85,8,20,84,84,85,0,39,84,0,25,84,79,44,19,85,39,83,107,84,1,85,25,85,79,44,25,85,85,1,42,84,39,8,107,85,1,84,25,84,79,44,107,84,3,0,25,84,79,44,1,85,0,0,107,84,13,85,25,85,79,44,134,40,0,0,12,186,2,0,85,0,0,0,41,85,40,24,42,85,85,24,33,85,85,0,121,85,254,0,0,41,53,0,41,85,41,1,91,85,26,85,41,84,41,1,3,84,26,84,103,84,84,1,41,84,84,8,20,85,85,84,0,42,85,0,135,85,31,0,0,42,0,0,119,0,242,0,1,85,23,0,107,79,44,85,119,0,239,0,134,52,0,0,240,136,2,0,46,0,0,0,19,85,46,81,27,85,85,19,3,85,82,85,19,84,52,83,107,85,12,84,19,84,46,81,27,84,84,19,3,84,82,84,25,84,84,12,42,85,52,8,107,84,1,85,1,84,24,0,107,79,44,84,25,84,79,44,1,85,0,0,19,85,85,83,107,84,6,85,25,85,79,44,25,85,85,6,1,84,0,0,42,84,84,8,107,85,1,84,119,0,213,0,119,0,230,255,119,0,229,255,119,0,228,255,119,0,227,255,1,85,26,0,107,79,44,85,119,0,206,0,2,85,0,0,140,180,2,0,82,54,85,0,1,85,160,15,3,17,54,85,0,55,53,0,1,85,1,0,57,85,85,55,72,233,0,0,41,85,33,1,3,85,26,85,135,56,90,0,0,85,0,0,19,85,56,83,0,2,85,0,0,58,2,0,33,85,58,0,121,85,188,0,135,59,52,0,0,60,2,0,41,85,60,1,9,85,59,85,38,85,85,255,0,63,85,0,0,61,63,0,0,62,2,0,57,85,62,61,72,233,0,0,0,64,2,0,19,85,64,83,41,84,33,1,3,84,26,84,135,65,91,0,85,84,0,0,25,84,79,44,19,85,65,83,19,85,85,83,107,84,4,85,25,85,79,44,25,85,85,4,19,84,65,83,42,84,84,8,107,85,1,84,135,66,29,0,0,17,0,0,0,73,66,0,0,67,73,0,33,84,67,0,121,84,157,0,1,2,0,0,1,2,0,0,0,68,2,0,0,69,73,0,26,84,69,1,55,84,68,84,0,231,0,0,119,0,122,0,0,70,2,0,25,57,70,1,0,71,57,0,0,72,73,0,55,84,71,72,28,231,0,0,119,0,112,0,0,74,2,0,41,84,74,1,91,84,17,84,41,85,74,1,3,85,17,85,103,85,85,1,41,85,85,8,20,84,84,85,0,75,84,0,19,84,75,81,27,84,84,19,3,84,82,84,103,84,84,12,19,85,75,81,27,85,85,19,3,85,82,85,25,85,85,12,103,85,85,1,41,85,85,8,20,84,84,85,0,76,84,0,0,3,57,0,41,84,3,1,91,84,17,84,41,85,3,1,3,85,17,85,103,85,85,1,41,85,85,8,20,84,84,85,0,4,84,0,19,84,4,81,27,84,84,19,3,84,82,84,103,84,84,12,19,85,4,81,27,85,85,19,3,85,82,85,25,85,85,12,103,85,85,1,41,85,85,8,20,84,84,85,0,5,84,0,19,84,76,81,19,85,5,81,47,84,84,85,92,232,0,0,0,6,57,0,41,84,6,1,91,84,17,84,41,85,6,1,3,85,17,85,103,85,85,1,41,85,85,8,20,84,84,85,0,7,84,0,0,8,2,0,41,84,8,1,91,84,17,84,41,85,8,1,3,85,17,85,103,85,85,1,41,85,85,8,20,84,84,85,0,9,84,0,0,10,57,0,41,84,10,1,19,85,9,83,95,17,84,85,41,85,10,1,3,85,17,85,42,84,9,8,107,85,1,84,0,11,2,0,41,84,11,1,19,85,7,83,95,17,84,85,41,85,11,1,3,85,17,85,42,84,7,8,107,85,1,84,26,84,44,1,41,84,84,1,91,84,17,84,26,85,44,1,41,85,85,1,3,85,17,85,103,85,85,1,41,85,85,8,20,84,84,85,0,12,84,0,19,84,12,81,27,84,84,19,3,84,82,84,103,84,84,12,19,85,12,81,27,85,85,19,3,85,82,85,25,85,85,12,103,85,85,1,41,85,85,8,20,84,84,85,0,13,84,0,41,84,13,16,42,84,84,16,33,84,84,0,120,84,3,0,0,14,73,0,26,73,14,1,0,15,57,0,25,57,15,1,119,0,141,255,0,16,2,0,25,2,16,1,119,0,130,255,79,84,17,0,103,85,17,1,41,85,85,8,20,84,84,85,0,18,84,0,19,84,18,81,27,84,84,19,3,84,82,84,103,84,84,12,19,85,18,81,27,85,85,19,3,85,82,85,25,85,85,12,103,85,85,1,41,85,85,8,20,84,84,85,0,19,84,0,0,20,73,0,19,84,19,81,1,85,232,3,15,84,84,85,35,85,20,4,20,84,84,85,120,84,4,0,119,0,6,0,119,0,2,0,119,0,1,0,0,43,53,0,25,53,43,1,119,0,206,254,32,85,78,36,121,85,3,0,137,79,0,0,139,0,0,0,1,84,27,0,107,79,44,84,25,77,79,60,25,80,77,20,1,84,0,0,83,77,84,0,25,77,77,1,54,84,77,80,124,233,0,0,0,21,73,0,26,73,21,1,0,22,73,0,1,85,10,0,48,85,85,22,180,233,0,0,1,85,10,0,0,84,85,0,119,0,3,0,26,85,21,1,0,84,85,0,0,1,84,0,0,73,1,0,1,57,0,0,0,23,57,0,0,24,73,0,55,84,23,24,220,233,0,0,119,0,29,0,0,25,57,0,41,84,25,1,91,84,17,84,41,85,25,1,3,85,17,85,103,85,85,1,41,85,85,8,20,84,84,85,0,27,84,0,0,28,57,0,25,84,79,60,41,85,28,1,19,86,27,81,25,86,86,1,19,86,86,81,19,86,86,83,95,84,85,86,25,86,79,60,41,85,28,1,3,86,86,85,19,85,27,81,25,85,85,1,19,85,85,81,42,85,85,8,107,86,1,85,0,29,57,0,25,57,29,1,119,0,224,255,25,85,79,44,107,85,3,0,2,85,0,0,20,108,3,0,19,86,0,83,27,86,86,37,3,85,85,86,103,85,85,25,2,86,0,0,20,108,3,0,19,84,0,83,27,84,84,37,3,86,86,84,25,86,86,25,103,86,86,1,41,86,86,8,20,85,85,86,0,30,85,0,25,85,79,44,19,86,30,83,107,85,8,86,25,86,79,44,25,86,86,8,42,85,30,8,107,86,1,85,25,85,79,44,1,86,0,0,107,85,13,86,25,86,79,44,25,85,79,60,134,31,0,0,36,156,2,0,86,85,0,0,41,85,31,24,42,85,85,24,33,85,85,0,120,85,3,0,137,79,0,0,139,0,0,0,1,57,0,0,0,32,57,0,0,34,73,0,55,85,32,34,0,235,0,0,119,0,15,0,0,35,57,0,41,85,35,1,91,85,17,85,41,86,35,1,3,86,17,86,103,86,86,1,41,86,86,8,20,85,85,86,0,36,85,0,135,85,31,0,0,36,0,0,0,37,57,0,25,57,37,1,119,0,238,255,137,79,0,0,139,0,0,0,140,1,80,0,0,0,0,0,2,69,0,0,255,0,0,0,2,70,0,0,255,255,0,0,2,71,0,0,48,2,0,0,2,72,0,0,20,108,3,0,2,73,0,0,87,176,3,0,2,74,0,0,86,176,3,0,2,75,0,0,84,176,3,0,1,66,0,0,136,76,0,0,0,67,76,0,136,76,0,0,1,77,80,2,3,76,76,77,137,76,0,0,1,53,0,0,1,76,27,0,135,14,92,0,0,76,0,0,41,76,14,24,42,76,76,24,33,76,76,0,120,76,9,0,1,77,59,0,134,76,0,0,52,222,2,0,77,0,0,0,1,1,1,0,0,33,1,0,137,67,0,0,139,33,0,0,1,76,35,20,78,20,76,0,19,76,20,69,33,76,76,0,121,76,26,0,19,76,0,69,27,76,76,37,3,76,72,76,103,76,76,25,19,77,0,69,27,77,77,37,3,77,72,77,25,77,77,25,103,77,77,1,41,77,77,8,20,76,76,77,0,34,76,0,19,76,34,70,32,76,76,0,121,76,11,0,2,77,0,0,8,169,2,0,1,78,2,0,134,76,0,0,80,21,2,0,77,78,0,0,1,1,1,0,0,33,1,0,137,67,0,0,139,33,0,0,78,35,74,0,78,36,73,0,2,76,0,0,140,180,2,0,82,37,76,0,135,38,29,0,0,37,0,0,0,49,38,0,0,39,49,0,33,76,39,0,120,76,9,0,1,78,96,0,134,76,0,0,52,222,2,0,78,0,0,0,1,1,1,0,0,33,1,0,137,67,0,0,139,33,0,0,3,65,67,71,25,68,65,20,1,76,0,0,83,65,76,0,25,65,65,1,54,76,65,68,168,236,0,0,1,7,0,0,0,40,7,0,35,76,40,10,120,76,2,0,119,0,93,0,135,76,30,0,0,41,53,0,0,42,49,0,19,76,41,70,50,76,42,76,248,236,0,0,0,43,49,0,26,76,43,1,19,76,76,70,0,53,76,0,0,44,49,0,0,45,53,0,1,76,161,32,79,76,76,0,1,78,161,32,103,78,78,1,41,78,78,8,20,76,76,78,0,46,76,0,1,76,163,32,79,76,76,0,1,78,163,32,103,78,78,1,41,78,78,8,20,76,76,78,0,47,76,0,1,76,4,0,1,78,2,0,19,77,46,70,26,77,77,1,26,77,77,4,19,77,77,69,19,79,47,70,26,79,79,1,26,79,79,2,19,79,79,69,134,48,0,0,24,121,0,0,37,44,45,76,78,77,79,0,0,53,48,0,0,50,53,0,19,79,50,70,53,79,70,79,136,237,0,0,119,0,47,0,0,51,53,0,19,79,51,70,41,79,79,1,91,79,37,79,19,77,51,70,41,77,77,1,3,77,37,77,103,77,77,1,41,77,77,8,20,79,79,77,0,52,79,0,0,54,7,0,3,79,67,71,41,77,54,1,19,78,52,70,25,78,78,1,19,78,78,70,19,78,78,69,95,79,77,78,3,78,67,71,41,77,54,1,3,78,78,77,19,77,52,70,25,77,77,1,19,77,77,70,42,77,77,8,107,78,1,77,0,55,53,0,19,77,55,70,41,77,77,1,91,77,37,77,19,78,55,70,41,78,78,1,3,78,37,78,103,78,78,1,41,78,78,8,20,77,77,78,0,56,77,0,135,77,31,0,0,56,0,0,135,57,29,0,0,37,0,0,0,49,57,0,0,58,7,0,25,7,58,1,119,0,161,255,0,59,7,0,33,77,59,0,121,77,60,1,135,77,30,0,19,77,0,69,27,77,77,37,3,77,72,77,103,77,77,25,19,78,0,69,27,78,78,37,3,78,72,78,25,78,78,25,103,78,78,1,41,78,78,8,20,77,77,78,0,60,77,0,1,77,1,0,134,61,0,0,32,44,2,0,77,60,0,0,25,77,67,30,19,78,61,69,107,77,8,78,25,78,67,30,25,78,78,8,42,77,61,8,107,78,1,77,25,77,67,30,103,77,77,8,25,78,67,30,25,78,78,8,103,78,78,1,41,78,78,8,20,77,77,78,0,62,77,0,19,77,62,70,45,77,70,77,76,239,0,0,0,63,7,0,26,7,63,1,0,64,7,0,1,77,1,0,25,78,64,1,19,78,78,69,19,78,78,69,56,77,77,78,0,239,0,0,119,0,15,1,0,2,7,0,3,77,67,71,41,78,2,1,91,77,77,78,3,78,67,71,41,79,2,1,3,78,78,79,103,78,78,1,41,78,78,8,20,77,77,78,0,3,77,0,19,78,3,70,26,78,78,1,19,78,78,70,135,77,32,0,0,78,0,0,0,4,7,0,26,7,4,1,119,0,230,255,1,78,64,0,1,79,93,0,25,76,67,48,135,77,17,0,78,79,76,0,135,77,30,0,91,77,67,71,3,76,67,71,103,76,76,1,41,76,76,8,20,77,77,76,0,5,77,0,19,76,5,70,26,76,76,1,19,76,76,70,25,79,67,48,134,77,0,0,76,29,2,0,76,79,0,0,134,6,0,0,84,80,0,0,75,0,0,0,19,77,6,69,45,77,69,77,184,239,0,0,1,66,20,0,119,0,58,0,19,77,6,69,19,79,0,69,53,77,77,79,204,239,0,0,119,0,225,255,19,77,6,69,27,77,77,37,3,77,72,77,103,77,77,1,19,79,6,69,27,79,79,37,3,79,72,79,25,79,79,1,103,79,79,1,41,79,79,8,20,77,77,79,0,13,77,0,19,77,0,69], eb + 51200);
  HEAPU8.set([27,77,77,37,3,77,72,77,103,77,77,1,19,79,0,69,27,79,79,37,3,79,72,79,25,79,79,1,103,79,79,1,41,79,79,8,20,77,77,79,0,15,77,0,19,77,13,70,19,79,15,70,45,77,77,79,80,240,0,0,1,79,58,0,134,77,0,0,52,222,2,0,79,0,0,0,119,0,192,255,78,16,74,0,78,17,73,0,19,77,35,69,19,77,77,69,19,79,36,69,19,79,79,69,19,76,6,69,19,76,76,69,135,18,93,0,0,77,79,76,16,17,0,0,19,76,18,69,53,76,69,76,156,240,0,0,1,79,55,0,134,76,0,0,52,222,2,0,79,0,0,0,119,0,173,255,32,76,66,20,121,76,30,0,0,8,7,0,26,7,8,1,0,9,7,0,1,76,1,0,25,79,9,1,19,79,79,69,19,79,79,69,56,76,76,79,204,240,0,0,119,0,156,0,0,10,7,0,3,76,67,71,41,79,10,1,91,76,76,79,3,79,67,71,41,77,10,1,3,79,79,77,103,79,79,1,41,79,79,8,20,76,76,79,0,11,76,0,19,79,11,70,26,79,79,1,19,79,79,70,135,76,32,0,0,79,0,0,0,12,7,0,26,7,12,1,119,0,230,255,1,79,94,0,134,76,0,0,52,222,2,0,79,0,0,0,1,76,36,20,78,19,76,0,41,76,19,24,42,76,76,24,33,76,76,0,121,76,38,0,19,76,0,69,27,76,76,37,3,76,72,76,103,76,76,25,19,79,0,69,27,79,79,37,3,79,72,79,25,79,79,25,103,79,79,1,41,79,79,8,20,76,76,79,0,21,76,0,25,76,67,30,103,76,76,8,25,79,67,30,25,79,79,8,103,79,79,1,41,79,79,8,20,76,76,79,0,22,76,0,1,76,0,0,19,79,22,70,4,76,76,79,135,23,58,0,21,76,0,0,19,76,0,69,27,76,76,37,3,76,72,76,19,79,23,69,107,76,25,79,19,79,0,69,27,79,79,37,3,79,72,79,25,79,79,25,42,76,23,8,107,79,1,76,119,0,30,0,25,76,67,30,103,76,76,8,25,79,67,30,25,79,79,8,103,79,79,1,41,79,79,8,20,76,76,79,0,24,76,0,19,76,0,69,27,76,76,37,3,76,72,76,25,25,76,25,79,76,25,0,103,79,25,1,41,79,79,8,20,76,76,79,0,26,76,0,19,76,26,70,19,79,24,70,4,76,76,79,19,76,76,70,19,76,76,69,83,25,76,0,19,79,26,70,19,77,24,70,4,79,79,77,19,79,79,70,42,79,79,8,107,25,1,79,1,76,27,0,135,79,94,0,0,76,0,0,1,76,27,0,107,67,30,76,25,76,67,30,107,76,3,0,25,76,67,30,19,79,6,69,19,79,79,70,19,79,79,69,107,76,4,79,25,79,67,30,25,79,79,4,19,76,6,69,19,76,76,70,42,76,76,8,107,79,1,76,25,76,67,30,19,79,18,69,19,79,79,69,107,76,13,79,25,79,67,30,3,76,67,71,134,27,0,0,36,156,2,0,79,76,0,0,41,76,27,24,42,76,76,24,33,76,76,0,120,76,30,0,0,28,7,0,26,7,28,1,0,29,7,0,1,76,1,0,25,79,29,1,19,79,79,69,19,79,79,69,56,76,76,79,236,242,0,0,119,0,20,0,0,30,7,0,3,76,67,71,41,79,30,1,91,76,76,79,3,79,67,71,41,77,30,1,3,79,79,77,103,79,79,1,41,79,79,8,20,76,76,79,0,31,76,0,19,79,31,70,26,79,79,1,19,79,79,70,135,76,32,0,0,79,0,0,0,32,7,0,26,7,32,1,119,0,230,255,1,1,1,0,0,33,1,0,137,67,0,0,139,33,0,0,140,1,73,0,0,0,0,0,2,62,0,0,255,255,0,0,2,63,0,0,255,0,0,0,2,64,0,0,161,32,0,0,2,65,0,0,163,32,0,0,2,66,0,0,48,117,0,0,2,67,0,0,36,20,0,0,1,60,0,0,136,68,0,0,0,61,68,0,136,68,0,0,25,68,68,64,137,68,0,0,2,68,0,0,140,180,2,0,82,6,68,0,135,16,29,0,0,6,0,0,0,41,16,0,0,21,41,0,33,68,21,0,120,68,3,0,1,60,3,0,119,0,225,0,0,32,41,0,79,68,64,0,103,69,64,1,41,69,69,8,20,68,68,69,0,35,68,0,79,68,65,0,103,69,65,1,41,69,69,8,20,68,68,69,0,39,68,0,1,68,0,0,1,69,4,0,1,70,2,0,19,71,35,62,26,71,71,1,26,71,71,4,19,71,71,63,19,72,39,62,26,72,72,1,26,72,72,2,19,72,72,63,134,40,0,0,24,121,0,0,6,32,68,69,70,71,72,0,19,72,40,62,53,72,62,72,64,244,0,0,1,60,26,0,119,0,194,0,19,72,40,62,41,72,72,1,91,72,6,72,19,71,40,62,41,71,71,1,3,71,6,71,103,71,71,1,41,71,71,8,20,72,72,71,0,42,72,0,1,72,11,0,135,43,85,0,42,72,0,0,41,72,43,24,42,72,72,24,33,72,72,0,120,72,6,0,1,71,60,0,134,72,0,0,52,222,2,0,71,0,0,0,119,0,196,255,2,72,0,0,20,108,3,0,19,71,0,63,27,71,71,37,3,2,72,71,1,72,64,0,1,70,46,0,25,69,61,46,135,71,17,0,72,70,69,0,79,71,64,0,103,69,64,1,41,69,69,8,20,71,71,69,0,44,71,0,19,71,44,62,26,71,71,1,28,71,71,2,38,71,71,255,25,71,71,0,19,71,71,62,0,45,71,0,19,69,45,63,107,61,24,69,25,69,61,24,42,71,45,8,107,69,1,71,79,71,64,0,103,69,64,1,41,69,69,8,20,71,71,69,0,46,71,0,19,71,46,62,26,71,71,1,28,71,71,2,38,71,71,255,25,71,71,0,25,71,71,24,19,71,71,62,0,47,71,0,25,71,61,24,19,69,47,63,107,71,4,69,25,69,61,24,25,69,69,4,42,71,47,8,107,69,1,71,25,71,61,24,1,69,14,0,19,69,69,63,107,71,2,69,25,69,61,24,25,69,69,2,1,71,14,0,42,71,71,8,107,69,1,71,79,71,65,0,103,69,65,1,41,69,69,8,20,71,71,69,0,48,71,0,1,71,28,0,19,69,48,62,26,69,69,1,26,69,69,14,47,71,71,69,172,245,0,0,1,1,38,0,119,0,15,0,79,71,65,0,103,69,65,1,41,69,69,8,20,71,71,69,0,49,71,0,19,71,49,62,26,71,71,1,26,71,71,14,28,71,71,12,38,71,71,255,27,71,71,12,25,71,71,14,19,71,71,62,0,1,71,0,25,71,61,24,19,69,1,63,107,71,6,69,25,69,61,24,25,69,69,6,42,71,1,8,107,69,1,71,25,71,61,24,1,69,0,0,25,70,61,46,134,51,0,0,0,0,0,0,71,69,70,0,19,70,51,62,0,41,70,0,0,52,41,0,52,70,62,52,164,243,0,0,0,53,41,0,32,70,53,0,121,70,35,0,103,70,2,23,25,69,2,23,103,69,69,1,41,69,69,8,20,70,70,69,0,54,70,0,19,70,54,62,28,70,70,5,38,70,70,255,33,70,70,0,120,70,2,0,119,0,56,0,103,70,2,23,25,69,2,23,103,69,69,1,41,69,69,8,20,70,70,69,0,55,70,0,1,70,1,0,19,69,55,62,28,69,69,5,38,69,69,255,19,69,69,62,134,56,0,0,32,44,2,0,70,69,0,0,0,50,56,0,0,57,50,0,19,69,57,62,46,69,62,69,188,246,0,0,1,60,13,0,119,0,35,0,119,0,58,255,0,15,41,0,32,69,15,1,120,69,2,0,119,0,30,0,103,69,2,25,25,70,2,25,103,70,70,1,41,70,70,8,20,69,69,70,0,17,69,0,41,69,17,16,42,69,69,16,33,69,69,0,120,69,2,0,119,0,19,0,103,69,2,25,25,70,2,25,103,70,70,1,41,70,70,8,20,69,69,70,0,18,69,0,1,69,1,0,134,19,0,0,32,44,2,0,69,18,0,0,0,50,19,0,0,20,50,0,19,69,20,62,46,69,62,69,64,247,0,0,1,60,19,0,119,0,2,0,119,0,25,255,32,69,60,3,121,69,9,0,1,70,84,0,134,69,0,0,52,222,2,0,70,0,0,0,137,61,0,0,1,69,1,0,139,69,0,0,119,0,202,0,32,69,60,13,121,69,90,0,78,58,67,0,41,69,58,24,42,69,69,24,33,69,69,0,121,69,39,0,103,69,2,25,25,70,2,25,103,70,70,1,41,70,70,8,20,69,69,70,0,59,69,0,0,3,50,0,19,69,3,62,135,4,58,0,59,69,0,0,19,70,4,63,107,2,25,70,25,70,2,25,42,69,4,8,107,70,1,69,0,5,50,0,19,69,5,62,27,69,69,5,19,69,69,62,0,50,69,0,103,69,2,23,25,70,2,23,103,70,70,1,41,70,70,8,20,69,69,70,0,7,69,0,0,8,50,0,1,69,0,0,19,70,8,62,4,69,69,70,135,9,58,0,7,69,0,0,19,70,9,63,107,2,23,70,25,70,2,23,42,69,9,8,107,70,1,69,119,0,157,0,0,10,50,0,103,69,2,25,25,70,2,25,103,70,70,1,41,70,70,8,20,69,69,70,0,11,69,0,19,70,11,62,19,71,10,62,3,70,70,71,19,70,70,62,19,70,70,63,107,2,25,70,25,70,2,25,19,69,11,62,19,71,10,62,3,69,69,71,19,69,69,62,42,69,69,8,107,70,1,69,0,12,50,0,19,69,12,62,27,69,69,5,19,69,69,62,0,50,69,0,0,13,50,0,103,69,2,23,25,70,2,23,103,70,70,1,41,70,70,8,20,69,69,70,0,14,69,0,19,70,14,62,19,71,13,62,4,70,70,71,19,70,70,62,19,70,70,63,107,2,23,70,25,70,2,23,19,69,14,62,19,71,13,62,4,69,69,71,19,69,69,62,42,69,69,8,107,70,1,69,119,0,111,0,32,69,60,19,121,69,104,0,78,22,67,0,41,69,22,24,42,69,69,24,33,69,69,0,121,69,39,0,103,69,2,25,25,70,2,25,103,70,70,1,41,70,70,8,20,69,69,70,0,23,69,0,0,24,50,0,1,69,0,0,19,70,24,62,4,69,69,70,135,25,58,0,23,69,0,0,19,70,25,63,107,2,25,70,25,70,2,25,42,69,25,8,107,70,1,69,0,26,50,0,19,69,26,62,41,69,69,1,19,69,69,62,0,50,69,0,103,69,2,23,25,70,2,23,103,70,70,1,41,70,70,8,20,69,69,70,0,27,69,0,0,28,50,0,19,69,28,62,135,29,58,0,27,69,0,0,19,70,29,63,107,2,23,70,25,70,2,23,42,69,29,8,107,70,1,69,119,0,46,0,0,30,50,0,103,69,2,25,25,70,2,25,103,70,70,1,41,70,70,8,20,69,69,70,0,31,69,0,19,70,31,62,19,71,30,62,4,70,70,71,19,70,70,62,19,70,70,63,107,2,25,70,25,70,2,25,19,69,31,62,19,71,30,62,4,69,69,71,19,69,69,62,42,69,69,8,107,70,1,69,0,33,50,0,19,69,33,62,41,69,69,1,19,69,69,62,0,50,69,0,0,34,50,0,103,69,2,23,25,70,2,23,103,70,70,1,41,70,70,8,20,69,69,70,0,36,69,0,19,70,36,62,19,71,34,62,3,70,70,71,19,70,70,62,19,70,70,63,107,2,23,70,25,70,2,23,19,69,36,62,19,71,34,62,3,69,69,71,19,69,69,62,42,69,69,8,107,70,1,69,103,69,2,23,25,70,2,23,103,70,70,1,41,70,70,8,20,69,69,70,0,37,69,0,19,69,37,62,47,69,66,69,120,250,0,0,19,70,66,63,107,2,23,70,25,70,2,23,42,69,66,8,107,70,1,69,119,0,6,0,32,69,60,26,121,69,4,0,137,61,0,0,1,69,1,0,139,69,0,0,1,70,11,0,135,69,87,0,42,70,0,0,1,70,11,0,107,61,32,70,25,70,61,32,19,69,42,63,107,70,1,69,25,69,61,32,25,69,69,1,42,70,42,8,107,69,1,70,25,70,61,32,107,70,3,0,25,70,61,32,1,69,0,0,107,70,13,69,25,69,61,32,134,38,0,0,12,186,2,0,69,0,0,0,41,69,38,24,42,69,69,24,33,69,69,0,120,69,4,0,137,61,0,0,1,69,1,0,139,69,0,0,135,69,31,0,0,42,0,0,137,61,0,0,1,69,1,0,139,69,0,0,140,3,182,0,0,0,0,0,2,175,0,0,242,168,2,0,2,176,0,0,43,24,0,0,2,177,0,0,29,24,0,0,1,173,0,0,136,178,0,0,0,174,178,0,136,178,0,0,25,178,178,32,137,178,0,0,25,96,174,24,25,107,174,23,1,178,255,0,19,178,0,178,83,96,178,0,42,179,0,8,107,96,1,179,83,107,1,0,0,118,2,0,1,129,0,0,1,179,108,24,135,25,0,0,179,0,0,0,33,36,25,0,121,36,66,0,1,151,108,24,0,47,151,0,1,179,0,0,14,58,47,179,120,58,2,0,119,0,60,0,135,69,1,0,0,162,69,0,0,80,162,0,1,179,0,0,14,84,80,179,120,84,2,0,119,0,46,0,0,85,162,0,82,86,85,0,25,87,86,8,82,88,87,0,0,3,88,0,0,89,3,0,1,179,0,0,14,90,89,179,120,90,2,0,119,0,31,0,0,91,118,0,0,14,91,0,0,92,3,0,1,178,1,0,1,180,0,0,1,181,0,0,135,179,2,0,92,175,178,96,180,181,0,0,0,93,3,0,1,181,0,0,1,180,0,0,1,178,0,0,135,179,2,0,93,177,181,107,180,178,0,0,0,94,3,0,0,95,14,0,1,178,128,0,135,179,64,0,94,176,95,178,0,97,151,0,0,98,162,0,134,99,0,0,16,21,1,0,97,98,0,0,32,100,99,0,120,100,10,0,1,3,0,0,119,0,222,255,0,102,162,0,135,179,3,0,102,0,0,0,1,162,0,0,119,0,207,255,1,151,0,0,119,0,198,255,0,101,162,0,135,179,3,0,101,0,0,0,137,174,0,0,139,0,0,0,79,179,96,0,103,178,96,1,41,178,178,8,20,179,179,178,0,103,179,0,2,179,0,0,255,255,0,0,19,179,103,179,0,104,179,0,2,179,0,0,164,215,2,0,27,178,104,19,3,105,179,178,25,106,105,2,79,178,106,0,103,179,106,1,41,179,179,8,20,178,178,179,0,108,178,0,0,140,108,0,78,109,107,0,1,178,255,0,19,178,109,178,0,110,178,0,1,178,0,0,1,179,13,0,138,110,178,179,56,253,0,0,80,254,0,0,132,254,0,0,232,254,0,0,76,255,0,0,176,255,0,0,168,0,1,0,12,1,1,0,112,1,1,0,60,2,1,0,180,2,1,0,24,3,1,0,16,4,1,0,137,174,0,0,139,0,0,0,119,0,247,1,0,111,140,0,2,178,0,0,255,255,0,0,19,178,111,178,0,112,178,0,2,178,0,0,255,255,0,0,13,113,178,112,121,113,8,0,0,114,118,0,1,179,64,0,1,180,49,0,135,178,17,0,179,180,114,0,137,174,0,0,139,0,0,0,0,115,140,0,2,178,0,0,255,255,0,0,19,178,115,178,0,116,178,0,79,178,96,0,103,180,96,1,41,180,180,8,20,178,178,180,0,117,178,0,2,178,0,0,255,255,0,0,19,178,117,178,0,119,178,0,25,120,119,1,13,121,116,120,121,121,8,0,0,122,118,0,1,180,64,0,1,179,48,0,135,178,17,0,180,179,122,0,137,174,0,0,139,0,0,0,0,123,140,0,41,178,123,16,42,178,178,16,33,124,178,0,121,124,18,0,0,125,140,0,2,178,0,0,255,255,0,0,19,178,125,178,0,126,178,0,26,127,126,1,2,178,0,0,255,255,0,0,19,178,127,178,0,128,178,0,0,130,118,0,134,178,0,0,116,120,2,0,128,130,0,0,137,174,0,0,139,0,0,0,119,0,185,1,0,131,118,0,1,179,64,0,1,180,47,0,135,178,17,0,179,180,131,0,137,174,0,0,139,0,0,0,119,0,177,1,79,178,96,0,103,180,96,1,41,180,180,8,20,178,178,180,0,132,178,0,135,133,95,0,132,0,0,0,0,134,118,0,135,178,83,0,133,134,0,0,137,174,0,0,139,0,0,0,119,0,164,1,79,178,96,0,103,180,96,1,41,180,180,8,20,178,178,180,0,135,178,0,2,178,0,0,255,255,0,0,19,178,135,178,0,136,178,0,2,178,0,0,164,215,2,0,27,180,136,19,3,137,178,180,25,138,137,4,78,139,138,0,1,180,255,0,19,180,139,180,0,141,180,0,0,142,118,0,1,178,10,0,135,180,59,0,141,142,178,0,137,174,0,0,139,0,0,0,119,0,139,1,79,180,96,0,103,178,96,1,41,178,178,8,20,180,180,178,0,143,180,0,2,180,0,0,255,255,0,0,19,180,143,180,0,144,180,0,2,180,0,0,164,215,2,0,27,178,144,19,3,145,180,178,25,146,145,5,78,147,146,0,1,178,255,0,19,178,147,178,0,148,178,0,0,149,118,0,1,180,10,0,135,178,59,0,148,149,180,0,137,174,0,0,139,0,0,0,119,0,114,1,79,178,96,0,103,180,96,1,41,180,180,8,20,178,178,180,0,150,178,0,2,178,0,0,255,255,0,0,19,178,150,178,0,152,178,0,2,178,0,0,164,215,2,0,27,180,152,19,3,153,178,180,25,154,153,6,78,155,154,0,1,180,255,0,19,180,155,180,0,156,180,0,0,157,118,0,1,178,10,0,135,180,59,0,156,157,178,0,137,174,0,0,139,0,0,0,119,0,89,1,0,158,140,0,2,180,0,0,255,255,0,0,19,180,158,180,0,159,180,0,79,180,96,0,103,178,96,1,41,178,178,8,20,180,180,178,0,160,180,0,2,180,0,0,255,255,0,0,19,180,160,180,0,161,180,0,25,163,161,1,13,164,159,163,121,164,8,0,0,165,118,0,1,178,64,0,1,179,51,0,135,180,17,0,178,179,165,0,137,174,0,0,139,0,0,0,0,166,140,0,41,180,166,16,42,180,180,16,33,167,180,0,121,167,26,0,79,180,96,0,103,179,96,1,41,179,179,8,20,180,180,179,0,168,180,0,2,180,0,0,255,255,0,0,19,180,168,180,0,169,180,0,2,180,0,0,164,215,2,0,27,179,169,19,3,170,180,179,25,171,170,7,78,172,171,0,1,179,255,0,19,179,172,179,0,4,179,0,0,5,118,0,1,180,10,0,135,179,59,0,4,5,180,0,137,174,0,0,139,0,0,0,119,0,35,1,0,6,118,0,1,180,64,0,1,178,51,0,135,179,17,0,180,178,6,0,137,174,0,0,139,0,0,0,119,0,27,1,79,179,96,0,103,178,96,1,41,178,178,8,20,179,179,178,0,7,179,0,2,179,0,0,255,255,0,0,19,179,7,179,0,8,179,0,2,179,0,0,164,215,2,0,27,178,8,19,3,9,179,178,25,10,9,9,78,11,10,0,1,178,255,0,19,178,11,178,0,12,178,0,0,13,118,0,1,179,10,0,135,178,59,0,12,13,179,0,137,174,0,0,139,0,0,0,119,0,2,1,79,178,96,0,103,179,96,1,41,179,179,8,20,178,178,179,0,15,178,0,2,178,0,0,255,255,0,0,19,178,15,178,0,16,178,0,2,178,0,0,164,215,2,0,27,179,16,19,3,17,178,179,25,18,17,10,78,19,18,0,1,179,255,0,19,179,19,179,0,20,179,0,0,21,118,0,1,178,10,0,135,179,59,0,20,21,178,0,137,174,0,0,139,0,0,0,119,0,233,0,79,179,96,0,103,178,96,1,41,178,178,8,20,179,179,178,0,22,179,0,2,179,0,0,255,255,0,0,19,179,22,179,0,23,179,0,2,179,0,0,164,215,2,0,27,178,23,19,3,24,179,178,135,26,67,0,24,0,0,0,1,178,255,0,19,178,26,178,0,27,178,0,1,178,0,0,1,179,6,0,138,27,178,179,224,1,1,0,232,1,1,0,240,1,1,0,248,1,1,0,0,2,1,0,8,2,1,0,119,0,13,0,1,129,17,0,119,0,11,0,1,129,18,0,119,0,9,0,1,129,19,0,119,0,7,0,1,129,20,0,119,0,5,0,1,129,21,0,119,0,3,0,1,129,22,0,119,0,1,0,0,28,129,0,1,178,255,0,19,178,28,178,0,29,178,0,0,30,118,0,1,179,64,0,135,178,17,0,179,29,30,0,137,174,0,0,139,0,0,0,119,0,182,0,79,178,96,0,103,179,96,1,41,179,179,8,20,178,178,179,0,31,178,0,2,178,0,0,255,255,0,0,19,178,31,178,0,32,178,0,2,178,0,0,164,215,2,0,27,179,32,19,3,33,178,179,25,34,33,12,79,179,34,0,103,178,34,1,41,178,178,8,20,179,179,178,0,35,179,0,2,179,0,0,255,255,0,0,19,179,35,179,0,37,179,0,0,38,118,0,1,178,10,0,135,179,59,0,37,38,178,0,137,174,0,0,139,0,0,0,119,0,152,0,79,179,96,0,103,178,96,1,41,178,178,8,20,179,179,178,0,39,179,0,2,179,0,0,255,255,0,0,19,179,39,179,0,40,179,0,2,179,0,0,164,215,2,0,27,178,40,19,3,41,179,178,25,42,41,18,78,43,42,0,1,178,255,0,19,178,43,178,0,44,178,0,0,45,118,0,1,179,10,0,135,178,59,0,44,45,179,0,137,174,0,0,139,0,0,0,119,0,127,0,0,46,118,0,1,178,0,0,83,46,178,0,79,178,96,0,103,179,96,1,41,179,179,8,20,178,178,179,0,48,178,0,2,178,0,0,255,255,0,0,19,178,48,178,0,49,178,0,2,178,0,0,164,215,2,0,27,179,49,19,3,50,178,179,25,51,50,14,79,179,51,0,103,178,51,1,41,178,178,8,20,179,179,178,0,52,179,0,41,179,52,16,42,179,179,16,33,53,179,0,120,53,3,0,137,174,0,0,139,0,0,0,79,179,96,0,103,178,96,1,41,178,178,8,20,179,179,178,0,54,179,0,2,179,0,0,255,255,0,0,19,179,54,179,0,55,179,0,2,179,0,0,164,215,2,0,27,178,55,19,3,56,179,178,25,57,56,14,79,178,57,0,103,179,57,1,41,179,179,8,20,178,178,179,0,59,178,0,2,178,0,0,255,255,0,0,19,178,59,178,0,60,178,0,26,61,60,1,2,178,0,0,255,255,0,0,19,178,61,178,0,62,178,0,0,63,118,0,135,178,54,0,62,63,0,0,137,174,0,0,139,0,0,0,119,0,65,0,0,64,118,0,1,178,0,0,83,64,178,0,79,178,96,0,103,179,96,1,41,179,179,8,20,178,178,179,0,65,178,0,2,178,0,0,255,255,0,0,19,178,65,178,0,66,178,0,2,178,0,0,164,215,2,0,27,179,66,19,3,67,178,179,25,68,67,14,25,70,68,2,79,179,70,0,103,178,70,1,41,178,178,8,20,179,179,178,0,71,179,0,41,179,71,16,42,179,179,16,33,72,179,0,120,72,3,0,137,174,0,0,139,0,0,0,79,179,96,0,103,178,96,1,41,178,178,8,20,179,179,178,0,73,179,0,2,179,0,0,255,255,0,0,19,179,73,179,0,74,179,0,2,179,0,0,164,215,2,0,27,178,74,19,3,75,179,178,25,76,75,14,25,77,76,2,79,178,77,0,103,179,77,1,41,179,179,8,20,178,178,179,0,78,178,0,2,178,0,0,255,255,0,0,19,178,78,178,0,79,178,0,26,81,79,1,2,178,0,0,255,255,0,0,19,178,81,178,0,82,178,0,0,83,118,0,135,178,54,0,82,83,0,0,137,174,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,1,204,0,0,0,0,0,2,199,0,0,255,0,0,0,2,200,0,0,255,255,0,0,1,196,0,0,136,201,0,0,0,197,201,0,136,201,0,0,25,201,201,80,137,201,0,0,25,3,197,16,25,2,197,8,25,1,197,65,25,151,197,53,25,173,197,41,25,5,197,36,25,27,197,24,0,107,0,0,0,49,107,0,19,201,49,199,0,60,201,0,33,71,60,0,1,201,4,0,1,202,3,0,125,82,71,201,202,0,0,0,19,202,82,199,0,93,202,0,0,162,93,0,0,195,173,0,25,198,195,11,1,202,0,0,83,195,202,0,25,195,195,1,54,202,195,198,152,5,1,0,1,184,14,0,1,202,132,20,78,202,202,0,83,5,202,0,1,201,132,20,102,201,201,1,107,5,1,201,1,202,132,20,102,202,202,2,107,5,2,202,1,201,132,20,102,201,201,3,107,5,3,201,0,104,162,0,134,201,0,0,96,101,2,0,104,0,0,0,1,118,0,0,25,108,5,2,79,201,108,0,103,202,108,1,41,202,202,8,20,201,201,202,0,109,201,0,19,201,109,199,0,110,201,0,0,129,110,0,79,201,5,0,103,202,5,1,41,202,202,8,20,201,201,202,0,111,201,0,41,201,111,16,42,201,201,16,0,112,201,0,25,113,112,95,19,201,113,199,0,114,201,0,0,16,114,0,79,201,5,0,103,202,5,1,41,202,202,8,20,201,201,202,0,115,201,0,0,116,129,0,19,201,116,199,0,117,201,0,0,119,16,0,19,201,119,199,0,120,201,0,0,121,129,0,19,201,121,199,0,122,201,0,25,123,122,12,19,201,123,200,0,124,201,0,135,201,8,0,115,117,120,124,79,201,5,0,103,202,5,1,41,202,202,8,20,201,201,202,0,125,201,0,19,201,125,199,83,27,201,0,42,202,125,8,107,27,1,202,25,126,27,2,0,127,129,0,19,202,127,199,0,128,202,0,19,202,128,199,83,126,202,0,42,201,128,8,107,126,1,201,25,130,27,4,0,131,16,0,19,201,131,199,0,132,201,0,19,201,132,199,83,130,201,0,42,202,132,8,107,130,1,202,25,133,27,6,0,134,129,0,19,202,134,199,0,135,202,0,0,136,184,0,19,202,136,199,0,137,202,0,0,138,162,0,19,202,138,199,0,139,202,0,5,141,137,139,3,142,135,141,19,202,142,200,0,143,202,0,19,202,143,199,83,133,202,0,42,201,143,8,107,133,1,201,134,201,0,0,100,208,2,0,151,0,0,0,78,144,151,0,19,201,144,199,0,145,201,0,32,146,145,5,121,146,136,0,79,201,5,0,103,202,5,1,41,202,202,8,20,201,201,202,0,147,201,0,0,148,129,0,19,201,148,199,0,149,201,0,0,150,16,0,19,201,150,199,0,152,201,0,0,153,129,0,19,201,153,199,0,154,201,0,25,155,154,12,19,201,155,200,0,156,201,0,135,201,8,0,147,149,152,156,25,157,151,1,79,201,157,0,103,202,157,1,41,202,202,8,20,201,201,202,0,158,201,0,19,201,158,200,0,159,201,0,1,201,34,0,1,202,7,0,138,159,201,202,248,7,1,0,24,8,1,0,244,7,1,0,244,7,1,0,244,7,1,0,56,8,1,0,164,8,1,0,119,0,46,0,0,160,118,0,19,201,160,199,0,161,201,0,26,163,161,1,19,201,163,199,0,164,201,0,0,118,164,0,119,0,38,0,0,165,118,0,19,201,165,199,0,166,201,0,25,167,166,1,19,201,167,199,0,168,201,0,0,118,168,0,119,0,30,0,0,169,107,0,41,201,169,24,42,201,201,24,33,170,201,0,0,171,118,0,121,170,6,0,134,172,0,0,208,64,2,0,171,0,0,0,0,140,172,0,119,0,5,0,134,174,0,0,4,79,2,0,171,0,0,0,0,140,174,0,0,175,140,0,41,201,175,24,42,201,201,24,33,176,201,0,121,176,3,0,1,196,10,0,119,0,29,1,0,178,162,0,134,201,0,0,96,101,2,0,178,0,0,0,119,0,3,0,1,196,12,0,119,0,22,1,0,179,118,0,19,201,179,199,0,180,201,0,0,181,162,0,19,201,181,199,0,182,201,0,8,201,180,182,38,201,201,255,0,183,201,0,19,201,183,199,0,185,201,0,0,118,185,0,25,186,5,2,79,201,186,0,103,202,186,1,41,202,202,8,20,201,201,202,0,187,201,0,41,201,187,16,42,201,201,16,0,188,201,0,0,189,184,0,19,201,189,199,0,190,201,0,0,191,118,0,19,201,191,199,0,192,201,0,5,193,190,192,3,194,188,193,19,201,194,199,0,6,201,0,0,129,6,0,79,201,5,0,103,202,5,1,41,202,202,8,20,201,201,202,0,7,201,0,0,8,129,0,19,201,8,199,0,9,201,0,0,10,16,0,19,201,10,199,0,11,201,0,0,12,129,0,19,201,12,199,0,13,201,0,25,14,13,12,19,201,14,200,0,15,201,0,135,201,8,0,7,9,11,15,119,0,114,255,78,17,151,0,19,201,17,199,0,18,201,0,32,19,18,16,120,19,2,0,119,0,108,255,78,201,151,0,83,1,201,0,102,202,151,1,107,1,1,202,102,201,151,2,107,1,2,201,102,202,151,3,107,1,3,202,102,201,151,4,107,1,4,201,102,202,151,5,107,1,5,202,102,201,151,6,107,1,6,201,135,201,11,0,173,1,0,0,25,20,151,1,79,201,20,0,103,202,20,1,41,202,202,8,20,201,201,202,0,21,201,0,19,201,21,200,0,22,201,0,32,23,22,2,120,23,2,0,119,0,81,255,78,24,173,0,19,201,24,199,0,25,201,0,33,26,25,0,120,26,2,0,119,0,75,255,25,28,173,2,78,29,28,0,41,201,29,24,42,201,201,24,33,30,201,0,120,30,69,255,25,31,173,3,79,201,31,0,103,202,31,1,41,202,202,8,20,201,201,202,0,32,201,0,25,33,173,5,79,201,33,0,103,202,33,1,41,202,202,8,20,201,201,202,0,34,201,0,80,201,27,0,84,2,201,0,104,202,27,2,108,2,2,202,104,201,27,4,108,2,4,201,104,202,27,6,108,2,6,202,135,35,25,0,32,34,2,0,41,202,35,24,42,202,202,24,33,36,202,0,120,36,3,0,1,196,29,0,119,0,153,0,25,37,173,3,79,202,37,0,103,201,37,1,41,201,201,8,20,202,202,201,0,39,202,0,25,40,173,5,79,202,40,0,103,201,40,1,41,201,201,8,20,202,202,201,0,41,202,0,0,42,162,0,19,202,42,199,0,43,202,0,0,44,184,0,19,202,44,199,0,45,202,0,80,202,27,0,84,3,202,0,104,201,27,2,108,3,2,201,104,202,27,4,108,3,4,202,104,201,27,6,108,3,6,201,1,201,0,0,1,202,0,0,1,203,0,0,135,46,12,0,39,41,3,201,202,203,43,45,0,38,46,0,0,47,38,0,41,203,47,16,42,203,203,16,0,48,203,0,1,203,0,0,17,50,203,48,120,50,2,0,119,0,0,255,0,51,38,0,41,203,51,16,42,203,203,16,0,52,203,0,0,53,118,0,19,203,53,199,0,54,203,0,13,55,52,54,121,55,28,0,0,56,107,0,41,203,56,24,42,203,203,24,33,57,203,0,0,58,118,0,121,57,6,0,134,59,0,0,208,64,2,0,58,0,0,0,0,140,59,0,119,0,5,0,134,61,0,0,4,79,2,0,58,0,0,0,0,140,61,0,0,62,140,0,41,203,62,24,42,203,203,24,33,63,203,0,121,63,3,0,1,196,25,0,119,0,81,0,0,65,162,0,134,203,0,0,96,101,2,0,65,0,0,0,119,0,24,0,79,203,5,0,103,202,5,1,41,202,202,8,20,203,203,202,0,66,203,0,0,67,129,0,19,203,67,199,0,68,203,0,0,69,16,0,19,203,69,199,0,70,203,0,0,72,129,0,19,203,72,199,0,73,203,0,25,74,73,12,19,203,74,200,0,75,203,0,135,203,8,0,66,68,70,75,0,76,38,0,19,203,76,199,0,77,203,0,0,118,77,0,0,78,118,0,19,203,78,199,0,79,203,0,0,80,162,0,19,203,80,199,0,81,203,0,8,203,79,81,38,203,203,255,0,83,203,0,19,203,83,199,0,84,203,0,0,118,84,0,25,85,5,2,79,203,85,0,103,202,85,1,41,202,202,8,20,203,203,202,0,86,203,0,41,203,86,16,42,203,203,16,0,87,203,0,0,88,184,0,19,203,88,199,0,89,203,0,0,90,118,0,19,203,90,199,0,91,203,0,5,92,89,91,3,94,87,92,19,203,94,199,0,95,203,0,0,129,95,0,79,203,5,0,103,202,5,1,41,202,202,8,20,203,203,202,0,96,203,0,0,97,129,0,19,203,97,199,0,98,203,0,0,99,16,0,19,203,99,199,0,100,203,0,0,101,129,0,19,203,101,199,0,102,203,0,25,103,102,12,19,203,103,200,0,105,203,0,135,203,8,0,96,98,100,105,119,0,145,254,32,203,196,10,121,203,7,0,0,177,118,0,0,4,177,0,0,106,4,0,137,197,0,0,139,106,0,0,119,0,22,0,32,203,196,12,121,203,6,0,1,4,255,255,0,106,4,0,137,197,0,0,139,106,0,0,119,0,15,0,32,203,196,25,121,203,7,0,0,64,118,0,0,4,64,0,0,106,4,0,137,197,0,0,139,106,0,0,119,0,7,0,32,203,196,29,121,203,5,0,1,4,255,255,0,106,4,0,137,197,0,0,139,106,0,0,1,203,0,0,139,203,0,0,140,0,70,0,0,0,0,0,2,61,0,0,255,0,0,0,2,62,0,0,255,255,0,0,2,63,0,0,17,215,2,0,1,59,0,0,136,64,0,0,0,60,64,0,136,64,0,0,25,64,64,64,137,64,0,0,135,64,15,0,1,64,161,32,79,64,64,0,1,65,161,32,103,65,65,1,41,65,65,8,20,64,64,65,0,18,64,0,2,64,0,0,203,214,2,0,78,28,64,0,19,64,18,62,28,64,64,2,38,64,64,255,19,65,28,61,4,64,64,65,28,64,64,2,38,64,64,255,25,64,64,0,19,64,64,61,0,42,64,0,1,64,163,32,79,64,64,0,1,65,163,32,103,65,65,1,41,65,65,8,20,64,64,65,0,40,64,0,2,64,0,0,204,214,2,0,78,41,64,0,19,64,40,62,19,65,41,61,4,64,64,65,28,64,64,2,38,64,64,255,25,64,64,0,25,64,64,20,19,64,64,61,0,46,64,0,1,65,49,0,25,66,60,28,135,64,96,0,65,66,0,0,1,66,5,0,1,65,3,0,25,67,60,28,135,64,7,0,66,65,67,0,1,67,48,0,25,65,60,28,135,64,96,0,67,65,0,0,2,64,0,0,219,214,2,0,78,43,64,0,19,65,43,61,25,67,60,28,25,67,67,3,1,66,10,0,135,64,38,0,65,67,66,0,25,64,60,28,135,44,4,0,64,0,0,0,25,64,60,28,1,66,32,0,95,64,44,66,1,64,5,0,1,67,17,0,25,65,60,28,135,66,7,0,64,67,65,0,1,65,54,0,25,67,60,28,135,66,96,0,65,67,0,0,1,66,161,32,79,66,66,0,1,67,161,32,103,67,67,1,41,67,67,8,20,66,66,67,0,45,66,0,19,67,45,62,28,67,67,2,38,67,67,255,26,67,67,48,28,67,67,2,38,67,67,255,25,67,67,0,19,67,67,62,19,65,46,61,26,65,65,15,19,65,65,62,25,64,60,28,135,66,7,0,67,65,64,0,1,66,163,32,79,66,66,0,1,64,163,32,103,64,64,1,41,64,64,8,20,66,66,64,0,47,66,0,19,66,47,62,26,66,66,1,26,66,66,30,28,66,66,12,38,66,66,255,19,66,66,61,0,36,66,0,1,64,1,0,1,65,0,0,134,66,0,0,184,85,1,0,64,65,0,0,2,66,0,0,203,214,2,0,78,50,66,0,2,66,0,0,204,214,2,0,78,51,66,0,19,65,42,61,26,65,65,1,19,65,65,62,19,64,46,61,26,64,64,1,19,64,64,62,19,67,42,61,19,68,50,61,3,67,67,68,19,67,67,62,19,68,46,61,19,69,51,61,3,68,68,69,19,68,68,62,135,66,6,0,65,64,67,68,1,49,1,0,1,0,1,0,1,1,0,0,1,66,233,14,1,68,0,0,134,52,0,0,16,21,1,0,66,68,0,0,32,68,52,0,121,68,3,0,137,60,0,0,139,0,0,0,1,48,0,0,0,53,48,0,19,68,53,61,34,68,68,20,120,68,2,0,119,0,28,0,0,54,48,0,19,68,54,61,27,68,68,7,3,56,63,68,102,55,56,6,19,68,55,61,32,68,68,8,120,68,14,0,78,57,56,0,102,58,56,1,0,2,49,0,19,66,42,61,19,67,57,61,3,66,66,67,19,66,66,62,19,67,46,61,19,64,58,61,3,67,67,64,19,67,67,62,135,68,10,0,66,67,2,0,0,3,48,0,19,68,3,61,25,68,68,1,19,68,68,61,0,48,68,0,119,0,225,255,0,4,49,0,19,68,4,61,32,68,68,1,121,68,3,0,1,49,0,0,119,0,2,0,1,49,1,0,1,67,255,14,1,66,0,0,134,68,0,0,16,21,1,0,67,66,0,0,1,68,50,0,1,66,1,0,134,5,0,0,16,135,2,0,68,66,0,0,41,66,5,24,42,66,66,24,33,66,66,0,120,66,2,0,119,0,202,255,25,68,60,9,135,66,97,0,68,0,0,0,102,6,60,9,19,66,6,61,32,66,66,5,121,66,3,0,1,59,13,0,119,0,171,0,102,20,60,9,19,66,20,61,32,66,66,16,120,66,2,0,119,0,166,0,102,68,60,9,107,60,56,68,25,68,60,56,25,66,60,9,102,66,66,1,107,68,1,66,25,66,60,56,25,68,60,9,102,68,68,2,107,66,2,68,25,68,60,56,25,66,60,9,102,66,66,3,107,68,3,66,25,66,60,56,25,68,60,9,102,68,68,4,107,66,4,68,25,68,60,56,25,66,60,9,102,66,66,5,107,68,5,66,25,66,60,56,25,68,60,9,102,68,68,6,107,66,6,68,25,66,60,16,25,67,60,56,135,68,11,0,66,67,0,0,25,68,60,9,103,68,68,1,25,67,60,9,25,67,67,1,103,67,67,1,41,67,67,8,20,68,68,67,0,21,68,0,19,68,21,62,32,68,68,2,120,68,2,0,119,0,124,0,102,22,60,16,41,68,22,24,42,68,68,24,33,68,68,0,120,68,2,0,119,0,118,0,25,68,60,16,102,23,68,2,41,68,23,24,42,68,68,24,33,68,68,0,120,68,3,0,1,59,29,0,119,0,191,0,25,68,60,16,103,68,68,7,25,67,60,16,25,67,67,7,103,67,67,1,41,67,67,8,20,68,68,67,0,24,68,0,25,68,60,16,103,68,68,3,25,67,60,16,25,67,67,3,103,67,67,1,41,67,67,8,20,68,68,67,0,25,68,0,41,68,24,16,42,68,68,16,41,67,25,16,42,67,67,16,4,68,68,67,19,68,68,62,0,8,68,0,25,68,60,16,103,68,68,9,25,67,60,16,25,67,67,9,103,67,67,1,41,67,67,8,20,68,68,67,0,26,68,0,25,68,60,16,103,68,68,5,25,67,60,16,25,67,67,5,103,67,67,1,41,67,67,8,20,68,68,67,0,27,68,0,41,68,26,16,42,68,68,16,41,67,27,16,42,67,67,16,4,68,68,67,19,68,68,62,0,12,68,0,0,29,12,0,0,30,8,0,41,68,30,16,42,68,68,16,135,31,84,0,68,0,0,0,19,68,31,62,0,8,68,0,0,32,12,0,41,68,32,16,42,68,68,16,135,33,84,0,68,0,0,0,19,68,33,62,0,12,68,0,0,34,8,0,1,68,20,0,41,67,34,16,42,67,67,16,47,68,68,67,64,19,1,0,1,67,5,0,107,60,9,67,25,67,60,9,1,68,36,0,19,68,68,61,107,67,1,68,25,68,60,9,25,68,68,1,1,67,36,0,42,67,67,8,107,68,1,67,119,0,111,255,0,35,12,0,1,67,20,0,41,68,35,16,42,68,68,16,54,67,67,68,92,19,1,0,119,0,24,0,1,68,5,0,107,60,9,68,41,68,29,16,42,68,68,16,34,68,68,0,38,68,68,1,19,68,68,61,19,68,68,61,33,68,68,0,1,67,35,0,1,66,34,0,125,37,68,67,66,0,0,0,25,66,60,9,19,67,37,62,19,67,67,61,107,66,1,67,25,67,60,9,25,67,67,1,19,66,37,62,42,66,66,8,107,67,1,66,119,0,81,255,32,66,59,13,121,66,74,0,1,59,0,0,25,66,60,9,103,66,66,1,25,67,60,9,25,67,67,1,103,67,67,1,41,67,67,8,20,66,66,67,0,7,66,0,19,66,7,62,1,67,34,0,1,68,7,0,138,66,67,68,20,20,1,0,72,20,1,0,172,20,1,0,212,20,1,0,16,20,1,0,216,20,1,0,224,20,1,0,119,0,53,0,0,10,1,0,41,67,10,24,42,67,67,24,33,67,67,0,120,67,2,0,119,0,47,0,0,11,1,0,19,67,11,61,19,68,36,61,4,67,67,68,19,67,67,61,0,1,67,0,119,0,40,0,0,13,0,0,135,14,98,0,13,0,0,0,19,67,14,61,19,68,36,61,54,67,67,68,228,20,1,0,0,15,1,0,0,16,0,0,135,17,98,0,16,0,0,0,19,67,15,61,19,68,17,61,19,64,36,61,4,68,68,64,54,67,67,68,144,20,1,0,119,0,22,0,0,19,1,0,19,67,19,61,19,68,36,61,3,67,67,68,19,67,67,61,0,1,67,0,119,0,15,0,0,9,0,0,41,67,9,24,42,67,67,24,33,67,67,0,40,67,67,1,38,67,67,1,19,67,67,61,0,0,67,0,1,1,0,0,119,0,5,0,119,0,246,255,1,59,29,0,119,0,8,0,119,0,254,255,0,38,0,0,0,39,1,0,134,66,0,0,184,85,1,0,38,39,0,0,119,0,198,254,32,66,59,29,121,66,3,0,137,60,0,0,139,0,0,0,139,0,0,0,140,2,137,0,0,0,0,0,2,131,0,0,229,179,3,0,2,132,0,0,255,0,0,0,2,133,0,0,233,179,3,0,1,129,0,0,136,134,0,0,0,130,134,0,136,134,0,0,25,134,134,64,137,134,0,0,25,63,130,12,0,41,0,0,0,52,1,0,0,50,41,0,0,51,52,0,135,53,99,0,50,51,0,0,85,63,53,0,2,134,0,0,227,179,3,0,79,134,134,0,2,135,0,0,227,179,3,0,103,135,135,1,41,135,135,8,20,134,134,135,0,54,134,0,41,134,54,16,42,134,134,16,33,55,134,0,120,55,2,0,119,0,178,2,2,134,0,0,227,179,3,0,79,134,134,0,2,135,0,0,227,179,3,0,103,135,135,1,41,135,135,8,20,134,134,135,0,56,134,0,0,74,56,0,2,134,0,0,227,179,3,0,1,135,0,0,19,135,135,132,83,134,135,0,2,135,0,0,227,179,3,0,1,134,0,0,42,134,134,8,107,135,1,134,0,57,74,0,2,134,0,0,255,255,0,0,19,134,57,134,0,58,134,0,1,136,1,0,1,135,12,0,138,58,136,135,68,22,1,0,152,22,1,0,244,22,1,0,4,25,1,0,244,25,1,0,88,27,1,0,152,27,1,0,96,28,1,0,112,30,1,0,108,31,1,0,128,31,1,0,212,31,1,0,119,0,202,255,79,134,131,0,103,135,131,1,41,135,135,8,20,134,134,135,103,135,131,2,41,135,135,16,20,134,134,135,103,135,131,3,41,135,135,24,20,134,134,135,0,59,134,0,19,134,59,132,0,60,134,0,2,135,0,0,101,180,3,0,134,134,0,0,80,21,2,0,135,60,0,0,135,134,100,0,63,0,0,0,119,0,181,255,79,134,131,0,103,135,131,1,41,135,135,8,20,134,134,135,103,135,131,2,41,135,135,16,20,134,134,135,103,135,131,3,41,135,135,24,20,134,134,135,0,61,134,0,2,134,0,0,255,255,0,0,19,134,61,134,0,62,134,0,2,135,0,0,101,180,3,0,134,134,0,0,76,29,2,0,62,135,0,0,135,134,100,0,63,0,0,0,119,0,158,255,79,134,131,0,103,135,131,1,41,135,135,8,20,134,134,135,103,135,131,2,41,135,135,16,20,134,134,135,103,135,131,3,41,135,135,24,20,134,134,135,0,64,134,0,2,134,0,0,255,255,0,0,19,134,64,134,0,65,134,0,0,85,65,0,79,134,133,0,103,135,133,1,41,135,135,8,20,134,134,135,103,135,133,2,41,135,135,16,20,134,134,135,103,135,133,3,41,135,135,24,20,134,134,135,0,66,134,0,2,134,0,0,255,255,0,0,19,134,66,134,0,67,134,0,0,96,67,0,2,134,0,0,237,179,3,0,79,134,134,0,2,135,0,0,237,179,3,0,103,135,135,1,41,135,135,8,20,134,134,135,2,135,0,0,237,179,3,0,103,135,135,2,41,135,135,16,20,134,134,135,2,135,0,0,237,179,3,0,103,135,135,3,41,135,135,24,20,134,134,135,0,68,134,0,2,134,0,0,255,255,0,0,19,134,68,134,0,69,134,0,0,107,69,0,2,134,0,0,241,179,3,0,79,134,134,0,2,135,0,0,241,179,3,0,103,135,135,1,41,135,135,8,20,134,134,135,2,135,0,0,241,179,3,0,103,135,135,2], eb + 61440);
  HEAPU8.set([41,135,135,16,20,134,134,135,2,135,0,0,241,179,3,0,103,135,135,3,41,135,135,24,20,134,134,135,0,70,134,0,2,134,0,0,255,255,0,0,19,134,70,134,0,71,134,0,0,118,71,0,2,134,0,0,245,179,3,0,79,134,134,0,2,135,0,0,245,179,3,0,103,135,135,1,41,135,135,8,20,134,134,135,2,135,0,0,245,179,3,0,103,135,135,2,41,135,135,16,20,134,134,135,2,135,0,0,245,179,3,0,103,135,135,3,41,135,135,24,20,134,134,135,0,72,134,0,2,134,0,0,255,255,0,0,19,134,72,134,0,73,134,0,0,2,73,0,0,75,85,0,0,76,96,0,0,77,107,0,0,78,118,0,0,79,2,0,2,134,0,0,101,180,3,0,134,80,0,0,96,192,2,0,75,76,77,78,79,134,0,0,2,134,0,0,255,255,0,0,19,134,80,134,0,81,134,0,19,134,81,132,83,131,134,0,42,135,81,8,19,135,135,132,107,131,1,135,42,134,81,16,19,134,134,132,107,131,2,134,42,135,81,24,107,131,3,135,135,135,100,0,63,0,0,0,119,0,26,255,79,135,131,0,103,134,131,1,41,134,134,8,20,135,135,134,103,134,131,2,41,134,134,16,20,135,135,134,103,134,131,3,41,134,134,24,20,135,135,134,0,82,135,0,2,135,0,0,255,255,0,0,19,135,82,135,0,83,135,0,0,13,83,0,79,135,133,0,103,134,133,1,41,134,134,8,20,135,135,134,103,134,133,2,41,134,134,16,20,135,135,134,103,134,133,3,41,134,134,24,20,135,135,134,0,84,135,0,2,135,0,0,255,255,0,0,19,135,84,135,0,86,135,0,0,24,86,0,0,87,13,0,2,135,0,0,255,255,0,0,19,135,87,135,0,88,135,0,0,89,24,0,2,135,0,0,101,180,3,0,134,90,0,0,128,212,2,0,135,88,89,0,2,135,0,0,255,255,0,0,19,135,90,135,0,91,135,0,19,135,91,132,83,131,135,0,42,134,91,8,19,134,134,132,107,131,1,134,42,135,91,16,19,135,135,132,107,131,2,135,42,134,91,24,107,131,3,134,135,134,100,0,63,0,0,0,119,0,222,254,79,134,131,0,103,135,131,1,41,135,135,8,20,134,134,135,103,135,131,2,41,135,135,16,20,134,134,135,103,135,131,3,41,135,135,24,20,134,134,135,0,92,134,0,2,134,0,0,255,255,0,0,19,134,92,134,0,93,134,0,0,34,93,0,79,134,133,0,103,135,133,1,41,135,135,8,20,134,134,135,103,135,133,2,41,135,135,16,20,134,134,135,103,135,133,3,41,135,135,24,20,134,134,135,0,94,134,0,2,134,0,0,255,255,0,0,19,134,94,134,0,95,134,0,0,35,95,0,0,97,34,0,0,98,35,0,1,134,161,32,79,134,134,0,1,135,161,32,103,135,135,1,41,135,135,8,20,134,134,135,0,99,134,0,2,134,0,0,255,255,0,0,19,134,99,134,0,100,134,0,26,101,100,1,26,102,101,4,19,134,102,132,0,103,134,0,1,134,163,32,79,134,134,0,1,135,163,32,103,135,135,1,41,135,135,8,20,134,134,135,0,104,134,0,2,134,0,0,255,255,0,0,19,134,104,134,0,105,134,0,26,106,105,1,26,108,106,2,19,134,108,132,0,109,134,0,2,134,0,0,101,180,3,0,1,135,4,0,1,136,2,0,134,110,0,0,52,132,0,0,134,97,98,135,136,103,109,0,2,136,0,0,255,255,0,0,19,136,110,136,0,111,136,0,19,136,111,132,83,131,136,0,42,135,111,8,19,135,135,132,107,131,1,135,42,136,111,16,19,136,136,132,107,131,2,136,42,135,111,24,107,131,3,135,135,135,100,0,63,0,0,0,119,0,133,254,135,112,101,0,19,135,112,132,0,113,135,0,19,135,113,132,83,131,135,0,42,136,113,8,19,136,136,132,107,131,1,136,42,135,113,16,19,135,135,132,107,131,2,135,42,136,113,24,107,131,3,136,135,136,100,0,63,0,0,0,119,0,117,254,79,136,131,0,103,135,131,1,41,135,135,8,20,136,136,135,103,135,131,2,41,135,135,16,20,136,136,135,103,135,131,3,41,135,135,24,20,136,136,135,0,114,136,0,2,136,0,0,255,255,0,0,19,136,114,136,0,115,136,0,0,36,115,0,79,136,133,0,103,135,133,1,41,135,135,8,20,136,136,135,103,135,133,2,41,135,135,16,20,136,136,135,103,135,133,3,41,135,135,24,20,136,136,135,0,116,136,0,19,136,116,132,0,117,136,0,0,37,117,0,0,119,36,0,0,120,37,0,134,121,0,0,16,135,2,0,119,120,0,0,19,136,121,132,0,122,136,0,19,136,122,132,83,131,136,0,42,135,122,8,19,135,135,132,107,131,1,135,42,136,122,16,19,136,136,132,107,131,2,136,42,135,122,24,107,131,3,135,135,135,100,0,63,0,0,0,119,0,67,254,79,135,131,0,103,136,131,1,41,136,136,8,20,135,135,136,103,136,131,2,41,136,136,16,20,135,135,136,103,136,131,3,41,136,136,24,20,135,135,136,0,123,135,0,2,135,0,0,255,255,0,0,19,135,123,135,0,124,135,0,0,38,124,0,79,135,133,0,103,136,133,1,41,136,136,8,20,135,135,136,103,136,133,2,41,136,136,16,20,135,135,136,103,136,133,3,41,136,136,24,20,135,135,136,0,125,135,0,2,135,0,0,255,255,0,0,19,135,125,135,0,126,135,0,0,39,126,0,2,135,0,0,237,179,3,0,79,135,135,0,2,136,0,0,237,179,3,0,103,136,136,1,41,136,136,8,20,135,135,136,2,136,0,0,237,179,3,0,103,136,136,2,41,136,136,16,20,135,135,136,2,136,0,0,237,179,3,0,103,136,136,3,41,136,136,24,20,135,135,136,0,127,135,0,2,135,0,0,255,255,0,0,19,135,127,135,0,128,135,0,0,40,128,0,2,135,0,0,241,179,3,0,79,135,135,0,2,136,0,0,241,179,3,0,103,136,136,1,41,136,136,8,20,135,135,136,2,136,0,0,241,179,3,0,103,136,136,2,41,136,136,16,20,135,135,136,2,136,0,0,241,179,3,0,103,136,136,3,41,136,136,24,20,135,135,136,0,3,135,0,2,135,0,0,255,255,0,0,19,135,3,135,0,4,135,0,0,42,4,0,2,135,0,0,245,179,3,0,79,135,135,0,2,136,0,0,245,179,3,0,103,136,136,1,41,136,136,8,20,135,135,136,2,136,0,0,245,179,3,0,103,136,136,2,41,136,136,16,20,135,135,136,2,136,0,0,245,179,3,0,103,136,136,3,41,136,136,24,20,135,135,136,0,5,135,0,2,135,0,0,255,255,0,0,19,135,5,135,0,6,135,0,0,43,6,0,0,7,38,0,0,8,39,0,0,9,43,0,19,135,9,132,0,10,135,0,0,11,40,0,0,12,42,0,1,135,0,0,1,136,255,255,134,14,0,0,76,111,0,0,7,8,135,136,10,11,12,0,19,136,14,132,0,15,136,0,19,136,15,132,83,131,136,0,42,135,15,8,19,135,135,132,107,131,1,135,42,136,15,16,19,136,136,132,107,131,2,136,42,135,15,24,107,131,3,135,135,135,100,0,63,0,0,0,119,0,191,253,79,135,133,0,103,136,133,1,41,136,136,8,20,135,135,136,103,136,133,2,41,136,136,16,20,135,135,136,103,136,133,3,41,136,136,24,20,135,135,136,0,16,135,0,0,44,16,0,79,135,131,0,103,136,131,1,41,136,136,8,20,135,135,136,103,136,131,2,41,136,136,16,20,135,135,136,103,136,131,3,41,136,136,24,20,135,135,136,0,17,135,0,0,45,17,0,2,135,0,0,237,179,3,0,79,135,135,0,2,136,0,0,237,179,3,0,103,136,136,1,41,136,136,8,20,135,135,136,2,136,0,0,237,179,3,0,103,136,136,2,41,136,136,16,20,135,135,136,2,136,0,0,237,179,3,0,103,136,136,3,41,136,136,24,20,135,135,136,0,18,135,0,0,46,18,0,0,19,45,0,0,20,44,0,0,21,46,0,134,22,0,0,216,97,0,0,19,20,21,0,19,135,22,132,83,131,135,0,42,136,22,8,19,136,136,132,107,131,1,136,42,135,22,16,19,135,135,132,107,131,2,135,42,136,22,24,107,131,3,136,135,136,100,0,63,0,0,0,119,0,128,253,134,136,0,0,128,187,2,0,135,136,100,0,63,0,0,0,119,0,123,253,79,136,131,0,103,135,131,1,41,135,135,8,20,136,136,135,103,135,131,2,41,135,135,16,20,136,136,135,103,135,131,3,41,135,135,24,20,136,136,135,0,23,136,0,19,136,23,132,0,25,136,0,0,47,25,0,0,26,47,0,134,136,0,0,64,235,0,0,26,0,0,0,135,136,100,0,63,0,0,0,119,0,102,253,79,136,131,0,103,135,131,1,41,135,135,8,20,136,136,135,103,135,131,2,41,135,135,16,20,136,136,135,103,135,131,3,41,135,135,24,20,136,136,135,0,27,136,0,19,136,27,132,0,28,136,0,0,48,28,0,79,136,133,0,103,135,133,1,41,135,135,8,20,136,136,135,103,135,133,2,41,135,135,16,20,136,136,135,103,135,133,3,41,135,135,24,20,136,136,135,0,29,136,0,19,136,29,132,0,30,136,0,0,49,30,0,0,31,48,0,0,32,49,0,134,136,0,0,72,183,1,0,31,32,0,0,135,136,100,0,63,0,0,0,119,0,66,253,82,33,63,0,137,130,0,0,139,33,0,0,140,2,96,0,0,0,0,0,2,87,0,0,127,166,2,0,2,88,0,0,59,166,2,0,2,89,0,0,255,0,0,0,2,90,0,0,255,255,0,0,1,85,0,0,136,91,0,0,0,86,91,0,136,91,0,0,25,91,91,48,137,91,0,0,107,86,37,0,107,86,36,1,102,34,86,36,135,38,102,0,34,0,0,0,135,49,73,0,26,91,49,1,19,92,38,90,48,91,91,92,224,32,1,0,137,86,0,0,139,0,0,0,2,91,0,0,164,215,2,0,19,92,38,90,27,92,92,19,3,77,91,92,102,61,86,37,2,92,0,0,56,180,2,0,19,91,61,89,27,91,91,24,3,72,92,91,25,92,77,12,109,72,12,92,25,91,77,9,109,72,8,91,25,91,77,4,85,72,91,0,102,62,86,36,107,72,20,62,102,63,77,6,102,64,77,4,19,92,63,89,19,93,64,89,3,92,92,93,25,92,92,5,19,92,92,89,107,72,4,92,102,65,86,36,2,92,0,0,17,215,2,0,19,91,65,89,27,91,91,7,90,66,92,91,102,67,86,36,2,92,0,0,17,215,2,0,19,91,67,89,27,91,91,7,3,92,92,91,102,68,92,1,135,69,69,0,66,68,0,0,107,72,5,69,1,91,0,0,107,72,6,91,135,71,67,0,77,0,0,0,107,72,7,71,25,92,77,12,109,72,12,92,25,91,77,9,109,72,8,91,2,91,0,0,100,166,2,0,135,73,0,0,91,0,0,0,33,91,73,0,121,91,61,0,2,2,0,0,100,166,2,0,0,74,2,0,1,91,0,0,53,91,74,91,228,33,1,0,119,0,54,0,135,75,1,0,0,10,75,0,0,76,10,0,1,91,0,0,53,91,76,91,0,34,1,0,119,0,40,0,0,78,10,0,82,79,78,0,106,80,79,8,0,14,80,0,0,81,14,0,1,91,0,0,53,91,81,91,36,34,1,0,119,0,26,0,0,82,14,0,1,92,0,0,25,93,86,37,1,94,0,0,1,95,0,0,135,91,2,0,82,87,92,93,94,95,0,0,0,83,14,0,1,95,0,0,25,94,86,36,1,93,0,0,1,92,0,0,135,91,2,0,83,88,95,94,93,92,0,0,0,84,2,0,0,3,10,0,134,4,0,0,16,21,1,0,84,3,0,0,32,91,4,0,120,91,10,0,1,14,0,0,119,0,227,255,0,6,10,0,135,91,3,0,6,0,0,0,1,10,0,0,119,0,213,255,1,2,0,0,119,0,204,255,0,5,10,0,135,91,3,0,5,0,0,0,137,86,0,0,139,0,0,0,2,91,0,0,24,180,2,0,82,7,91,0,1,91,2,0,1,92,4,0,135,8,21,0,91,92,7,0,0,70,8,0,102,9,72,7,0,11,70,0,19,92,9,89,41,92,92,3,3,70,11,92,0,12,70,0,19,92,69,89,90,13,12,92,102,15,77,5,19,92,15,89,0,18,92,0,102,16,77,6,19,92,16,89,0,23,92,0,1,92,45,20,78,17,92,0,41,92,17,24,42,92,92,24,33,92,92,0,121,92,81,0,1,18,0,0,102,19,77,6,1,92,52,20,78,20,92,0,19,92,19,89,19,91,20,89,5,21,92,91,0,22,18,0,19,91,22,90,28,92,21,10,38,92,92,255,3,91,91,92,19,91,91,90,0,18,91,0,102,24,77,5,1,91,51,20,78,25,91,0,19,91,24,89,19,92,25,89,5,26,91,92,0,27,18,0,19,92,27,90,28,91,26,10,38,91,91,255,3,92,92,91,19,92,92,90,0,18,92,0,102,28,77,18,1,92,53,20,78,29,92,0,19,92,28,89,19,91,29,89,5,30,92,91,0,31,18,0,19,91,31,90,28,92,30,10,38,92,92,255,3,91,91,92,19,91,91,90,0,18,91,0,1,23,0,0,102,32,77,6,1,91,55,20,78,33,91,0,19,91,32,89,19,92,33,89,5,35,91,92,0,36,23,0,19,92,36,90,28,91,35,10,38,91,91,255,3,92,92,91,19,92,92,90,0,23,92,0,102,37,77,5,1,92,54,20,78,39,92,0,19,92,37,89,19,91,39,89,5,40,92,91,0,41,23,0,19,91,41,90,28,92,40,10,38,92,92,255,3,91,91,92,19,91,91,90,0,23,91,0,102,42,77,18,1,91,56,20,78,43,91,0,19,91,42,89,19,92,43,89,5,44,91,92,0,45,23,0,19,92,45,90,28,91,44,10,38,91,91,255,3,92,92,91,19,92,92,90,0,23,92,0,0,46,18,0,102,47,77,4,19,92,46,90,19,91,47,89,25,91,91,10,5,48,92,91,102,50,72,7,1,91,152,8,19,92,50,89,41,92,92,2,100,51,91,92,0,52,23,0,102,53,77,4,19,91,52,90,19,92,53,89,25,92,92,10,5,54,91,92,102,55,72,7,1,92,176,8,19,91,55,89,41,91,91,2,100,56,92,91,76,92,48,0,65,92,92,51,75,92,92,0,19,92,92,90,135,57,103,0,13,92,0,0,108,72,16,57,76,92,54,0,65,92,92,56,75,92,92,0,19,92,92,90,135,58,103,0,13,92,0,0,108,72,18,58,1,92,200,8,19,91,69,89,41,91,91,2,100,59,92,91,104,60,72,18,19,91,60,90,76,91,91,0,65,91,91,59,75,91,91,0,19,91,91,90,108,72,18,91,137,86,0,0,139,0,0,0,140,3,183,0,0,0,0,0,2,176,0,0,206,168,2,0,2,177,0,0,177,24,0,0,2,178,0,0,29,24,0,0,1,174,0,0,136,179,0,0,0,175,179,0,136,179,0,0,25,179,179,48,137,179,0,0,25,97,175,41,25,108,175,40,25,130,175,20,83,97,0,0,83,108,1,0,0,119,2,0,0,14,119,0,1,179,0,0,83,14,179,0,1,179,154,24,135,25,0,0,179,0,0,0,33,36,25,0,121,36,66,0,1,141,154,24,0,47,141,0,1,179,0,0,14,58,47,179,120,58,2,0,119,0,60,0,135,69,1,0,0,152,69,0,0,80,152,0,1,179,0,0,14,85,80,179,120,85,2,0,119,0,46,0,0,86,152,0,82,87,86,0,25,88,87,8,82,89,88,0,0,163,89,0,0,90,163,0,1,179,0,0,14,91,90,179,120,91,2,0,119,0,31,0,0,92,119,0,0,3,92,0,0,93,163,0,1,180,0,0,1,181,0,0,1,182,0,0,135,179,2,0,93,176,180,97,181,182,0,0,0,94,163,0,1,182,0,0,1,181,0,0,1,180,0,0,135,179,2,0,94,178,182,108,181,180,0,0,0,95,163,0,0,96,3,0,1,180,128,0,135,179,64,0,95,177,96,180,0,98,141,0,0,99,152,0,134,100,0,0,16,21,1,0,98,99,0,0,32,101,100,0,120,101,10,0,1,163,0,0,119,0,222,255,0,103,152,0,135,179,3,0,103,0,0,0,1,152,0,0,119,0,207,255,1,141,0,0,119,0,198,255,0,102,152,0,135,179,3,0,102,0,0,0,137,175,0,0,139,0,0,0,78,104,108,0,1,179,255,0,19,179,104,179,0,105,179,0,1,179,0,0,1,181,11,0,138,105,179,181,244,38,1,0,240,39,1,0,236,40,1,0,8,42,1,0,36,43,1,0,144,43,1,0,252,43,1,0,132,44,1,0,4,45,1,0,132,45,1,0,4,46,1,0,137,175,0,0,139,0,0,0,119,0,211,1,0,106,119,0,1,180,64,0,1,181,2,0,135,179,17,0,180,181,106,0,78,107,97,0,1,179,255,0,19,179,107,179,0,109,179,0,2,179,0,0,20,108,3,0,27,181,109,37,3,110,179,181,25,111,110,1,79,181,111,0,103,179,111,1,41,179,179,8,20,181,181,179,0,112,181,0,41,181,112,16,42,181,181,16,33,113,181,0,121,113,32,0,78,114,97,0,1,181,255,0,19,181,114,181,0,115,181,0,2,181,0,0,20,108,3,0,27,179,115,37,3,116,181,179,25,117,116,1,79,179,117,0,103,181,117,1,41,181,181,8,20,179,179,181,0,118,179,0,2,179,0,0,255,255,0,0,19,179,118,179,0,120,179,0,26,121,120,1,2,179,0,0,255,255,0,0,19,179,121,179,0,122,179,0,0,123,119,0,25,124,123,5,134,179,0,0,116,120,2,0,122,124,0,0,137,175,0,0,139,0,0,0,119,0,157,1,0,125,119,0,25,126,125,5,1,181,64,0,1,180,50,0,135,179,17,0,181,180,126,0,137,175,0,0,139,0,0,0,119,0,148,1,0,127,119,0,1,180,64,0,1,181,3,0,135,179,17,0,180,181,127,0,78,128,97,0,1,179,255,0,19,179,128,179,0,129,179,0,2,179,0,0,20,108,3,0,27,181,129,37,3,131,179,181,25,132,131,3,79,181,132,0,103,179,132,1,41,179,179,8,20,181,181,179,0,133,181,0,41,181,133,16,42,181,181,16,33,134,181,0,121,134,32,0,78,135,97,0,1,181,255,0,19,181,135,181,0,136,181,0,2,181,0,0,20,108,3,0,27,179,136,37,3,137,181,179,25,138,137,3,79,179,138,0,103,181,138,1,41,181,181,8,20,179,179,181,0,139,179,0,2,179,0,0,255,255,0,0,19,179,139,179,0,140,179,0,26,142,140,1,2,179,0,0,255,255,0,0,19,179,142,179,0,143,179,0,0,144,119,0,25,145,144,5,134,179,0,0,116,120,2,0,143,145,0,0,137,175,0,0,139,0,0,0,119,0,94,1,0,146,119,0,25,147,146,5,1,181,64,0,1,180,50,0,135,179,17,0,181,180,147,0,137,175,0,0,139,0,0,0,119,0,85,1,0,148,119,0,1,180,64,0,1,181,4,0,135,179,17,0,180,181,148,0,78,149,97,0,1,179,255,0,19,179,149,179,0,150,179,0,2,179,0,0,20,108,3,0,27,181,150,37,3,151,179,181,25,153,151,7,79,181,153,0,103,179,153,1,41,179,179,8,20,181,181,179,0,154,181,0,2,181,0,0,255,255,0,0,19,181,154,181,0,155,181,0,1,179,10,0,135,181,59,0,155,130,179,0,0,156,119,0,135,181,55,0,156,130,0,0,0,157,119,0,0,158,119,0,135,159,4,0,158,0,0,0,25,160,159,1,3,161,157,160,1,181,0,0,83,161,181,0,0,162,119,0,0,164,119,0,135,165,4,0,164,0,0,0,3,166,162,165,1,181,47,0,83,166,181,0,78,167,97,0,1,181,255,0,19,181,167,181,0,168,181,0,2,181,0,0,20,108,3,0,27,179,168,37,3,169,181,179,25,170,169,5,79,179,170,0,103,181,170,1,41,181,181,8,20,179,179,181,0,171,179,0,2,179,0,0,255,255,0,0,19,179,171,179,0,172,179,0,1,181,10,0,135,179,59,0,172,130,181,0,0,173,119,0,135,179,55,0,173,130,0,0,137,175,0,0,139,0,0,0,119,0,14,1,0,4,119,0,1,181,64,0,1,180,5,0,135,179,17,0,181,180,4,0,78,5,97,0,1,179,255,0,19,179,5,179,0,6,179,0,2,179,0,0,20,108,3,0,27,180,6,37,3,7,179,180,25,8,7,11,79,180,8,0,103,179,8,1,41,179,179,8,20,180,180,179,0,9,180,0,2,180,0,0,255,255,0,0,19,180,9,180,0,10,180,0,1,179,10,0,135,180,59,0,10,130,179,0,0,11,119,0,135,180,55,0,11,130,0,0,0,12,119,0,0,13,119,0,135,15,4,0,13,0,0,0,25,16,15,1,3,17,12,16,1,180,0,0,83,17,180,0,0,18,119,0,0,19,119,0,135,20,4,0,19,0,0,0,3,21,18,20,1,180,47,0,83,21,180,0,78,22,97,0,1,180,255,0,19,180,22,180,0,23,180,0,2,180,0,0,20,108,3,0,27,179,23,37,3,24,180,179,25,26,24,9,79,179,26,0,103,180,26,1,41,180,180,8,20,179,179,180,0,27,179,0,2,179,0,0,255,255,0,0,19,179,27,179,0,28,179,0,1,180,10,0,135,179,59,0,28,130,180,0,0,29,119,0,135,179,55,0,29,130,0,0,137,175,0,0,139,0,0,0,119,0,199,0,0,30,119,0,1,180,64,0,1,181,6,0,135,179,17,0,180,181,30,0,78,31,97,0,1,179,255,0,19,179,31,179,0,32,179,0,2,179,0,0,20,108,3,0,27,181,32,37,3,33,179,181,25,34,33,13,78,35,34,0,1,181,255,0,19,181,35,181,0,37,181,0,1,179,10,0,135,181,59,0,37,130,179,0,0,38,119,0,135,181,55,0,38,130,0,0,137,175,0,0,139,0,0,0,119,0,172,0,0,39,119,0,1,179,64,0,1,180,7,0,135,181,17,0,179,180,39,0,78,40,97,0,1,181,255,0,19,181,40,181,0,41,181,0,2,181,0,0,20,108,3,0,27,180,41,37,3,42,181,180,25,43,42,14,78,44,43,0,1,180,255,0,19,180,44,180,0,45,180,0,1,181,10,0,135,180,59,0,45,130,181,0,0,46,119,0,135,180,55,0,46,130,0,0,137,175,0,0,139,0,0,0,119,0,145,0,0,48,119,0,1,181,64,0,1,179,8,0,135,180,17,0,181,179,48,0,78,49,97,0,1,180,255,0,19,180,49,180,0,50,180,0,2,180,0,0,20,108,3,0,27,179,50,37,3,51,180,179,25,52,51,19,79,179,52,0,103,180,52,1,41,180,180,8,20,179,179,180,103,180,52,2,41,180,180,16,20,179,179,180,103,180,52,3,41,180,180,24,20,179,179,180,0,53,179,0,1,180,10,0,135,179,38,0,53,130,180,0,0,54,119,0,135,179,55,0,54,130,0,0,137,175,0,0,139,0,0,0,119,0,111,0,0,55,119,0,1,180,64,0,1,181,9,0,135,179,17,0,180,181,55,0,78,56,97,0,1,179,255,0,19,179,56,179,0,57,179,0,2,179,0,0,20,108,3,0,27,181,57,37,3,59,179,181,25,60,59,23,79,181,60,0,103,179,60,1,41,179,179,8,20,181,181,179,0,61,181,0,2,181,0,0,255,255,0,0,19,181,61,181,0,62,181,0,1,179,10,0,135,181,59,0,62,130,179,0,0,63,119,0,135,181,55,0,63,130,0,0,137,175,0,0,139,0,0,0,119,0,79,0,0,64,119,0,1,179,64,0,1,180,10,0,135,181,17,0,179,180,64,0,78,65,97,0,1,181,255,0,19,181,65,181,0,66,181,0,2,181,0,0,20,108,3,0,27,180,66,37,3,67,181,180,25,68,67,25,79,180,68,0,103,181,68,1,41,181,181,8,20,180,180,181,0,70,180,0,2,180,0,0,255,255,0,0,19,180,70,180,0,71,180,0,1,181,10,0,135,180,59,0,71,130,181,0,0,72,119,0,135,180,55,0,72,130,0,0,137,175,0,0,139,0,0,0,119,0,47,0,0,73,119,0,1,181,64,0,1,179,11,0,135,180,17,0,181,179,73,0,78,74,97,0,1,180,255,0,19,180,74,180,0,75,180,0,2,180,0,0,20,108,3,0,27,179,75,37,3,76,180,179,25,77,76,27,79,179,77,0,103,180,77,1,41,180,180,8,20,179,179,180,0,78,179,0,2,179,0,0,255,255,0,0,19,179,78,179,0,79,179,0,1,180,10,0,135,179,59,0,79,130,180,0,0,81,119,0,135,179,55,0,81,130,0,0,137,175,0,0,139,0,0,0,119,0,15,0,0,82,119,0,1,180,64,0,1,181,1,0,135,179,17,0,180,181,82,0,78,83,97,0,135,179,104,0,83,130,0,0,0,84,119,0,135,179,55,0,84,130,0,0,137,175,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,2,204,0,0,0,0,0,2,199,0,0,255,255,0,0,2,200,0,0,255,0,0,0,2,201,0,0,222,179,3,0,1,197,0,0,136,202,0,0,0,198,202,0,136,202,0,0,1,203,32,4,3,202,202,203,137,202,0,0,1,202,24,2,3,131,198,202,25,142,198,24,0,109,0,0,0,120,1,0,2,186,0,0,232,214,2,0,2,202,0,0,140,180,2,0,82,26,202,0,0,4,26,0,1,153,255,255,1,202,0,0,83,201,202,0,0,37,120,0,19,202,37,200,0,48,202,0,1,202,1,0,1,203,2,0,138,48,202,203,216,46,1,0,160,48,1,0,119,0,14,1,1,175,0,0,0,59,175,0,35,70,59,10,0,81,186,0,120,70,2,0,119,0,34,0,0,92,175,0,41,202,92,1,3,103,81,202,79,202,103,0,103,203,103,1,41,203,203,8,20,202,202,203,0,110,202,0,41,202,110,16,42,202,202,16,33,111,202,0,121,111,18,0,0,112,109,0,0,113,186,0,0,114,175,0,41,202,114,1,3,115,113,202,79,202,115,0,103,203,115,1,41,203,203,8,20,202,202,203,0,116,202,0,19,202,116,199,0,117,202,0,26,118,117,1,19,202,118,199,0,119,202,0,135,202,32,0,112,119,0,0,0,121,175,0,25,122,121,1,0,175,122,0,119,0,219,255,79,202,81,0,103,203,81,1,41,203,203,8,20,202,202,203,0,123,202,0,19,202,123,199,0,124,202,0,26,125,124,1,2,202,0,0,164,215,2,0,27,203,125,19,3,126,202,203,25,127,126,2,79,203,127,0,103,202,127,1,41,202,202,8,20,203,203,202,0,128,203,0,19,203,128,199,0,129,203,0,26,130,129,1,19,203,130,199,0,132,203,0,134,203,0,0,12,195,2,0,132,0,0,0,2,203,0,0,224,214,2,0,78,133,203,0,19,203,133,200,0,134,203,0,32,135,134,1,121,135,3,0,1,197,9,0,119,0,9,0,2,203,0,0,224,214,2,0,78,136,203,0,19,203,136,200,0,137,203,0,32,138,137,2,121,138,2,0,1,197,9,0,32,203,197,9,121,203,16,0,0,139,186,0,79,203,139,0,103,202,139,1,41,202,202,8,20,203,203,202,0,140,203,0,19,203,140,199,0,141,203,0,26,143,141,1,19,203,143,199,0,144,203,0,0,145,109,0,135,146,105,0,144,145,0,0,0,153,146,0,0,147,109,0,0,148,186,0,25,149,148,20,134,150,0,0,0,197,1,0,147,149,0,0,0,164,150,0,0,151,164,0,19,203,151,199,0,152,203,0,14,154,199,152,121,154,159,0,0,155,164,0,0,153,155,0,119,0,156,0,1,175,10,0,0,156,175,0,35,157,156,20,120,157,2,0,119,0,35,0,0,158,186,0,0,159,175,0,41,203,159,1,3,160,158,203,79,203,160,0,103,202,160,1,41,202,202,8,20,203,203,202,0,161,203,0,41,203,161,16,42,203,203,16,33,162,203,0,121,162,18,0,0,163,109,0,0,165,186,0,0,166,175,0,41,203,166,1,3,167,165,203,79,203,167,0,103,202,167,1,41,202,202,8,20,203,203,202,0,168,203,0,19,203,168,199,0,169,203,0,26,170,169,1,19,203,170,199,0,171,203,0,135,203,32,0,163,171,0,0,0,172,175,0,25,173,172,1,0,175,173,0,119,0,219,255,2,203,0,0,224,214,2,0,78,174,203,0,19,203,174,200,0,176,203,0,32,177,176,0,121,177,17,0,0,178,186,0,25,179,178,20,79,203,179,0,103,202,179,1,41,202,202,8,20,203,203,202,0,180,203,0,19,203,180,199,0,181,203,0,26,182,181,1,19,203,182,199,0,183,203,0,0,184,109,0,135,185,105,0,183,184,0,0,0,153,185,0,0,187,109,0,0,188,186,0,134,189,0,0,0,197,1,0,187,188,0,0,0,164,189,0,0,190,164,0,19,203,190,199,0,191,203,0,14,192,199,191,121,192,3,0,0,193,164,0,0,153,193,0,2,203,0,0,224,214,2,0,78,194,203,0,19,203,194,200,0,195,203,0,33,196,195,2,120,196,30,0,0,17,186,0,25,18,17,20,79,203,18,0,103,202,18,1,41,202,202,8,20,203,203,202,0,19,203,0,19,203,19,199,0,20,203,0,26,21,20,1,2,203,0,0,164,215,2,0,27,202,21,19,3,22,203,202,25,23,22,2,79,202,23,0,103,203,23,1,41,203,203,8,20,202,202,203,0,24,202,0,19,202,24,199,0,25,202,0,26,27,25,1,19,202,27,199,0,28,202,0,134,202,0,0,12,195,2,0,28,0,0,0,119,0,45,0,134,202,0,0,124,199,2,0,78,5,201,0,41,202,5,24,42,202,202,24,33,6,202,0,121,6,38,0,78,7,201,0,19,202,7,200,0,8,202,0,1,202,1,0,15,9,202,8,121,9,3,0,1,202,2,0,83,201,202,0,2,202,0,0,220,179,3,0,79,202,202,0,2,203,0,0,220,179,3,0,103,203,203,1,41,203,203,8,20,202,202,203,0,10,202,0,134,202,0,0,116,120,2,0,10,131,0,0,78,11,201,0,19,202,11,200,0,12,202,0,25,13,12,106,26,14,13,1,19,202,14,199,0,16,202,0,1,203,64,0,135,202,17,0,203,16,142,0,135,202,55,0,131,142,0,0,1,203,2,0,134,202,0,0,80,21,2,0,131,203,0,0,119,0,1,0,0,29,109,0,19,202,29,200,0,30,202,0,2,202,0,0,20,108,3,0,27,203,30,37,3,31,202,203,0,15,31,0,0,32,15,0,25,33,32,7,79,203,33,0,103,202,33,1,41,202,202,8,20,203,203,202,0,34,203,0,19,203,34,199,0,35,203,0,0,36,15,0,25,38,36,7,79,203,38,0,103,202,38,1,41,202,202,8,20,203,203,202,0,39,203,0,19,203,39,199,0,40,203,0,28,203,40,20,38,203,203,255,0,41,203,0,4,42,35,41,19,203,42,199,0,43,203,0,0,44,15,0,25,45,44,7,19,203,43,200,83,45,203,0,42,202,43,8,107,45,1,202,0,46,15,0,25,47,46,11,79,202,47,0,103,203,47,1,41,203,203,8,20,202,202,203,0,49,202,0,19,202,49,199,0,50,202,0,0,51,15,0,25,52,51,11,79,202,52,0,103,203,52,1,41,203,203,8,20,202,202,203,0,53,202,0,19,202,53,199,0,54,202,0,28,202,54,20,38,202,202,255,0,55,202,0,4,56,50,55,19,202,56,199,0,57,202,0,0,58,15,0,25,60,58,11,19,202,57,200,83,60,202,0,42,203,57,8,107,60,1,203,0,61,15,0,25,62,61,23,79,203,62,0,103,202,62,1,41,202,202,8,20,203,203,202,0,63,203,0,19,203,63,199,0,64,203,0,0,65,15,0,25,66,65,23,79,203,66,0,103,202,66,1,41,202,202,8,20,203,203,202,0,67,203,0,19,203,67,199,0,68,203,0,28,203,68,20,38,203,203,255,0,69,203,0,4,71,64,69,19,203,71,199,0,72,203,0,0,73,15,0,25,74,73,23,19,203,72,200,83,74,203,0,42,202,72,8,107,74,1,202,0,75,15,0,25,76,75,13,78,77,76,0,19,202,77,200,0,78,202,0,0,79,15,0,25,80,79,13,78,82,80,0,19,202,82,200,0,83,202,0,28,202,83,10,38,202,202,255,0,84,202,0,4,85,78,84,19,202,85,200,0,86,202,0,0,87,15,0,25,88,87,13,83,88,86,0,0,89,153,0,19,202,89,199,0,90,202,0,14,91,199,90,121,91,5,0,0,93,153,0,134,202,0,0,208,113,1,0,93,0,0,0,1,202,36,20,78,94,202,0,41,202,94,24,42,202,202,24,33,95,202,0,2,202,0,0,228,214,2,0,79,202,202,0,2,203,0,0,228,214,2,0,103,203,203,1,41,203,203,8,20,202,202,203,0,96,202,0,121,95,26,0,2,202,0,0,230,214,2,0,79,202,202,0,2,203,0,0,230,214,2,0,103,203,203,1,41,203,203,8,20,202,202,203,0,97,202,0,19,202,97,199,0,98,202,0,135,99,58,0,96,98,0,0,0,100,15,0,0,2,99,0,0,3,100,0,25,108,3,25,19,202,2,200,83,108,202,0,42,203,2,8,107,108,1,203,137,198,0,0,1,203,0,0,139,203,0,0,119,0,28,0,19,203,96,199,0,101,203,0,2,203,0,0,230,214,2,0,79,203,203,0,2,202,0,0,230,214,2,0,103,202,202,1,41,202,202,8,20,203,203,202,0,102,203,0,19,203,102,199,0,104,203,0,3,105,101,104,19,203,105,199,0,106,203,0,0,107,15,0,0,2,106,0,0,3,107,0,25,108,3,25,19,203,2,200,83,108,203,0,42,202,2,8,107,108,1,202,137,198,0,0,1,202,0,0,139,202,0,0,1,202,0,0,139,202,0,0,140,1,204,0,0,0,0,0,2,199,0,0,255,0,0,0,2,200,0,0,255,255,0,0,2,201,0,0,216,214,2,0,1,197,0,0,136,202,0,0,0,198,202,0,136,202,0,0,25,202,202,32,137,202,0,0,25,109,198,18,25,120,198,17,25,131,198,16,0,90,198,0,0,1,0,0,0,101,1,0,135,110,76,0,101,0,0,0,19,202,110,199,0,111,202,0,32,112,111,5,121,112,3,0,137,198,0,0,139,0,0,0,135,202,106,0,109,120,0,0,0,113,1,0,19,202,113,199,0,114,202,0,2,202,0,0,17,215,2,0,27,203,114,7,3,115,202,203,78,116,115,0,0,164,116,0,0,117,1,0,19,203,117,199,0,118,203,0,2,203,0,0,17,215,2,0,27,202,118,7,3,119,203,202,25,121,119,1,78,122,121,0,0,175,122,0,1,2,255,255,1,79,0,0,0,123,164,0,0,24,123,0,0,124,175,0,0,35,124,0,2,202,0,0,211,214,2,0,78,125,202,0,0,142,125,0,0,126,142,0,19,202,126,199,0,127,202,0,34,128,127,15,120,128,2,0,119,0,30,1,2,202,0,0,212,214,2,0,78,129,202,0,0,153,129,0,0,130,153,0,19,202,130,199,0,132,202,0,34,133,132,15,120,133,2,0,119,0,12,1,2,202,0,0,48,180,2,0,82,134,202,0,0,135,153,0,19,202,135,199,0,136,202,0,27,137,136,15,0,138,142,0,19,202,138,199,0,139,202,0,3,140,137,139,3,141,134,140,78,143,141,0,19,202,143,199,0,144,202,0,1,202,128,0,17,145,202,144,120,145,242,0,0,146,142,0,19,202,146,199,0,147,202,0,2,202,0,0,211,214,2,0,78,148,202,0,19,202,148,199,0,149,202,0,4,150,147,149,2,202,0,0,209,214,2,0,78,151,202,0,19,202,151,199,0,152,202,0,3,154,150,152,19,202,154,199,0,155,202,0,0,46,155,0,0,156,153,0,19,202,156,199,0,157,202,0,2,202,0,0,212,214,2,0,78,158,202,0,19,202,158,199,0,159,202,0,4,160,157,159,2,202,0,0,210,214,2,0,78,161,202,0,19,202,161,199,0,162,202,0,3,163,160,162,19,202,163,199,0,165,202,0,0,57,165,0,0,166,46,0,0,167,57,0,135,168,69,0,166,167,0,0,0,186,168,0,0,169,186,0,19,202,169,199,0,170,202,0,32,171,170,5,121,171,18,0,2,202,0,0,224,214,2,0,78,172,202,0,19,202,172,199,0,173,202,0,32,174,173,0,121,174,3,0,1,197,10,0,119,0,203,0,1,202,65,20,78,176,202,0,19,202,176,199,0,177,202,0,32,178,177,1,121,178,3,0,1,197,10,0,119,0,195,0,0,190,46,0,0,191,57,0,78,192,109,0,78,193,120,0,135,194,107,0,190,191,192,193,0,13,194,0,0,195,1,0,0,196,46,0,0,3,57,0,134,202,0,0,188,201,2,0,195,196,3,0,134,202,0,0,36,146,2,0,90,131,0,0,0,4,79,0,41,202,4,16,42,202,202,16,33,5,202,0,79,202,90,0,103,203,90,1,41,203,203,8,20,202,202,203,0,6,202,0,121,5,103,0,19,202,6,200,0,25,202,0,0,26,79,0,19,202,26,200,0,27,202,0,15,28,25,27,121,28,3,0,1,68,0,0,119,0,127,0,79,202,90,0,103,203,90,1,41,203,203,8,20,202,202,203,0,29,202,0,19,202,29,200,0,30,202,0,0,31,79,0,19,202,31,200,0,32,202,0,15,33,32,30,121,33,3,0,1,68,1,0,119,0,113,0,0,34,186,0,19,202,34,199,0,36,202,0,32,37,36,2,120,37,73,0,0,38,186,0,19,202,38,199,0,39,202,0,32,40,39,3,120,40,68,0,0,41,186,0,19,202,41,199,0,42,202,0,32,43,42,4,120,43,63,0,0,44,186,0,19,202,44,199,0,45,202,0,32,47,45,5,120,47,58,0,0,48,186,0,19,202,48,199,0,49,202,0,32,50,49,6,120,50,53,0,1,202,65,20,78,51,202,0,19,202,51,199,0,52,202,0,32,53,52,1,0,54,46,0,0,55,57,0,121,53,25,0,2,202,0,0,215,214,2,0,78,56,202,0,78,58,201,0,135,59,107,0,54,55,56,58,19,202,59,199,0,60,202,0,0,61,24,0,0,62,35,0,2,202,0,0,215,214,2,0,78,63,202,0,78,64,201,0,135,65,107,0,61,62,63,64,19,202,65,199,0,66,202,0,15,67,60,66,121,67,3,0,1,68,1,0,119,0,58,0,1,68,0,0,119,0,56,0,0,69,164,0,0,70,175,0,135,71,107,0,54,55,69,70,19,202,71,199,0,72,202,0,0,73,24,0,0,74,35,0,0,75,164,0,0,76,175,0,135,77,107,0,73,74,75,76,19,202,77,199,0,78,202,0,15,80,78,72,121,80,3,0,1,68,1,0,119,0,38,0,1,68,0,0,119,0,36,0,1,68,1,0,119,0,34,0,0,79,6,0,0,7,79,0,19,202,7,200,0,8,202,0,33,9,8,0,120,9,27,0,0,10,2,0,19,202,10,199,0,11,202,0,0,12,13,0,19,202,12,199,0,14,202,0,15,15,14,11,120,15,19,0,0,16,2,0,19,202,16,199,0,17,202,0,0,18,13,0,19,202,18,199,0,19,202,0,13,20,17,19,121,20,9,0,135,21,52,0,30,202,21,10,38,202,202,255,0,22,202,0,19,202,22,199,0,23,202,0,0,68,23,0,119,0,4,0,1,68,0,0,119,0,2,0,1,68,1,0,0,81,68,0,41,202,81,24,42,202,202,24,33,82,202,0,121,82,13,0,0,83,13,0,0,2,83,0,79,202,90,0,103,203,90,1,41,203,203,8,20,202,202,203,0,84,202,0,0,79,84,0,0,85,46,0,0,24,85,0,0,86,57,0,0,35,86,0,0,87,153,0,19,202,87,199,0,88,202,0,25,89,88,1,19,202,89,199,0,91,202,0,0,153,91,0,119,0,240,254,0,92,142,0,19,202,92,199,0,93,202,0,25,94,93,1,19,202,94,199,0,95,202,0,0,142,95,0,119,0,222,254,32,202,197,10,121,202,26,0,0,179,46,0,0,180,1,0,19,202,180,199,0,181,202,0,2,202,0,0,17,215,2,0,27,203,181,7,3,182,202,203,83,182,179,0,0,183,57,0,0,184,1,0,19,203,184,199,0,185,203,0,2,203,0,0,17,215,2,0,27,202,185,7,3,187,203,202,25,188,187,1,83,188,183,0,0,189,1,0,134,202,0,0,136,143,2,0,189,0,0,0,137,198,0,0,139,0,0,0,0,96,2,0,19,202,96,199,0,97,202,0,14,98,97,199,120,98,3,0,137,198,0,0,139,0,0,0,0,99,24,0,0,100,1,0,19,202,100,199,0,102,202,0,2,202,0,0,17,215,2,0,27,203,102,7,3,103,202,203,83,103,99,0,0,104,35,0,0,105,1,0,19,203,105,199,0,106,203,0,2,203,0,0,17,215,2,0,27,202,106,7,3,107,203,202,25,108,107,1,83,108,104,0,137,198,0,0,139,0,0,0,140,1,197,0,0,0,0,0,2,191,0,0,255,255,0,0,2,192,0,0,255,0,0,0,2,193,0,0,164,215,2,0,1,189,0,0,136,194,0,0,0,190,194,0,136,194,0,0,1,195,48,8,3,194,194,195,137,194,0,0,1,194,48,4,3,101,190,194,25,112,190,48,0,3,0,0,0,81,3,0,25,92,81,1,79,194,92,0,103,195,92,1,41,195,195,8,20,194,194,195,0,100,194,0,0,37,100,0,0,102,3,0,25,103,102,4,79,194,103,0,103,195,103,1,41,195,195,8,20,194,194,195,0,104,194,0,0,48,104,0,1,145,0,0,2,194,0,0,140,180,2,0,82,105,194,0,0,156,105,0,0,106,48,0,19,194,106,191,0,107,194,0,2,194,0,0,158,215,2,0,79,194,194,0,2,195,0,0,158,215,2,0,103,195,195,1,41,195,195,8,20,194,194,195,0,108,194,0,19,194,108,191,0,109,194,0,13,110,107,109,120,110,31,1,0,111,37,0,19,194,111,191,0,113,194,0,27,194,113,19,3,114,193,194,25,115,114,2,79,194,115,0,103,195,115,1,41,195,195,8,20,194,194,195,0,116,194,0,0,59,116,0,0,117,59,0,19,194,117,191,0,118,194,0,2,194,0,0,158,215,2,0,79,194,194,0,2,195,0,0,158,215,2,0,103,195,195,1,41,195,195,8,20,194,194,195,0,119,194,0,19,194,119,191,0,120,194,0,25,121,120,1,13,122,118,121,121,122,10,0,2,194,0,0,72,191,2,0,78,124,194,0,19,194,124,192,0,125,194,0,33,126,125,0,120,126,4,0,1,189,4,0,119,0,2,0,1,189,4,0,32,194,189,4,121,194,106,0,0,127,59,0,19,194,127,191,0,128,194,0,26,129,128,1,19,194,129,191,0,130,194,0,0,131,156,0,135,132,23,0,130,131,0,0,19,194,132,192,0,133,194,0,0,135,48,0,19,194,135,191,0,136,194,0,27,194,136,19,3,137,193,194,25,138,137,2,79,194,138,0,103,195,138,1,41,195,195,8,20,194,194,195,0,139,194,0,19,194,139,191,0,140,194,0,26,141,140,1,19,194,141,191,0,142,194,0,0,143,156,0,135,144,23,0,142,143,0,0,19,194,144,192,0,146,194,0,41,194,146,1,0,147,194,0,15,148,133,147,120,148,210,0,0,149,37,0,19,194,149,191,0,150,194,0,27,194,150,19,3,151,193,194,25,152,151,6,78,153,152,0,19,194,153,192,0,154,194,0,0,155,48,0,19,194,155,191,0,157,194,0,27,194,157,19,3,158,193,194,25,159,158,6,78,160,159,0,19,194,160,192,0,161,194,0,4,162,154,161,0,134,162,0,0,163,134,0,25,164,163,50,0,134,164,0,135,165,52,0,30,194,165,100,38,194,194,255,0,166,194,0,0,123,166,0,0,168,123,0,0,169,134,0,16,170,169,168,120,170,178,0,0,171,48,0,19,194,171,191,0,172,194,0,27,194,172,19,3,173,193,194,25,174,173,8,78,175,174,0,19,194,175,192,0,176,194,0,1,194,0,0,1,195,5,0,138,176,194,195,72,63,1,0,80,63,1,0,88,63,1,0,96,63,1,0,104,63,1,0,119,0,11,0,1,134,10,0,119,0,9,0,1,134,1,0,119,0,7,0,1,134,20,0,119,0,5,0,1,134,5,0,119,0,3,0,1,134,15,0,119,0,1,0,135,177,52,0,30,194,177,100,38,194,194,255,0,179,194,0,0,123,179,0,0,180,123,0,0,181,134,0,16,182,181,180,120,182,141,0,2,194,0,0,140,180,2,0,82,183,194,0,1,194,136,20,78,184,194,0,19,194,184,192,0,185,194,0,3,186,183,185,0,167,186,0,0,187,48,0,0,188,156,0,135,5,23,0,187,188,0,0,19,194,5,192,0,6,194,0,0,15,6,0,1,178,0,0,0,7,178,0,0,8,15,0,16,9,7,8,120,9,2,0,119,0,58,0,0,10,156,0,0,11,178,0,3,12,10,11,78,13,12,0,0,14,167,0], eb + 71680);
  HEAPU8.set([135,16,29,0,13,14,0,0,0,26,16,0,0,17,59,0,0,18,156,0,0,19,178,0,3,20,18,19,78,21,20,0,19,194,21,192,0,22,194,0,2,194,0,0,20,108,3,0,27,195,22,37,3,23,194,195,25,24,23,1,19,195,17,192,83,24,195,0,42,194,17,8,107,24,1,194,1,4,0,0,0,25,4,0,0,27,26,0,16,28,25,27,120,28,2,0,119,0,24,0,0,29,59,0,0,30,167,0,0,31,4,0,41,194,31,1,3,32,30,194,79,194,32,0,103,195,32,1,41,195,195,8,20,194,194,195,0,33,194,0,19,194,33,191,0,34,194,0,27,194,34,19,3,35,193,194,25,36,35,2,19,194,29,192,83,36,194,0,42,195,29,8,107,36,1,195,0,38,4,0,25,39,38,1,0,4,39,0,119,0,229,255,0,40,178,0,25,41,40,1,0,178,41,0,119,0,195,255,1,178,0,0,0,42,178,0,135,43,73,0,16,44,42,43,120,44,2,0,119,0,55,0,0,45,178,0,27,195,45,19,3,46,193,195,25,47,46,2,79,195,47,0,103,194,47,1,41,194,194,8,20,195,195,194,0,49,195,0,0,70,49,0,0,50,70,0,41,195,50,16,42,195,195,16,33,51,195,0,121,51,36,0,0,52,70,0,19,195,52,191,0,53,195,0,26,54,53,1,19,195,54,191,0,55,195,0,0,70,55,0,0,56,70,0,19,195,56,191,0,57,195,0,0,58,48,0,19,195,58,191,0,60,195,0,13,61,57,60,121,61,21,0,0,62,70,0,19,195,62,191,0,63,195,0,0,64,178,0,13,65,63,64,0,66,178,0,0,67,59,0,0,68,178,0,125,2,65,68,66,0,0,0,1,195,0,0,125,1,65,67,195,0,0,0,27,195,2,19,3,69,193,195,25,71,69,2,19,195,1,192,83,71,195,0,42,194,1,8,107,71,1,194,0,72,178,0,25,73,72,1,0,178,73,0,119,0,198,255,1,145,1,0,0,74,59,0,19,194,74,191,0,75,194,0,2,194,0,0,158,215,2,0,79,194,194,0,2,195,0,0,158,215,2,0,103,195,195,1,41,195,195,8,20,194,194,195,0,76,194,0,19,194,76,191,0,77,194,0,25,78,77,1,13,79,75,78,0,80,145,0,41,194,80,24,42,194,194,24,33,82,194,0,120,79,45,0,120,82,10,0,0,96,3,0,25,97,96,3,78,98,97,0,0,99,37,0,135,194,32,0,98,99,0,0,137,190,0,0,1,194,1,0,139,194,0,0,0,90,48,0,134,194,0,0,116,120,2,0,90,101,0,0,1,195,64,0,1,196,110,0,135,194,17,0,195,196,112,0,135,194,55,0,101,112,0,0,0,91,59,0,19,194,91,191,0,93,194,0,26,94,93,1,19,194,94,191,0,95,194,0,134,194,0,0,116,120,2,0,95,112,0,0,135,194,55,0,101,112,0,0,1,196,2,0,134,194,0,0,80,21,2,0,101,196,0,0,0,96,3,0,25,97,96,3,78,98,97,0,0,99,37,0,135,194,32,0,98,99,0,0,137,190,0,0,1,194,1,0,139,194,0,0,121,82,3,0,1,145,157,255,119,0,2,0,1,145,153,255,0,83,145,0,19,194,83,192,0,84,194,0,135,85,52,0,30,194,85,4,38,194,194,255,0,86,194,0,3,87,84,86,19,194,87,191,0,88,194,0,1,196,64,0,135,194,17,0,196,88,101,0,135,194,30,0,0,89,48,0,134,194,0,0,76,29,2,0,89,101,0,0,0,96,3,0,25,97,96,3,78,98,97,0,0,99,37,0,135,194,32,0,98,99,0,0,137,190,0,0,1,194,1,0,139,194,0,0,140,1,180,0,0,0,0,0,2,172,0,0,255,255,0,0,2,173,0,0,254,168,2,0,2,174,0,0,206,168,2,0,1,170,0,0,136,175,0,0,0,171,175,0,136,175,0,0,1,176,64,2,3,175,175,176,137,175,0,0,1,175,48,2,3,82,171,175,25,104,171,48,25,137,171,34,25,159,171,38,83,82,0,0,1,126,0,0,2,175,0,0,140,180,2,0,82,79,175,0,0,93,79,0,78,80,82,0,0,81,93,0,135,83,29,0,80,81,0,0,0,115,83,0,0,84,115,0,33,85,84,0,120,85,3,0,1,170,3,0,119,0,180,1,135,175,30,0,0,86,93,0,0,87,115,0,0,88,126,0,1,175,161,32,79,175,175,0,1,176,161,32,103,176,176,1,41,176,176,8,20,175,175,176,0,89,175,0,19,175,89,172,0,90,175,0,26,91,90,1,26,92,91,4,1,175,255,0,19,175,92,175,0,94,175,0,1,175,163,32,79,175,175,0,1,176,163,32,103,176,176,1,41,176,176,8,20,175,175,176,0,95,175,0,19,175,95,172,0,96,175,0,26,97,96,1,26,98,97,2,1,175,255,0,19,175,98,175,0,99,175,0,1,175,4,0,1,176,2,0,134,100,0,0,24,121,0,0,86,87,88,175,176,94,99,0,0,126,100,0,0,101,126,0,19,176,101,172,0,102,176,0,14,103,172,102,120,103,3,0,1,170,30,0,119,0,134,1,0,105,93,0,0,106,126,0,19,176,106,172,0,107,176,0,41,176,107,1,3,108,105,176,79,176,108,0,103,175,108,1,41,175,175,8,20,176,176,175,0,109,176,0,1,176,255,0,19,176,109,176,83,137,176,0,42,175,109,8,107,137,1,175,1,14,0,0,79,175,137,0,103,176,137,1,41,176,176,8,20,175,175,176,0,110,175,0,19,175,110,172,0,111,175,0,2,175,0,0,164,215,2,0,27,176,111,19,3,112,175,176,25,113,112,14,0,3,113,0,0,114,3,0,79,176,114,0,103,175,114,1,41,175,175,8,20,176,176,175,0,116,176,0,41,176,116,16,42,176,176,16,33,117,176,0,121,117,3,0,1,14,1,0,119,0,23,0,0,118,3,0,25,119,118,2,79,176,119,0,103,175,119,1,41,175,175,8,20,176,176,175,0,120,176,0,0,121,3,0,1,176,255,0,19,176,120,176,83,121,176,0,42,175,120,8,107,121,1,175,0,122,3,0,25,123,122,2,1,175,0,0,1,176,255,0,19,175,175,176,83,123,175,0,1,176,0,0,42,176,176,8,107,123,1,176,0,124,3,0,0,125,14,0,19,176,125,172,0,127,176,0,41,176,127,1,3,128,124,176,79,176,128,0,103,175,128,1,41,175,175,8,20,176,176,175,0,129,176,0,41,176,129,16,42,176,176,16,33,130,176,0,121,130,8,0,0,131,14,0,19,176,131,172,0,132,176,0,25,133,132,1,19,176,133,172,0,134,176,0,0,14,134,0,0,135,3,0,79,176,135,0,103,175,135,1,41,175,175,8,20,176,176,175,0,136,176,0,19,176,136,172,0,138,176,0,26,139,138,1,19,176,139,172,0,140,176,0,1,176,255,0,19,176,140,176,83,159,176,0,42,175,140,8,107,159,1,175,0,141,3,0,25,142,141,2,79,175,142,0,103,176,142,1,41,176,176,8,20,175,175,176,0,143,175,0,19,175,143,172,0,144,175,0,26,145,144,1,19,175,145,172,0,146,175,0,25,147,159,2,1,175,255,0,19,175,146,175,83,147,175,0,42,176,146,8,107,147,1,176,0,149,14,0,41,176,149,16,42,176,176,16,33,150,176,0,120,150,6,0,1,175,85,0,134,176,0,0,52,222,2,0,175,0,0,0,119,0,71,255,135,176,30,0,0,151,14,0,1,176,161,32,79,176,176,0,1,175,161,32,103,175,175,1,41,175,175,8,20,176,176,175,0,152,176,0,19,176,152,172,0,153,176,0,26,154,153,1,26,155,154,4,1,176,255,0,19,176,155,176,0,156,176,0,1,176,163,32,79,176,176,0,1,175,163,32,103,175,175,1,41,175,175,8,20,176,176,175,0,157,176,0,19,176,157,172,0,158,176,0,26,160,158,1,26,161,160,2,1,176,255,0,19,176,161,176,0,162,176,0,1,176,0,0,1,175,4,0,1,177,2,0,134,163,0,0,52,132,0,0,159,151,176,175,177,156,162,0,0,148,163,0,0,164,148,0,19,177,164,172,0,165,177,0,13,166,172,165,120,166,28,255,1,25,255,255,1,177,100,19,135,167,0,0,177,0,0,0,33,168,167,0,121,168,67,0,1,36,100,19,0,169,36,0,1,177,0,0,14,4,169,177,120,4,2,0,119,0,61,0,135,5,1,0,0,47,5,0,0,6,47,0,1,177,0,0,14,7,6,177,120,7,2,0,119,0,52,0,0,8,47,0,82,9,8,0,25,10,9,8,82,11,10,0,0,58,11,0,0,12,58,0,1,177,0,0,14,13,12,177,120,13,2,0,119,0,37,0,0,15,58,0,1,175,0,0,1,176,0,0,1,178,0,0,135,177,2,0,15,174,175,82,176,178,0,0,0,16,58,0,2,178,0,0,242,168,2,0,1,176,1,0,1,175,0,0,1,179,0,0,135,177,2,0,16,178,176,137,175,179,0,0,0,17,58,0,0,18,148,0,19,177,18,172,0,19,177,0,41,177,19,1,3,20,159,177,1,179,1,0,1,175,0,0,1,176,0,0,135,177,2,0,17,173,179,20,175,176,0,0,0,21,36,0,0,22,47,0,134,23,0,0,16,21,1,0,21,22,0,0,0,25,23,0,1,58,0,0,119,0,216,255,0,24,47,0,135,177,3,0,24,0,0,0,1,47,0,0,119,0,201,255,1,36,0,0,119,0,192,255,0,26,25,0,32,27,26,0,120,27,209,254,79,177,137,0,103,176,137,1,41,176,176,8,20,177,177,176,0,28,177,0,19,177,28,172,0,29,177,0,2,177,0,0,158,215,2,0,79,177,177,0,2,176,0,0,158,215,2,0,103,176,176,1,41,176,176,8,20,177,177,176,0,30,177,0,19,177,30,172,0,31,177,0,14,32,29,31,121,32,63,0,135,33,52,0,30,177,33,3,38,177,177,255,0,34,177,0,1,177,128,0,3,35,177,34,19,177,35,172,0,37,177,0,1,176,64,0,135,177,17,0,176,37,104,0,135,177,30,0,79,177,137,0,103,176,137,1,41,176,176,8,20,177,177,176,0,38,177,0,134,177,0,0,76,29,2,0,38,104,0,0,79,177,137,0,103,176,137,1,41,176,176,8,20,177,177,176,0,39,177,0,19,177,39,172,0,40,177,0,2,177,0,0,164,215,2,0,27,176,40,19,3,41,177,176,25,42,41,7,78,43,42,0,1,176,255,0,19,176,43,176,0,44,176,0,34,45,44,20,79,176,137,0,103,177,137,1,41,177,177,8,20,176,176,177,0,46,176,0,19,176,46,172,0,48,176,0,2,176,0,0,164,215,2,0,27,177,48,19,3,49,176,177,25,50,49,7,121,45,3,0,1,1,0,0,119,0,10,0,78,51,50,0,1,177,255,0,19,177,51,177,0,52,177,0,26,53,52,20,1,177,255,0,19,177,53,177,0,54,177,0,0,1,54,0,83,50,1,0,0,55,148,0,19,177,55,172,0,56,177,0,41,177,56,1,3,57,159,177,79,177,57,0,103,176,57,1,41,176,176,8,20,177,177,176,0,59,177,0,79,177,137,0,103,176,137,1,41,176,176,8,20,177,177,176,0,60,177,0,134,61,0,0,96,83,2,0,59,60,0,0,41,177,61,24,42,177,177,24,33,62,177,0,120,62,2,0,119,0,104,254,0,63,3,0,0,64,148,0,19,177,64,172,0,65,177,0,41,177,65,1,3,66,63,177,1,177,0,0,1,176,255,0,19,177,177,176,83,66,177,0,1,176,0,0,42,176,176,8,107,66,1,176,78,67,82,0,0,68,148,0,19,176,68,172,0,70,176,0,41,176,70,1,3,71,159,176,79,176,71,0,103,177,71,1,41,177,177,8,20,176,176,177,0,72,176,0,135,73,108,0,67,72,0,0,0,69,73,0,0,74,69,0,19,176,74,172,0,75,176,0,26,76,75,1,19,176,76,172,0,77,176,0,135,176,109,0,77,0,0,0,119,0,68,254,32,176,170,3,121,176,10,0,1,177,84,0,134,176,0,0,52,222,2,0,177,0,0,0,1,2,1,0,0,78,2,0,137,171,0,0,139,78,0,0,119,0,7,0,32,176,170,30,121,176,5,0,1,2,1,0,0,78,2,0,137,171,0,0,139,78,0,0,1,176,0,0,139,176,0,0,140,1,168,0,0,0,0,0,2,160,0,0,255,255,0,0,2,161,0,0,254,168,2,0,2,162,0,0,242,168,2,0,1,158,0,0,136,163,0,0,0,159,163,0,136,163,0,0,1,164,64,4,3,163,163,164,137,163,0,0,1,163,48,4,3,70,159,163,25,81,159,48,83,70,0,0,2,163,0,0,140,180,2,0,82,68,163,0,0,92,68,0,78,69,70,0,0,71,92,0,135,72,110,0,69,71,0,0,0,103,72,0,0,73,103,0,41,163,73,16,42,163,163,16,33,74,163,0,120,74,3,0,1,158,30,0,119,0,126,2,0,75,92,0,0,76,103,0,1,163,161,32,79,163,163,0,1,164,161,32,103,164,164,1,41,164,164,8,20,163,163,164,0,77,163,0,19,163,77,160,0,78,163,0,26,79,78,1,26,80,79,4,1,163,255,0,19,163,80,163,0,82,163,0,1,163,163,32,79,163,163,0,1,164,163,32,103,164,164,1,41,164,164,8,20,163,163,164,0,83,163,0,19,163,83,160,0,84,163,0,26,85,84,1,26,86,85,2,1,163,255,0,19,163,86,163,0,87,163,0,1,163,0,0,1,164,4,0,1,165,2,0,134,88,0,0,52,132,0,0,75,76,163,164,165,82,87,0,0,114,88,0,0,89,114,0,19,165,89,160,0,90,165,0,13,91,160,90,121,91,3,0,1,158,4,0,119,0,81,2,2,165,0,0,140,180,2,0,82,93,165,0,1,165,208,7,3,94,93,165,0,125,94,0,78,95,70,0,0,96,125,0,135,97,29,0,95,96,0,0,0,136,97,0,0,98,136,0,33,99,98,0,120,99,3,0,1,158,6,0,119,0,211,1,0,100,125,0,0,101,136,0,1,165,161,32,79,165,165,0,1,164,161,32,103,164,164,1,41,164,164,8,20,165,165,164,0,102,165,0,19,165,102,160,0,104,165,0,26,105,104,1,26,106,105,4,1,165,255,0,19,165,106,165,0,107,165,0,1,165,163,32,79,165,165,0,1,164,163,32,103,164,164,1,41,164,164,8,20,165,165,164,0,108,165,0,19,165,108,160,0,109,165,0,26,110,109,1,26,111,110,2,1,165,255,0,19,165,111,165,0,112,165,0,1,165,0,0,1,164,4,0,1,163,2,0,134,113,0,0,24,121,0,0,100,101,165,164,163,107,112,0,0,147,113,0,0,115,147,0,19,163,115,160,0,116,163,0,14,117,160,116,120,117,2,0,119,0,136,255,1,46,255,255,0,118,92,0,0,119,114,0,19,163,119,160,0,120,163,0,41,163,120,1,3,121,118,163,79,163,121,0,103,164,121,1,41,164,164,8,20,163,163,164,0,122,163,0,0,24,122,0,0,123,125,0,0,124,147,0,19,163,124,160,0,126,163,0,41,163,126,1,3,127,123,163,79,163,127,0,103,164,127,1,41,164,164,8,20,163,163,164,0,128,163,0,0,2,128,0,2,163,0,0,229,168,2,0,135,129,0,0,163,0,0,0,33,130,129,0,121,130,75,0,2,57,0,0,229,168,2,0,0,131,57,0,1,163,0,0,14,132,131,163,120,132,2,0,119,0,68,0,135,133,1,0,0,66,133,0,0,134,66,0,1,163,0,0,14,135,134,163,120,135,2,0,119,0,59,0,0,137,66,0,82,138,137,0,25,139,138,8,82,140,139,0,0,67,140,0,0,141,67,0,1,163,0,0,14,142,141,163,120,142,2,0,119,0,44,0,0,143,67,0,2,164,0,0,206,168,2,0,1,165,0,0,1,166,0,0,1,167,0,0,135,163,2,0,143,164,165,70,166,167,0,0,0,144,67,0,0,145,125,0,0,146,147,0,19,163,146,160,0,148,163,0,41,163,148,1,3,149,145,163,1,167,1,0,1,166,0,0,1,165,0,0,135,163,2,0,144,162,167,149,166,165,0,0,0,150,67,0,0,151,92,0,0,152,114,0,19,163,152,160,0,153,163,0,41,163,153,1,3,154,151,163,1,165,1,0,1,166,0,0,1,167,0,0,135,163,2,0,150,161,165,154,166,167,0,0,0,155,57,0,0,156,66,0,134,157,0,0,16,21,1,0,155,156,0,0,0,46,157,0,1,67,0,0,119,0,209,255,0,3,66,0,135,163,3,0,3,0,0,0,1,66,0,0,119,0,194,255,1,57,0,0,119,0,185,255,0,4,46,0,32,5,4,0,120,5,28,255,0,6,2,0,19,163,6,160,0,7,163,0,2,163,0,0,164,215,2,0,27,167,7,19,3,8,163,167,25,9,8,14,0,13,9,0,0,10,13,0,79,167,10,0,103,163,10,1,41,163,163,8,20,167,167,163,0,11,167,0,41,167,11,16,42,167,167,16,33,12,167,0,121,12,19,0,0,14,13,0,25,15,14,2,79,167,15,0,103,163,15,1,41,163,163,8,20,167,167,163,0,16,167,0,41,167,16,16,42,167,167,16,33,17,167,0,121,17,6,0,1,163,87,0,134,167,0,0,52,222,2,0,163,0,0,0,119,0,54,255,1,35,1,0,119,0,2,0,1,35,0,0,0,18,24,0,0,19,2,0,134,20,0,0,140,134,1,0,18,19,0,0,1,167,255,0,19,167,20,167,0,21,167,0,1,167,0,0,1,163,0,1,138,21,167,163,148,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,144,83,1,0,156,83,1,0,119,0,9,0,1,158,25,0,119,0,7,0,119,0,1,0,1,163,109,0,134,167,0,0,52,222,2,0,163,0,0,0,119,0,31,254,32,167,158,6,121,167,7,0,1,158,0,0,1,163,84,0,134,167,0,0,52,222,2,0,163,0,0,0,119,0,218,253,32,167,158,25,121,167,20,0,1,158,0,0,0,22,24,0,19,167,22,160,0,23,167,0,25,25,23,1,19,167,25,160,0,26,167,0,0,27,13,0,0,28,35,0,1,167,255,0,19,167,28,167,0,29,167,0,41,167,29,1,3,30,27,167,1,167,255,0,19,167,26,167,83,30,167,0,42,163,26,8,107,30,1,163,78,31,70,0,0,32,24,0,135,163,111,0,31,32,0,0,0,33,2,0,19,163,33,160,0,34,163,0,2,163,0,0,158,215,2,0,79,163,163,0,2,167,0,0,158,215,2,0,103,167,167,1,41,167,167,8,20,163,163,167,0,36,163,0,19,163,36,160,0,37,163,0,14,38,34,37,120,38,2,0,119,0,176,253,135,39,52,0,30,163,39,3,38,163,163,255,0,40,163,0,1,163,131,0,3,41,163,40,19,163,41,160,0,42,163,0,1,167,64,0,135,163,17,0,167,42,81,0,135,163,30,0,0,43,2,0,134,163,0,0,76,29,2,0,43,81,0,0,0,44,2,0,19,163,44,160,0,45,163,0,2,163,0,0,164,215,2,0,27,167,45,19,3,47,163,167,25,48,47,7,78,49,48,0,1,167,255,0,19,167,49,167,0,50,167,0,25,51,50,8,1,167,255,0,19,167,51,167,0,52,167,0,83,48,52,0,0,53,2,0,19,167,53,160,0,54,167,0,2,167,0,0,164,215,2,0,27,163,54,19,3,55,167,163,25,56,55,7,78,58,56,0,1,163,255,0,19,163,58,163,0,59,163,0,1,163,100,0,15,60,163,59,120,60,2,0,119,0,127,253,0,61,2,0,19,163,61,160,0,62,163,0,2,163,0,0,164,215,2,0,27,167,62,19,3,63,163,167,25,64,63,7,1,167,100,0,83,64,167,0,119,0,116,253,32,167,158,4,121,167,6,0,1,1,1,0,0,65,1,0,137,159,0,0,139,65,0,0,119,0,11,0,32,167,158,30,121,167,9,0,1,163,86,0,134,167,0,0,52,222,2,0,163,0,0,0,1,1,1,0,0,65,1,0,137,159,0,0,139,65,0,0,1,167,0,0,139,167,0,0,140,2,193,0,0,0,0,0,2,187,0,0,255,0,0,0,2,188,0,0,255,255,0,0,2,189,0,0,161,32,0,0,1,185,0,0,136,190,0,0,0,186,190,0,136,190,0,0,25,190,190,32,137,190,0,0,25,163,186,4,0,97,0,0,0,108,1,0,0,13,97,0,19,190,13,187,0,24,190,0,27,35,24,10,19,190,35,187,0,46,190,0,0,141,46,0,79,190,189,0,103,191,189,1,41,191,191,8,20,190,190,191,0,57,190,0,19,190,57,188,0,68,190,0,28,190,68,2,38,190,190,255,0,79,190,0,25,90,79,0,19,190,90,188,0,96,190,0,79,190,189,0,103,191,189,1,41,191,191,8,20,190,190,191,0,98,190,0,19,190,98,188,0,99,190,0,26,100,99,1,19,190,100,188,0,101,190,0,1,190,163,32,79,190,190,0,1,191,163,32,103,191,191,1,41,191,191,8,20,190,190,191,0,102,190,0,19,190,102,188,0,103,190,0,26,104,103,1,19,190,104,188,0,105,190,0,1,191,0,0,135,190,5,0,96,191,101,105,79,190,189,0,103,191,189,1,41,191,191,8,20,190,190,191,0,106,190,0,19,190,106,188,0,107,190,0,28,190,107,2,38,190,190,255,0,109,190,0,25,110,109,0,19,190,110,188,0,111,190,0,79,190,189,0,103,191,189,1,41,191,191,8,20,190,190,191,0,112,190,0,19,190,112,188,0,113,190,0,26,114,113,1,19,190,114,188,0,115,190,0,1,190,163,32,79,190,190,0,1,191,163,32,103,191,191,1,41,191,191,8,20,190,190,191,0,116,190,0,19,190,116,188,0,117,190,0,26,118,117,1,19,190,118,188,0,120,190,0,1,191,0,0,135,190,6,0,111,191,115,120,79,190,189,0,103,191,189,1,41,191,191,8,20,190,190,191,0,121,190,0,19,190,121,188,0,122,190,0,28,190,122,2,38,190,190,255,0,123,190,0,25,124,123,0,19,190,124,188,0,125,190,0,79,190,189,0,103,191,189,1,41,191,191,8,20,190,190,191,0,126,190,0,19,190,126,188,0,127,190,0,26,128,127,1,19,190,128,188,0,129,190,0,1,191,14,0,1,192,14,0,135,190,112,0,125,191,129,192,79,190,189,0,103,192,189,1,41,192,192,8,20,190,190,192,0,131,190,0,19,190,131,188,0,132,190,0,28,190,132,2,38,190,190,255,0,133,190,0,25,134,133,0,19,190,134,188,0,135,190,0,79,190,189,0,103,192,189,1,41,192,192,8,20,190,190,192,0,136,190,0,19,190,136,188,0,137,190,0,26,138,137,1,19,190,138,188,0,139,190,0,1,192,28,0,1,191,28,0,135,190,112,0,135,192,139,191,0,140,141,0,135,142,113,0,140,0,0,0,0,2,142,0,0,143,2,0,19,190,143,188,0,144,190,0,2,190,0,0,164,215,2,0,27,191,144,19,3,145,190,191,25,146,145,2,79,191,146,0,103,190,146,1,41,190,190,8,20,191,191,190,0,147,191,0,19,191,147,188,0,148,191,0,26,149,148,1,19,191,149,188,0,150,191,0,134,191,0,0,116,120,2,0,150,163,0,0,135,151,4,0,163,0,0,0,19,191,151,187,0,153,191,0,0,119,153,0,0,154,119,0,19,191,154,187,0,155,191,0,3,156,163,155,1,191,32,0,83,156,191,0,0,157,119,0,19,191,157,187,0,158,191,0,3,159,163,158,1,190,50,0,135,191,96,0,190,159,0,0,79,191,189,0,103,190,189,1,41,190,190,8,20,191,191,190,0,160,191,0,19,191,160,188,0,161,191,0,28,191,161,2,38,191,191,255,0,162,191,0,79,191,189,0,103,190,189,1,41,190,190,8,20,191,191,190,0,164,191,0,19,191,164,188,0,165,191,0,28,191,165,4,38,191,191,255,0,166,191,0,3,167,162,166,0,168,119,0,19,191,168,187,0,169,191,0,25,170,169,2,27,171,170,6,28,191,171,2,38,191,191,255,0,172,191,0,4,173,167,172,19,191,173,187,0,175,191,0,0,119,175,0,0,176,119,0,19,191,176,187,0,177,191,0,25,178,177,0,19,191,178,188,0,179,191,0,1,190,2,0,135,191,7,0,179,190,163,0,1,190,52,0,135,191,96,0,190,163,0,0,0,180,97,0,41,191,180,24,42,191,191,24,33,181,191,0,121,181,35,0,2,191,0,0,201,214,2,0,79,191,191,0,2,190,0,0,201,214,2,0,103,190,190,1,41,190,190,8,20,191,191,190,0,182,191,0,41,191,182,16,42,191,191,16,33,183,191,0,121,183,17,0,2,191,0,0,201,214,2,0,79,191,191,0,2,190,0,0,201,214,2,0,103,190,190,1,41,190,190,8,20,191,191,190,0,3,191,0,19,191,3,188,0,4,191,0,25,5,163,5,1,190,10,0,135,191,38,0,4,5,190,0,119,0,21,0,25,184,163,5,1,190,53,0,135,191,96,0,190,184,0,0,119,0,16,0,2,191,0,0,228,214,2,0,79,191,191,0,2,190,0,0,228,214,2,0,103,190,190,1,41,190,190,8,20,191,191,190,0,6,191,0,19,191,6,188,0,7,191,0,25,8,163,5,1,190,10,0,135,191,38,0,7,8,190,0,79,191,189,0,103,190,189,1,41,190,190,8,20,191,191,190,0,9,191,0,19,191,9,188,0,10,191,0,28,191,10,2,38,191,191,255,0,11,191,0,25,12,11,0,25,14,12,3,19,191,14,188,0,15,191,0,1,190,16,0,135,191,7,0,15,190,163,0,1,191,163,32,79,191,191,0,1,190,163,32,103,190,190,1,41,190,190,8,20,191,191,190,0,16,191,0,19,191,16,188,0,17,191,0,26,18,17,1,26,19,18,30,28,191,19,12,38,191,191,255,0,20,191,0,19,191,20,187,0,21,191,0,0,130,21,0,0,22,141,0,19,191,22,187,0,23,191,0,0,25,108,0,19,191,25,187,0,26,191,0,3,27,26,23,19,191,27,187,0,28,191,0,0,108,28,0,1,119,0,0,0,29,119,0,19,191,29,187,0,30,191,0,0,31,130,0,19,191,31,187,0,32,191,0,15,33,30,32,120,33,3,0,1,185,11,0,119,0,125,0,0,34,119,0,19,191,34,187,0,36,191,0,0,37,108,0,19,191,37,187,0,38,191,0,3,39,36,38,19,191,39,187,0,40,191,0,0,152,40,0,0,41,152,0,19,191,41,187,0,42,191,0,0,43,141,0,19,191,43,187,0,44,191,0,4,45,42,44,1,191,10,0,17,47,191,45,121,47,3,0,1,185,11,0,119,0,103,0,0,48,152,0,19,191,48,187,0,49,191,0,2,191,0,0,232,214,2,0,41,190,49,1,3,50,191,190,79,190,50,0,103,191,50,1,41,191,191,8,20,190,190,191,0,51,190,0,0,2,51,0,0,52,2,0,41,190,52,16,42,190,190,16,33,53,190,0,120,53,3,0,1,185,11,0,119,0,83,0,0,54,2,0,19,190,54,188,0,55,190,0,26,56,55,1,19,190,56,188,0,58,190,0,0,2,58,0,0,59,2,0,19,190,59,188,0,60,190,0,2,190,0,0,164,215,2,0,27,191,60,19,3,61,190,191,25,62,61,12,79,191,62,0,103,190,62,1,41,190,190,8,20,191,191,190,0,63,191,0,0,174,63,0,0,64,2,0,134,191,0,0,116,120,2,0,64,163,0,0,135,65,4,0,163,0,0,0,19,191,65,187,0,66,191,0,0,152,66,0,0,67,152,0,19,191,67,187,0,69,191,0,3,70,163,69,0,71,152,0,19,191,71,187,0,72,191,0,1,191,20,0,4,73,191,72,1,190,32,0,135,191,16,0,70,190,73,0,0,74,174,0,19,191,74,188,0,75,191,0,25,76,163,8,1,190,10,0,135,191,38,0,75,76,190,0,79,191,189,0,103,190,189,1,41,190,190,8,20,191,191,190,0,77,191,0,19,191,77,188,0,78,191,0,28,191,78,2,38,191,191,255,0,80,191,0,25,81,80,0,25,82,81,3,19,191,82,188,0,83,191,0,0,84,119,0,19,191,84,187,0,85,191,0,25,86,85,2,27,87,86,12,25,88,87,0,25,89,88,6,19,191,89,188,0,91,191,0,135,191,7,0,83,91,163,0,0,92,119,0,19,191,92,187,0,93,191,0,25,94,93,1,19,191,94,187,0,95,191,0,0,119,95,0,119,0,123,255,32,191,185,11,121,191,3,0,137,186,0,0,139,0,0,0,139,0,0,0,140,0,143,0,0,0,0,0,2,135,0,0,255,0,0,0,2,136,0,0,9,173,0,0,2,137,0,0,255,255,0,0,1,133,0,0,136,138,0,0,0,134,138,0,136,138,0,0,25,138,138,96,137,138,0,0,25,67,134,48,25,78,134,40,25,89,134,32,25,100,134,24,25,24,134,20,1,1,0,0,1,56,68,0,1,138,8,0,19,138,138,135,83,78,138,0,1,139,8,0,42,139,139,8,107,78,1,139,25,35,78,4,1,139,56,0,19,139,139,135,83,35,139,0,1,138,56,0,42,138,138,8,107,35,1,138,25,39,78,2,1,138,8,0,19,138,138,135,83,39,138,0,1,139,8,0,42,139,139,8,107,39,1,139,1,139,163,32,79,139,139,0,1,138,163,32,103,138,138,1,41,138,138,8,20,139,139,138,0,40,139,0,19,139,40,137,0,41,139,0,26,42,41,1,26,43,42,20,19,139,43,135,0,44,139,0,0,45,44,0,1,139,163,32,79,139,139,0,1,138,163,32,103,138,138,1,41,138,138,8,20,139,139,138,0,46,139,0,19,139,46,137,0,47,139,0,26,48,47,1,26,49,48,20,0,50,56,0,19,139,50,135,0,51,139,0,15,52,51,49,121,52,3,0,0,53,56,0,0,45,53,0,0,54,45,0,19,139,54,135,0,55,139,0,25,57,78,6,19,139,55,135,83,57,139,0,42,138,55,8,107,57,1,138,1,138,161,32,79,138,138,0,1,139,161,32,103,139,139,1,41,139,139,8,20,138,138,139,0,58,138,0,19,138,58,137,0,59,138,0,26,60,59,1,26,61,60,0,42,138,61,1,0,62,138,0,19,138,62,135,0,63,138,0,0,45,63,0,0,64,45,0,19,138,64,135,0,65,138,0,26,66,65,12,19,138,66,137,0,68,138,0,19,138,68,135,83,89,138,0,42,139,68,8,107,89,1,139,0,69,45,0,19,139,69,135,0,70,139,0,25,71,70,12,19,139,71,137,0,72,139,0,25,73,89,4,19,139,72,135,83,73,139,0,42,138,72,8,107,73,1,138,1,138,163,32,79,138,138,0,1,139,163,32,103,139,139,1,41,139,139,8,20,138,138,139,0,74,138,0,19,138,74,137,0,75,138,0,26,76,75,1,26,77,76,0,42,138,77,1,0,79,138,0,19,138,79,135,0,80,138,0,0,45,80,0,0,81,45,0,19,138,81,135,0,82,138,0,26,83,82,12,19,138,83,137,0,84,138,0,25,85,89,2,19,138,84,135,83,85,138,0,42,139,84,8,107,85,1,139,0,86,45,0,19,139,86,135,0,87,139,0,25,88,87,12,19,139,88,137,0,90,139,0,25,91,89,6,19,139,90,135,83,91,139,0,42,138,90,8,107,91,1,138,25,92,78,4,79,138,92,0,103,139,92,1,41,139,139,8,20,138,138,139,0,93,138,0,19,138,93,135,83,100,138,0,42,139,93,8,107,100,1,139,25,94,78,2,79,139,94,0,103,138,94,1,41,138,138,8,20,139,139,138,0,95,139,0,41,139,95,16,42,139,139,16,0,96,139,0,25,97,96,12,19,139,97,137,0,98,139,0,25,99,100,2,19,139,98,135,83,99,139,0,42,138,98,8,107,99,1,138,79,138,100,0,103,139,100,1,41,139,139,8,20,138,138,139,0,101,138,0,41,138,101,16,42,138,138,16,0,102,138,0,25,103,102,48,19,138,103,137,0,104,138,0,25,105,100,4,19,138,104,135,83,105,138,0,42,139,104,8,107,105,1,139,25,106,100,2,79,139,106,0,103,138,106,1,41,138,138,8,20,139,139,138,0,107,139,0,41,139,107,16,42,139,139,16,0,108,139,0,25,109,108,12,19,139,109,137,0,110,139,0,25,112,100,6,19,139,110,135,83,112,139,0,42,138,110,8,107,112,1,138,1,111,176,18,1,138,185,18,135,113,0,0,138,0,0,0,33,114,113,0,121,114,61,0,1,122,185,18,0,115,122,0,1,138,0,0,14,116,115,138,120,116,2,0,119,0,55,0,135,117,1,0,0,2,117,0,0,118,2,0,1,138,0,0,14,119,118,138,120,119,2,0,119,0,15,0,0,120,2,0,82,121,120,0,25,123,121,8,82,124,123,0,0,13,124,0,0,125,13,0,1,138,0,0,14,126,125,138,120,126,8,0,0,6,2,0,135,138,3,0,6,0,0,0,1,2,0,0,119,0,238,255,1,122,0,0,119,0,229,255,1,138,0,0,83,24,138,0,0,127,13,0,1,139,195,18,1,140,0,0,1,141,0,0,1,142,0,0,135,138,2,0,127,139,140,24,141,142,0,0,0,128,122,0,0,129,2,0,134,138,0,0,16,21,1,0,128,129,0,0,0,130,2,0,135,138,3,0,130,0,0,0,78,131,24,0,19,138,131,135,0,132,138,0,33,3,132,0,1,138,1,0,125,4,3,135,138,0,0,0,19,138,4,135,0,5,138,0,0,0,5,0,0,38,0,0,137,134,0,0,139,38,0,0,1,56,0,0,1,142,9,0,135,138,65,0,142,67,0,0,0,7,56,0,19,138,7,135,0,8,138,0,134,9,0,0,0,0,0,0,78,8,67,0,19,138,9,135,0,10,138,0,0,56,10,0,0,11,56,0,19,138,11,135,0,12,138,0,1,138,0,0,1,142,0,1,138,12,138,142,240,101,1,0,244,101,1,0,248,101,1,0,0,102,1,0,8,102,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,236,101,1,0,16,102,1,0,119,0,30,0,119,0,81,0,119,0,9,0,1,133,20,0,119,0,26,0,1,133,21,0,119,0,24,0,1,133,22,0,119,0,22,0,1,133,19,0,119,0,72,0,0,14,111,0,1,138,0,0,134,15,0,0,0,0,0,0,100,138,14,0,19,138,15,135,0,16,138,0,19,138,16,135,0,17,138,0,13,18,17,135,120,18,3,0,1,133,17,0,119,0,59,0,2,138,0,0,36,180,2,0,82,19,138,0,135,138,45,0,19,0,0,0,119,0,212,254,32,138,133,20,121,138,6,0,1,133,0,0,2,1,0,0,222,214,2,0,1,45,10,0,119,0,14,0,32,138,133,21,121,138,6,0,1,133,0,0,2,1,0,0,223,214,2,0,1,45,11,0,119,0,7,0,32,138,133,22,121,138,5,0,1,133,0,0,2,1,0,0,221,214,2,0,1,45,10,0,0,22,1,0,1,138,0,0,14,23,22,138,120,23,2,0,119,0,184,254,0,25,45,0,135,138,65,0,25,67,0,0,0,26,1,0,78,27,26,0,19,138,27,135,0,28,138,0,134,29,0,0,0,0,0,0,89,28,67,0,19,138,29,135,0,30,138,0,0,45,30,0,0,31,45,0,19,138,31,135,0,32,138,0,14,33,32,135,121,33,4,0,0,34,45,0,0,36,1,0,83,36,34,0,2,138,0,0,36,180,2,0,82,37,138,0,135,138,45,0,37,0,0,0,119,0,157,254,32,138,133,17,121,138,6,0,2,138,0,0,217,214,2,0,1,142,2,0,83,138,142,0,119,0,12,0,32,142,133,19,121,142,10,0,2,142,0,0,36,180,2,0,82,21,142,0,135,142,45,0,21,0,0,0,1,0,1,0,0,38,0,0,137,134,0,0,139,38,0,0,2,142,0,0,36,180,2,0,82,20,142,0,135,142,45,0,20,0,0,0,1,0,255,255,0,38,0,0,137,134,0,0,139,38,0,0,140,1,146,0,0,0,0,0,2,142,0,0,255,0,0,0,2,143,0,0,20,108,3,0,1,140,0,0,136,144,0,0,0,141,144,0,136,144,0,0,25,144,144,48,137,144,0,0,25,118,141,24,0,3,0,0,2,144,0,0,140,180,2,0,82,129,144,0,0,52,129,0,0,4,52,0,135,15,73,0,41,144,15,1,3,26,4,144,0,63,26,0,0,37,3,0], eb + 81920);
  HEAPU8.set([0,46,52,0,135,47,29,0,37,46,0,0,0,96,47,0,1,74,0,0,0,48,74,0,0,49,96,0,16,50,48,49,120,50,2,0,119,0,39,1,135,51,52,0,30,144,51,8,38,144,144,255,0,53,144,0,0,85,53,0,0,54,3,0,0,55,63,0,135,56,74,0,54,55,0,0,19,144,56,142,0,57,144,0,0,107,57,0,0,58,107,0,33,59,58,0,121,59,2,0,1,85,0,0,0,60,85,0,1,144,0,0,1,145,8,0,138,60,144,145,160,104,1,0,76,105,1,0,164,105,1,0,168,105,1,0,48,106,1,0,184,106,1,0,64,107,1,0,200,107,1,0,1,140,19,0,119,0,204,0,0,61,107,0,33,62,61,0,121,62,201,0,135,64,52,0,0,65,107,0,9,144,64,65,38,144,144,255,0,66,144,0,0,85,66,0,0,67,3,0,19,144,67,142,0,68,144,0,27,144,68,37,3,69,143,144,25,70,69,1,79,144,70,0,103,145,70,1,41,145,145,8,20,144,144,145,0,71,144,0,0,72,63,0,0,73,85,0,41,144,73,1,3,75,72,144,79,144,75,0,103,145,75,1,41,145,145,8,20,144,144,145,0,76,144,0,2,144,0,0,255,255,0,0,19,144,76,144,0,77,144,0,2,144,0,0,164,215,2,0,27,145,77,19,3,78,144,145,25,79,78,2,19,145,71,142,83,79,145,0,42,144,71,8,107,79,1,144,119,0,161,0,0,80,107,0,33,81,80,0,121,81,158,0,135,82,52,0,0,83,107,0,9,144,82,83,38,144,144,255,0,84,144,0,0,85,84,0,0,86,3,0,0,87,63,0,0,88,85,0,41,144,88,1,3,89,87,144,79,144,89,0,103,145,89,1,41,145,145,8,20,144,144,145,0,90,144,0,135,144,31,0,86,90,0,0,119,0,139,0,119,0,138,0,0,91,3,0,19,144,91,142,0,92,144,0,27,144,92,37,3,93,143,144,25,94,93,1,79,144,94,0,103,145,94,1,41,145,145,8,20,144,144,145,0,95,144,0,0,97,63,0,135,98,114,0,95,97,0,0,19,144,98,142,0,99,144,0,0,107,99,0,0,100,107,0,33,101,100,0,121,101,118,0,135,102,52,0,0,103,107,0,9,144,102,103,38,144,144,255,0,104,144,0,0,85,104,0,0,105,63,0,0,106,85,0,41,144,106,1,3,108,105,144,1,1,15,0,0,2,108,0,1,140,18,0,119,0,104,0,0,109,3,0,19,144,109,142,0,110,144,0,27,144,110,37,3,111,143,144,25,112,111,1,79,144,112,0,103,145,112,1,41,145,145,8,20,144,144,145,0,113,144,0,0,114,63,0,135,115,114,0,113,114,0,0,19,144,115,142,0,116,144,0,0,107,116,0,0,117,107,0,33,119,117,0,121,119,84,0,135,120,52,0,0,121,107,0,9,144,120,121,38,144,144,255,0,122,144,0,0,85,122,0,0,123,63,0,0,124,85,0,41,144,124,1,3,125,123,144,1,1,16,0,0,2,125,0,1,140,18,0,119,0,70,0,0,126,3,0,19,144,126,142,0,127,144,0,27,144,127,37,3,128,143,144,25,130,128,1,79,144,130,0,103,145,130,1,41,145,145,8,20,144,144,145,0,131,144,0,0,132,63,0,135,133,115,0,131,132,0,0,19,144,133,142,0,134,144,0,0,107,134,0,0,135,107,0,33,136,135,0,121,136,50,0,135,137,52,0,0,138,107,0,9,144,137,138,38,144,144,255,0,139,144,0,0,85,139,0,0,5,63,0,0,6,85,0,41,144,6,1,3,7,5,144,1,1,17,0,0,2,7,0,1,140,18,0,119,0,36,0,0,8,3,0,19,144,8,142,0,9,144,0,27,144,9,37,3,10,143,144,25,11,10,1,79,144,11,0,103,145,11,1,41,145,145,8,20,144,144,145,0,12,144,0,0,13,63,0,135,14,116,0,12,13,0,0,19,144,14,142,0,16,144,0,0,107,16,0,0,17,107,0,33,18,17,0,121,18,16,0,135,19,52,0,0,20,107,0,9,144,19,20,38,144,144,255,0,21,144,0,0,85,21,0,0,22,63,0,0,23,85,0,41,144,23,1,3,24,22,144,1,1,19,0,0,2,24,0,1,140,18,0,119,0,2,0,119,0,1,0,32,144,140,18,121,144,14,0,1,140,0,0,79,144,2,0,103,145,2,1,41,145,145,8,20,144,144,145,0,25,144,0,25,27,118,4,19,144,25,142,83,27,144,0,42,145,25,8,107,27,1,145,83,118,1,0,1,140,19,0,32,145,140,19,121,145,41,0,1,140,0,0,0,28,52,0,0,29,74,0,41,145,29,1,3,30,28,145,79,145,30,0,103,144,30,1,41,144,144,8,20,145,145,144,0,31,145,0,25,32,118,1,19,145,31,142,83,32,145,0,42,144,31,8,107,32,1,144,0,33,3,0,25,34,118,3,83,34,33,0,25,35,118,13,1,144,0,0,83,35,144,0,134,36,0,0,12,186,2,0,118,0,0,0,41,144,36,24,42,144,144,24,33,38,144,0,121,38,13,0,0,39,3,0,0,40,52,0,0,41,74,0,41,144,41,1,3,42,40,144,79,144,42,0,103,145,42,1,41,145,145,8,20,144,144,145,0,43,144,0,135,144,31,0,39,43,0,0,0,44,74,0,25,45,44,1,0,74,45,0,119,0,214,254,137,141,0,0,139,0,0,0,140,2,157,0,0,0,0,0,2,153,0,0,255,0,0,0,2,154,0,0,255,255,0,0,1,151,0,0,136,155,0,0,0,152,155,0,136,155,0,0,25,155,155,48,137,155,0,0,25,118,152,20,0,74,0,0,0,85,1,0,0,59,74,0,25,60,59,3,78,61,60,0,0,96,61,0,0,62,96,0,19,155,62,153,0,64,155,0,2,155,0,0,17,215,2,0,27,156,64,7,3,65,155,156,25,66,65,6,78,67,66,0,19,156,67,153,0,68,156,0,32,69,68,2,121,69,5,0,1,63,0,0,0,58,63,0,137,152,0,0,139,58,0,0,0,70,96,0,135,71,113,0,70,0,0,0,0,13,71,0,0,72,13,0,19,156,72,154,0,73,156,0,2,156,0,0,164,215,2,0,27,155,73,19,3,75,156,155,0,2,75,0,135,76,52,0,19,155,76,154,0,77,155,0,0,140,77,0,0,78,85,0,19,155,78,153,0,79,155,0,32,80,79,0,121,80,65,0,0,81,140,0,19,155,81,154,0,82,155,0,1,155,150,0,8,155,82,155,38,155,155,255,0,83,155,0,0,84,2,0,25,86,84,6,78,87,86,0,19,155,87,153,0,88,155,0,15,89,88,83,121,89,5,0,1,63,0,0,0,58,63,0,137,152,0,0,139,58,0,0,0,90,2,0,135,91,67,0,90,0,0,0,19,155,91,153,0,92,155,0,33,93,92,5,121,93,40,0,0,94,13,0,134,95,0,0,240,136,2,0,94,0,0,0,0,129,95,0,0,97,129,0,19,155,97,154,0,98,155,0,42,155,98,1,0,99,155,0,0,100,129,0,19,155,100,154,0,101,155,0,3,102,101,99,19,155,102,154,0,103,155,0,0,129,103,0,135,104,52,0,0,105,129,0,19,155,105,154,0,106,155,0,8,155,104,106,38,155,155,255,0,108,155,0,0,109,2,0,25,110,109,12,79,155,110,0,103,156,110,1,41,156,156,8,20,155,155,156,0,111,155,0,19,155,111,154,0,112,155,0,15,113,108,112,121,113,5,0,1,63,0,0,0,58,63,0,137,152,0,0,139,58,0,0,0,114,96,0,134,155,0,0,180,234,1,0,114,118,0,0,0,115,85,0,19,155,115,153,0,116,155,0,32,117,116,0,121,117,53,0,1,155,66,20,78,119,155,0,19,155,119,153,0,120,155,0,32,121,120,0,121,121,47,0,0,122,140,0,19,155,122,154,0,123,155,0,135,124,4,0,118,0,0,0,9,155,123,124,38,155,155,255,0,125,155,0,19,155,125,153,0,126,155,0,0,107,126,0,0,127,107,0,19,155,127,153,0,128,155,0,41,155,128,1,3,130,118,155,79,155,130,0,103,156,130,1,41,156,156,8,20,155,155,156,0,131,155,0,0,24,131,0,0,132,24,0,0,133,96,0,135,134,117,0,132,133,0,0,41,155,134,24,42,155,155,24,33,135,155,0,121,135,6,0,1,63,0,0,0,58,63,0,137,152,0,0,139,58,0,0,119,0,12,0,0,136,74,0,0,137,2,0,0,138,24,0,0,139,96,0,134,141,0,0,116,92,2,0,136,137,138,139,0,63,141,0,0,58,63,0,137,152,0,0,139,58,0,0,135,142,4,0,118,0,0,0,19,155,142,153,0,143,155,0,0,35,143,0,0,144,35,0,19,155,144,153,0,145,155,0,1,155,0,0,15,146,155,145,120,146,3,0,1,151,23,0,119,0,113,0,135,147,52,0,0,148,35,0,19,155,148,153,0,149,155,0,0,150,35,0,19,155,150,153,0,3,155,0,5,4,149,3,8,155,147,4,38,155,155,255,0,5,155,0,19,155,5,154,0,6,155,0,0,46,6,0,0,7,46,0,19,155,7,154,0,8,155,0,135,9,118,0,8,0,0,0,19,155,9,154,0,10,155,0,0,11,35,0,19,155,11,153,0,12,155,0,8,155,10,12,38,155,155,255,0,14,155,0,19,155,14,153,0,15,155,0,0,57,15,0,0,16,57,0,19,155,16,153,0,17,155,0,41,155,17,1,3,18,118,155,79,155,18,0,103,156,18,1,41,156,156,8,20,155,155,156,0,19,155,0,0,24,19,0,0,20,24,0,19,155,20,154,0,21,155,0,33,22,21,30,121,22,22,0,0,23,24,0,0,25,96,0,135,26,117,0,23,25,0,0,19,155,26,153,0,27,155,0,32,28,27,0,121,28,14,0,0,29,74,0,0,30,2,0,0,31,24,0,0,32,96,0,134,33,0,0,116,92,2,0,29,30,31,32,41,155,33,24,42,155,155,24,33,34,155,0,121,34,3,0,1,151,19,0,119,0,46,0,0,36,57,0,19,155,36,153,0,37,155,0,0,38,35,0,19,155,38,153,0,39,155,0,26,40,39,1,15,41,37,40,120,41,2,0,119,0,28,0,0,42,57,0,19,155,42,153,0,43,155,0,25,44,43,1,41,155,44,1,3,45,118,155,79,155,45,0,103,156,45,1,41,156,156,8,20,155,155,156,0,47,155,0,0,48,57,0,19,155,48,153,0,49,155,0,41,155,49,1,3,50,118,155,19,155,47,153,83,50,155,0,42,156,47,8,107,50,1,156,0,51,57,0,25,156,51,1,41,156,156,24,42,156,156,24,0,52,156,0,0,57,52,0,119,0,220,255,0,53,35,0,19,156,53,153,0,54,156,0,26,55,54,1,19,156,55,153,0,56,156,0,0,35,56,0,119,0,137,255,32,156,151,19,121,156,6,0,1,63,1,0,0,58,63,0,137,152,0,0,139,58,0,0,119,0,7,0,32,156,151,23,121,156,5,0,1,63,0,0,0,58,63,0,137,152,0,0,139,58,0,0,1,156,0,0,139,156,0,0,140,1,151,0,0,0,0,0,2,145,0,0,255,255,0,0,2,146,0,0,255,0,0,0,2,147,0,0,164,215,2,0,1,143,0,0,136,148,0,0,0,144,148,0,136,148,0,0,25,148,148,32,137,148,0,0,0,1,0,0,0,121,1,0,134,148,0,0,116,217,2,0,121,0,0,0,2,148,0,0,140,180,2,0,82,132,148,0,0,66,132,0,0,2,66,0,1,148,136,20,78,13,148,0,19,148,13,146,0,24,148,0,3,35,2,24,0,77,35,0,0,46,1,0,0,50,66,0,135,51,23,0,46,50,0,0,19,148,51,146,0,52,148,0,0,99,52,0,0,53,99,0,33,54,53,0,0,56,1,0,120,54,6,0,134,148,0,0,20,220,2,0,56,0,0,0,137,144,0,0,139,0,0,0,0,57,77,0,135,58,119,0,56,57,0,0,0,110,58,0,0,59,110,0,33,60,59,0,0,61,1,0,120,60,33,0,134,148,0,0,20,220,2,0,61,0,0,0,1,55,0,0,0,37,55,0,0,38,99,0,16,39,37,38,120,39,2,0,119,0,22,0,0,40,66,0,0,41,55,0,3,42,40,41,78,43,42,0,19,148,43,146,0,44,148,0,2,148,0,0,20,108,3,0,27,149,44,37,3,45,148,149,25,47,45,1,1,149,0,0,19,149,149,146,83,47,149,0,1,148,0,0,42,148,148,8,107,47,1,148,0,48,55,0,25,49,48,1,0,55,49,0,119,0,231,255,137,144,0,0,139,0,0,0,19,148,61,145,0,62,148,0,2,148,0,0,158,215,2,0,79,148,148,0,2,149,0,0,158,215,2,0,103,149,149,1,41,149,149,8,20,148,148,149,0,63,148,0,19,148,63,145,0,64,148,0,13,65,62,64,121,65,67,0,1,149,80,0,134,148,0,0,52,222,2,0,149,0,0,0,0,67,77,0,0,68,110,0,1,148,161,32,79,148,148,0,1,149,161,32,103,149,149,1,41,149,149,8,20,148,148,149,0,69,148,0,19,148,69,145,0,70,148,0,26,71,70,1,26,72,71,4,19,148,72,146,0,73,148,0,1,148,163,32,79,148,148,0,1,149,163,32,103,149,149,1,41,149,149,8,20,148,148,149,0,74,148,0,19,148,74,145,0,75,148,0,26,76,75,1,26,78,76,2,19,148,78,146,0,79,148,0,1,148,0,0,1,149,4,0,1,150,2,0,134,80,0,0,24,121,0,0,67,68,148,149,150,73,79,0,0,88,80,0,0,81,88,0,19,150,81,145,0,82,150,0,13,83,145,82,120,83,216,255,119,0,1,0,0,84,77,0,0,85,88,0,19,150,85,145,0,86,150,0,41,150,86,1,3,87,84,150,79,150,87,0,103,149,87,1,41,149,149,8,20,150,150,149,0,89,150,0,2,150,0,0,158,215,2,0,19,149,89,146,83,150,149,0,2,149,0,0,158,215,2,0,42,150,89,8,107,149,1,150,119,0,54,0,1,88,0,0,1,55,1,0,0,90,55,0,0,91,110,0,16,92,90,91,120,92,2,0,119,0,47,0,0,93,77,0,0,94,88,0,19,150,94,145,0,95,150,0,41,150,95,1,3,96,93,150,79,150,96,0,103,149,96,1,41,149,149,8,20,150,150,149,0,97,150,0,19,150,97,145,0,98,150,0,27,150,98,19,3,100,147,150,25,101,100,6,78,102,101,0,19,150,102,146,0,103,150,0,0,104,77,0,0,105,55,0,41,150,105,1,3,106,104,150,79,150,106,0,103,149,106,1,41,149,149,8,20,150,150,149,0,107,150,0,19,150,107,145,0,108,150,0,27,150,108,19,3,109,147,150,25,111,109,6,78,112,111,0,19,150,112,146,0,113,150,0,15,114,103,113,121,114,5,0,0,115,55,0,19,150,115,145,0,116,150,0,0,88,116,0,0,117,55,0,25,118,117,1,0,55,118,0,119,0,206,255,0,119,77,0,0,120,88,0,19,150,120,145,0,122,150,0,41,150,122,1,3,123,119,150,79,150,123,0,103,149,123,1,41,149,149,8,20,150,150,149,0,124,150,0,134,150,0,0,252,220,2,0,124,0,0,0,0,125,77,0,0,126,88,0,19,150,126,145,0,127,150,0,41,150,127,1,3,128,125,150,79,150,128,0,103,149,128,1,41,149,149,8,20,150,150,149,0,129,150,0,19,150,129,145,0,130,150,0,27,150,130,19,3,131,147,150,25,133,131,7,1,150,100,0,83,133,150,0,1,55,0,0,0,134,55,0,0,135,99,0,16,136,134,135,120,136,2,0,119,0,36,0,0,137,77,0,0,138,88,0,19,150,138,145,0,139,150,0,41,150,139,1,3,140,137,150,79,150,140,0,103,149,140,1,41,149,149,8,20,150,150,149,0,141,150,0,19,150,141,145,0,142,150,0,25,3,142,1,19,150,3,145,0,4,150,0,0,5,66,0,0,6,55,0,3,7,5,6,78,8,7,0,19,150,8,146,0,9,150,0,2,150,0,0,20,108,3,0,27,149,9,37,3,10,150,149,25,11,10,1,19,149,4,146,83,11,149,0,42,150,4,8,107,11,1,150,0,12,55,0,25,14,12,1,0,55,14,0,119,0,217,255,1,55,0,0,0,15,55,0,0,16,110,0,16,17,15,16,120,17,2,0,119,0,39,0,0,18,77,0,0,19,88,0,19,150,19,145,0,20,150,0,41,150,20,1,3,21,18,150,79,150,21,0,103,149,21,1,41,149,149,8,20,150,150,149,0,22,150,0,19,150,22,145,0,23,150,0,25,25,23,1,19,150,25,145,0,26,150,0,0,27,77,0,0,28,55,0,41,150,28,1,3,29,27,150,79,150,29,0,103,149,29,1,41,149,149,8,20,150,150,149,0,30,150,0,19,150,30,145,0,31,150,0,27,150,31,19,3,32,147,150,25,33,32,2,19,150,26,146,83,33,150,0,42,149,26,8,107,33,1,149,0,34,55,0,25,36,34,1,0,55,36,0,119,0,214,255,137,144,0,0,139,0,0,0,140,1,124,0,0,0,0,0,2,119,0,0,255,0,0,0,2,120,0,0,255,255,0,0,2,121,0,0,200,0,0,0,1,117,0,0,136,122,0,0,0,118,122,0,136,122,0,0,25,122,122,64,137,122,0,0,25,73,118,44,0,2,0,0,0,25,2,0,19,122,25,119,0,26,122,0,2,122,0,0,20,108,3,0,27,123,26,37,3,27,122,123,0,24,27,0,0,28,24,0,25,30,28,7,0,3,30,0,0,31,24,0,25,32,31,5,79,123,32,0,103,122,32,1,41,122,122,8,20,123,123,122,0,33,123,0,0,14,33,0,0,34,24,0,25,35,34,11,0,84,35,0,0,36,24,0,25,37,36,9,79,123,37,0,103,122,37,1,41,122,122,8,20,123,123,122,0,38,123,0,0,95,38,0,0,39,24,0,25,41,39,13,0,22,41,0,0,42,24,0,25,43,42,19,0,23,43,0,2,123,0,0,140,180,2,0,82,44,123,0,0,29,44,0,0,45,2,0,0,46,29,0,135,47,29,0,45,46,0,0,0,62,47,0,1,40,0,0,0,48,40,0,0,49,62,0,16,50,48,49,120,50,2,0,119,0,10,1,135,52,52,0,30,123,52,5,38,123,123,255,0,53,123,0,0,51,53,0,0,54,51,0,1,123,0,0,1,122,5,0,138,54,123,122,104,120,1,0,24,121,1,0,200,121,1,0,212,121,1,0,92,123,1,0,1,117,13,0,119,0,191,0,1,21,200,0,0,55,21,0,19,123,55,120,0,56,123,0,0,57,3,0,79,123,57,0,103,122,57,1,41,122,122,8,20,123,123,122,0,58,123,0,19,123,58,120,0,59,123,0,3,60,59,56,19,123,60,120,0,61,123,0,19,123,61,119,83,57,123,0,42,122,61,8,107,57,1,122,0,63,3,0,79,122,63,0,103,123,63,1,41,123,123,8,20,122,122,123,0,64,122,0,19,122,64,120,0,65,122,0,0,66,14,0,19,122,66,120,0,67,122,0,15,68,67,65,121,68,10,0,0,69,14,0,0,70,3,0,19,122,69,119,83,70,122,0,42,123,69,8,107,70,1,123,1,1,1,0,1,117,12,0,119,0,150,0,1,1,1,0,1,117,12,0,119,0,147,0,1,106,200,0,0,71,106,0,19,123,71,120,0,72,123,0,0,74,84,0,79,123,74,0,103,122,74,1,41,122,122,8,20,123,123,122,0,75,123,0,19,123,75,120,0,76,123,0,3,77,76,72,19,123,77,120,0,78,123,0,19,123,78,119,83,74,123,0,42,122,78,8,107,74,1,122,0,79,84,0,79,122,79,0,103,123,79,1,41,123,123,8,20,122,122,123,0,80,122,0,19,122,80,120,0,81,122,0,0,82,95,0,19,122,82,120,0,83,122,0,15,85,83,81,121,85,10,0,0,86,95,0,0,87,84,0,19,122,86,119,83,87,122,0,42,123,86,8,107,87,1,123,1,1,2,0,1,117,12,0,119,0,106,0,1,1,2,0,1,117,12,0,119,0,103,0,1,1,3,0,1,117,12,0,119,0,100,0,0,88,22,0,78,89,88,0,19,123,89,119,0,90,123,0,25,91,90,4,19,123,91,119,0,92,123,0,83,88,92,0,0,93,22,0,78,94,93,0,19,123,94,119,0,96,123,0,1,123,100,0,15,97,123,96,121,97,4,0,0,98,22,0,1,123,100,0,83,98,123,0,0,99,23,0,79,123,99,0,103,122,99,1,41,122,122,8,20,123,123,122,103,122,99,2,41,122,122,16,20,123,123,122,103,122,99,3,41,122,122,24,20,123,123,122,0,100,123,0,25,101,100,100,19,123,101,119,83,99,123,0,42,122,101,8,19,122,122,119,107,99,1,122,42,123,101,16,19,123,123,119,107,99,2,123,42,122,101,24,107,99,3,122,0,102,23,0,79,122,102,0,103,123,102,1,41,123,123,8,20,122,122,123,103,123,102,2,41,123,123,16,20,122,122,123,103,123,102,3,41,123,123,24,20,122,122,123,0,103,122,0,0,104,24,0,25,105,104,15,79,122,105,0,103,123,105,1,41,123,123,8,20,122,122,123,103,123,105,2,41,123,123,16,20,122,122,123,103,123,105,3,41,123,123,24,20,122,122,123,0,107,122,0,16,108,107,103,121,108,28,0,0,109,24,0,25,110,109,15,79,122,110,0,103,123,110,1,41,123,123,8,20,122,122,123,103,123,110,2,41,123,123,16,20,122,122,123,103,123,110,3,41,123,123,24,20,122,122,123,0,111,122,0,0,112,23,0,19,122,111,119,83,112,122,0,42,123,111,8,19,123,123,119,107,112,1,123,42,122,111,16,19,122,122,119,107,112,2,122,42,123,111,24,107,112,3,123,1,1,5,0,1,117,12,0,119,0,5,0,1,1,5,0,1,117,12,0,119,0,2,0,119,0,1,0,32,123,117,12,121,123,4,0,1,117,0,0,83,73,1,0,1,117,13,0,32,123,117,13,121,123,49,0,1,117,0,0,0,113,29,0,0,114,40,0,41,123,114,1,3,115,113,123,79,123,115,0,103,122,115,1,41,122,122,8,20,123,123,122,0,116,123,0,25,4,73,1,19,123,116,119,83,4,123,0,42,122,116,8,107,4,1,122,0,5,2,0,25,6,73,3,83,6,5,0,0,7,2,0,19,122,7,119,0,8,122,0,25,9,73,4,19,122,8,119,83,9,122,0,42,123,8,8,107,9,1,123,25,10,73,13,1,123,0,0,83,10,123,0,134,11,0,0,12,186,2,0,73,0,0,0,41,123,11,24,42,123,123,24,33,12,123,0,121,12,13,0,0,13,2,0,0,15,29,0,0,16,40,0,41,123,16,1,3,17,15,123,79,123,17,0,103,122,17,1,41,122,122,8,20,123,123,122,0,18,123,0,135,123,31,0,13,18,0,0,0,19,40,0,25,20,19,1,0,40,20,0,119,0,243,254,137,118,0,0,139,0,0,0,140,1,142,0,0,0,0,0,2,136,0,0,255,255,0,0,2,137,0,0,255,0,0,0,2,138,0,0,20,108,3,0,1,134,0,0,136,139,0,0,0,135,139,0,136,139,0,0,25,139,139,32,137,139,0,0,25,123,135,16,0,46,0,0,2,139,0,0,140,180,2,0,82,2,139,0,0,57,2,0,0,13,46,0,0,24,57,0,135,35,29,0,13,24,0,0,0,68,35,0,0,40,68,0,33,41,40,0,120,41,9,0,1,140,84,0,134,139,0,0,52,222,2,0,140,0,0,0,1,1,1,0,0,39,1,0,137,135,0,0,139,39,0,0,0,42,46,0,1,139,24,0,135,43,92,0,42,139,0,0,41,139,43,24,42,139,139,24,33,44,139,0,120,44,3,0,1,134,4,0,119,0,12,1,0,45,46,0,0,47,57,0,135,48,29,0,45,47,0,0,0,68,48,0,0,49,68,0,33,50,49,0,120,50,3,0,1,134,17,0,119,0,2,1,135,139,30,0,0,51,57,0,0,52,68,0,1,139,161,32,79,139,139,0,1,140,161,32,103,140,140,1,41,140,140,8,20,139,139,140,0,53,139,0,19,139,53,136,0,54,139,0,26,55,54,1,26,56,55,4,19,139,56,137,0,58,139,0,1,139,163,32,79,139,139,0,1,140,163,32,103,140,140,1,41,140,140,8,20,139,139,140,0,59,139,0,19,139,59,136,0,60,139,0,26,61,60,1,26,62,61,2,19,139,62,137,0,63,139,0,1,139,0,0,1,140,4,0,1,141,2,0,134,64,0,0,24,121,0,0,51,52,139,140,141,58,63,0,0,79,64,0,0,65,79,0,19,141,65,136,0,66,141,0,14,67,136,66,120,67,3,0,1,134,16,0,119,0,214,0,0,69,57,0,0,70,79,0,19,141,70,136,0,71,141,0,41,141,71,1,3,72,69,141,79,141,72,0,103,140,72,1,41,140,140,8,20,141,141,140,0,73,141,0,0,90,73,0,0,74,90,0,1,141,24,0,135,75,85,0,74,141,0,0,41,141,75,24,42,141,141,24,33,76,141,0,120,76,6,0,1,140,60,0,134,141,0,0,52,222,2,0,140,0,0,0,119,0,188,255,0,77,46,0,19,141,77,137,0,78,141,0,27,141,78,37,3,80,138,141,25,81,80,13,78,82,81,0,19,141,82,137,0,83,141,0,0,101,83,0,1,141,61,20,78,84,141,0,19,141,84,137,0,85,141,0,0,86,101,0,19,141,86,136,0,87,141,0,5,88,87,85,19,141,88,136,0,89,141,0,0,101,89,0,0,91,46,0,19,141,91,137,0,92,141,0,27,141,92,37,3,93,138,141,25,94,93,23,79,141,94,0,103,140,94,1,41,140,140,8,20,141,141,140,0,95,141,0,19,141,95,136,0,96,141,0,1,141,62,20,78,97,141,0,19,141,97,137,0,98,141,0,5,99,96,98,2,141,0,0,254,255,0,0,15,100,141,99,121,100,4,0,2,113,0,0,254,255,0,0,119,0,20,0,0,102,46,0,19,141,102,137,0,103,141,0,27,141,103,37,3,104,138,141,25,105,104,23,79,141,105,0,103,140,105,1,41,140,140,8,20,141,141,140,0,106,141,0,19,141,106,136,0,107,141,0,1,141,62,20,78,108,141,0,19,141,108,137,0,109,141,0,5,110,107,109,0,113,110,0,19,141,113,136,0,111,141,0,0,112,111,0,0,114,101,0,19,141,114,136,0,115,141,0,0,116,112,0,19,141,116,136,0,117,141,0,15,118,117,115,121,118,3,0,0,119,112,0,0,101,119,0,0,120,101,0,1,141,0,0,134,121,0,0,108,47,2,0,141,120,0,0,0,101,121,0,0,122,101,0,19,141,122,136,0,124,141,0,14,125,136,124,121,125,99,255,119,0,1,0,0,126,46,0,19,141,126,137,0,127,141,0,27,141,127,37,3,128,138,141,25,129,128,27,79,141,129,0,103,140,129,1,41,140,140,8,20,141,141,140,0,130,141,0,0,131,101,0,19,141,131,136,0,132,141,0,135,133,58,0,130,132,0,0,0,3,46,0,19,141,3,137,0,4,141,0,27,141,4,37,3,5,138,141,25,6,5,27,19,141,133,137,83,6,141,0,42,140,133,8,107,6,1,140,0,7,90,0,1,141,24,0,135,140,87,0,7,141,0,0,0,8,101,0,19,140,8,136,0,9,140,0,1,140,62,20,78,10,140,0,19,140,10,137,0,11,140,0,6,140,9,11,38,140,140,255,0,12,140,0,19,140,12,136,0,14,140,0,0,112,14,0,0,15,46,0,19,140,15,137,0,16,140,0,27,140,16,37,3,17,138,140,25,18,17,23,79,140,18,0,103,141,18,1,41,141,141,8,20,140,140,141,0,19,140,0,0,20,112,0,19,140,20,136,0,21,140,0,1,140,0,0,4,22,140,21,135,23,58,0,19,22,0,0,0,25,46,0,19,140,25,137,0,26,140,0,27,140,26,37,3,27,138,140,25,28,27,23,19,140,23,137,83,28,140,0,42,141,23,8,107,28,1,141,1,141,24,0,83,123,141,0,0,29,90,0,25,30,123,1,19,141,29,137,83,30,141,0,42,140,29,8,107,30,1,140,0,31,46,0,25,32,123,3,83,32,31,0,25,33,123,13,1,140,0,0,83,33,140,0,134,34,0,0,12,186,2,0,123,0,0,0,41,140,34,24,42,140,140,24,33,36,140,0,120,36,2,0,119,0,241,254,0,37,46,0,0,38,90,0,135,140,31,0,37,38,0,0,119,0,236,254,32,140,134,4,121,140,10,0,1,141,59,0,134,140,0,0,52,222,2,0,141,0,0,0,1,1,1,0,0,39,1,0,137,135,0,0,139,39,0,0,119,0,14,0,32,140,134,16,121,140,6,0,1,1,1,0,0,39,1,0,137,135,0,0,139,39,0,0,119,0,7,0,32,140,134,17,121,140,5,0,1,1,1,0,0,39,1,0,137,135,0,0,139,39,0,0,1,140,0,0,139,140,0,0,140,0,127,0,0,0,0,0,2,120,0,0,199,15,0,0,2,121,0,0,59,166,2,0,2,122,0,0,255,255,0,0,1,118,0,0,136,123,0,0,0,119,123,0,136,123,0,0,25,123,123,32,137,123,0,0,25,0,119,28,25,63,119,24,1,30,0,0,2,123,0,0,217,214,2,0,78,22,123,0,41,123,22,24,42,123,123,24,33,23,123,0,121,23,3,0,137,119,0,0,139,0,0,0,1,123,0,0,83,0,123,0,78,24,0,0,1,123,255,0,19,123,24,123,0,25,123,0,34,26,25,20,120,26,2,0,119,0,23,1,78,27,0,0,1,123,255,0,19,123,27,123,0,28,123,0,2,123,0,0,17,215,2,0,27,124,28,7,3,29,123,124,25,31,29,6,78,32,31,0,0,1,32,0,0,33,1,0,1,124,255,0,19,124,33,124,0,34,124,0,32,35,34,8,120,35,252,0,78,36,0,0,135,37,120,0,36,0,0,0,0,85,37,0,0,38,85,0,19,124,38,122,0,39,124,0,2,124,0,0,164,215,2,0,27,123,39,19,3,40,124,123,0,74,40,0,135,42,52,0,30,123,42,60,38,123,123,255,0,43,123,0,0,44,74,0,25,45,44,6,78,46,45,0,1,123,255,0,19,123,46,123,0,47,123,0,42,123,47,1,0,48,123,0,15,49,43,48,38,123,49,1,0,50,123,0,1,123,255,0,19,123,50,123,0,51,123,0,0,52,51,0,0,53,74,0,25,54,53,12,79,123,54,0,103,124,54,1,41,124,124,8,20,123,123,124,0,55,123,0,0,41,55,0,1,123,0,0,83,63,123,0,1,123,176,15,135,56,0,0,123,0,0,0,33,57,56,0,121,57,55,0,1,96,176,15,0,58,96,0,1,123,0,0,14,59,58,123,120,59,2,0,119,0,49,0,135,60,1,0,0,107,60,0,0,61,107,0,1,123,0,0,14,62,61,123,120,62,2,0,119,0,40,0,0,64,107,0,82,65,64,0,25,66,65,8,82,67,66,0,0,2,67,0,0,68,2,0,1,123,0,0,14,69,68,123,120,69,2,0,119,0,25,0,0,70,2,0,1,124,0,0,1,125,0,0,1,126,0,0,135,123,2,0,70,121,124,0,125,126,0,0,0,71,2,0,1,126,0,0,1,125,0,0,1,124,0,0,135,123,2,0,71,120,126,63,125,124,0,0,0,72,96,0,0,73,107,0,134,75,0,0,16,21,1,0,72,73,0,0,32,76,75,0,121,76,2,0,1,30,1,0,1,2,0,0,119,0,228,255,0,77,107,0,135,123,3,0,77,0,0,0,1,107,0,0,119,0,213,255,1,96,0,0,119,0,204,255,0,78,30,0,41,123,78,24,42,123,123,24,33,79,123,0,120,79,80,0,0,80,1,0,1,123,255,0,19,123,80,123,0,81,123,0,1,123,1,0,1,124,7,0,138,81,123,124,80,132,1,0,84,132,1,0,88,132,1,0,92,132,1,0,76,132,1,0,96,132,1,0,188,132,1,0,119,0,65,0,119,0,46,0,119,0,45,0,119,0,44,0,119,0,24,0,0,82,41,0,19,124,82,122,0,83,124,0,42,124,83,3,0,84,124,0,0,86,74,0,25,87,86,12,79,124,87,0,103,123,87,1,41,123,123,8,20,124,124,123,0,88,124,0,19,124,88,122,0,89,124,0,4,90,89,84,19,124,90,122,0,91,124,0,1,124,255,0,19,124,91,124,83,87,124,0,42,123,91,8,107,87,1,123,119,0,20,0,0,99,52,0,41,123,99,24,42,123,123,24,33,100,123,0,120,100,33,0,78,101,0,0,1,123,255,0,19,123,101,123,0,102,123,0,2,123,0,0,17,215,2,0,27,124,102,7,3,103,123,124,25,104,103,6,1,124,0,0,83,104,124,0,1,124,1,0,83,63,124,0,119,0,19,0,0,92,52,0,41,123,92,24,42,123,123,24,33,93,123,0,121,93,14,0,78,94,0,0,1,123,255,0,19,123,94,123,0,95,123,0,2,123,0,0,17,215,2,0,27,124,95,7,3,97,123,124,25,98,97,6,1,124,0,0,83,98,124,0,1,124,1,0,83,63,124,0,0,105,41,0,19,124,105,122,0,106,124,0,0,108,74,0,25,109,108,12,79,124,109,0,103,123,109,1,41,123,123,8,20,124,124,123,0,110,124,0,19,124,110,122,0,111,124,0,14,112,106,111,121,112,40,0,0,113,74,0,25,114,113,12,79,124,114,0,103,123,114,1,41,123,123,8,20,124,124,123,0,115,124,0,19,124,115,122,0,116,124,0,0,117,41,0,19,124,117,122,0,3,124,0,4,4,116,3,0,13,4,0,78,5,0,0,134,124,0,0,136,143,2,0,5,0,0,0,0,6,13,0,34,7,6,0,78,8,0,0,0,9,13,0,121,7,10,0,1,124,0,0,4,10,124,9,19,124,10,122,0,11,124,0,1,123,45,0,134,124,0,0,184,193,2,0,123,8,11,0,119,0,8,0,19,124,9,122,0,12,124,0,1,123,43,0,134,124,0,0,184,193,2,0,123,8,12,0,119,0,1,0,78,14,63,0,41,124,14,24,42,124,124,24,33,15,124,0,121,15,10,0,78,16,0,0,134,124,0,0,136,143,2,0,16,0,0,0,78,17,0,0,1,123,4,0,134,124,0,0,148,202,2,0,17,123,0,0,78,18,0,0,1,124,255,0,19,124,18,124,0,19,124,0,25,20,19,1,1,124,255,0,19,124,20,124,0,21,124,0,83,0,21,0,119,0,228,254,137,119,0,0,139,0,0,0,140,2,131,0,0,0,0,0,2,123,0,0,255,0,0,0,2,124,0,0,90,24,0,0,2,125,0,0,67,21,0,0,1,121,0,0,136,126,0,0,0,122,126,0,136,126,0,0,25,126,126,32,137,126,0,0,25,4,122,24,25,15,122,22,25,25,122,20,0,44,0,0,0,55,1,0,2,126,0,0,24,180,2,0,82,26,126,0,1,126,66,0,1,127,1,0,135,27,21,0,126,127,26,0,0,66,27,0,0,28,66,0,0,29,44,0,2,127,0,0,255,255,0,0,19,127,29,127,0,30,127,0,27,127,30,66,3,31,28,127,25,32,31,65,78,34,32,0,0,77,34,0,1,127,58,21,135,35,0,0,127,0,0,0,33,36,35,0,121,36,86,0,1,88,58,21,0,37,88,0,1,127,0,0,14,38,37,127,120,38,2,0,119,0,80,0,135,39,1,0,0,99,39,0,0,40,99,0,1,127,0,0,14,41,40,127,120,41,2,0,119,0,64,0,0,42,99,0,82,43,42,0,25,45,43,8,82,46,45,0,0,110,46,0,0,47,110,0,1,127,0,0,14,48,47,127,120,48,2,0,119,0,49,0,0,49,55,0,19,127,49,123,83,4,127,0,42,126,49,8,107,4,1,126,0,50,44,0,19,126,50,123,83,15,126,0,42,127,50,8,107,15,1,127,1,127,0,0,83,25,127,0,0,51,110,0,1,126,1,0,1,128,0,0,1,129,0,0,135,127,2,0,51,124,126,4,128,129,0,0,0,52,110,0,1,129,1,0,1,128,0,0,1,126,0,0,135,127,2,0,52,125,129,15,128,126,0,0,0,53,110,0,1,126,78,21,1,128,0,0,1,129,0,0,1,130,0,0,135,127,2,0,53,126,128,25,129,130,0,0,0,54,88,0,0,56,99,0,134,57,0,0,16,21,1,0,54,56,0,0,32,58,57,0,121,58,6,0,78,59,25,0,19,127,59,123,0,60,127,0,32,61,60,0,120,61,10,0,1,110,0,0,119,0,204,255,0,63,99,0,135,127,3,0,63,0,0,0,1,99,0,0,119,0,189,255,1,88,0,0,119,0,180,255,0,62,99,0,135,127,3,0,62,0,0,0,1,33,255,255,0,24,33,0,137,122,0,0,139,24,0,0,0,64,66,0,0,65,44,0,2,127,0,0,255,255,0,0,19,127,65,127,0,67,127,0,27,127,67,66,3,68,64,127,25,69,68,1,78,70,69,0,41,127,70,24,42,127,127,24,33,71,127,0,121,71,86,0,0,72,77,0,19,127,72,123,0,73,127,0,1,127,0,0,1,130,4,0,138,73,127,130,20,137,1,0,24,137,1,0,40,137,1,0,140,137,1,0,0,93,77,0,19,127,93,123,0,94,127,0,26,95,94,4,19,127,95,123,0,96,127,0,0,97,55,0,0,2,96,0,0,3,97,0,119,0,56,0,119,0,65,0,0,74,55,0,1,2,3,0,0,3,74,0,119,0,51,0,0,75,55,0,2,127,0,0,255,255,0,0,19,127,75,127,0,76,127,0,2,127,0,0,164,215,2,0,27,130,76,19,3,78,127,130,25,79,78,6,78,80,79,0,19,130,80,123,0,81,130,0,1,130,105,0,15,82,130,81,121,82,5,0,0,83,55,0,1,2,5,0,0,3,83,0,119,0,31,0,1,33,255,255,0,24,33,0,137,122,0,0,139,24,0,0,119,0,26,0,0,84,55,0,2,130,0,0,255,255,0,0,19,130,84,130,0,85,130,0,2,130,0,0,164,215,2,0,27,127,85,19,3,86,130,127,25,87,86,5,78,89,87,0,19,127,89,123,0,90,127,0,1,127,105,0,15,91,127,90,121,91,5,0,0,92,55,0,1,2,4,0,0,3,92,0,119,0,6,0,1,33,255,255,0,24,33,0,137,122,0,0,139,24,0,0,119,0,1,0,2,127,0,0,255,255,0,0,19,127,3,127,0,98,127,0,2,127,0,0,164,215,2,0,27,130,98,19,3,100,127,130,25,101,100,11,83,101,2,0,0,102,66,0,0,103,44,0,2,130,0,0,255,255,0,0,19,130,103,130,0,104,130,0,27,130,104,66,3,105,102,130,25,106,105,62,78,107,106,0,19,130,107,123,0,108,130,0,0,109,55,0,2,130,0,0,255,255,0,0,19,130,109,130,0,111,130,0,2,130,0,0,164,215,2,0,27,127,111,19,3,112,130,127,25,113,112,5,78,114,113,0,19,127,114,123,0,115,127,0,3,116,115,108,19,127,116,123,0,117,127,0,83,113,117,0,0,118,66,0,0,119,44,0,2,127,0,0,255,255,0,0,19,127,119,127,0,120,127,0,27,127,120,66,3,5,118,127,25,6,5,63,78,7,6,0,19,127,7,123,0,8,127,0,0,9,55,0,2,127,0,0,255,255,0,0,19,127,9,127,0,10,127,0,2,127,0,0,164,215,2,0,27,130,10,19,3,11,127,130,25,12,11,6,78,13,12,0,19,130,13,123,0,14,130,0,3,16,14,8,19,130,16,123,0,17,130,0,83,12,17,0,0,18,66,0,0,19,44,0,2,130,0,0,255,255,0,0,19,130,19,130,0,20,130,0,27,130,20,66,3,21,18,130,25,22,21,1,78,23,22,0,0,33,23,0,0,24,33,0,137,122,0,0,139,24,0,0,140,5,140,0,0,0,0,0,2,132,0,0,174,166,2,0,2,133,0,0,148,166,2,0,2,134,0,0,156,166,2,0,1,130,0,0,136,135,0,0,0,131,135,0,136,135,0,0,25,135,135,48,137,135,0,0,25,75,131,42,25,108,131,40,25,40,131,32,1,135,255,0,19,135,0,135,83,75,135,0,42,136,0,8,107,75,1,136,0,86,1,0,0,97,2,0,83,108,3,0,0,119,4,0,2,136,0,0,133,166,2,0,135,45,0,0,136,0,0,0,33,46,45,0,121,46,88,0,2,42,0,0,133,166,2,0,0,47,42,0,1,136,0,0,14,48,47,136,120,48,2,0,119,0,81,0,135,49,1,0,0,43,49,0,0,50,43,0,1,136,0,0,14,51,50,136,120,51,2,0,119,0,67,0,0,52,43,0,82,53,52,0,25,54,53,8,82,55,54,0,0,44,55,0,0,56,44,0,1,136,0,0,14,57,56,136,120,57,2,0,119,0,52,0,0,58,44,0,1,135,1,0,1,137,0,0,1,138,0,0,135,136,2,0,58,133,135,75,137,138,0,0,0,59,44,0,0,60,86,0,1,138,1,0,1,137,0,0,1,135,0,0,135,136,2,0,59,134,138,60,137,135,0,0,0,61,44,0,2,135,0,0,161,166,2,0,1,137,0,0,1,138,0,0,1,139,0,0,135,136,2,0,61,135,137,108,138,139,0,0,0,62,44,0,0,63,119,0,2,139,0,0,168,166,2,0,1,138,0,0,1,137,0,0,1,135,0,0,135,136,2,0,62,139,138,63,137,135,0,0,0,64,44,0,0,65,97,0,1,135,1,0,1,137,0,0,1,138,0,0,135,136,2,0,64,132,135,65,137,138,0,0,0,66,42,0,0,67,43,0,134,68,0,0,16,21,1,0,66,67,0,0,32,69,68,0,120,69,10,0,1,44,0,0,119,0,201,255,0,71,43,0,135,136,3,0,71,0,0,0,1,43,0,0,119,0,186,255,1,42,0,0,119,0,177,255,0,70,43,0,135,136,3,0,70,0,0,0,137,131,0,0,139,0,0,0,79,136,75,0,103,138,75,1,41,138,138,8,20,136,136,138,0,72,136,0,135,73,75,0,72,0,0,0,0,41,73,0,0,74,41,0,25,76,74,2,79,136,76,0,103,138,76,1,41,138,138,8,20,136,136,138,0,77,136,0,1,136,255,0,19,136,77,136,83,40,136,0,42,138,77,8,107,40,1,138,0,78,41,0,25,79,78,4,79,138,79,0,103,136,79,1,41,136,136,8,20,138,138,136,0,80,138,0,25,81,40,2,1,138,255,0,19,138,80,138,83,81,138,0,42,136,80,8,107,81,1,136,2,136,0,0,61,180,2,0,78,82,136,0,0,27,82,0,2,136,0,0,87,180,2,0,78,83,136,0,0,16,83,0,2,136,0,0,85,180,2,0,78,84,136,0,0,38,84,0,1,5,0,0,0,85,5,0,1,136,255,0,19,136,85,136,0,87,136,0,34,88,87,2,120,88,2,0,119,0,151,0,0,89,5,0,1,136,255,0,19,136,89,136,0,90,136,0,41,136,90,1,3,91,40,136,79,136,91,0,103,138,91,1,41,138,138,8,20,136,136,138,0,92,136,0,0,39,92,0,0,93,39,0,41,136,93,16,42,136,136,16,33,94,136,0,121,94,124,0,0,95,41,0,25,96,95,7,2,136,0,0,218,214,2,0,78,98,136,0,1,136,255,0,19,136,98,136,0,99,136,0,26,100,99,1,3,101,96,100,78,102,101,0,1,136,255,0,19,136,102,136,76,136,136,0,58,103,136,0,59,136,100,0,66,104,103,136,0,105,39,0,2,136,0,0,255,255,0,0,19,136,105,136,76,136,136,0,58,106,136,0,65,107,106,104,75,136,107,0,2,138,0,0,255,255,0,0,19,136,136,138,0,109,136,0,0,39,109,0,0,110,41,0,25,111,110,28,0,112,16,0,1,136,255,0,19,136,112,136,0,113,136,0,3,114,111,113,78,115,114,0,1,136,255,0,19,136,115,136,76,136,136,0,58,116,136,0,59,136,100,0,66,117,116,136,0,118,39,0,2,136,0,0,255,255,0,0,19,136,118,136,76,136,136,0,58,120,136,0,65,121,120,117,75,136,121,0,2,138,0,0,255,255,0,0,19,136,136,138,0,122,136,0,0,39,122,0,0,123,41,0,25,124,123,12,0,125,38,0,1,136,255,0,19,136,125,136,0,126,136,0,3,127,124,126,78,128,127,0,1,136,255,0,19,136,128,136,76,136,136,0,58,129,136,0,59,136,100,0,66,6,129,136,0,7,39,0,2,136,0,0,255,255,0,0,19,136,7,136,76,136,136,0,58,8,136,0,65,9,8,6,75,136,9,0,2,138,0,0,255,255,0,0,19,136,136,138,0,10,136,0,0,39,10,0,0,11,41,0,25,12,11,20,0,13,27,0,1,136,255,0,19,136,13,136,0,14,136,0,3,15,12,14,78,17,15,0,1,136,255,0,19,136,17,136,76,136,136,0,58,18,136,0,59,136,100,0,66,19,18,136,0,20,39,0,2,136,0,0,255,255,0,0,19,136,20,136,76,136,136,0,58,21,136,0,65,22,21,19,75,136,22,0,2,138,0,0,255,255,0,0,19,136,136,138,0,23,136,0,0,39,23,0,0,24,39,0,0,25,5,0,1,136,255,0,19,136,25,136,0,26,136,0,41,136,26,1], eb + 92160);
  HEAPU8.set([3,28,40,136,1,136,255,0,19,136,24,136,83,28,136,0,42,138,24,8,107,28,1,138,0,29,5,0,1,138,255,0,19,138,29,138,0,30,138,0,25,31,30,1,1,138,255,0,19,138,31,138,0,32,138,0,0,5,32,0,119,0,100,255,79,138,40,0,103,136,40,1,41,136,136,8,20,138,138,136,0,33,138,0,0,34,86,0,1,138,255,0,19,138,33,138,83,34,138,0,42,136,33,8,107,34,1,136,25,35,40,2,79,136,35,0,103,138,35,1,41,138,138,8,20,136,136,138,0,36,136,0,0,37,97,0,1,136,255,0,19,136,36,136,83,37,136,0,42,138,36,8,107,37,1,138,137,131,0,0,139,0,0,0,140,1,134,0,0,0,0,0,2,131,0,0,255,0,0,0,1,129,0,0,136,132,0,0,0,130,132,0,136,132,0,0,25,132,132,16,137,132,0,0,0,2,0,0,0,118,2,0,25,3,118,4,79,132,3,0,103,133,3,1,41,133,133,8,20,132,132,133,0,14,132,0,0,63,14,0,0,25,2,0,25,34,25,1,79,132,34,0,103,133,34,1,41,133,133,8,20,132,132,133,0,35,132,0,2,132,0,0,255,255,0,0,19,132,35,132,0,36,132,0,2,132,0,0,164,215,2,0,27,133,36,19,3,37,132,133,25,38,37,6,78,39,38,0,19,133,39,131,0,40,133,0,0,42,63,0,2,133,0,0,255,255,0,0,19,133,42,133,0,43,133,0,2,133,0,0,164,215,2,0,27,132,43,19,3,44,133,132,25,45,44,6,78,46,45,0,19,132,46,131,0,47,132,0,4,48,40,47,19,132,48,131,0,49,132,0,0,52,49,0,0,50,52,0,19,132,50,131,0,51,132,0,25,53,51,50,19,132,53,131,0,54,132,0,0,52,54,0,135,55,52,0,30,132,55,100,38,132,132,255,0,56,132,0,19,132,56,131,0,57,132,0,0,41,57,0,0,58,41,0,19,132,58,131,0,59,132,0,0,60,52,0,19,132,60,131,0,61,132,0,15,62,61,59,120,62,181,0,135,64,52,0,30,132,64,100,38,132,132,255,0,65,132,0,19,132,65,131,0,66,132,0,0,41,66,0,0,67,41,0,19,132,67,131,0,68,132,0,0,69,63,0,2,132,0,0,255,255,0,0,19,132,69,132,0,70,132,0,2,132,0,0,164,215,2,0,27,133,70,19,3,71,132,133,25,72,71,7,78,73,72,0,19,133,73,131,0,75,133,0,15,76,68,75,120,76,156,0,0,77,63,0,2,133,0,0,255,255,0,0,19,133,77,133,0,78,133,0,2,133,0,0,164,215,2,0,27,132,78,19,3,79,133,132,25,80,79,8,78,81,80,0,19,132,81,131,0,82,132,0,1,132,0,0,1,133,5,0,138,82,132,133,148,146,1,0,156,146,1,0,164,146,1,0,172,146,1,0,180,146,1,0,119,0,11,0,1,52,50,0,119,0,9,0,1,52,30,0,119,0,7,0,1,52,40,0,119,0,5,0,1,52,30,0,119,0,3,0,1,52,5,0,119,0,1,0,135,83,52,0,30,132,83,100,38,132,132,255,0,84,132,0,19,132,84,131,0,86,132,0,0,41,86,0,0,87,41,0,19,132,87,131,0,88,132,0,0,89,52,0,19,132,89,131,0,90,132,0,15,91,90,88,120,91,109,0,0,92,63,0,2,132,0,0,255,255,0,0,19,132,92,132,0,93,132,0,2,132,0,0,164,215,2,0,27,133,93,19,3,94,132,133,25,95,94,7,78,97,95,0,19,133,97,131,0,98,133,0,1,133,4,0,15,99,133,98,0,100,63,0,2,133,0,0,255,255,0,0,19,133,100,133,0,101,133,0,2,133,0,0,164,215,2,0,27,132,101,19,3,102,133,132,25,103,102,7,121,99,9,0,78,104,103,0,19,132,104,131,0,105,132,0,26,106,105,4,19,132,106,131,0,108,132,0,0,1,108,0,119,0,2,0,1,1,0,0,83,103,1,0,0,109,63,0,2,132,0,0,255,255,0,0,19,132,109,132,0,110,132,0,2,132,0,0,164,215,2,0,27,133,110,19,3,111,132,133,25,112,111,7,78,113,112,0,0,74,113,0,1,85,0,0,0,114,74,0,19,133,114,131,0,115,133,0,1,133,80,0,15,116,133,115,121,116,3,0,1,85,0,0,119,0,19,0,0,117,74,0,19,133,117,131,0,119,133,0,1,133,60,0,15,120,133,119,121,120,3,0,1,85,1,0,119,0,11,0,0,121,74,0,19,133,121,131,0,122,133,0,1,133,40,0,15,123,133,122,121,123,3,0,1,85,2,0,119,0,3,0,1,85,3,0,119,0,1,0,0,124,2,0,25,125,124,1,79,133,125,0,103,132,125,1,41,132,132,8,20,133,133,132,0,126,133,0,0,127,63,0,0,128,85,0,19,133,128,131,0,4,133,0,1,133,232,8,41,132,4,2,3,5,133,132,82,6,5,0,134,132,0,0,148,206,2,0,126,127,6,0,0,28,2,0,25,29,28,3,78,30,29,0,0,31,2,0,25,32,31,1,79,132,32,0,103,133,32,1,41,133,133,8,20,132,132,133,0,33,132,0,135,132,32,0,30,33,0,0,137,130,0,0,1,132,1,0,139,132,0,0,0,7,63,0,2,132,0,0,255,255,0,0,19,132,7,132,0,8,132,0,2,132,0,0,164,215,2,0,27,133,8,19,3,9,132,133,25,10,9,7,78,11,10,0,0,96,11,0,1,107,0,0,0,12,96,0,19,133,12,131,0,13,133,0,1,133,80,0,15,15,133,13,121,15,3,0,1,107,0,0,119,0,11,0,0,16,96,0,19,133,16,131,0,17,133,0,1,133,60,0,15,18,133,17,121,18,3,0,1,107,1,0,119,0,3,0,1,107,2,0,119,0,1,0,0,19,2,0,25,20,19,1,79,133,20,0,103,132,20,1,41,132,132,8,20,133,133,132,0,21,133,0,0,22,63,0,0,23,107,0,19,133,23,131,0,24,133,0,1,133,248,8,41,132,24,2,3,26,133,132,82,27,26,0,134,132,0,0,148,206,2,0,21,22,27,0,0,28,2,0,25,29,28,3,78,30,29,0,0,31,2,0,25,32,31,1,79,132,32,0,103,133,32,1,41,133,133,8,20,132,132,133,0,33,132,0,135,132,32,0,30,33,0,0,137,130,0,0,1,132,1,0,139,132,0,0,140,1,136,0,0,0,0,0,2,132,0,0,255,0,0,0,2,133,0,0,255,255,0,0,1,130,0,0,136,134,0,0,0,131,134,0,136,134,0,0,1,135,32,4,3,134,134,135,137,134,0,0,25,119,131,16,0,42,0,0,0,13,42,0,25,24,13,1,79,134,24,0,103,135,24,1,41,135,135,8,20,134,134,135,0,35,134,0,0,86,35,0,0,36,42,0,25,37,36,4,79,134,37,0,103,135,37,1,41,135,135,8,20,134,134,135,0,38,134,0,0,97,38,0,0,39,97,0,19,134,39,133,0,40,134,0,2,134,0,0,164,215,2,0,27,135,40,19,3,41,134,135,0,2,41,0,1,108,0,0,0,43,2,0,25,44,43,2,79,135,44,0,103,134,44,1,41,134,134,8,20,135,135,134,0,45,135,0,19,135,45,133,0,46,135,0,0,47,86,0,19,135,47,133,0,48,135,0,2,135,0,0,164,215,2,0,27,134,48,19,3,49,135,134,25,50,49,2,79,134,50,0,103,135,50,1,41,135,135,8,20,134,134,135,0,51,134,0,19,134,51,133,0,52,134,0,13,54,46,52,121,54,11,0,0,55,42,0,25,56,55,3,78,57,56,0,0,58,86,0,135,134,32,0,57,58,0,0,1,1,1,0,0,34,1,0,137,131,0,0,139,34,0,0,2,134,0,0,72,191,2,0,78,59,134,0,41,134,59,24,42,134,134,24,33,60,134,0,121,60,3,0,1,130,13,0,119,0,120,0,0,61,86,0,19,134,61,133,0,62,134,0,2,134,0,0,164,215,2,0,27,135,62,19,3,63,134,135,25,65,63,6,78,66,65,0,19,135,66,132,0,67,135,0,0,68,2,0,25,69,68,6,78,70,69,0,19,135,70,132,0,71,135,0,4,72,67,71,19,135,72,132,0,73,135,0,0,64,73,0,0,74,64,0,19,135,74,132,0,76,135,0,25,77,76,50,19,135,77,132,0,78,135,0,0,64,78,0,135,79,52,0,30,135,79,100,38,135,135,255,0,80,135,0,19,135,80,132,0,81,135,0,0,53,81,0,0,82,53,0,19,135,82,132,0,83,135,0,0,84,64,0,19,135,84,132,0,85,135,0,15,87,85,83,120,87,78,0,0,88,2,0,25,89,88,8,78,90,89,0,19,135,90,132,0,91,135,0,1,135,0,0,1,134,5,0,138,91,135,134,220,151,1,0,228,151,1,0,236,151,1,0,244,151,1,0,252,151,1,0,119,0,11,0,1,64,2,0,119,0,9,0,1,64,5,0,119,0,7,0,1,64,4,0,119,0,5,0,1,64,3,0,119,0,3,0,1,64,1,0,119,0,1,0,0,92,2,0,25,93,92,7,78,94,93,0,0,75,94,0,0,95,75,0,19,135,95,132,0,96,135,0,0,98,75,0,19,135,98,132,0,99,135,0,28,135,99,10,38,135,135,255,0,100,135,0,4,101,96,100,19,135,101,132,0,102,135,0,0,103,2,0,25,104,103,7,83,104,102,0,0,105,75,0,19,135,105,132,0,106,135,0,1,135,60,0,15,107,135,106,120,107,29,0,0,109,75,0,19,135,109,132,0,110,135,0,0,111,64,0,19,135,111,132,0,112,135,0,6,135,110,112,38,135,135,255,0,113,135,0,19,135,113,132,0,114,135,0,0,64,114,0,135,115,52,0,30,135,115,100,38,135,135,255,0,116,135,0,19,135,116,132,0,117,135,0,0,53,117,0,0,118,53,0,19,135,118,132,0,120,135,0,0,121,64,0,19,135,121,132,0,122,135,0,15,123,120,122,120,123,2,0,1,130,13,0,32,135,130,13,121,135,31,0,0,124,86,0,19,135,124,133,0,125,135,0,2,135,0,0,164,215,2,0,27,134,125,19,3,126,135,134,25,127,126,2,79,134,127,0,103,135,127,1,41,135,135,8,20,134,134,135,0,128,134,0,0,129,2,0,25,3,129,2,19,134,128,132,83,3,134,0,42,135,128,8,107,3,1,135,135,4,52,0,30,135,4,40,38,135,135,255,0,5,135,0,25,6,5,40,19,135,6,132,0,7,135,0,0,8,2,0,25,9,8,7,83,9,7,0,1,108,1,0,0,10,86,0,19,135,10,133,0,11,135,0,2,135,0,0,164,215,2,0,27,134,11,19,3,12,135,134,25,14,12,2,79,134,14,0,103,135,14,1,41,135,135,8,20,134,134,135,0,15,134,0,19,134,15,133,0,16,134,0,2,134,0,0,158,215,2,0,79,134,134,0,2,135,0,0,158,215,2,0,103,135,135,1,41,135,135,8,20,134,134,135,0,17,134,0,19,134,17,133,0,18,134,0,25,19,18,1,13,20,16,19,121,20,27,0,0,21,108,0,41,134,21,24,42,134,134,24,33,22,134,0,121,22,6,0,0,23,97,0,134,134,0,0,252,222,2,0,23,0,0,0,119,0,17,0,135,25,52,0,30,134,25,3,38,134,134,255,0,26,134,0,25,27,26,122,19,134,27,133,0,28,134,0,1,135,64,0,135,134,17,0,135,28,119,0,135,134,30,0,0,29,97,0,134,134,0,0,76,29,2,0,29,119,0,0,119,0,1,0,0,30,42,0,25,31,30,3,78,32,31,0,0,33,86,0,135,134,32,0,32,33,0,0,1,1,1,0,0,34,1,0,137,131,0,0,139,34,0,0,140,0,124,0,0,0,0,0,2,115,0,0,255,0,0,0,2,116,0,0,255,255,0,0,2,117,0,0,164,215,2,0,2,118,0,0,158,215,2,0,2,119,0,0,244,1,0,0,1,113,0,0,136,120,0,0,0,114,120,0,136,120,0,0,25,120,120,32,137,120,0,0,25,25,114,20,25,36,114,14,1,121,2,0,1,122,12,0,1,123,6,0,135,120,121,0,121,122,25,123,1,123,2,0,1,122,13,0,1,121,6,0,135,120,121,0,123,122,36,121,1,120,43,20,78,69,120,0,41,120,69,24,42,120,120,24,33,80,120,0,121,80,49,0,1,0,0,0,0,91,0,0,135,102,73,0,16,2,91,102,120,2,2,0,119,0,43,0,135,13,52,0,30,120,13,100,38,120,120,255,0,17,120,0,0,1,17,0,0,18,1,0,1,120,43,20,78,19,120,0,19,120,19,115,0,20,120,0,16,21,18,20,121,21,27,0,0,22,0,0,27,120,22,19,3,23,117,120,25,24,23,2,79,120,24,0,103,121,24,1,41,121,121,8,20,120,120,121,0,26,120,0,19,120,26,116,0,27,120,0,79,120,118,0,103,121,118,1,41,121,121,8,20,120,120,121,0,28,120,0,19,120,28,116,0,29,120,0,25,30,29,1,14,31,27,30,121,31,6,0,0,32,0,0,27,120,32,19,3,33,117,120,135,120,89,0,33,0,0,0,0,34,0,0,25,35,34,1,0,0,35,0,119,0,210,255,1,0,0,0,0,37,0,0,1,120,136,20,78,38,120,0,19,120,38,115,0,39,120,0,16,40,37,39,120,40,2,0,119,0,171,0,0,41,0,0,2,120,0,0,20,108,3,0,27,121,41,37,3,42,120,121,0,47,42,0,0,43,47,0,1,121,0,0,83,43,121,0,0,44,47,0,25,45,44,1,79,121,45,0,103,120,45,1,41,120,120,8,20,121,121,120,0,46,121,0,0,58,46,0,0,48,58,0,41,121,48,16,42,121,121,16,33,49,121,0,121,49,145,0,0,50,58,0,19,121,50,116,0,51,121,0,79,121,118,0,103,120,118,1,41,120,120,8,20,121,121,120,0,52,121,0,19,121,52,116,0,53,121,0,25,54,53,1,13,55,51,54,120,55,132,0,0,56,47,0,25,57,56,14,78,59,57,0,19,121,59,115,0,60,121,0,25,61,60,1,19,121,61,115,0,62,121,0,83,57,62,0,0,63,47,0,25,64,63,14,78,65,64,0,19,121,65,115,0,66,121,0,1,121,100,0,15,67,121,66,121,67,5,0,0,68,47,0,25,70,68,14,1,121,100,0,83,70,121,0,0,71,47,0,25,72,71,25,79,121,72,0,103,120,72,1,41,120,120,8,20,121,121,120,0,73,121,0,19,121,73,116,0,74,121,0,34,75,74,100,121,75,7,0,0,76,47,0,25,77,76,25,19,121,119,115,83,77,121,0,42,120,119,8,107,77,1,120,0,78,47,0,25,79,78,23,79,120,79,0,103,121,79,1,41,121,121,8,20,120,120,121,0,81,120,0,19,120,81,116,0,82,120,0,1,120,16,39,15,83,120,82,121,83,19,0,0,84,47,0,25,85,84,23,79,120,85,0,103,121,85,1,41,121,121,8,20,120,120,121,0,86,120,0,19,120,86,116,0,87,120,0,28,120,87,2,38,120,120,255,0,88,120,0,19,120,88,116,0,89,120,0,19,120,89,115,83,85,120,0,42,121,89,8,107,85,1,121,135,90,52,0,30,121,90,100,38,121,121,255,0,92,121,0,0,1,92,0,0,93,58,0,19,121,93,116,0,94,121,0,26,95,94,1,27,121,95,19,3,96,117,121,25,97,96,8,78,98,97,0,19,121,98,115,0,99,121,0,3,100,25,99,78,101,100,0,19,121,101,115,0,103,121,0,0,104,1,0,16,105,104,103,121,105,14,0,0,106,0,0,19,121,106,115,0,107,121,0,134,121,0,0,28,119,1,0,107,0,0,0,0,108,0,0,19,121,108,115,0,109,121,0,134,121,0,0,84,243,1,0,109,0,0,0,119,0,29,0,0,110,58,0,19,121,110,116,0,111,121,0,26,112,111,1,27,121,112,19,3,3,117,121,25,4,3,8,78,5,4,0,19,121,5,115,0,6,121,0,3,7,36,6,78,8,7,0,19,121,8,115,0,9,121,0,0,10,1,0,16,11,10,9,0,12,0,0,19,121,12,115,0,14,121,0,121,11,5,0,134,121,0,0,160,103,1,0,14,0,0,0,119,0,5,0,134,121,0,0,176,227,0,0,14,0,0,0,119,0,1,0,0,15,0,0,25,16,15,1,0,0,16,0,119,0,79,255,137,114,0,0,139,0,0,0,140,1,123,0,0,0,0,0,2,117,0,0,255,255,0,0,2,118,0,0,255,0,0,0,2,119,0,0,161,32,0,0,1,115,0,0,136,120,0,0,0,116,120,0,136,120,0,0,25,120,120,48,137,120,0,0,25,2,116,20,0,27,0,0,2,120,0,0,140,180,2,0,82,13,120,0,0,38,13,0,0,19,27,0,0,20,38,0,135,21,29,0,19,20,0,0,0,49,21,0,0,22,49,0,33,23,22,0,120,23,9,0,1,121,84,0,134,120,0,0,52,222,2,0,121,0,0,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,0,24,27,0,19,120,24,118,0,25,120,0,2,120,0,0,20,108,3,0,27,121,25,37,3,26,120,121,25,28,26,11,0,82,28,0,0,29,27,0,19,121,29,118,0,30,121,0,2,121,0,0,20,108,3,0,27,120,30,37,3,31,121,120,25,32,31,9,79,120,32,0,103,121,32,1,41,121,121,8,20,120,120,121,0,33,120,0,0,93,33,0,0,34,82,0,79,120,34,0,103,121,34,1,41,121,121,8,20,120,120,121,0,35,120,0,19,120,35,117,0,36,120,0,0,37,93,0,19,120,37,117,0,39,120,0,17,40,39,36,121,40,3,0,1,115,4,0,119,0,206,0,0,41,27,0,1,120,2,0,135,42,92,0,41,120,0,0,41,120,42,24,42,120,120,24,33,43,120,0,120,43,3,0,1,115,6,0,119,0,196,0,0,44,27,0,0,45,38,0,135,46,29,0,44,45,0,0,0,49,46,0,0,47,49,0,33,48,47,0,120,48,3,0,1,115,16,0,119,0,186,0,135,120,30,0,0,50,38,0,0,51,49,0,79,120,119,0,103,121,119,1,41,121,121,8,20,120,120,121,0,52,120,0,19,120,52,117,0,53,120,0,26,54,53,1,26,55,54,4,19,120,55,118,0,56,120,0,1,120,163,32,79,120,120,0,1,121,163,32,103,121,121,1,41,121,121,8,20,120,120,121,0,57,120,0,19,120,57,117,0,58,120,0,26,59,58,1,26,61,59,2,19,120,61,118,0,62,120,0,1,120,0,0,1,121,4,0,1,122,2,0,134,63,0,0,24,121,0,0,50,51,120,121,122,56,62,0,0,60,63,0,0,64,60,0,19,122,64,117,0,65,122,0,14,66,117,65,120,66,3,0,1,115,15,0,119,0,144,0,0,67,38,0,0,68,60,0,19,122,68,117,0,69,122,0,41,122,69,1,3,70,67,122,79,122,70,0,103,121,70,1,41,121,121,8,20,122,122,121,0,72,122,0,0,71,72,0,0,73,71,0,1,122,2,0,135,74,85,0,73,122,0,0,41,122,74,24,42,122,122,24,33,75,122,0,120,75,6,0,1,121,60,0,134,122,0,0,52,222,2,0,121,0,0,0,119,0,190,255,0,76,71,0,19,122,76,117,0,77,122,0,2,122,0,0,164,215,2,0,27,121,77,19,3,78,122,121,25,79,78,6,78,80,79,0,19,121,80,118,0,81,121,0,28,121,81,10,38,121,121,255,0,83,121,0,135,84,52,0,30,121,84,4,38,121,121,255,0,85,121,0,25,86,85,2,5,87,83,86,0,88,71,0,19,121,88,117,0,89,121,0,2,121,0,0,164,215,2,0,27,122,89,19,3,90,121,122,25,91,90,6,78,92,91,0,19,122,92,118,0,94,122,0,42,122,94,1,0,95,122,0,3,96,87,95,19,122,96,117,0,97,122,0,0,104,97,0,0,98,104,0,19,122,98,117,0,99,122,0,0,100,82,0,79,122,100,0,103,121,100,1,41,121,121,8,20,122,122,121,0,101,122,0,19,122,101,117,0,102,122,0,3,103,102,99,19,122,103,117,0,105,122,0,19,122,105,118,83,100,122,0,42,121,105,8,107,100,1,121,0,106,82,0,79,121,106,0,103,122,106,1,41,122,122,8,20,121,121,122,0,107,121,0,19,121,107,117,0,108,121,0,0,109,93,0,19,121,109,117,0,110,121,0,15,111,110,108,121,111,7,0,0,112,93,0,0,113,82,0,19,121,112,118,83,113,121,0,42,122,112,8,107,113,1,122,0,114,27,0,0,3,71,0,0,4,104,0,19,122,4,118,0,5,122,0,1,121,1,0,134,122,0,0,236,147,2,0,114,3,5,121,0,6,71,0,1,121,2,0,135,122,87,0,6,121,0,0,0,7,27,0,1,121,2,0,135,122,94,0,7,121,0,0,1,122,2,0,83,2,122,0,0,8,71,0,25,9,2,1,19,122,8,118,83,9,122,0,42,121,8,8,107,9,1,121,0,10,27,0,25,11,2,3,83,11,10,0,25,12,2,13,1,121,0,0,83,12,121,0,134,14,0,0,12,186,2,0,2,0,0,0,41,121,14,24,42,121,121,24,33,15,121,0,120,15,2,0,119,0,19,255,0,16,27,0,0,17,71,0,135,121,31,0,16,17,0,0,119,0,14,255,32,121,115,4,121,121,10,0,1,122,53,0,134,121,0,0,52,222,2,0,122,0,0,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,119,0,25,0,32,121,115,6,121,121,10,0,1,122,59,0,134,121,0,0,52,222,2,0,122,0,0,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,119,0,14,0,32,121,115,15,121,121,6,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,119,0,7,0,32,121,115,16,121,121,5,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,1,121,0,0,139,121,0,0,140,1,123,0,0,0,0,0,2,117,0,0,255,255,0,0,2,118,0,0,255,0,0,0,2,119,0,0,163,32,0,0,1,115,0,0,136,120,0,0,0,116,120,0,136,120,0,0,25,120,120,48,137,120,0,0,25,2,116,20,0,27,0,0,2,120,0,0,140,180,2,0,82,13,120,0,0,38,13,0,0,19,27,0,0,20,38,0,135,21,29,0,19,20,0,0,0,71,21,0,0,22,71,0,33,23,22,0,120,23,9,0,1,121,84,0,134,120,0,0,52,222,2,0,121,0,0,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,0,24,27,0,19,120,24,118,0,25,120,0,2,120,0,0,20,108,3,0,27,121,25,37,3,26,120,121,25,28,26,7,0,82,28,0,0,29,27,0,19,121,29,118,0,30,121,0,2,121,0,0,20,108,3,0,27,120,30,37,3,31,121,120,25,32,31,5,79,120,32,0,103,121,32,1,41,121,121,8,20,120,120,121,0,33,120,0,0,93,33,0,0,34,82,0,79,120,34,0,103,121,34,1,41,121,121,8,20,120,120,121,0,35,120,0,19,120,35,117,0,36,120,0,0,37,93,0,19,120,37,117,0,39,120,0,17,40,39,36,121,40,3,0,1,115,4,0,119,0,206,0,0,41,27,0,1,120,1,0,135,42,92,0,41,120,0,0,41,120,42,24,42,120,120,24,33,43,120,0,120,43,3,0,1,115,6,0,119,0,196,0,0,44,27,0,0,45,38,0,135,46,29,0,44,45,0,0,0,71,46,0,0,47,71,0,33,48,47,0,120,48,3,0,1,115,16,0,119,0,186,0,135,120,30,0,0,50,38,0,0,51,71,0,1,120,161,32,79,120,120,0,1,121,161,32,103,121,121,1,41,121,121,8,20,120,120,121,0,52,120,0,19,120,52,117,0,53,120,0,26,54,53,1,26,55,54,4,19,120,55,118,0,56,120,0,79,120,119,0,103,121,119,1,41,121,121,8,20,120,120,121,0,57,120,0,19,120,57,117,0,58,120,0,26,59,58,1,26,61,59,2,19,120,61,118,0,62,120,0,1,120,0,0,1,121,4,0,1,122,2,0,134,63,0,0,24,121,0,0,50,51,120,121,122,56,62,0,0,49,63,0,0,64,49,0,19,122,64,117,0,65,122,0,14,66,117,65,120,66,3,0,1,115,15,0,119,0,144,0,0,67,38,0,0,68,49,0,19,122,68,117,0,69,122,0,41,122,69,1,3,70,67,122,79,122,70,0,103,121,70,1,41,121,121,8,20,122,122,121,0,72,122,0,0,60,72,0,0,73,60,0,1,122,1,0,135,74,85,0,73,122,0,0,41,122,74,24,42,122,122,24,33,75,122,0,120,75,6,0,1,121,60,0,134,122,0,0,52,222,2,0,121,0,0,0,119,0,190,255,0,76,60,0,19,122,76,117,0,77,122,0,2,122,0,0,164,215,2,0,27,121,77,19,3,78,122,121,25,79,78,6,78,80,79,0,19,121,80,118,0,81,121,0,28,121,81,10,38,121,121,255,0,83,121,0,135,84,52,0,30,121,84,4,38,121,121,255,0,85,121,0,25,86,85,2,5,87,83,86,0,88,60,0,19,121,88,117,0,89,121,0,2,121,0,0,164,215,2,0,27,122,89,19,3,90,121,122,25,91,90,6,78,92,91,0,19,122,92,118,0,94,122,0,42,122,94,1,0,95,122,0,3,96,87,95,19,122,96,117,0,97,122,0,0,104,97,0,0,98,104,0,19,122,98,117,0,99,122,0,0,100,82,0,79,122,100,0,103,121,100,1,41,121,121,8,20,122,122,121,0,101,122,0,19,122,101,117,0,102,122,0,3,103,102,99,19,122,103,117,0,105,122,0,19,122,105,118,83,100,122,0,42,121,105,8,107,100,1,121,0,106,82,0,79,121,106,0,103,122,106,1,41,122,122,8,20,121,121,122,0,107,121,0,19,121,107,117,0,108,121,0,0,109,93,0,19,121,109,117,0,110,121,0,15,111,110,108,121,111,7,0,0,112,93,0,0,113,82,0,19,121,112,118,83,113,121,0,42,122,112,8,107,113,1,122,0,114,27,0,0,3,60,0,0,4,104,0,19,122,4,118,0,5,122,0,1,121,0,0,134,122,0,0,236,147,2,0,114,3,5,121,0,6,60,0,1,121,1,0,135,122,87,0,6,121,0,0,0,7,27,0,1,121,1,0,135,122,94,0,7,121,0,0,1,122,1,0,83,2,122,0,0,8,60,0,25,9,2,1,19,122,8,118,83,9,122,0,42,121,8,8,107,9,1,121,0,10,27,0,25,11,2,3,83,11,10,0,25,12,2,13,1,121,0,0,83,12,121,0,134,14,0,0,12,186,2,0,2,0,0,0,41,121,14,24,42,121,121,24,33,15,121,0,120,15,2,0,119,0,19,255,0,16,27,0,0,17,60,0,135,121,31,0,16,17,0,0,119,0,14,255,32,121,115,4,121,121,10,0,1,122,52,0,134,121,0,0,52,222,2,0,122,0,0,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,119,0,25,0,32,121,115,6,121,121,10,0,1,122,59,0,134,121,0,0,52,222,2,0,122,0,0,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,119,0,14,0,32,121,115,15,121,121,6,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,119,0,7,0,32,121,115,16,121,121,5,0,1,1,1,0,0,18,1,0,137,116,0,0,139,18,0,0,1,121,0,0,139,121,0,0,140,1,123,0,0,0,0,0,2,113,0,0,255,0,0,0,2,114,0,0,255,255,0,0,2,115,0,0,20,108,3,0,2,116,0,0,158,215,2,0,2,117,0,0,87,176,3,0,2,118,0,0,163,32,0,0,2,119,0,0,161,32,0,0,1,111,0,0,136,120,0,0,0,112,120,0,136,120,0,0,1,121,64,2,3,120,120,121,137,120,0,0,25,45,112,48,25,15,112,28,0,23,0,0,1,67,0,0,1,78,0,0,2,120,0,0,140,180,2,0,82,16,120,0,0,34,16,0,0,17,23,0,0,18,34,0,135,19,29,0,17,18,0,0,0,56,19,0,0,20,56,0,33,21,20,0,120,21,9,0,1,121,84,0,134,120,0,0,52,222,2,0,121,0,0,0,1,1,0,0,0,14,1,0,137,112,0,0,139,14,0,0,2,120,0,0,86,176,3,0,78,22,120,0,19,120,22,113,0,24,120,0,0,2,24,0,78,25,117,0,19,120,25,113,0,26,120,0,0,13,26,0,1,121,64,0,1,122,93,0,135,120,17,0,121,122,45,0,135,120,30,0,79,120,116,0,103,122,116,1,41,122,122,8,20,120,120,122,0,27,120,0,134,120,0,0,76,29,2,0,27,45,0,0,2,120,0,0,84,176,3,0,134,28,0,0,84,80,0,0,120,0,0,0,19,120,28,113,0,29,120,0,0,89,29,0,0,30,89,0,13,31,113,30,121,31,3,0,1,111,4,0,119,0,84,0,0,32,89,0,0,33,23,0,19,120,33,113,0,35,120,0,14,36,32,35,120,36,2,0,119,0,214,255,0,37,89,0,27,120,37,37,3,38,115,120,25,39,38,1,79,120,39,0,103,122,39,1,41,122,122,8,20,120,120,122,0,40,120,0,41,120,40,16,42,120,120,16,33,41,120,0,121,41,32,0,0,42,89,0,27,120,42,37,3,43,115,120,25,44,43,1,79,120,44,0,103,122,44,1,41,122,122,8,20,120,120,122,0,46,120,0,19,120,46,114,0,47,120,0,0,48,23,0,19,120,48,113,0,49,120,0,27,120,49,37,3,50,115,120,25,51,50,1,79,120,51,0,103,122,51,1,41,122,122,8,20,120,120,122,0,52,120,0,19,120,52,114,0,53,120,0,14,54,47,53,121,54,10,0,1,122,54,0,134,120,0,0,52,222,2,0,122,0,0,0,119,0,170,255,1,122,56,0,134,120,0,0,52,222,2,0,122,0,0,0,0,55,23,0,0,57,2,0,19,120,57,113,0,58,120,0,0,59,13,0,19,120,59,113,0,60,120,0,0,61,89,0,19,120,61,113,0,62,120,0,2,120,0,0,86,176,3,0,78,63,120,0,78,64,117,0,135,65,86,0,55,58,60,62,63,64,0,0,19,120,65,113,0,66,120,0,0,100,66,0,0,68,100,0,14,69,113,68,120,69,6,0,1,122,55,0,134,120,0,0,52,222,2,0,122,0,0,0,119,0,138,255,32,120,111,4,121,120,5,0,1,1,0,0,0,14,1,0,137,112,0,0,139,14,0,0,0,70,23,0,0,71,34,0,135,72,29,0,70,71,0,0,0,56,72,0,0,73,56,0,33,74,73,0,120,74,3,0,1,111,13,0,119,0,126,0,135,120,30,0,0,75,34,0,0,76,56,0,0,77,67,0,79,120,119,0,103,122,119,1,41,122,122,8,20,120,120,122,0,79,120,0,19,120,79,114,0,80,120,0,26,81,80,1,26,82,81,4,19,120,82,113,0,83,120,0,79,120,118,0,103,122,118,1,41,122,122,8,20,120,120,122,0,84,120,0,19,120,84,114,0,85,120,0,26,86,85,1,26,87,86,2,19,120,87,113,0,88,120,0,1,120,4,0,1,122,2,0,134,90,0,0,24,121,0,0,75,76,77,120,122,83,88,0,0,67,90,0,0,91,67,0,19,122,91,114,0,92,122,0,13,93,114,92,121,93,3,0,1,111,22,0,119,0,86,0,0,94,34,0,0,95,67,0,19,122,95,114,0,96,122,0,41,122,96,1,3,97,94,122,79,122,97,0,103,120,97,1,41,120,120,8,20,122,122,120,0,98,122,0,0,78,98,0,0,99,78,0,1,122,14,0,135,101,85,0,99,122,0,0,41,122,101,24,42,122,122,24,33,102,122,0,120,102,7,0,1,120,60,0,134,122,0,0,52,222,2,0,120,0,0,0,1,56,0,0,119,0,181,255,1,122,34,20,78,103,122,0,41,122,103,24,42,122,122,24,33,104,122,0,0,105,78,0,121,104,5,0,1,120,14,0,135,122,87,0,105,120,0,0,119,0,4,0,1,120,13,0,135,122,87,0,105,120,0,0,1,120,64,0,1,121,152,0,135,122,17,0,120,121,45,0,0,106,78,0,134,122,0,0,76,29,2,0,106,45,0,0,1,122,14,0,83,15,122,0,0,107,78,0,25,108,15,1,19,122,107,113,83,108,122,0,42,121,107,8,107,108,1,121,0,109,23,0,25,110,15,3,83,110,109,0,0,3,89,0,19,121,3,114,0,4,121,0,25,5,15,4,19,121,4,113,83,5,121,0,42,122,4,8,107,5,1,122,0,6,100,0,19,122,6,113,0,7,122,0,25,8,15,13,83,8,7,0,134,9,0,0,12,186,2,0,15,0,0,0,41,122,9,24,42,122,122,24,33,10,122,0,120,10,2,0,119,0,127,255,0,11,23,0,0,12,78,0,135,122,31,0,11,12,0,0,119,0,122,255,32,122,111,13,121,122,6,0,1,1,1,0,0,14,1,0,137,112,0,0,139,14,0,0,119,0,7,0,32,122,111,22,121,122,5,0,1,1,1,0,0,14,1,0,137,112,0,0,139,14,0,0,1,122,0,0,139,122,0,0,140,1,114,0,0,0,0,0,2,106,0,0,255,0,0,0,2,107,0,0,255,255,0,0,2,108,0,0,161,32,0,0,2,109,0,0,163,32,0,0,2,110,0,0,20,108,3,0,1,104,0,0,136,111,0,0,0,105,111,0,136,111,0,0,25,111,111,48,137,111,0,0,25,82,105,24,0,16,0,0,2,111,0,0,140,180,2,0,82,7,111,0,0,27,7,0,0,8,16,0,0,9,27,0,135,10,29,0,8,9,0,0,0,38,10,0,0,11,38,0,33,12,11,0,120,12,9,0,1,112,84,0,134,111,0,0,52,222,2,0,112,0,0,0,1,1,1,0,0,6,1,0,137,105,0,0,139,6,0,0,0,13,16,0,1,111,5,0,135,14,92,0,13,111,0,0,41,111,14,24,42,111,111,24,33,15,111,0,120,15,3,0,1,104,4,0,119,0,241,0,0,17,16,0,0,18,27,0,135,19,29,0,17,18,0,0,0,38,19,0,0,20,38,0,33,21,20,0,120,21,3,0,1,104,16,0,119,0,231,0,135,111,30,0,0,22,27,0,0,23,38,0,79,111,108,0,103,112,108,1,41,112,112,8,20,111,111,112,0,24,111,0,19,111,24,107,0,25,111,0,26,26,25,1,26,28,26,4,19,111,28,106,0,29,111,0,79,111,109,0,103,112,109,1,41,112,112,8,20,111,111,112,0,30,111,0,19,111,30,107,0,31,111,0,26,32,31,1,26,33,32,2,19,111,33,106,0,34,111,0,1,111,0,0,1,112,4,0,1,113,2,0,134,35,0,0,24,121,0,0,22,23,111,112,113,29,34,0,0,49,35,0,0,36,49,0,19,113,36,107,0,37,113,0,14,39,107,37,120,39,3,0,1,104,15,0,119,0,191,0,0,40,27,0,0,41,49,0,19,113,41,107,0,42,113,0,41,113,42,1,3,43,40,113,79,113,43,0,103,112,43,1,41,112,112,8,20,113,113,112,0,44,113,0,0,60,44,0,0,45,60,0,1,113,5,0,135,46,85,0,45,113,0,0,41,113,46,24,42,113,113,24,33,47,113,0,120,47,6,0,1,112,60,0,134,113,0,0,52,222,2,0,112,0,0,0,119,0,192,255,0,48,60,0,1,112,5,0,135,113,87,0,48,112,0,0,0,50,16,0,1,112,5,0,135,113,94,0,50,112,0,0,0,51,16,0,19,113,51,106,0,52,113,0,27,113,52,37,3,53,110,113,25,54,53,13,0,93,54,0,135,55,52,0,30,113,55,4,38,113,113,255,0,56,113,0,25,57,56,1,0,71,57,0,0,58,71,0,0,59,93,0,78,61,59,0,19,113,61,106,0,62,113,0,3,63,62,58,19,113,63,106,0,64,113,0,83,59,64,0,0,65,93,0,78,66,65,0,19,113,66,106,0,67,113,0,1,113,100,0,15,68,113,67,121,68,4,0,0,69,93,0,1,113,100,0,83,69,113,0,0,70,16,0,19,113,70,106,0,72,113,0,27,113,72,37,3,73,110,113,25,74,73,19,0,2,74,0,0,75,2,0,79,113,75,0,103,112,75,1,41,112,112,8,20,113,113,112,103,112,75,2,41,112,112,16,20,113,113,112,103,112,75,3,41,112,112,24,20,113,113,112,0,76,113,0,25,77,76,100,19,113,77,106,83,75,113,0,42,112,77,8,19,112,112,106,107,75,1,112,42,113,77,16,19,113,113,106,107,75,2,113,42,112,77,24,107,75,3,112,0,78,2,0,79,112,78,0,103,113,78,1,41,113,113,8,20,112,112,113,103,113,78,2,41,113,113,16,20,112,112,113,103,113,78,3,41,113,113,24,20,112,112,113,0,79,112,0,0,80,16,0,19,112,80,106,0,81,112,0,27,112,81,37,3,83,110,112,25,84,83,15,79,112,84,0,103,113,84,1,41,113,113,8,20,112,112,113,103,113,84,2,41,113,113,16,20,112,112,113,103,113,84,3,41,113,113,24,20,112,112,113,0,85,112,0,16,86,85,79,121,86,29,0,0,87,16,0,19,112,87,106,0,88,112,0,27,112,88,37,3,89,110,112,25,90,89,15,79,112,90,0,103,113,90,1,41,113,113,8,20,112,112,113,103,113,90,2,41,113,113,16,20,112,112,113,103,113,90,3,41,113,113,24,20,112,112,113,0,91,112,0,0,92,2,0,19,112,91,106,83,92,112,0,42,113,91,8,19,113,113,106,107,92,1,113,42,112,91,16,19,112,112,106,107,92,2,112,42,113,91,24,107,92,3,113,0,94,16,0,0,95,60,0,0,96,71,0,19,113,96,106,0,97,113,0,1,112,2,0,134,113,0,0,236,147,2,0,94,95,97,112,1,113,5,0,83,82,113,0,0,98,60,0,25,99,82,1,19,113,98,106,83,99,113,0,42,112,98,8,107,99,1,112,0,100,16,0,25,101,82,3,83,101,100,0,25,102,82,13,1,112,0,0,83,102,112,0,134,103,0,0,12,186,2,0,82,0,0,0,41,112,103,24,42,112,112,24,33,3,112,0,120,3,2,0,119,0,12,255,0,4,16,0,0,5,60,0,135,112,31,0,4,5,0,0,119,0,7,255,32,112,104,4,121,112,10,0,1,113,59,0,134,112,0,0,52,222,2,0,113,0,0,0,1,1,1,0,0,6,1,0,137,105,0,0,139,6,0,0,119,0,14,0,32,112,104,15,121,112,6,0,1,1,1,0,0,6,1,0,137,105,0,0,139,6,0,0,119,0,7,0,32,112,104,16,121,112,5,0,1,1,1,0,0,6,1,0,137,105,0,0,139,6,0,0,1,112,0,0,139,112,0,0,140,1,122,0,0,0,0,0,2,117,0,0,255,255,0,0,2,118,0,0,255,0,0,0,1,115,0,0,136,119,0,0,0,116,119,0,136,119,0,0,1,120,16,8,3,119,119,120,137,119,0,0,1,119,16,4,3,27,116,119,25,38,116,16,0,1,0,0,0,82,1,0,25,93,82,3,78,104,93,0,19,119,104,118,0,2,119,0,2,119,0,0,20,108,3,0,27,120,2,37,3,13,119,120,0,71,13,0,0,19,71,0,25,20,19,13,78,21,20,0,19,120,21,118,0,22,120,0,28,120,22,2,38,120,120,255,0,23,120,0,19,120,23,118,0,24,120,0,83,20,24,0,0,25,71,0,25,26,25,7,79,120,26,0,103,119,26,1,41,119,119,8,20,120,120,119,0,28,120,0,19,120,28,117,0,29,120,0,28,120,29,2,38,120,120,255,0,30,120,0,19,120,30,117,0,31,120,0,19,120,31,118,83,26,120,0,42,119,31,8,107,26,1,119,0,32,71,0,25,33,32,11,79,119,33,0,103,120,33,1,41,120,120,8,20,119,119,120,0,34,119,0,19,119,34,117,0,35,119,0,28,119,35,2,38,119,119,255,0,36,119,0,19,119,36,117,0,37,119,0,19,119,37,118,83,33,119,0,42,120,37,8,107,33,1,120,0,39,1,0,25,40,39,1,79,120,40,0,103,119,40,1,41,119,119,8,20,120,120,119,0,41,120,0,19,120,41,117,0,42,120,0,2,120,0,0,164,215,2,0,27,119,42,19,3,43,120,119,25,44,43,6,78,45,44,0,19,119,45,118,0,46,119,0,0,47,1,0,25,48,47,1,79,119,48,0,103,120,48,1,41,120,120,8,20,119,119,120,0,50,119,0,19,119,50,117,0,51,119,0,2,119,0,0,164,215,2,0,27,120,51,19,3,52,119,120,25,53,52,5,78,54,53,0,19,120,54,118,0,55,120,0,3,56,46,55,19,120,56,117,0,57,120,0,0,49,57,0,0,58,49,0,19,120,58,117,0,59,120,0,41,120,59,1,0,61,120,0,19,120,61,117,0,62,120,0,0,60,62,0,0,63,49,0,19,120,63,117,0,64,120,0,27,65,64,5,19,120,65,117,0,66,120,0,0,49,66,0,1,120,36,20,78,67,120,0,41,120,67,24,42,120,120,24,33,68,120,0,121,68,38,0,0,69,71,0,25,70,69,25,79,120,70,0,103,119,70,1,41,119,119,8,20,120,120,119,0,72,120,0,0,73,49,0,19,120,73,117,0,74,120,0,135,75,58,0,72,74,0,0,0,76,71,0,25,77,76,25,19,120,75,118,83,77,120,0,42,119,75,8,107,77,1,119,0,78,71,0,25,79,78,23,79,119,79,0,103,120,79,1,41,120,120,8,20,119,119,120,0,80,119,0,0,81,60,0,19,119,81,117,0,83,119,0,135,84,58,0,80,83,0,0,0,85,71,0,25,86,85,23,19,119,84,118,83,86,119,0,42,120,84,8,107,86,1,120,119,0,39,0,0,87,49,0,19,120,87,117,0,88,120,0,0,89,71,0,25,90,89,25,79,120,90,0,103,119,90,1,41,119,119,8,20,120,120,119,0,91,120,0,19,120,91,117,0,92,120,0,3,94,92,88,19,120,94,117,0,95,120,0,19,120,95,118,83,90,120,0,42,119,95,8,107,90,1,119,0,96,60,0,19,119,96,117,0,97,119,0,0,98,71,0,25,99,98,23,79,119,99,0,103,120,99,1,41,120,120,8,20,119,119,120,0,100,119,0,19,119,100,117,0,101,119,0,3,102,101,97,19,119,102,117,0,103,119,0,19,119,103,118,83,99,119,0,42,120,103,8,107,99,1,120,0,105,1,0,25,106,105,1,79,120,106,0,103,119,106,1,41,119,119,8,20,120,120,119,0,107,120,0,19,120,107,117,0,108,120,0,2,120,0,0,164,215,2,0,27,119,108,19,3,109,120,119,25,110,109,2,79,119,110,0,103,120,110,1,41,120,120,8,20,119,119,120,0,111,119,0,19,119,111,117,0,112,119,0,2,119,0,0,158,215,2,0,79,119,119,0,2,120,0,0,158,215,2,0,103,120,120,1,41,120,120,8,20,119,119,120,0,113,119,0,19,119,113,117,0,114,119,0,25,3,114,1,13,4,112,3,120,4,16,0,0,12,1,0,25,14,12,3,78,15,14,0,0,16,1,0,25,17,16,1,79,119,17,0,103,120,17,1,41,120,120,8,20,119,119,120,0,18,119,0,135,119,32,0,15,18,0,0,137,116,0,0,1,119,1,0,139,119,0,0,1,120,64,0,1,121,149,0,135,119,17,0,120,121,27,0,0,5,60,0,19,119,5,117,0,6,119,0,1,121,10,0,135,119,59,0,6,38,121,0,135,119,55,0,27,38,0,0,1,121,64,0,1,120,150,0,135,119,17,0,121,120,38,0,135,119,55,0,27,38,0,0,0,7,49,0,19,119,7,117,0,8,119,0,1,120,10,0,135,119,59,0,8,38,120,0,135,119,55,0,27,38,0,0,1,120,64,0,1,121,151,0,135,119,17,0,120,121,38,0,135,119,55,0,27,38,0,0,0,9,1,0,25,10,9,1,79,119,10,0,103,121,10,1,41,121,121,8,20,119,119,121,0,11,119,0,134,119,0,0,76,29,2,0,11,27,0,0,0,12,1,0,25,14,12,3,78,15,14,0,0,16,1,0,25,17,16,1,79,119,17,0,103,121,17,1,41,121,121,8,20,119,119,121,0,18,119,0,135,119,32,0,15,18,0,0,137,116,0,0,1,119,1,0,139,119,0,0,140,2,74,0,0,0,0,0,2,68,0,0,216,168,2,0,2,69,0,0,206,168,2,0,1,66,0,0,136,70,0,0,0,67,70,0,136,70,0,0,25,70,70,32,137,70,0,0,25,23,67,17,25,34,67,16,83,23,0,0,83,34,1,0,1,70,136,20,78,65,70,0,1,70,255,0,19,70,65,70,0,2,70,0,78,3,23,0,1,70,255,0,19,70,3,70,0,4,70,0,17,5,2,4,121,5,5,0,1,12,0,0,0,62,12,0,137,67,0,0,139,62,0,0,2,70,0,0,190,168,2,0,135,6,0,0,70,0,0,0,33,7,6,0,121,7,92,0,2,45,0,0,190,168,2,0,0,8,45,0,1,70,0,0,14,9,8,70,120,9,2,0,119,0,85,0,135,10,1,0,0,56,10,0], eb + 102400);
  HEAPU8.set([0,11,56,0,1,70,0,0,14,13,11,70,120,13,2,0,119,0,47,0,0,14,56,0,82,15,14,0,25,16,15,8,82,17,16,0,0,63,17,0,0,18,63,0,1,70,0,0,14,19,18,70,120,19,2,0,119,0,32,0,0,20,63,0,1,71,0,0,1,72,0,0,1,73,0,0,135,70,2,0,20,69,71,23,72,73,0,0,0,21,63,0,1,73,0,0,1,72,0,0,1,71,0,0,135,70,2,0,21,68,73,34,72,71,0,0,135,70,122,0,0,22,45,0,0,24,56,0,134,25,0,0,16,21,1,0,22,24,0,0,1,70,0,0,1,71,2,0,138,25,70,71,164,184,1,0,172,184,1,0,119,0,4,0,1,66,11,0,119,0,11,0,119,0,10,0,1,63,0,0,119,0,221,255,0,33,56,0,135,70,3,0,33,0,0,0,1,56,0,0,119,0,206,255,1,45,0,0,119,0,197,255,32,70,66,11,121,70,8,0,0,26,56,0,135,70,3,0,26,0,0,0,1,12,1,0,0,62,12,0,137,67,0,0,139,62,0,0,135,27,123,0,0,64,27,0,0,28,64,0,78,29,28,0,41,70,29,24,42,70,70,24,33,30,70,0,121,30,6,0,0,31,64,0,1,71,2,0,134,70,0,0,80,21,2,0,31,71,0,0,0,32,56,0,135,70,3,0,32,0,0,0,1,12,0,0,0,62,12,0,137,67,0,0,139,62,0,0,78,35,34,0,1,70,255,0,19,70,35,70,0,36,70,0,1,70,1,0,1,71,27,0,138,36,70,71,212,185,1,0,232,185,1,0,252,185,1,0,16,186,1,0,36,186,1,0,56,186,1,0,76,186,1,0,96,186,1,0,116,186,1,0,136,186,1,0,156,186,1,0,176,186,1,0,196,186,1,0,216,186,1,0,236,186,1,0,0,187,1,0,20,187,1,0,208,185,1,0,40,187,1,0,208,185,1,0,208,185,1,0,208,185,1,0,60,187,1,0,80,187,1,0,100,187,1,0,120,187,1,0,140,187,1,0,119,0,116,0,78,37,23,0,134,70,0,0,112,163,1,0,37,0,0,0,119,0,111,0,78,38,23,0,134,70,0,0,128,158,1,0,38,0,0,0,119,0,106,0,78,39,23,0,134,70,0,0,136,75,2,0,39,0,0,0,119,0,101,0,78,40,23,0,134,70,0,0,0,239,1,0,40,0,0,0,119,0,96,0,78,41,23,0,134,70,0,0,108,173,1,0,41,0,0,0,119,0,91,0,78,42,23,0,134,70,0,0,44,230,1,0,42,0,0,0,119,0,86,0,78,43,23,0,134,70,0,0,48,86,2,0,43,0,0,0,119,0,81,0,78,44,23,0,134,70,0,0,4,139,2,0,44,0,0,0,119,0,76,0,78,46,23,0,134,70,0,0,236,74,1,0,46,0,0,0,119,0,71,0,78,47,23,0,134,70,0,0,68,67,1,0,47,0,0,0,119,0,66,0,78,48,23,0,134,70,0,0,72,243,0,0,48,0,0,0,119,0,61,0,78,49,23,0,134,70,0,0,52,72,2,0,49,0,0,0,119,0,56,0,78,50,23,0,134,70,0,0,200,209,0,0,50,0,0,0,119,0,51,0,78,51,23,0,134,70,0,0,96,168,1,0,51,0,0,0,119,0,46,0,78,52,23,0,134,70,0,0,184,13,2,0,52,0,0,0,119,0,41,0,78,53,23,0,134,70,0,0,196,57,2,0,53,0,0,0,119,0,36,0,78,54,23,0,134,70,0,0,184,50,2,0,54,0,0,0,119,0,31,0,78,55,23,0,134,70,0,0,76,61,2,0,55,0,0,0,119,0,26,0,78,57,23,0,134,70,0,0,108,25,2,0,57,0,0,0,119,0,21,0,78,58,23,0,134,70,0,0,84,124,1,0,58,0,0,0,119,0,16,0,78,59,23,0,134,70,0,0,12,210,1,0,59,0,0,0,119,0,11,0,78,60,23,0,134,70,0,0,136,127,2,0,60,0,0,0,119,0,6,0,78,61,23,0,134,70,0,0,64,235,0,0,61,0,0,0,119,0,1,0,1,12,1,0,0,62,12,0,137,67,0,0,139,62,0,0,140,5,96,0,0,0,0,0,2,89,0,0,255,0,0,0,2,90,0,0,255,255,0,0,1,86,0,0,136,91,0,0,0,87,91,0,136,91,0,0,25,91,91,48,137,91,0,0,25,6,87,8,25,5,87,40,25,9,87,29,25,10,87,18,0,58,0,0,0,69,1,0,0,80,2,0,0,84,3,0,0,7,4,0,0,85,10,0,25,88,85,11,1,91,0,0,83,85,91,0,25,85,85,1,54,91,85,88,12,188,1,0,1,8,0,0,0,13,58,0,1,92,1,0,1,93,0,0,1,94,0,0,1,95,0,0,135,91,18,0,13,92,93,94,95,0,0,0,0,14,69,0,19,91,14,90,0,15,91,0,0,16,8,0,19,91,16,89,0,17,91,0,3,18,15,17,19,91,18,90,0,19,91,0,134,20,0,0,160,223,2,0,19,0,0,0,0,11,20,0,0,21,11,0,19,91,21,89,0,22,91,0,32,23,22,0,121,23,3,0,1,86,4,0,119,0,10,0,0,24,11,0,19,91,24,89,0,25,91,0,13,26,25,89,121,26,3,0,1,86,4,0,119,0,3,0,135,91,97,0,9,0,0,0,32,91,86,4,121,91,5,0,1,86,0,0,134,91,0,0,100,208,2,0,9,0,0,0,78,27,9,0,19,91,27,89,0,28,91,0,32,29,28,5,121,29,60,0,25,30,9,1,79,91,30,0,103,95,30,1,41,95,95,8,20,91,91,95,0,31,91,0,19,91,31,90,0,32,91,0,1,91,34,0,1,95,7,0,138,32,91,95,48,189,1,0,80,189,1,0,112,189,1,0,116,189,1,0,44,189,1,0,120,189,1,0,128,189,1,0,119,0,23,0,0,33,8,0,19,91,33,89,0,34,91,0,26,35,34,1,19,91,35,89,0,36,91,0,0,8,36,0,119,0,15,0,0,37,8,0,19,91,37,89,0,38,91,0,25,39,38,1,19,91,39,89,0,40,91,0,0,8,40,0,119,0,7,0,119,0,240,255,119,0,247,255,1,86,10,0,119,0,124,0,1,86,11,0,119,0,122,0,0,42,8,0,19,91,42,89,0,43,91,0,30,91,43,4,38,91,91,255,0,44,91,0,19,91,44,89,0,45,91,0,0,8,45,0,0,46,58,0,1,95,1,0,1,94,0,0,1,93,0,0,1,92,0,0,135,91,18,0,46,95,94,93,92,0,0,0,119,0,158,255,78,48,9,0,19,91,48,89,0,49,91,0,32,50,49,16,120,50,2,0,119,0,152,255,78,91,9,0,83,5,91,0,102,92,9,1,107,5,1,92,102,91,9,2,107,5,2,91,102,92,9,3,107,5,3,92,102,91,9,4,107,5,4,91,102,92,9,5,107,5,5,92,102,91,9,6,107,5,6,91,135,91,11,0,10,5,0,0,25,51,9,1,79,91,51,0,103,92,51,1,41,92,92,8,20,91,91,92,0,52,91,0,19,91,52,90,0,53,91,0,32,54,53,2,120,54,2,0,119,0,125,255,78,55,10,0,41,91,55,24,42,91,91,24,33,56,91,0,120,56,2,0,119,0,119,255,25,57,10,2,78,59,57,0,19,91,59,89,0,60,91,0,33,61,60,0,120,61,113,255,1,12,0,0,0,62,12,0,19,91,62,89,0,63,91,0,0,64,84,0,19,91,64,89,0,65,91,0,15,66,63,65,120,66,2,0,119,0,42,0,25,67,10,7,79,91,67,0,103,92,67,1,41,92,92,8,20,91,91,92,0,68,91,0,25,70,10,9,79,91,70,0,103,92,70,1,41,92,92,8,20,91,91,92,0,71,91,0,0,72,80,0,0,73,12,0,19,91,73,89,0,74,91,0,41,91,74,3,3,75,72,91,80,91,75,0,84,6,91,0,104,92,75,2,108,6,2,92,104,91,75,4,108,6,4,91,104,92,75,6,108,6,6,92,135,76,25,0,68,71,6,0,41,92,76,24,42,92,92,24,33,77,92,0,0,78,12,0,121,77,3,0,1,86,20,0,119,0,14,0,25,92,78,1,41,92,92,24,42,92,92,24,0,79,92,0,0,12,79,0,119,0,207,255,0,81,7,0,41,92,81,24,42,92,92,24,33,82,92,0,121,82,57,255,1,86,23,0,119,0,1,0,32,92,86,10,121,92,7,0,0,41,8,0,0,47,41,0,0,83,47,0,137,87,0,0,139,83,0,0,119,0,21,0,32,92,86,11,121,92,6,0,1,47,255,255,0,83,47,0,137,87,0,0,139,83,0,0,119,0,14,0,32,92,86,20,121,92,6,0,0,47,78,0,0,83,47,0,137,87,0,0,139,83,0,0,119,0,7,0,32,92,86,23,121,92,5,0,1,47,255,255,0,83,47,0,137,87,0,0,139,83,0,0,1,92,0,0,139,92,0,0,140,1,121,0,0,0,0,0,2,115,0,0,255,0,0,0,2,116,0,0,255,255,0,0,1,113,0,0,136,117,0,0,0,114,117,0,136,117,0,0,25,117,117,16,137,117,0,0,0,1,0,0,134,102,0,0,172,106,2,0,0,69,102,0,2,117,0,0,92,180,2,0,82,2,117,0,0,13,69,0,135,17,77,0,2,13,0,0,0,80,17,0,0,18,69,0,19,117,18,116,0,19,117,0,0,20,80,0,19,117,20,116,0,21,117,0,14,22,19,21,38,117,22,1,0,23,117,0,19,117,23,115,0,24,117,0,0,36,24,0,0,26,80,0,0,69,26,0,1,117,10,16,1,118,0,0,134,27,0,0,16,21,1,0,117,118,0,0,0,91,27,0,2,118,0,0,222,214,2,0,78,28,118,0,41,118,28,24,42,118,118,24,33,29,118,0,121,29,174,0,1,118,161,32,79,118,118,0,1,117,161,32,103,117,117,1,41,117,117,8,20,118,118,117,0,30,118,0,19,118,30,116,0,31,118,0,1,118,130,0,4,32,31,118,28,118,32,2,38,118,118,255,0,33,118,0,19,118,33,116,0,34,118,0,1,118,163,32,79,118,118,0,1,117,163,32,103,117,117,1,41,117,117,8,20,118,118,117,0,35,118,0,19,118,35,116,0,37,118,0,26,38,37,64,28,118,38,2,38,118,118,255,0,39,118,0,19,118,39,116,0,40,118,0,1,117,16,0,1,119,1,0,1,120,0,0,135,118,18,0,117,119,34,40,120,0,0,0,2,118,0,0,85,180,2,0,78,41,118,0,19,118,41,115,0,42,118,0,32,43,42,7,121,43,5,0,1,80,25,0,1,47,0,0,1,58,4,0,119,0,45,0,2,118,0,0,63,180,2,0,78,44,118,0,0,25,44,0,0,45,25,0,19,118,45,115,0,46,118,0,1,118,245,15,3,48,118,46,78,49,48,0,19,118,49,115,0,50,118,0,2,118,0,0,87,180,2,0,78,51,118,0,19,118,51,115,0,52,118,0,5,53,50,52,19,118,53,115,0,54,118,0,0,47,54,0,0,55,47,0,19,118,55,115,0,56,118,0,0,57,25,0,19,118,57,115,0,59,118,0,1,118,245,15,3,60,118,59,78,61,60,0,19,118,61,115,0,62,118,0,3,63,56,62,26,64,63,1,19,118,64,115,0,65,118,0,0,58,65,0,0,66,25,0,19,118,66,115,0,67,118,0,25,68,67,19,19,118,68,116,0,70,118,0,0,80,70,0,0,71,91,0,32,72,71,255,121,72,41,0,0,73,80,0,0,74,47,0,0,75,58,0,1,118,161,32,79,118,118,0,1,120,161,32,103,120,120,1,41,120,120,8,20,118,118,120,0,76,118,0,19,118,76,116,0,77,118,0,1,118,130,0,4,78,77,118,28,118,78,2,38,118,118,255,0,79,118,0,19,118,79,116,0,81,118,0,1,118,163,32,79,118,118,0,1,120,163,32,103,120,120,1,41,120,120,8,20,118,118,120,0,82,118,0,19,118,82,116,0,83,118,0,26,84,83,64,28,118,84,2,38,118,118,255,0,85,118,0,19,118,85,116,0,86,118,0,1,120,0,0,1,119,0,0,134,118,0,0,76,111,0,0,73,120,74,75,119,81,86,0,1,118,161,32,79,118,118,0,1,119,161,32,103,119,119,1,41,119,119,8,20,118,118,119,0,87,118,0,19,118,87,116,0,88,118,0,1,118,130,0,4,89,88,118,28,118,89,2,38,118,118,255,0,90,118,0,25,92,90,40,19,118,92,115,0,93,118,0,1,118,163,32,79,118,118,0,1,119,163,32,103,119,119,1,41,119,119,8,20,118,118,119,0,94,118,0,19,118,94,116,0,95,118,0,26,96,95,64,28,118,96,2,38,118,118,255,0,97,118,0,25,98,97,40,19,118,98,115,0,99,118,0,0,100,69,0,134,118,0,0,36,125,2,0,93,99,100,0,119,0,7,0,0,101,1,0,0,103,69,0,1,119,45,0,134,118,0,0,108,89,2,0,119,101,103,0,1,119,50,0,1,120,0,0,134,118,0,0,16,135,2,0,119,120,0,0,2,118,0,0,56,180,2,0,82,104,118,0,78,105,104,0,19,118,105,115,0,106,118,0,2,118,0,0,80,180,2,0,82,107,118,0,78,108,107,0,19,118,108,115,0,109,118,0,4,110,106,109,19,118,110,115,0,111,118,0,0,25,111,0,0,112,25,0,19,118,112,115,0,3,118,0,1,118,224,0,15,4,118,3,121,4,22,0,1,25,24,0,1,120,42,18,1,119,0,0,134,118,0,0,16,21,1,0,120,119,0,0,0,7,69,0,135,8,80,0,7,0,0,0,0,9,36,0,19,118,9,115,0,10,118,0,0,11,25,0,19,118,11,115,0,12,118,0,5,14,10,12,3,15,8,14,19,118,15,115,0,16,118,0,137,114,0,0,139,16,0,0,0,5,25,0,41,118,5,24,42,118,118,24,33,6,118,0,121,6,23,0,1,25,8,0,1,119,42,18,1,120,0,0,134,118,0,0,16,21,1,0,119,120,0,0,0,7,69,0,135,8,80,0,7,0,0,0,0,9,36,0,19,118,9,115,0,10,118,0,0,11,25,0,19,118,11,115,0,12,118,0,5,14,10,12,3,15,8,14,19,118,15,115,0,16,118,0,137,114,0,0,139,16,0,0,119,0,22,0,1,25,16,0,1,120,42,18,1,119,0,0,134,118,0,0,16,21,1,0,120,119,0,0,0,7,69,0,135,8,80,0,7,0,0,0,0,9,36,0,19,118,9,115,0,10,118,0,0,11,25,0,19,118,11,115,0,12,118,0,5,14,10,12,3,15,8,14,19,118,15,115,0,16,118,0,137,114,0,0,139,16,0,0,1,118,0,0,139,118,0,0,140,2,125,0,0,0,0,0,2,119,0,0,255,255,0,0,2,120,0,0,255,0,0,0,2,121,0,0,164,215,2,0,1,117,0,0,136,122,0,0,0,118,122,0,136,122,0,0,1,123,32,8,3,122,122,123,137,122,0,0,1,122,24,4,3,51,118,122,25,62,118,24,0,29,0,0,0,40,1,0,1,95,255,255,1,73,0,0,0,23,73,0,19,122,23,120,0,24,122,0,34,25,24,10,120,25,2,0,119,0,230,0,0,26,40,0,0,27,73,0,19,122,27,120,0,28,122,0,41,122,28,1,3,30,26,122,79,122,30,0,103,123,30,1,41,123,123,8,20,122,122,123,0,31,122,0,41,122,31,16,42,122,122,16,33,32,122,0,121,32,208,0,0,33,40,0,0,34,73,0,19,122,34,120,0,35,122,0,41,122,35,1,3,36,33,122,79,122,36,0,103,123,36,1,41,123,123,8,20,122,122,123,0,37,122,0,19,122,37,119,0,38,122,0,26,39,38,1,19,122,39,119,0,41,122,0,0,106,41,0,0,42,106,0,19,122,42,119,0,43,122,0,27,122,43,19,3,44,121,122,0,13,44,0,135,45,52,0,30,122,45,100,38,122,122,255,0,46,122,0,19,122,46,120,0,47,122,0,0,2,47,0,0,48,2,0,19,122,48,120,0,49,122,0,0,50,13,0,25,52,50,6,78,53,52,0,19,122,53,120,0,54,122,0,15,55,54,49,121,55,32,0,0,56,13,0,25,57,56,2,79,122,57,0,103,123,57,1,41,123,123,8,20,122,122,123,0,58,122,0,19,122,58,119,0,59,122,0,0,60,40,0,0,61,73,0,19,122,61,120,0,63,122,0,41,122,63,1,3,64,60,122,79,122,64,0,103,123,64,1,41,123,123,8,20,122,122,123,0,65,122,0,19,122,65,119,0,66,122,0,13,67,59,66,121,67,3,0,0,68,106,0,0,95,68,0,0,69,106,0,0,70,29,0,135,122,124,0,69,70,0,0,119,0,137,0,0,71,106,0,0,72,29,0,135,74,125,0,71,72,0,0,41,122,74,24,42,122,122,24,33,75,122,0,120,75,129,0,0,76,13,0,25,77,76,2,79,122,77,0,103,123,77,1,41,123,123,8,20,122,122,123,0,78,122,0,19,122,78,119,0,79,122,0,0,80,40,0,0,81,73,0,19,122,81,120,0,82,122,0,41,122,82,1,3,83,80,122,79,122,83,0,103,123,83,1,41,123,123,8,20,122,122,123,0,85,122,0,19,122,85,119,0,86,122,0,13,87,79,86,121,87,3,0,0,88,106,0,0,95,88,0,0,89,2,0,41,122,89,24,42,122,122,24,33,90,122,0,121,90,6,0,0,91,106,0,0,92,29,0,135,122,124,0,91,92,0,0,119,0,93,0,0,93,13,0,25,94,93,14,0,84,94,0,0,96,84,0,79,122,96,0,103,123,96,1,41,123,123,8,20,122,122,123,0,97,122,0,41,122,97,16,42,122,122,16,33,98,122,0,121,98,24,0,0,99,29,0,0,100,84,0,79,122,100,0,103,123,100,1,41,123,123,8,20,122,122,123,0,101,122,0,19,122,101,119,0,102,122,0,26,103,102,1,19,122,103,119,0,104,122,0,135,105,108,0,99,104,0,0,0,21,105,0,0,107,21,0,19,122,107,119,0,108,122,0,26,109,108,1,19,122,109,119,0,110,122,0,135,122,109,0,110,0,0,0,0,111,84,0,25,112,111,2,79,122,112,0,103,123,112,1,41,123,123,8,20,122,122,123,0,113,122,0,41,122,113,16,42,122,122,16,33,114,122,0,121,114,25,0,0,115,29,0,0,116,84,0,25,3,116,2,79,122,3,0,103,123,3,1,41,123,123,8,20,122,122,123,0,4,122,0,19,122,4,119,0,5,122,0,26,6,5,1,19,122,6,119,0,7,122,0,135,8,108,0,115,7,0,0,0,22,8,0,0,9,22,0,19,122,9,119,0,10,122,0,26,11,10,1,19,122,11,119,0,12,122,0,135,122,109,0,12,0,0,0,2,122,0,0,224,214,2,0,78,14,122,0,19,122,14,120,0,15,122,0,33,16,15,2,121,16,15,0,0,17,106,0,134,122,0,0,116,120,2,0,17,51,0,0,1,123,64,0,1,124,108,0,135,122,17,0,123,124,62,0,135,122,55,0,51,62,0,0,1,124,2,0,134,122,0,0,80,21,2,0,51,124,0,0,0,18,73,0,25,122,18,1,41,122,122,24,42,122,122,24,0,19,122,0,0,73,19,0,119,0,22,255,0,20,95,0,137,118,0,0,139,20,0,0,140,3,129,0,0,0,0,0,2,122,0,0,255,0,0,0,2,123,0,0,255,255,0,0,2,124,0,0,6,173,0,0,1,120,0,0,136,125,0,0,0,121,125,0,136,125,0,0,1,126,0,1,3,125,125,126,137,125,0,0,25,98,121,27,0,43,0,0,0,54,1,0,0,65,2,0,1,76,0,0,1,126,0,0,1,127,225,0,135,125,16,0,98,126,127,0,0,29,43,0,19,125,29,122,0,30,125,0,1,128,0,0,1,125,2,0,138,30,128,125,148,201,1,0,168,203,1,0,119,0,153,0,0,31,65,0,19,125,31,122,0,32,125,0,2,125,0,0,232,214,2,0,41,127,32,1,3,33,125,127,79,127,33,0,103,125,33,1,41,125,125,8,20,127,127,125,0,34,127,0,19,127,34,123,0,35,127,0,26,36,35,1,2,127,0,0,164,215,2,0,27,125,36,19,3,37,127,125,135,38,67,0,37,0,0,0,19,125,38,122,0,39,125,0,19,125,39,123,0,40,125,0,27,41,40,25,19,125,41,123,0,42,125,0,0,109,42,0,1,76,5,0,2,125,0,0,24,180,2,0,82,44,125,0,1,125,2,0,1,127,1,0,135,45,21,0,125,127,44,0,0,46,109,0,19,127,46,123,0,47,127,0,3,48,45,47,0,87,48,0,1,127,32,20,78,49,127,0,41,127,49,24,42,127,127,24,33,50,127,0,121,50,105,0,1,3,0,0,0,51,3,0,19,127,51,122,0,52,127,0,34,53,52,2,120,53,2,0,119,0,98,0,0,55,65,0,19,127,55,122,0,56,127,0,2,127,0,0,232,214,2,0,41,125,56,1,3,57,127,125,79,125,57,0,103,127,57,1,41,127,127,8,20,125,125,127,0,58,125,0,19,125,58,123,0,59,125,0,26,60,59,1,2,125,0,0,164,215,2,0,27,127,60,19,3,61,125,127,25,62,61,14,0,63,3,0,19,127,63,122,0,64,127,0,41,127,64,1,3,66,62,127,79,127,66,0,103,125,66,1,41,125,125,8,20,127,127,125,0,67,127,0,0,14,67,0,0,68,14,0,41,127,68,16,42,127,127,16,33,69,127,0,121,69,36,0,0,70,14,0,19,127,70,123,0,71,127,0,26,72,71,1,0,25,72,0,0,73,25,0,27,74,73,66,0,26,74,0,2,127,0,0,24,180,2,0,82,75,127,0,1,127,66,0,1,125,1,0,135,77,21,0,127,125,75,0,0,78,26,0,3,79,77,78,0,27,79,0,0,80,27,0,25,81,80,32,78,82,81,0,41,125,82,24,42,125,125,24,33,83,125,0,121,83,11,0,0,84,27,0,25,85,84,2,1,127,15,0,1,126,15,0,1,128,1,0,135,125,126,0,98,85,127,126,128,0,0,0,1,76,15,0,0,87,98,0,0,86,3,0,25,125,86,1,41,125,125,24,42,125,125,24,0,88,125,0,0,3,88,0,119,0,173,255,0,89,54,0,19,125,89,123,0,90,125,0,26,91,90,1,27,92,91,9,27,93,92,9,0,28,93,0,1,76,9,0,2,125,0,0,24,180,2,0,82,94,125,0,1,125,13,0,1,128,1,0,135,95,21,0,125,128,94,0,0,96,28,0,3,97,95,96,0,87,97,0,119,0,1,0,2,128,0,0,52,180,2,0,82,99,128,0,25,100,99,3,0,101,87,0,0,102,76,0,19,128,102,122,0,103,128,0,0,104,76,0,19,128,104,122,0,105,128,0,5,106,103,105,135,128,127,0,100,101,106,0,0,107,76,0,2,128,0,0,52,180,2,0,82,108,128,0,83,108,107,0,0,110,65,0,19,128,110,122,0,111,128,0,2,128,0,0,17,215,2,0,27,125,111,7,3,112,128,125,78,113,112,0,19,125,113,122,0,114,125,0,0,115,76,0,19,125,115,122,0,116,125,0,42,125,116,1,0,117,125,0,4,118,114,117,19,125,118,122,0,119,125,0,2,125,0,0,52,180,2,0,82,4,125,0,25,5,4,1,83,5,119,0,0,6,65,0,19,125,6,122,0,7,125,0,2,125,0,0,17,215,2,0,27,128,7,7,3,8,125,128,25,9,8,1,78,10,9,0,19,128,10,122,0,11,128,0,0,12,76,0,19,128,12,122,0,13,128,0,42,128,13,1,0,15,128,0,4,16,11,15,19,128,16,122,0,17,128,0,2,128,0,0,52,180,2,0,82,18,128,0,25,19,18,2,83,19,17,0,1,128,40,20,78,20,128,0,41,128,20,24,42,128,128,24,33,21,128,0,120,21,3,0,137,121,0,0,139,0,0,0,0,22,43,0,0,23,54,0,0,24,65,0,134,128,0,0,184,17,2,0,22,23,24,0,137,121,0,0,139,0,0,0,140,1,107,0,0,0,0,0,2,104,0,0,255,255,0,0,1,102,0,0,136,105,0,0,0,103,105,0,136,105,0,0,1,106,16,4,3,105,105,106,137,105,0,0,25,36,103,8,0,1,0,0,135,47,52,0,30,105,47,100,38,105,105,255,0,58,105,0,1,105,20,0,15,69,105,58,120,69,34,0,1,25,120,0,0,93,25,0,1,105,255,0,19,105,93,105,0,94,105,0,1,106,64,0,135,105,17,0,106,94,36,0,0,95,1,0,25,96,95,1,79,105,96,0,103,106,96,1,41,106,106,8,20,105,105,106,0,97,105,0,134,105,0,0,76,29,2,0,97,36,0,0,0,98,1,0,25,99,98,3,78,100,99,0,0,101,1,0,25,3,101,1,79,105,3,0,103,106,3,1,41,106,106,8,20,105,105,106,0,4,105,0,135,105,32,0,100,4,0,0,137,103,0,0,1,105,1,0,139,105,0,0,0,80,1,0,25,91,80,4,79,105,91,0,103,106,91,1,41,106,106,8,20,105,105,106,0,2,105,0,0,14,2,0,1,105,36,20,78,5,105,0,41,105,5,24,42,105,105,24,33,6,105,0,121,6,113,0,0,7,14,0,19,105,7,104,0,8,105,0,2,105,0,0,20,108,3,0,27,106,8,37,3,9,105,106,25,10,9,25,79,106,10,0,103,105,10,1,41,105,105,8,20,106,106,105,0,11,106,0,0,12,1,0,25,13,12,8,79,106,13,0,103,105,13,1,41,105,105,8,20,106,106,105,0,15,106,0,19,106,15,104,0,16,106,0,135,17,58,0,11,16,0,0,0,18,14,0,19,106,18,104,0,19,106,0,2,106,0,0,20,108,3,0,27,105,19,37,3,20,106,105,25,21,20,25,1,105,255,0,19,105,17,105,83,21,105,0,42,106,17,8,107,21,1,106,0,22,14,0,19,106,22,104,0,23,106,0,2,106,0,0,20,108,3,0,27,105,23,37,3,24,106,105,25,26,24,23,79,105,26,0,103,106,26,1,41,106,106,8,20,105,105,106,0,27,105,0,0,28,1,0,25,29,28,10,79,105,29,0,103,106,29,1,41,106,106,8,20,105,105,106,0,30,105,0,19,105,30,104,0,31,105,0,135,32,58,0,27,31,0,0,0,33,14,0,19,105,33,104,0,34,105,0,2,105,0,0,20,108,3,0,27,106,34,37,3,35,105,106,25,37,35,23,1,106,255,0,19,106,32,106,83,37,106,0,42,105,32,8,107,37,1,105,0,38,14,0,19,105,38,104,0,39,105,0,2,105,0,0,20,108,3,0,27,106,39,37,3,40,105,106,25,41,40,27,79,106,41,0,103,105,41,1,41,105,105,8,20,106,106,105,0,42,106,0,0,43,1,0,25,44,43,6,79,106,44,0,103,105,44,1,41,105,105,8,20,106,106,105,0,45,106,0,19,106,45,104,0,46,106,0,135,48,58,0,42,46,0,0,0,49,14,0,19,106,49,104,0,50,106,0,2,106,0,0,20,108,3,0,27,105,50,37,3,51,106,105,25,52,51,27,1,105,255,0,19,105,48,105,83,52,105,0,42,106,48,8,107,52,1,106,119,0,97,0,0,53,1,0,25,54,53,8,79,106,54,0,103,105,54,1,41,105,105,8,20,106,106,105,0,55,106,0,19,106,55,104,0,56,106,0,0,57,14,0,19,106,57,104,0,59,106,0,2,106,0,0,20,108,3,0,27,105,59,37,3,60,106,105,25,61,60,25,79,105,61,0,103,106,61,1,41,106,106,8,20,105,105,106,0,62,105,0,19,105,62,104,0,63,105,0,3,64,63,56,19,105,64,104,0,65,105,0,1,105,255,0,19,105,65,105,83,61,105,0,42,106,65,8,107,61,1,106,0,66,1,0,25,67,66,10,79,106,67,0,103,105,67,1,41,105,105,8,20,106,106,105,0,68,106,0,19,106,68,104,0,70,106,0,0,71,14,0,19,106,71,104,0,72,106,0,2,106,0,0,20,108,3,0,27,105,72,37,3,73,106,105,25,74,73,23,79,105,74,0,103,106,74,1,41,106,106,8,20,105,105,106,0,75,105,0,19,105,75,104,0,76,105,0,3,77,76,70,19,105,77,104,0,78,105,0,1,105,255,0,19,105,78,105,83,74,105,0,42,106,78,8,107,74,1,106,0,79,1,0,25,81,79,6,79,106,81,0,103,105,81,1,41,105,105,8,20,106,106,105,0,82,106,0,19,106,82,104,0,83,106,0,0,84,14,0,19,106,84,104,0,85,106,0,2,106,0,0,20,108,3,0,27,105,85,37,3,86,106,105,25,87,86,27,79,105,87,0,103,106,87,1,41,106,106,8,20,105,105,106,0,88,105,0,19,105,88,104,0,89,105,0,3,90,89,83,19,105,90,104,0,92,105,0,1,105,255,0,19,105,92,105,83,87,105,0,42,106,92,8,107,87,1,106,1,25,119,0,0,93,25,0,1,106,255,0,19,106,93,106,0,94,106,0,1,105,64,0,135,106,17,0,105,94,36,0,0,95,1,0,25,96,95,1,79,106,96,0,103,105,96,1,41,105,105,8,20,106,106,105,0,97,106,0,134,106,0,0,76,29,2,0,97,36,0,0,0,98,1,0,25,99,98,3,78,100,99,0,0,101,1,0,25,3,101,1,79,106,3,0,103,105,3,1,41,105,105,8,20,106,106,105,0,4,106,0,135,106,32,0,100,4,0,0,137,103,0,0,1,106,1,0,139,106,0,0,140,1,123,0,0,0,0,0,2,118,0,0,255,255,0,0,2,119,0,0,255,0,0,0,2,120,0,0,20,108,3,0,1,116,0,0,136,121,0,0,0,117,121,0,136,121,0,0,25,121,121,32,137,121,0,0,0,28,0,0,1,61,0,0,2,121,0,0,140,180,2,0,82,94,121,0,0,39,94,0,0,105,28,0,0,2,39,0,135,13,29,0,105,2,0,0,0,50,13,0,0,20,50,0,33,21,20,0,120,21,9,0,1,122,84,0,134,121,0,0,52,222,2,0,122,0,0,0,1,1,1,0,0,19,1,0,137,117,0,0,139,19,0,0,1,50,0,0,0,22,50,0,32,23,22,0,121,23,66,0,0,24,28,0,0,25,39,0,135,26,29,0,24,25,0,0,0,50,26,0,0,27,50,0,33,29,27,0,120,29,2,0,119,0,226,0,135,121,30,0,0,30,39,0,0,31,50,0,0,32,61,0,1,121,161,32,79,121,121,0,1,122,161,32,103,122,122,1,41,122,122,8,20,121,121,122,0,33,121,0,19,121,33,118,0,34,121,0,26,35,34,1,26,36,35,4,19,121,36,119,0,37,121,0,1,121,163,32,79,121,121,0,1,122,163,32,103,122,122,1,41,122,122,8,20,121,121,122,0,38,121,0,19,121,38,118,0,40,121,0,26,41,40,1,26,42,41,2,19,121,42,119,0,43,121,0,1,121,4,0,1,122,2,0,134,44,0,0,24,121,0,0,30,31,32,121,122,37,43,0,0,61,44,0,0,45,61,0,19,122,45,118,0,46,122,0,13,47,118,46,120,47,184,0,0,48,39,0,0,49,61,0,19,122,49,118,0,51,122,0,41,122,51,1,3,52,48,122,79,122,52,0,103,121,52,1,41,121,121,8,20,122,122,121,0,53,122,0,0,72,53,0,1,50,1,0,119,0,189,255,0,54,50,0,32,55,54,1,120,55,2,0,119,0,185,255,0,56,39,0,0,57,61,0,19,122,57,118,0,58,122,0,41,122,58,1,3,59,56,122,79,122,59,0,103,121,59,1,41,121,121,8,20,122,122,121,0,60,122,0,0,72,60,0,0,62,72,0,134,63,0,0,240,136,2,0,62,0,0,0,19,122,63,118,0,64,122,0,0,83,64,0,0,65,83,0,0,66,28,0,19,122,66,119,0,67,122,0,27,122,67,37,3,68,120,122,25,69,68,27,79,122,69,0,103,121,69,1,41,121,121,8,20,122,122,121,0,70,122,0,19,122,70,118,0,71,122,0,0,73,72,0,19,122,73,118,0,74,122,0,2,122,0,0,164,215,2,0,27,121,74,19,3,75,122,121,25,76,75,12,79,121,76,0,103,122,76,1,41,122,122,8,20,121,121,122,0,77,121,0,19,121,77,118,0,78,121,0,3,79,71,78,16,80,79,65,121,80,31,0,0,81,28,0,19,121,81,119,0,82,121,0,27,121,82,37,3,84,120,121,25,85,84,27,79,121,85,0,103,122,85,1,41,122,122,8,20,121,121,122,0,86,121,0,19,121,86,118,0,87,121,0,0,88,72,0,19,121,88,118,0,89,121,0,2,121,0,0,164,215,2,0,27,122,89,19,3,90,121,122,25,91,90,12,79,122,91,0,103,121,91,1,41,121,121,8,20,122,122,121,0,92,122,0,19,122,92,118,0,93,122,0,3,95,87,93,0,83,95,0,0,96,83,0,33,97,96,0,120,97,7,0,1,121,57,0,134,122,0,0,52,222,2,0,121,0,0,0,1,50,0,0,119,0,95,255,0,98,83,0,19,122,98,118,0,99,122,0,1,122,0,0,134,100,0,0,108,47,2,0,122,99,0,0,19,122,100,118,0,101,122,0,0,83,101,0,0,102,83,0,13,103,118,102,121,103,3,0,1,50,0,0,119,0,59,0,0,104,28,0,19,122,104,119,0,106,122,0,27,122,106,37,3,107,120,122,25,108,107,27,79,122,108,0,103,121,108,1,41,121,121,8,20,122,122,121,0,109,122,0,19,122,109,118,0,110,122,0,0,111,72,0,19,122,111,118,0,112,122,0,2,122,0,0,164,215,2,0,27,121,112,19,3,113,122,121,25,114,113,12,79,121,114,0,103,122,114,1,41,122,122,8,20,121,121,122,0,115,121,0,19,121,115,118,0,3,121,0,3,4,110,3,0,5,83,0,4,6,4,5,19,121,6,118,0,7,121,0,0,8,28,0,19,121,8,119,0,9,121,0,27,121,9,37,3,10,120,121,25,11,10,27,19,121,7,119,83,11,121,0,42,122,7,8,107,11,1,122,0,12,83,0,19,122,12,118,0,14,122,0,0,15,72,0,19,122,15,118,0,16,122,0,2,122,0,0,164,215,2,0,27,121,16,19,3,17,122,121,25,18,17,12,19,121,14,119,83,18,121,0,42,122,14,8,107,18,1,122,1,50,0,0,119,0,20,255,1,1,1,0,0,19,1,0,137,117,0,0,139,19,0,0,140,1,119,0,0,0,0,0,2,113,0,0,255,255,0,0,2,114,0,0,255,0,0,0,2,115,0,0,164,215,2,0,1,111,0,0,136,116,0,0,0,112,116,0,136,116,0,0,25,116,116,32,137,116,0,0,0,1,0,0,0,100,1,0,25,2,100,4,79,116,2,0,103,117,2,1,41,117,117,8,20,116,116,117,0,13,116,0,0,89,13,0,0,15,1,0,25,16,15,1,79,116,16,0,103,117,16,1,41,117,117,8,20,116,116,117,0,17,116,0,19,116,17,113,0,18,116,0,27,116,18,19,3,19,115,116,25,20,19,6,78,21,20,0,19,116,21,114,0,22,116,0,0,24,89,0,19,116,24,113,0,25,116,0,27,116,25,19,3,26,115,116,25,27,26,6,78,28,27,0,19,116,28,114,0,29,116,0,4,30,22,29,0,34,30,0,0,31,34,0,25,32,31,50,0,34,32,0,135,33,52,0,30,116,33,100,38,116,116,255,0,35,116,0,0,23,35,0,0,36,23,0,0,37,34,0,16,38,37,36,120,38,158,0,135,39,52,0,30,116,39,100,38,116,116,255,0,40,116,0,0,23,40,0,0,41,23,0,0,42,89,0,19,116,42,113,0,43,116,0,27,116,43,19,3,44,115,116,25,46,44,7,78,47,46,0,19,116,47,114,0,48,116,0,16,49,41,48,120,49,141,0,0,50,89,0,19,116,50,113,0,51,116,0,27,116,51,19,3,52,115,116,25,53,52,8,78,54,53,0,19,116,54,114,0,55,116,0,1,116,0,0,1,117,5,0,138,55,116,117,228,215,1,0,236,215,1,0,244,215,1,0,252,215,1,0,4,216,1,0,119,0,11,0,1,34,30,0,119,0,9,0,1,34,10,0,119,0,7,0,1,34,20,0,119,0,5,0,1,34,60,0,119,0,3,0,1,34,5,0,119,0,1,0,135,57,52,0,30,116,57,100,38,116,116,255,0,58,116,0,0,23,58,0,0,59,23,0,0,60,34,0,16,61,60,59,120,61,104,0,0,62,89,0,135,63,95,0,62,0,0,0,19,116,63,114,0,64,116,0,0,78,64,0,0,65,78,0,13,66,114,65,120,66,95,0,0,68,89,0,19,116,68,113,0,69,116,0,25,70,69,1,19,116,70,113,0,71,116,0,0,72,89,0,19,116,72,113,0,73,116,0,27,116,73,19,3,74,115,116,25,75,74,2,19,116,71,114,83,75,116,0,42,117,71,8,107,75,1,117,2,117,0,0,140,180,2,0,82,76,117,0,0,45,76,0,0,77,78,0,19,117,77,114,0,79,117,0,0,80,45,0,135,81,29,0,79,80,0,0,0,67,81,0,0,82,89,0,19,117,82,113,0,83,117,0,25,84,83,1,19,117,84,113,0,85,117,0,0,86,78,0,2,117,0,0,20,108,3,0,27,116,86,37,3,87,117,116,25,88,87,1,19,116,85,114,83,88,116,0,42,117,85,8,107,88,1,117,1,56,0,0,0,90,56,0,0,91,67,0,16,92,90,91,120,92,2,0,119,0,29,0,0,93,89,0,19,117,93,113,0,94,117,0,25,95,94,1,19,117,95,113,0,96,117,0,0,97,45,0,0,98,56,0,41,117,98,1,3,99,97,117,79,117,99,0,103,116,99,1,41,116,116,8,20,117,117,116,0,101,117,0,19,117,101,113,0,102,117,0,27,117,102,19,3,103,115,117,25,104,103,2,19,117,96,114,83,104,117,0,42,116,96,8,107,104,1,116,0,105,56,0,25,106,105,1,0,56,106,0,119,0,224,255,0,107,1,0,25,108,107,1,79,116,108,0,103,117,108,1,41,117,117,8,20,116,116,117,0,109,116,0,0,110,89,0,1,117,36,9,1,118,3,0,134,116,0,0,88,213,2,0,109,110,117,118,0,3,89,0,134,116,0,0,136,220,2,0,3,0,0,0,0,4,1,0,25,5,4,1,79,116,5,0,103,118,5,1,41,118,118,8,20,116,116,118,0,6,116,0,0,7,89,0,1,118,48,9,1,117,2,0,134,116,0,0,88,213,2,0,6,7,118,117,0,8,1,0,25,9,8,3,78,10,9,0,0,11,1,0,25,12,11,1,79,116,12,0,103,117,12,1,41,117,117,8,20,116,116,117,0,14,116,0,135,116,32,0,10,14,0,0,137,112,0,0,1,116,1,0,139,116,0,0,140,0,144,0,0,0,0,0,2,139,0,0,255,0,0,0,2,140,0,0,255,255,0,0,2,141,0,0,17,215,2,0,1,137,0,0,136,142,0,0,0,138,142,0,136,142,0,0,25,142,142,32,137,142,0,0,2,142,0,0,199,214,2,0,1,143,4,0,19,143,143,139,83,142,143,0,2,143,0,0,199,214,2,0,1,142,4,0,42,142,142,8,107,143,1,142,134,142,0,0,144,205,2,0,2,142,0,0,40,180,2,0,82,2,142,0,0,115,2,0,1,82,0,0,0,13,115,0,0,24,82,0,19,142,24,140,0,35,142,0,3,43,13,35,78,44,43,0,19,142,44,139,0,45,142,0,33,46,45,3,0,47,82,0,19,142,47,140,0,48,142,0,120,46,2,0,119,0,6,0,25,50,48,1,19,142,50,140,0,51,142,0,0,82,51,0,119,0,238,255,2,142,0,0,203,214,2,0,78,52,142,0,19,142,52,139,0,53,142,0,8,142,48,53,38,142,142,255,0,54,142,0,19,142,54,139,0,55,142,0,2,142,0,0,215,214,2,0,83,142,55,0,0,56,82,0,19,142,56,140,0,57,142,0,2,142,0,0,203,214,2,0,78,58,142,0,19,142,58,139,0,59,142,0,6,142,57,59,38,142,142,255,0,61,142,0,19,142,61,139,0,62,142,0,2,142,0,0,216,214,2,0,83,142,62,0,2,142,0,0,215,214,2,0,78,63,142,0,19,142,63,139,0,64,142,0,26,65,64,2,19,142,65,140,0,66,142,0,0,93,66,0,2,142,0,0,216,214,2,0,78,67,142,0,19,142,67,139,0,68,142,0,26,69,68,2,19,142,69,140,0,70,142,0,0,104,70,0,1,142,120,0,135,72,128,0,142,0,0,0,0,1,72,0,1,142,121,0,135,73,128,0,142,0,0,0,0,49,73,0,1,60,8,0,2,142,0,0,225,214,2,0,78,74,142,0,0,71,74,0,2,142,0,0,224,214,2,0,78,75,142,0,19,142,75,139,0,76,142,0,32,77,76,1,121,77,24,0,0,78,93,0,19,142,78,139,0,79,142,0,0,60,79,0,0,80,1,0,19,142,80,139,0,81,142,0,0,93,81,0,0,83,60,0,0,1,83,0,0,84,104,0,19,142,84,139,0,85,142,0,0,60,85,0,0,86,49,0,19,142,86,139,0,87,142,0,0,104,87,0,0,88,60,0,0,49,88,0,0,89,71,0,0,60,89,0,1,71,8,0,1,142,2,0,1,143,5,0,135,90,129,0,142,143,0,0,0,115,90,0,0,91,115,0,0,92,71,0,19,143,92,139,0,94,143,0,27,95,94,20,3,96,91,95,0,126,96,0,0,97,60,0,19,143,97,139,0,98,143,0,27,99,98,20,0,100,115,0,3,101,100,99,0,115,101,0,1,0,0,0,0,102,0,0,19,143,102,139,0,103,143,0,34,105,103,10,120,105,2,0,119,0,103,0,0,106,0,0,19,143,106,139,0,107,143,0,41,143,107,1,0,108,143,0,19,143,108,139,0,109,143,0,0,60,109,0,0,110,93,0,19,143,110,140,0,111,143,0,0,112,115,0,0,113,60,0,19,143,113,139,0,114,143,0,3,116,112,114,78,117,116,0,19,143,117,139,0,118,143,0,3,119,111,118,19,143,119,139,0,120,143,0,0,121,0,0,19,143,121,139,0,122,143,0,27,143,122,7,3,123,141,143,83,123,120,0,0,124,104,0,19,143,124,140,0,125,143,0,0,127,115,0,0,128,60,0,19,143,128,139,0,129,143,0,25,130,129,1,3,131,127,130,78,132,131,0,19,143,132,139,0,133,143,0,3,134,125,133,19,143,134,139,0,135,143,0,0,136,0,0,19,143,136,139,0,3,143,0,27,143,3,7,3,4,141,143,25,5,4,1,83,5,135,0,0,6,1,0,19,143,6,139,0,7,143,0,0,8,126,0,0,9,60,0,19,143,9,139,0,10,143,0,3,11,8,10,78,12,11,0,19,143,12,139,0,14,143,0,3,15,7,14,19,143,15,139,0,16,143,0,0,17,0,0,19,143,17,139,0,18,143,0,25,19,18,10,27,143,19,7,3,20,141,143,83,20,16,0,0,21,49,0,19,143,21,139,0,22,143,0,0,23,126,0,0,25,60,0,19,143,25,139,0,26,143,0,25,27,26,1,3,28,23,27,78,29,28,0,19,143,29,139,0,30,143,0,3,31,22,30,19,143,31,139,0,32,143,0,0,33,0,0,19,143,33,139,0,34,143,0,25,36,34,10,27,143,36,7,3,37,141,143,25,38,37,1,83,38,32,0,0,39,0,0,19,143,39,139,0,40,143,0,25,41,40,1,19,143,41,139,0,42,143,0,0,0,42,0,119,0,149,255,137,138,0,0,1,143,0,0,139,143,0,0,140,1,95,0,0,0,0,0,2,84,0,0,152,14,0,0,2,85,0,0,147,14,0,0,2,86,0,0,157,14,0,0,2,87,0,0,148,166,2,0,2,88,0,0,132,14,0,0,2,89,0,0,223,214,2,0,2,90,0,0,221,214,2,0,1,82,0,0,136,91,0,0,0,83,91,0,136,91,0,0,25,91,91,32,137,91,0,0,25,67,83,16,0,12,0,0,135,78,130,0,0,23,78,0,0,81,23,0,1,91,255,0,19,91,81,91,0,2,91,0,1,91,255,0,14,3,91,2,121,3,226,0,0,4,23,0,0,5,12,0,25,6,5,3,83,6,4,0,0,7,23,0,135,91,131,0,7,0,0,0,78,8,90,0,41,91,8,24,42,91,91,24,33,9,91,0,121,9,26,0,0,10,23,0,134,91,0,0,136,143,2,0,10,0,0,0,135,91,132,0,0,11,23,0,1,92,1,0,134,91,0,0,148,202,2,0,11,92,0,0,2,91,0,0,36,180,2,0,82,13,91,0,135,91,45,0,13,0,0,0,78,14,89,0,41,91,14,24,42,91,91,24,33,15,91,0,121,15,6,0,1,92,50,0,1,93,0,0,134,91,0,0,16,135,2,0,92,93,0,0,135,16,0,0,88,0,0,0,33,17,16,0,121,17,83,0,1,34,132,14,0,18,34,0,1,91,0,0,14,19,18,91,120,19,2,0,119,0,77,0,135,20,1,0,0,45,20,0,0,21,45,0,1,91,0,0,14,22,21,91,120,22,2,0,119,0,60,0,0,24,45,0,82,25,24,0,25,26,25,8,82,27,26,0,0,56,27,0,0,28,56,0,1,91,0,0,14,29,28,91,120,29,2,0,119,0,45,0,0,30,56,0], eb + 112640);
  HEAPU8.set([0,31,12,0,1,93,0,0,1,92,0,0,1,94,0,0,135,91,2,0,30,85,93,31,92,94,0,0,0,32,56,0,0,33,12,0,25,35,33,1,1,94,1,0,1,92,0,0,1,93,0,0,135,91,2,0,32,87,94,35,92,93,0,0,0,36,56,0,0,37,12,0,25,38,37,3,1,93,0,0,1,92,0,0,1,94,0,0,135,91,2,0,36,84,93,38,92,94,0,0,0,39,56,0,0,40,12,0,25,41,40,4,1,94,0,0,1,92,0,0,1,93,0,0,135,91,2,0,39,86,94,41,92,93,0,0,0,42,34,0,0,43,45,0,134,44,0,0,16,21,1,0,42,43,0,0,32,46,44,0,120,46,10,0,1,56,0,0,119,0,208,255,0,49,45,0,135,91,3,0,49,0,0,0,1,45,0,0,119,0,193,255,1,34,0,0,119,0,184,255,0,47,45,0,135,91,3,0,47,0,0,0,0,48,23,0,0,1,48,0,0,80,1,0,137,83,0,0,139,80,0,0,0,50,23,0,134,91,0,0,24,54,1,0,50,0,0,0,78,51,90,0,41,91,51,24,42,91,91,24,33,52,91,0,121,52,15,0,0,53,23,0,134,91,0,0,136,143,2,0,53,0,0,0,78,54,89,0,41,91,54,24,42,91,91,24,33,55,91,0,121,55,6,0,1,93,50,0,1,92,0,0,134,91,0,0,16,135,2,0,93,92,0,0,1,91,66,20,78,57,91,0,1,91,255,0,19,91,57,91,0,58,91,0,32,59,58,1,120,59,22,0,0,71,12,0,1,91,0,0,134,72,0,0,200,108,1,0,71,91,0,0,41,91,72,24,42,91,91,24,33,73,91,0,120,73,64,0,0,74,12,0,134,75,0,0,140,207,2,0,74,0,0,0,41,91,75,24,42,91,91,24,33,76,91,0,120,76,56,0,0,77,12,0,1,91,3,0,83,77,91,0,119,0,52,0,0,60,12,0,78,91,60,0,83,67,91,0,102,92,60,1,107,67,1,92,102,91,60,2,107,67,2,91,102,92,60,3,107,67,3,92,102,91,60,4,107,67,4,91,134,61,0,0,140,207,2,0,67,0,0,0,41,91,61,24,42,91,91,24,33,62,91,0,0,63,12,0,121,62,21,0,1,91,0,0,134,64,0,0,200,108,1,0,63,91,0,0,41,91,64,24,42,91,91,24,33,65,91,0,120,65,25,0,0,66,12,0,78,91,67,0,83,66,91,0,102,92,67,1,107,66,1,92,102,91,67,2,107,66,2,91,102,92,67,3,107,66,3,92,102,91,67,4,107,66,4,91,119,0,13,0,1,91,1,0,134,68,0,0,200,108,1,0,63,91,0,0,41,91,68,24,42,91,91,24,33,69,91,0,120,69,5,0,0,70,12,0,1,91,3,0,83,70,91,0,119,0,1,0,0,79,23,0,0,1,79,0,0,80,1,0,137,83,0,0,139,80,0,0,140,0,102,0,0,0,0,0,2,96,0,0,255,0,0,0,2,97,0,0,20,108,3,0,2,98,0,0,158,215,2,0,2,99,0,0,255,255,0,0,1,94,0,0,136,100,0,0,0,95,100,0,136,100,0,0,25,100,100,16,137,100,0,0,1,0,0,0,0,34,0,0,19,100,34,96,0,45,100,0,1,100,136,20,78,56,100,0,19,100,56,96,0,67,100,0,15,78,45,67,120,78,2,0,119,0,201,0,0,89,0,0,19,100,89,96,0,2,100,0,27,100,2,37,3,3,97,100,25,4,3,1,79,100,4,0,103,101,4,1,41,101,101,8,20,100,100,101,0,5,100,0,0,23,5,0,0,6,23,0,41,100,6,16,42,100,100,16,33,7,100,0,121,7,177,0,0,8,0,0,19,100,8,96,0,9,100,0,27,100,9,37,3,10,97,100,0,1,10,0,135,11,52,0,30,100,11,100,38,100,100,255,0,13,100,0,19,100,13,96,0,14,100,0,0,12,14,0,0,15,1,0,78,16,15,0,19,100,16,96,0,17,100,0,1,100,0,0,1,101,5,0,138,17,100,101,172,227,1,0,24,229,1,0,104,229,1,0,180,229,1,0,184,229,1,0,119,0,151,0,0,18,12,0,19,100,18,96,0,19,100,0,0,20,0,0,19,100,20,96,0,21,100,0,27,100,21,37,3,22,97,100,25,24,22,14,78,25,24,0,19,100,25,96,0,26,100,0,15,27,26,19,120,27,2,0,119,0,136,0,135,28,52,0,30,100,28,5,38,100,100,255,0,29,100,0,19,100,29,96,0,30,100,0,0,12,30,0,0,31,12,0,19,100,31,96,0,32,100,0,1,100,0,0,1,101,3,0,138,32,100,101,44,228,1,0,60,228,1,0,76,228,1,0,119,0,119,0,0,33,1,0,1,100,2,0,83,33,100,0,119,0,30,0,0,35,1,0,1,100,3,0,83,35,100,0,119,0,26,0,135,36,52,0,30,100,36,100,38,100,100,255,0,37,100,0,19,100,37,96,0,38,100,0,0,12,38,0,0,39,12,0,19,100,39,96,0,40,100,0,0,41,0,0,19,100,41,96,0,42,100,0,27,100,42,37,3,43,97,100,25,44,43,13,78,46,44,0,19,100,46,96,0,47,100,0,15,48,47,40,121,48,5,0,0,49,1,0,1,100,4,0,83,49,100,0,119,0,1,0,0,50,1,0,78,51,50,0,19,100,51,96,0,52,100,0,33,53,52,0,120,53,2,0,119,0,79,0,0,54,23,0,19,100,54,99,0,55,100,0,79,100,98,0,103,101,98,1,41,101,101,8,20,100,100,101,0,57,100,0,19,100,57,99,0,58,100,0,25,59,58,1,13,60,55,59,120,60,2,0,119,0,65,0,0,61,0,0,134,100,0,0,124,204,2,0,61,0,0,0,119,0,60,0,0,62,0,0,19,100,62,96,0,63,100,0,27,100,63,37,3,64,97,100,25,65,64,25,79,100,65,0,103,101,65,1,41,101,101,8,20,100,100,101,0,66,100,0,41,100,66,16,42,100,100,16,33,68,100,0,120,68,2,0,119,0,44,0,0,69,1,0,1,100,0,0,83,69,100,0,119,0,40,0,0,70,12,0,19,100,70,96,0,71,100,0,0,72,0,0,19,100,72,96,0,73,100,0,27,100,73,37,3,74,97,100,25,75,74,14,78,76,75,0,19,100,76,96,0,77,100,0,15,79,71,77,120,79,2,0,119,0,25,0,0,80,1,0,1,100,0,0,83,80,100,0,119,0,21,0,119,0,237,255,0,81,12,0,19,100,81,96,0,82,100,0,0,83,0,0,19,100,83,96,0,84,100,0,27,100,84,37,3,85,97,100,25,86,85,13,78,87,86,0,19,100,87,96,0,88,100,0,15,90,82,88,120,90,2,0,119,0,5,0,0,91,1,0,1,100,0,0,83,91,100,0,119,0,1,0,0,92,0,0,25,100,92,1,41,100,100,24,42,100,100,24,0,93,100,0,0,0,93,0,119,0,47,255,137,95,0,0,1,100,1,0,139,100,0,0,140,1,111,0,0,0,0,0,2,103,0,0,255,255,0,0,2,104,0,0,255,0,0,0,2,105,0,0,163,32,0,0,2,106,0,0,161,32,0,0,2,107,0,0,37,20,0,0,1,101,0,0,136,108,0,0,0,102,108,0,136,108,0,0,1,109,48,2,3,108,108,109,137,108,0,0,25,24,102,32,25,90,102,14,0,13,0,0,78,2,107,0,19,108,2,104,0,4,108,0,33,5,4,0,121,5,17,0,0,6,13,0,1,108,6,0,135,7,92,0,6,108,0,0,41,108,7,24,42,108,108,24,33,8,108,0,120,8,9,0,1,109,59,0,134,108,0,0,52,222,2,0,109,0,0,0,1,1,1,0,0,3,1,0,137,102,0,0,139,3,0,0,2,108,0,0,140,180,2,0,82,9,108,0,0,35,9,0,0,10,13,0,0,11,35,0,135,12,29,0,10,11,0,0,0,46,12,0,0,14,46,0,33,15,14,0,120,15,9,0,1,109,84,0,134,108,0,0,52,222,2,0,109,0,0,0,1,1,1,0,0,3,1,0,137,102,0,0,139,3,0,0,78,16,107,0,19,108,16,104,0,17,108,0,33,18,17,0,121,18,11,0,0,19,13,0,1,108,6,0,135,20,92,0,19,108,0,0,41,108,20,24,42,108,108,24,33,21,108,0,120,21,3,0,1,101,8,0,119,0,192,0,0,22,13,0,0,23,35,0,135,25,74,0,22,23,0,0,19,108,25,104,0,26,108,0,0,46,26,0,0,27,46,0,33,28,27,0,120,28,3,0,1,101,10,0,119,0,180,0,135,108,30,0,0,29,35,0,0,30,46,0,79,108,106,0,103,109,106,1,41,109,109,8,20,108,108,109,0,31,108,0,19,108,31,103,0,32,108,0,26,33,32,1,26,34,33,4,19,108,34,104,0,36,108,0,79,108,105,0,103,109,105,1,41,109,109,8,20,108,108,109,0,37,108,0,19,108,37,103,0,38,108,0,26,39,38,1,26,40,39,2,19,108,40,104,0,41,108,0,1,108,0,0,1,109,4,0,1,110,2,0,134,42,0,0,24,121,0,0,29,30,108,109,110,36,41,0,0,57,42,0,0,43,57,0,19,110,43,103,0,44,110,0,14,45,103,44,120,45,2,0,119,0,141,0,0,47,35,0,0,48,57,0,19,110,48,103,0,49,110,0,41,110,49,1,3,50,47,110,79,110,50,0,103,109,50,1,41,109,109,8,20,110,110,109,0,51,110,0,0,68,51,0,0,52,13,0,0,53,35,0,135,54,29,0,52,53,0,0,0,46,54,0,0,55,46,0,33,56,55,0,120,56,2,0,119,0,120,0,135,110,30,0,0,58,35,0,0,59,46,0,79,110,106,0,103,109,106,1,41,109,109,8,20,110,110,109,0,60,110,0,19,110,60,103,0,61,110,0,26,62,61,1,26,63,62,4,19,110,63,104,0,64,110,0,79,110,105,0,103,109,105,1,41,109,109,8,20,110,110,109,0,65,110,0,19,110,65,103,0,66,110,0,26,67,66,1,26,69,67,2,19,110,69,104,0,70,110,0,1,110,0,0,1,109,4,0,1,108,2,0,134,71,0,0,24,121,0,0,58,59,110,109,108,64,70,0,0,57,71,0,0,72,57,0,19,108,72,103,0,73,108,0,14,74,103,73,120,74,2,0,119,0,131,255,0,75,35,0,0,76,57,0,19,108,76,103,0,77,108,0,41,108,77,1,3,78,75,108,79,108,78,0,103,109,78,1,41,109,109,8,20,108,108,109,0,80,108,0,0,79,80,0,0,81,79,0,1,108,6,0,135,82,85,0,81,108,0,0,41,108,82,24,42,108,108,24,33,83,108,0,120,83,6,0,1,109,60,0,134,108,0,0,52,222,2,0,109,0,0,0,119,0,193,255,0,84,79,0,1,109,6,0,135,108,87,0,84,109,0,0,78,85,107,0,41,108,85,24,42,108,108,24,33,86,108,0,121,86,5,0,0,87,13,0,1,109,6,0,135,108,94,0,87,109,0,0,1,108,6,0,83,90,108,0,0,88,79,0,25,89,90,1,19,108,88,104,83,89,108,0,42,109,88,8,107,89,1,109,0,91,13,0,25,92,90,3,83,92,91,0,0,93,68,0,25,94,90,4,19,109,93,104,83,94,109,0,42,108,93,8,107,94,1,108,25,95,90,13,1,108,0,0,83,95,108,0,134,96,0,0,12,186,2,0,90,0,0,0,41,108,96,24,42,108,108,24,33,97,108,0,120,97,2,0,119,0,65,255,0,98,13,0,0,99,79,0,135,108,31,0,98,99,0,0,1,109,64,0,1,110,162,0,135,108,17,0,109,110,24,0,135,108,30,0,0,100,79,0,134,108,0,0,76,29,2,0,100,24,0,0,119,0,51,255,32,108,101,8,121,108,10,0,1,110,59,0,134,108,0,0,52,222,2,0,110,0,0,0,1,1,1,0,0,3,1,0,137,102,0,0,139,3,0,0,119,0,7,0,32,108,101,10,121,108,5,0,1,110,88,0,134,108,0,0,52,222,2,0,110,0,0,0,1,1,1,0,0,3,1,0,137,102,0,0,139,3,0,0,140,2,127,0,0,0,0,0,2,120,0,0,59,166,2,0,2,121,0,0,213,14,0,0,2,122,0,0,255,0,0,0,1,117,0,0,136,123,0,0,0,118,123,0,136,123,0,0,25,123,123,48,137,123,0,0,25,28,118,43,83,28,0,0,0,39,1,0,78,23,28,0,135,24,113,0,23,0,0,0,0,94,24,0,0,25,39,0,0,116,25,0,25,119,116,11,1,123,0,0,83,116,123,0,25,116,116,1,54,123,116,119,20,235,1,0,0,26,39,0,0,72,26,0,2,123,0,0,163,215,2,0,78,27,123,0,19,123,27,122,0,29,123,0,2,123,0,0,24,180,2,0,82,30,123,0,1,123,14,0,135,31,21,0,123,29,30,0,0,83,31,0,0,32,83,0,0,33,94,0,2,123,0,0,255,255,0,0,19,123,33,123,0,34,123,0,41,123,34,1,3,35,32,123,79,123,35,0,103,124,35,1,41,124,124,8,20,123,123,124,0,36,123,0,41,123,36,16,42,123,123,16,33,37,123,0,121,37,22,0,0,38,83,0,0,40,94,0,2,123,0,0,255,255,0,0,19,123,40,123,0,41,123,0,41,123,41,1,3,42,38,123,79,123,42,0,103,124,42,1,41,124,124,8,20,123,123,124,0,43,123,0,0,44,72,0,19,123,43,122,83,44,123,0,42,124,43,8,107,44,1,124,0,45,72,0,25,46,45,2,0,72,46,0,0,47,94,0,2,124,0,0,255,255,0,0,19,124,47,124,0,48,124,0,2,124,0,0,164,215,2,0,27,123,48,19,3,49,124,123,25,51,49,2,79,123,51,0,103,124,51,1,41,124,124,8,20,123,123,124,0,52,123,0,2,123,0,0,255,255,0,0,19,123,52,123,0,53,123,0,0,54,94,0,2,123,0,0,255,255,0,0,19,123,54,123,0,55,123,0,25,56,55,1,13,57,53,56,121,57,11,0,0,58,72,0,1,123,30,0,19,123,123,122,83,58,123,0,1,124,30,0,42,124,124,8,107,58,1,124,0,59,72,0,25,60,59,2,0,72,60,0,2,124,0,0,24,180,2,0,82,62,124,0,1,124,2,0,1,123,2,0,135,63,21,0,124,123,62,0,0,105,63,0,0,64,94,0,2,123,0,0,255,255,0,0,19,123,64,123,0,65,123,0,2,123,0,0,164,215,2,0,27,124,65,19,3,66,123,124,135,67,67,0,66,0,0,0,19,124,67,122,0,68,124,0,0,50,68,0,0,69,50,0,1,124,126,14,3,70,124,69,78,71,70,0,19,124,71,122,76,124,124,0,58,73,124,0,0,74,94,0,2,124,0,0,255,255,0,0,19,124,74,124,0,75,124,0,2,124,0,0,164,215,2,0,27,123,75,19,3,76,124,123,25,77,76,4,78,78,77,0,19,123,78,122,0,79,123,0,76,123,79,0,58,80,123,0,65,81,73,80,1,123,63,20,78,82,123,0,19,123,82,122,0,84,123,0,25,85,84,1,76,123,85,0,58,86,123,0,66,87,81,86,59,123,1,0,63,88,87,123,75,89,88,0,0,61,89,0,0,90,50,0,27,91,90,10,0,92,105,0,3,93,92,91,0,105,93,0,1,2,0,0,0,95,2,0,19,123,95,122,0,96,123,0,0,97,61,0,16,98,96,97,120,98,2,0,119,0,26,0,0,99,105,0,0,100,2,0,19,123,100,122,0,101,123,0,3,102,99,101,78,103,102,0,19,123,103,122,0,104,123,0,0,106,72,0,0,107,2,0,19,123,107,122,0,108,123,0,41,123,108,1,3,109,106,123,19,123,104,122,83,109,123,0,42,124,104,8,107,109,1,124,0,110,2,0,25,124,110,1,41,124,124,24,42,124,124,24,0,111,124,0,0,2,111,0,119,0,225,255,1,124,201,14,135,112,0,0,124,0,0,0,33,113,112,0,120,113,3,0,137,118,0,0,139,0,0,0,1,13,201,14,0,114,13,0,1,124,0,0,14,115,114,124,120,115,2,0,119,0,48,0,135,3,1,0,0,20,3,0,0,4,20,0,1,124,0,0,14,5,4,124,120,5,2,0,119,0,39,0,0,6,20,0,82,7,6,0,25,8,7,8,82,9,8,0,0,21,9,0,0,10,21,0,1,124,0,0,14,11,10,124,120,11,2,0,119,0,24,0,0,12,39,0,0,22,12,0,0,14,21,0,1,123,0,0,1,125,0,0,1,126,0,0,135,124,2,0,14,120,123,28,125,126,0,0,0,15,21,0,0,16,22,0,1,126,1,0,1,125,10,0,135,124,133,0,15,121,126,16,125,0,0,0,0,17,13,0,0,18,20,0,134,124,0,0,16,21,1,0,17,18,0,0,1,21,0,0,119,0,229,255,0,19,20,0,135,124,3,0,19,0,0,0,1,20,0,0,119,0,214,255,1,13,0,0,119,0,205,255,137,118,0,0,139,0,0,0,140,1,112,0,0,0,0,0,2,104,0,0,255,255,0,0,2,105,0,0,255,0,0,0,2,106,0,0,163,32,0,0,2,107,0,0,161,32,0,0,2,108,0,0,20,108,3,0,1,102,0,0,136,109,0,0,0,103,109,0,136,109,0,0,25,109,109,32,137,109,0,0,25,80,103,16,0,14,0,0,2,109,0,0,140,180,2,0,82,91,109,0,0,25,91,0,0,2,14,0,0,5,25,0,135,6,29,0,2,5,0,0,0,36,6,0,0,7,36,0,33,8,7,0,120,8,9,0,1,110,84,0,134,109,0,0,52,222,2,0,110,0,0,0,1,1,1,0,0,4,1,0,137,103,0,0,139,4,0,0,0,9,14,0,1,109,0,0,135,10,92,0,9,109,0,0,41,109,10,24,42,109,109,24,33,11,109,0,120,11,3,0,1,102,4,0,119,0,191,0,0,12,14,0,19,109,12,105,0,13,109,0,27,109,13,37,3,15,108,109,78,16,15,0,19,109,16,105,0,17,109,0,32,18,17,0,121,18,15,0,0,19,14,0,19,109,19,105,0,20,109,0,27,109,20,37,3,21,108,109,25,22,21,14,78,23,22,0,19,109,23,105,0,24,109,0,1,109,100,0,17,26,109,24,121,26,3,0,1,102,7,0,119,0,167,0,0,27,14,0,0,28,25,0,135,29,29,0,27,28,0,0,0,36,29,0,0,30,36,0,33,31,30,0,120,31,3,0,1,102,17,0,119,0,157,0,135,109,30,0,0,32,25,0,0,33,36,0,79,109,107,0,103,110,107,1,41,110,110,8,20,109,109,110,0,34,109,0,19,109,34,104,0,35,109,0,26,37,35,1,26,38,37,4,19,109,38,105,0,39,109,0,79,109,106,0,103,110,106,1,41,110,110,8,20,109,109,110,0,40,109,0,19,109,40,104,0,41,109,0,26,42,41,1,26,43,42,2,19,109,43,105,0,44,109,0,1,109,0,0,1,110,4,0,1,111,2,0,134,45,0,0,24,121,0,0,32,33,109,110,111,39,44,0,0,47,45,0,0,46,47,0,19,111,46,104,0,48,111,0,14,49,104,48,120,49,3,0,1,102,16,0,119,0,117,0,0,50,25,0,0,51,47,0,19,111,51,104,0,52,111,0,41,111,52,1,3,53,50,111,79,111,53,0,103,110,53,1,41,110,110,8,20,111,111,110,0,54,111,0,0,58,54,0,0,55,58,0,1,111,0,0,135,56,85,0,55,111,0,0,41,111,56,24,42,111,111,24,33,57,111,0,120,57,6,0,1,110,60,0,134,111,0,0,52,222,2,0,110,0,0,0,119,0,192,255,0,59,58,0,1,110,0,0,135,111,87,0,59,110,0,0,0,60,14,0,1,110,0,0,135,111,94,0,60,110,0,0,135,61,52,0,30,111,61,4,38,111,111,255,0,62,111,0,25,63,62,1,0,69,63,0,0,64,14,0,19,111,64,105,0,65,111,0,27,111,65,37,3,66,108,111,1,111,0,0,83,66,111,0,0,67,69,0,0,68,14,0,19,111,68,105,0,70,111,0,27,111,70,37,3,71,108,111,25,72,71,14,78,73,72,0,19,111,73,105,0,74,111,0,3,75,74,67,19,111,75,105,0,76,111,0,83,72,76,0,0,77,14,0,19,111,77,105,0,78,111,0,27,111,78,37,3,79,108,111,25,81,79,14,78,82,81,0,19,111,82,105,0,83,111,0,1,111,100,0,15,84,111,83,121,84,9,0,0,85,14,0,19,111,85,105,0,86,111,0,27,111,86,37,3,87,108,111,25,88,87,14,1,111,100,0,83,88,111,0,0,89,14,0,0,90,58,0,0,92,69,0,19,111,92,105,0,93,111,0,1,110,3,0,134,111,0,0,236,147,2,0,89,90,93,110,1,111,4,0,83,80,111,0,0,94,58,0,25,95,80,1,19,111,94,105,83,95,111,0,42,110,94,8,107,95,1,110,0,96,14,0,25,97,80,3,83,97,96,0,25,98,80,13,1,110,0,0,83,98,110,0,134,99,0,0,12,186,2,0,80,0,0,0,41,110,99,24,42,110,110,24,33,100,110,0,120,100,2,0,119,0,62,255,0,101,14,0,0,3,58,0,135,110,31,0,101,3,0,0,119,0,57,255,32,110,102,4,121,110,10,0,1,111,59,0,134,110,0,0,52,222,2,0,111,0,0,0,1,1,1,0,0,4,1,0,137,103,0,0,139,4,0,0,119,0,25,0,32,110,102,7,121,110,10,0,1,111,61,0,134,110,0,0,52,222,2,0,111,0,0,0,1,1,1,0,0,4,1,0,137,103,0,0,139,4,0,0,119,0,14,0,32,110,102,16,121,110,6,0,1,1,1,0,0,4,1,0,137,103,0,0,139,4,0,0,119,0,7,0,32,110,102,17,121,110,5,0,1,1,1,0,0,4,1,0,137,103,0,0,139,4,0,0,1,110,0,0,139,110,0,0,140,1,108,0,0,0,0,0,2,104,0,0,255,0,0,0,2,105,0,0,255,255,0,0,1,102,0,0,136,106,0,0,0,103,106,0,136,106,0,0,25,106,106,64,137,106,0,0,25,6,103,44,0,2,0,0,0,8,2,0,19,106,8,104,0,9,106,0,2,106,0,0,20,108,3,0,27,107,9,37,3,10,106,107,0,7,10,0,2,107,0,0,140,180,2,0,82,11,107,0,0,25,11,0,0,12,25,0,135,13,73,0,41,107,13,1,3,15,12,107,0,36,15,0,0,16,36,0,135,17,73,0,41,107,17,1,3,18,16,107,0,14,18,0,0,19,2,0,0,20,25,0,135,21,29,0,19,20,0,0,0,91,21,0,1,47,0,0,0,22,47,0,0,23,91,0,16,24,22,23,120,24,2,0,119,0,177,0,135,26,52,0,30,107,26,7,38,107,107,255,0,27,107,0,0,80,27,0,0,28,80,0,1,106,0,0,1,107,7,0,138,28,106,107,88,244,1,0,208,244,1,0,212,244,1,0,216,244,1,0,220,244,1,0,224,244,1,0,0,246,1,0,1,102,15,0,119,0,108,0,0,29,7,0,1,107,0,0,83,29,107,0,0,30,7,0,25,31,30,14,78,32,31,0,19,107,32,104,0,33,107,0,25,34,33,4,19,107,34,104,0,35,107,0,83,31,35,0,0,37,7,0,25,38,37,14,78,39,38,0,19,107,39,104,0,40,107,0,1,107,100,0,15,41,107,40,121,41,8,0,0,42,7,0,25,43,42,14,1,107,100,0,83,43,107,0,1,1,4,0,1,102,14,0,119,0,81,0,1,1,4,0,1,102,14,0,119,0,78,0,119,0,77,0,119,0,76,0,119,0,75,0,119,0,74,0,0,44,47,0,35,45,44,3,120,45,71,0,0,46,7,0,25,48,46,1,79,107,48,0,103,106,48,1,41,106,106,8,20,107,107,106,0,49,107,0,19,107,49,105,0,50,107,0,26,51,50,1,19,107,51,105,0,52,107,0,0,53,14,0,135,54,23,0,52,53,0,0,19,107,54,104,0,55,107,0,0,3,55,0,0,56,3,0,35,57,56,2,120,57,50,0,1,69,0,0,1,58,0,0,0,59,58,0,0,60,3,0,16,61,59,60,120,61,2,0,119,0,28,0,0,62,14,0,0,63,58,0,3,64,62,63,78,65,64,0,1,107,0,0,135,66,90,0,65,107,0,0,19,107,66,104,0,67,107,0,0,5,67,0,0,68,5,0,33,70,68,0,121,70,11,0,0,71,58,0,0,69,71,0,135,72,52,0,30,107,72,2,38,107,107,255,0,73,107,0,0,80,73,0,0,74,80,0,33,75,74,0,120,75,5,0,0,76,58,0,25,77,76,1,0,58,77,0,119,0,225,255,0,78,14,0,0,79,69,0,3,81,78,79,78,82,81,0,19,107,82,104,0,83,107,0,25,84,6,4,19,107,83,104,83,84,107,0,42,106,83,8,107,84,1,106,1,1,14,0,1,102,14,0,119,0,2,0,119,0,1,0,32,106,102,14,121,106,4,0,1,102,0,0,83,6,1,0,1,102,15,0,32,106,102,15,121,106,41,0,1,102,0,0,0,85,25,0,0,86,47,0,41,106,86,1,3,87,85,106,79,106,87,0,103,107,87,1,41,107,107,8,20,106,106,107,0,88,106,0,25,89,6,1,19,106,88,104,83,89,106,0,42,107,88,8,107,89,1,107,0,90,2,0,25,92,6,3,83,92,90,0,25,93,6,13,1,107,0,0,83,93,107,0,134,94,0,0,12,186,2,0,6,0,0,0,41,107,94,24,42,107,107,24,33,95,107,0,121,95,13,0,0,96,2,0,0,97,25,0,0,98,47,0,41,107,98,1,3,99,97,107,79,107,99,0,103,106,99,1,41,106,106,8,20,107,107,106,0,100,107,0,135,107,31,0,96,100,0,0,0,101,47,0,25,4,101,1,0,47,4,0,119,0,76,255,137,103,0,0,139,0,0,0,140,4,114,0,0,0,0,0,2,104,0,0,128,0,0,0,2,105,0,0,29,24,0,0,2,106,0,0,70,24,0,0,2,107,0,0,255,0,0,0,2,108,0,0,49,24,0,0,2,109,0,0,255,255,0,0,1,102,0,0,136,110,0,0,0,103,110,0,136,110,0,0,1,111,176,0,3,110,110,111,137,110,0,0,1,110,169,0,3,91,103,110,1,110,168,0,3,4,103,110,25,7,103,40,25,9,103,32,25,10,103,24,0,47,0,0,0,58,1,0,0,69,2,0,0,80,3,0,1,8,165,22,0,15,58,0,0,16,69,0,0,17,58,0,19,110,17,107,0,18,110,0,0,19,80,0,19,110,19,107,0,20,110,0,3,21,18,20,26,22,21,1,19,110,22,107,0,23,110,0,0,24,69,0,19,110,24,107,0,25,110,0,25,26,25,12,19,110,26,107,0,27,110,0,135,110,134,0,15,16,23,27,10,0,0,0,1,110,61,0,1,111,12,0,135,28,135,0,110,111,10,91,4,0,0,0,41,111,28,24,42,111,111,24,33,29,111,0,120,29,5,0,1,36,0,0,0,6,36,0,137,103,0,0,139,6,0,0,1,110,64,0,1,112,65,0,135,111,17,0,110,112,7,0,78,30,91,0,19,111,30,107,0,31,111,0,25,32,31,30,19,111,32,109,0,33,111,0,78,34,4,0,19,111,34,107,0,35,111,0,135,111,63,0,33,35,7,0,0,37,47,0,83,9,37,0,78,38,9,0,19,111,38,107,0,39,111,0,1,111,165,23,78,40,111,0,19,111,40,107,0,41,111,0,15,42,39,41,120,42,3,0,1,102,20,0,119,0,122,0,0,43,8,0,78,44,9,0,19,111,44,107,0,45,111,0,3,46,43,45,78,48,46,0,19,111,48,107,0,49,111,0,27,50,49,6,25,51,50,1,19,111,51,107,0,52,111,0,1,111,12,0,135,53,135,0,52,111,10,91,4,0,0,0,41,111,53,24,42,111,111,24,33,54,111,0,120,54,3,0,1,102,19,0,119,0,100,0,1,111,0,0,83,7,111,0,135,55,0,0,108,0,0,0,33,56,55,0,121,56,50,0,1,11,49,24,0,57,11,0,1,111,0,0,14,59,57,111,120,59,2,0,119,0,44,0,135,60,1,0,0,12,60,0,0,61,12,0,1,111,0,0,14,62,61,111,120,62,2,0,119,0,35,0,0,63,12,0,82,64,63,0,25,65,64,8,82,66,65,0,0,13,66,0,0,67,13,0,1,111,0,0,14,68,67,111,120,68,2,0,119,0,20,0,0,14,7,0,0,70,13,0,1,112,0,0,1,110,0,0,1,113,0,0,135,111,2,0,70,105,112,9,110,113,0,0,0,71,13,0,0,72,14,0,135,111,64,0,71,106,72,104,0,73,11,0,0,74,12,0,134,111,0,0,16,21,1,0,73,74,0,0,1,13,0,0,119,0,233,255,0,75,12,0,135,111,3,0,75,0,0,0,1,12,0,0,119,0,218,255,1,11,0,0,119,0,209,255,78,76,7,0,19,111,76,107,0,77,111,0,32,78,77,0,121,78,10,0,78,79,9,0,19,111,79,107,0,81,111,0,25,82,81,66,19,111,82,109,0,83,111,0,1,113,64,0,135,111,17,0,113,83,7,0,78,84,91,0,19,111,84,107,0,85,111,0,0,86,8,0,78,87,9,0,19,111,87,107,0,88,111,0,3,89,86,88,78,90,89,0,19,111,90,107,0,92,111,0,27,93,92,6,28,111,93,2,38,111,111,255,0,94,111,0,3,95,85,94,19,111,95,109,0,96,111,0,78,97,4,0,19,111,97,107,0,98,111,0,135,111,63,0,96,98,7,0,78,99,9,0,25,111,99,1,41,111,111,24,42,111,111,24,0,100,111,0,83,9,100,0,119,0,125,255,32,111,102,19,121,111,7,0,78,101,9,0,0,36,101,0,0,6,36,0,137,103,0,0,139,6,0,0,119,0,8,0,32,111,102,20,121,111,6,0,78,5,9,0,0,36,5,0,0,6,36,0,137,103,0,0,139,6,0,0,1,111,0,0,139,111,0,0,140,4,116,0,0,0,0,0,2,106,0,0,29,24,0,0,2,107,0,0,128,0,0,0,2,108,0,0,43,24,0,0,2,109,0,0,255,0,0,0,2,110,0,0,131,24,0,0,2,111,0,0,255,255,0,0,1,104,0,0,136,112,0,0,0,105,112,0,136,112,0,0,1,113,176,0,3,112,112,113,137,112,0,0,1,112,169,0,3,93,105,112,1,112,168,0,3,4,105,112,25,9,105,40,25,12,105,24,25,16,105,20,0,49,0,0,0,60,1,0,0,71,2,0,0,82,3,0,1,10,164,21,0,18,60,0,0,19,71,0,0,20,60,0,19,112,20,109,0,21,112,0,0,22,82,0,19,112,22,109,0,23,112,0,3,24,21,23,26,25,24,1,19,112,25,109,0,26,112,0,0,27,71,0,19,112,27,109,0,28,112,0,25,29,28,12,19,112,29,109,0,30,112,0,135,112,134,0,18,19,26,30,12,0,0,0,1,112,49,0,1,113,12,0,135,31,135,0,112,113,12,93,4,0,0,0,41,113,31,24,42,113,113,24,33,32,113,0,120,32,5,0,1,38,0,0,0,8,38,0,137,105,0,0,139,8,0,0,1,112,64,0,1,114,23,0,135,113,17,0,112,114,9,0,78,33,93,0,19,113,33,109,0,34,113,0,25,35,34,24,19,113,35,111,0,36,113,0,78,37,4,0,19,113,37,109,0,39,113,0,135,113,63,0,36,39,9,0,0,40,49,0,0,11,40,0,0,41,11,0,19,113,41,109,0,42,113,0,1,113,164,22,78,43,113,0,19,113,43,109,0,44,113,0,15,45,42,44,120,45,3,0,1,104,20,0,119,0,124,0,0,46,10,0,0,47,11,0,19,113,47,109,0,48,113,0,3,50,46,48,78,51,50,0,19,113,51,109,0,52,113,0,27,53,52,6,25,54,53,1,19,113,54,109,0,55,113,0,1,113,12,0,135,56,135,0,55,113,12,93,4,0,0,0,41,113,56,24,42,113,113,24,33,57,113,0,120,57,3,0,1,104,19,0,119,0,102,0,1,113,0,0,83,9,113,0,135,58,0,0,110,0,0,0,33,59,58,0,121,59,52,0,1,13,131,24,0,61,13,0,1,113,0,0,14,62,61,113,120,62,2,0,119,0,46,0,135,63,1,0,0,14,63,0,0,64,14,0,1,113,0,0,14,65,64,113,120,65,2,0,119,0,37,0,0,66,14,0,82,67,66,0,25,68,67,8,82,69,68,0,0,15,69,0,0,70,15,0,1,113,0,0,14,72,70,113,120,72,2,0,119,0,22,0,0,73,11,0,83,16,73,0,0,17,9,0,0,74,15,0,1,114,0,0,1,112,0,0,1,115,0,0,135,113,2,0,74,106,114,16,112,115,0,0,0,75,15,0,0,76,17,0,135,113,64,0,75,108,76,107,0,77,13,0,0,78,14,0,134,113,0,0,16,21,1,0,77,78,0,0,1,15,0,0,119,0,231,255,0,79,14,0,135,113,3,0,79,0,0,0,1,14,0,0,119,0,216,255,1,13,0,0,119,0,207,255,78,80,9,0,19,113,80,109,0,81,113,0,32,83,81,0,121,83,10,0,0,84,11,0,19,113,84,109,0,85,113,0,25,86,85,24,19,113,86,111,0,87,113,0,1,115,64,0,135,113,17,0,115,87,9,0,78,88,93,0,19,113,88,109,0,89,113,0,0,90,10,0,0,91,11,0,19,113,91,109,0,92,113,0,3,94,90,92,78,95,94,0,19,113,95,109,0,96,113,0,27,97,96,6,28,113,97,2,38,113,113,255,0,98,113,0,3,99,89,98,19,113,99,111,0,100,113,0,78,101,4,0,19,113,101,109,0,102,113,0,135,113,63,0,100,102,9,0,0,103,11,0,25,113,103,1,41,113,113,24,42,113,113,24,0,5,113,0,0,11,5,0,119,0,123,255,32,113,104,19,121,113,7,0,0,6,11,0,0,38,6,0,0,8,38,0,137,105,0,0,139,8,0,0,119,0,8,0,32,113,104,20,121,113,6,0,0,7,11,0,0,38,7,0,0,8,38,0,137,105,0,0,139,8,0,0,1,113,0,0,139,113,0,0,140,1,109,0,0,0,0,0,2,105,0,0,255,0,0,0,1,103,0,0,136,106,0,0,0,104,106,0,136,106,0,0,25,106,106,16,137,106,0,0,0,1,0,0,0,70,1,0,25,81,70,4,79,106,81,0,103,107,81,1,41,107,107,8,20,106,106,107,0,92,106,0,0,48,92,0,0,2,1,0,25,6,2,1,79,106,6,0,103,107,6,1,41,107,107,8,20,106,106,107,0,7,106,0,0,59,7,0,0,8,59,0,2,106,0,0,255,255,0,0,19,106,8,106,0,9,106,0,2,106,0,0,164,215,2,0,27,107,9,19,3,10,106,107,25,11,10,6,78,12,11,0,19,107,12,105,0,13,107,0,0,14,48,0,2,107,0,0,255,255,0,0,19,107,14,107,0,16,107,0,2,107,0,0,164,215,2,0,27,106,16,19,3,17,107,106,25,18,17,6,78,19,18,0,19,106,19,105,0,20,106,0,4,21,13,20,19,106,21,105,0,22,106,0,0,26,22,0,135,23,52,0,30,106,23,100,38,106,106,255,0,24,106,0,19,106,24,105,0,25,106,0,0,15,25,0,0,27,15,0,19,106,27,105,0,28,106,0,25,29,28,100,0,30,26,0,19,106,30,105,0,31,106,0,25,32,31,100,15,33,32,29,120,33,161,0,135,34,52,0,30,106,34,100,38,106,106,255,0,35,106,0,19,106,35,105,0,36,106,0,0,15,36,0,0,38,15,0,19,106,38,105,0,39,106,0,0,40,48,0,2,106,0,0,255,255,0,0,19,106,40,106,0,41,106,0,2,106,0,0,164,215,2,0,27,107,41,19,3,42,106,107,25,43,42,7,78,44,43,0,19,107,44,105,0,45,107,0,15,46,39,45,120,46,136,0,0,47,48,0,2,107,0,0,255,255,0,0,19,107,47,107,0,49,107,0,2,107,0,0,164,215,2,0,27,106,49,19,3,50,107,106,25,51,50,8,78,52,51,0,19,106,52,105,0,53,106,0,1,106,0,0,1,107,5,0,138,53,106,107,12,0,2,0,20,0,2,0,28,0,2,0,36,0,2,0,44,0,2,0,119,0,11,0,1,26,15,0,119,0,9,0,1,26,40,0,119,0,7,0,1,26,30,0,119,0,5,0,1,26,20,0,119,0,3,0,1,26,5,0,119,0,1,0,135,54,52,0,30,106,54,100,38,106,106,255,0,55,106,0,19,106,55,105,0,56,106,0,0,15,56,0,0,57,15,0,19,106,57,105,0,58,106,0,0,60,26,0,19,106,60,105,0,61,106,0,15,62,61,58,120,62,89,0,0,63,48,0,135,64,95,0,63,0,0,0,0,37,64,0,0,65,37,0,19,106,65,105,0,66,106,0,13,67,105,66,120,67,80,0,0,68,37,0,0,69,48,0,135,106,31,0,68,69,0,0,0,71,1,0,25,72,71,3,78,73,72,0,0,74,48,0,135,106,32,0,73,74,0,0,0,75,59,0,2,106,0,0,255,255,0,0,19,106,75,106,0,76,106,0,2,106,0,0,164,215,2,0,27,107,76,19,3,77,106,107,25,78,77,2,79,107,78,0,103,106,78,1,41,106,106,8,20,107,107,106,0,79,107,0,0,80,48,0,2,107,0,0,255,255,0,0,19,107,80,107,0,82,107,0,2,107,0,0,164,215,2,0,27,106,82,19,3,83,107,106,25,84,83,2,19,106,79,105,83,84,106,0,42,107,79,8,107,84,1,107,135,85,52,0,30,107,85,40,38,107,107,255,0,86,107,0,25,87,86,40,19,107,87,105,0,88,107,0,0,89,48,0,2,107,0,0,255,255,0,0,19,107,89,107,0,90,107,0,2,107,0,0,164,215,2,0,27,106,90,19,3,91,107,106,25,93,91,7,83,93,88,0,0,94,1,0,25,95,94,1,79,106,95,0,103,107,95,1,41,107,107,8,20,106,106,107,0,96,106,0,0,97,48,0,1,107,4,9,1,108,5,0,134,106,0,0,88,213,2,0,96,97,107,108,0,102,1,0,25,3,102,3,78,4,3,0,0,5,59,0,135,106,32,0,4,5,0,0,137,104,0,0,1,106,1,0,139,106,0,0,0,98,1,0,25,99,98,1,79,106,99,0,103,108,99,1,41,108,108,8,20,106,106,108,0,100,106,0,0,101,48,0,1,108,24,9,1,107,3,0,134,106,0,0,88,213,2,0,100,101,108,107,0,102,1,0,25,3,102,3,78,4,3,0,0,5,59,0,135,106,32,0,4,5,0,0,137,104,0,0,1,106,1,0,139,106,0,0,140,1,116,0,0,0,0,0,2,103,0,0,255,0,0,0,2,104,0,0,128,0,0,0,2,105,0,0,163,32,0,0,2,106,0,0,12,173,0,0,2,107,0,0,205,214,2,0,2,108,0,0,206,214,2,0,2,109,0,0,211,214,2,0,2,110,0,0,38,20,0,0,2,111,0,0,210,214,2,0,2,112,0,0,212,214,2,0,2,113,0,0,255,255,0,0,1,100,0,0,136,114,0,0,0,101,114,0,136,114,0,0,25,114,114,32,137,114,0,0,25,45,101,8,0,12,0,0,0,78,12,0,135,114,131,0,78,0,0,0,0,89,12,0,19,114,89,103,0,2,114,0,2,114,0,0,17,215,2,0,27,115,2,7,3,3,114,115,0,56,3,0,0,4,56,0,25,5,4,4,78,6,5,0,19,115,6,103,0,7,115,0,32,8,7,1,120,8,160,0,0,99,45,0,25,102,99,20,1,115,0,0,83,99,115,0,25,99,99,1,54,115,99,102,248,2,2,0,1,114,1,0,135,115,136,0,114,45,0,0,135,115,132,0,135,115,51,0,1,115,8,0,134,9,0,0,144,142,0,0,115,0,0,0,19,115,9,103,0,10,115,0,13,11,10,103,120,11,132,0,78,14,107,0,19,115,14,103,0,15,115,0,2,115,0,0,209,214,2,0,78,16,115,0,19,115,16,103,0,17,115,0,4,18,15,17,78,19,109,0,19,115,19,103,0,20,115,0,3,21,18,20,19,115,21,103,0,22,115,0,0,23,22,0,78,24,108,0,19,115,24,103,0,25,115,0,78,26,111,0,19,115,26,103,0,27,115,0,4,28,25,27,78,29,112,0,19,115,29,103,0,30,115,0,3,31,28,30,19,115,31,103,0,32,115,0,0,34,32,0,78,33,110,0,41,115,33,24,42,115,115,24,33,35,115,0,0,36,23,0,19,115,36,103,0,37,115,0,121,35,37,0,1,115,15,0,17,38,115,37,121,38,3,0,1,55,1,0,119,0,26,0,0,39,34,0,19,115,39,103,0,40,115,0,1,115,15,0,17,41,115,40,121,41,3,0,1,55,1,0,119,0,18,0,2,115,0,0,48,180,2,0,82,42,115,0,0,43,34,0,19,115,43,103,0,44,115,0,27,46,44,15,0,47,23,0,19,115,47,103,0,48,115,0,3,49,46,48,3,50,42,49,78,51,50,0,19,115,51,103,0,52,115,0,15,53,104,52,0,55,53,0,38,115,55,1,0,54,115,0,19,115,54,103,0,57,115,0,0,67,57,0,119,0,36,0,1,115,15,0,15,58,115,37,121,58,3,0,1,75,1,0,119,0,26,0,0,59,34,0,19,115,59,103,0,60,115,0,1,115,15,0,15,61,115,60,121,61,3,0,1,75,1,0,119,0,18,0,2,115,0,0,48,180,2,0,82,62,115,0,0,63,34,0,19,115,63,103,0,64,115,0,27,65,64,15,0,66,23,0,19,115,66,103,0,68,115,0,3,69,65,68,3,70,62,69,78,71,70,0,19,115,71,103,0,72,115,0,15,73,104,72,0,75,73,0,38,115,75,1,0,74,115,0,19,115,74,103,0,76,115,0,0,67,76,0,0,77,67,0,41,115,77,24,42,115,115,24,33,79,115,0,120,79,2,0,119,0,25,0,79,115,105,0,103,114,105,1,41,114,114,8,20,115,115,114,0,80,115,0,19,115,80,113,0,81,115,0,26,82,81,1,26,83,82,15,25,84,83,2,19,115,84,103,0,85,115,0,1,114,74,0,135,115,137,0,114,85,45,0,119,0,117,255,0,13,12,0,134,115,0,0,136,143,2,0,13,0,0,0,1,1,1,0,0,98,1,0,137,101,0,0,139,98,0,0,0,86,56,0,78,87,86,0,2,115,0,0,213,214,2,0,83,115,87,0,0,88,56,0,25,90,88,1,78,91,90,0,2,115,0,0,214,214,2,0,83,115,91,0,78,92,107,0,0,93,56,0,83,93,92,0,78,94,108,0,0,95,56,0,25,96,95,1,83,96,94,0,0,97,12,0,134,115,0,0,136,143,2,0,97,0,0,0,1,1,0,0,0,98,1,0,137,101,0,0,139,98,0,0,140,3,90,0,0,0,0,0,2,82,0,0,43,24,0,0,2,83,0,0,29,24,0,0,2,84,0,0,128,0,0,0,2,85,0,0,254,168,2,0,1,80,0,0,136,86,0,0,0,81,86,0,136,86,0,0,25,86,86,32,137,86,0,0,25,23,81,30,25,34,81,28,1,86,255,0,19,86,0,86,83,23,86,0,42,87,0,8,107,23,1,87,83,34,1,0,0,45,2,0,1,56,0,0,0,5,45,0,1,87,0,0,83,5,87,0,1,87,8,24,135,6,0,0,87,0,0,0,33,7,6,0,121,7,65,0,1,78,8,24,0,8,78,0,1,87,0,0,14,9,8,87,120,9,2,0,119,0,59,0,135,10,1,0,0,79,10,0,0,11,79,0,1,87,0,0,14,12,11,87,120,12,2,0,119,0,45,0,0,13,79,0,82,14,13,0,25,15,14,8,82,16,15,0,0,3,16,0,0,17,3,0,1,87,0,0,14,18,17,87,120,18,2,0,119,0,30,0,0,19,45,0,0,4,19,0,0,20,3,0,1,86,1,0,1,88,0,0,1,89,0,0,135,87,2,0,20,85,86,23,88,89,0,0,0,21,3,0,1,89,0,0,1,88,0,0,1,86,0,0,135,87,2,0,21,83,89,34,88,86,0,0,0,22,3,0,0,24,4,0,135,87,64,0,22,82,24,84,0,25,78,0,0,26,79,0,134,27,0,0,16,21,1,0,25,26,0,0,32,28,27,0,120,28,10,0,1,3,0,0,119,0,223,255,0,30,79,0,135,87,3,0,30,0,0,0,1,79,0,0,119,0,208,255,1,78,0,0,119,0,199,255,0,29,79,0,135,87,3,0,29,0,0,0,137,81,0,0,139,0,0,0,2,87,0,0,24,180,2,0,82,31,87,0,1,87,66,0,1,86,1,0,135,32,21,0,87,86,31,0,0,67,32,0,0,33,67,0,79,86,23,0,103,87,23,1,41,87,87,8,20,86,86,87,0,35,86,0,2,86,0,0,255,255,0,0,19,86,35,86,0,36,86,0,27,86,36,66,3,37,33,86,0,67,37,0,78,38,34,0,1,86,255,0,19,86,38,86,0,39,86,0,1,86,0,0,1,87,5,0,138,39,86,87,236,7,2,0,92,8,2,0,144,8,2,0,196,8,2,0,248,8,2,0,137,81,0,0,139,0,0,0,119,0,111,0,0,40,67,0,25,41,40,1,78,42,41,0,1,86,255,0,19,86,42,86], eb + 122880);
  HEAPU8.set([0,43,86,0,1,86,0,0,1,87,2,0,138,43,86,87,28,8,2,0,36,8,2,0,119,0,5,0,1,56,71,0,119,0,3,0,1,56,72,0,119,0,1,0,0,44,56,0,2,86,0,0,255,255,0,0,19,86,44,86,0,46,86,0,0,47,45,0,1,87,64,0,135,86,17,0,87,46,47,0,137,81,0,0,139,0,0,0,119,0,83,0,0,48,67,0,25,49,48,62,78,50,49,0,1,86,255,0,19,86,50,86,0,51,86,0,0,52,45,0,1,87,10,0,135,86,59,0,51,52,87,0,137,81,0,0,139,0,0,0,119,0,70,0,0,53,67,0,25,54,53,63,78,55,54,0,1,86,255,0,19,86,55,86,0,57,86,0,0,58,45,0,1,87,10,0,135,86,59,0,57,58,87,0,137,81,0,0,139,0,0,0,119,0,57,0,0,59,67,0,25,60,59,64,78,61,60,0,1,86,255,0,19,86,61,86,0,62,86,0,0,63,45,0,1,87,10,0,135,86,59,0,62,63,87,0,137,81,0,0,139,0,0,0,119,0,44,0,0,64,67,0,25,65,64,65,78,66,65,0,1,86,255,0,19,86,66,86,0,68,86,0,1,86,0,0,1,87,4,0,138,68,86,87,84,9,2,0,92,9,2,0,100,9,2,0,108,9,2,0,0,69,67,0,25,70,69,65,78,71,70,0,1,86,255,0,19,86,71,86,0,72,86,0,25,73,72,17,26,74,73,4,0,56,74,0,119,0,9,0,1,56,50,0,119,0,7,0,1,56,73,0,119,0,5,0,1,56,74,0,119,0,3,0,1,56,75,0,119,0,1,0,0,75,56,0,2,86,0,0,255,255,0,0,19,86,75,86,0,76,86,0,0,77,45,0,1,87,64,0,135,86,17,0,87,76,77,0,137,81,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,2,103,0,0,0,0,0,2,98,0,0,255,0,0,0,2,99,0,0,255,255,0,0,2,100,0,0,163,32,0,0,1,96,0,0,136,101,0,0,0,97,101,0,136,101,0,0,1,102,64,4,3,101,101,102,137,101,0,0,1,101,38,4,3,56,97,101,1,101,16,4,3,78,97,101,25,89,97,16,0,23,0,0,0,34,1,0,0,3,23,0,134,101,0,0,180,234,1,0,3,78,0,0,135,101,138,0,89,78,0,0,135,4,4,0,89,0,0,0,29,101,4,4,38,101,101,255,0,5,101,0,19,101,5,98,0,6,101,0,0,45,6,0,0,7,34,0,79,101,7,0,103,102,7,1,41,102,102,8,20,101,101,102,0,8,101,0,41,101,8,16,42,101,101,16,0,9,101,0,25,10,9,4,19,101,10,99,0,11,101,0,19,101,11,98,83,7,101,0,42,102,11,8,107,7,1,102,0,13,34,0,25,14,13,4,79,102,14,0,103,101,14,1,41,101,101,8,20,102,102,101,0,15,102,0,41,102,15,16,42,102,102,16,0,16,102,0,25,17,16,4,19,102,17,99,0,18,102,0,19,102,18,98,83,14,102,0,42,101,18,8,107,14,1,101,0,19,34,0,25,20,19,4,79,101,20,0,103,102,20,1,41,102,102,8,20,101,101,102,0,21,101,0,41,101,21,16,42,101,101,16,0,22,101,0,1,101,161,32,79,101,101,0,1,102,161,32,103,102,102,1,41,102,102,8,20,101,101,102,0,24,101,0,19,101,24,99,0,25,101,0,26,26,25,1,26,27,26,24,26,28,27,4,15,29,28,22,121,29,34,0,0,30,34,0,79,101,30,0,103,102,30,1,41,102,102,8,20,101,101,102,0,31,101,0,41,101,31,16,42,101,101,16,0,32,101,0,26,33,32,24,19,101,33,99,0,35,101,0,19,101,35,98,83,30,101,0,42,102,35,8,107,30,1,102,0,36,34,0,25,37,36,4,79,102,37,0,103,101,37,1,41,101,101,8,20,102,102,101,0,38,102,0,41,102,38,16,42,102,102,16,0,39,102,0,26,40,39,24,19,102,40,99,0,41,102,0,19,102,41,98,83,37,102,0,42,101,41,8,107,37,1,101,0,42,34,0,25,43,42,2,79,101,43,0,103,102,43,1,41,102,102,8,20,101,101,102,0,44,101,0,41,101,44,16,42,101,101,16,0,46,101,0,25,47,46,6,19,101,47,99,0,48,101,0,19,101,48,98,83,43,101,0,42,102,48,8,107,43,1,102,0,49,34,0,25,50,49,6,79,102,50,0,103,101,50,1,41,101,101,8,20,102,102,101,0,51,102,0,41,102,51,16,42,102,102,16,0,52,102,0,26,53,52,6,19,102,53,99,0,54,102,0,19,102,54,98,83,50,102,0,42,101,54,8,107,50,1,101,0,55,45,0,19,101,55,98,0,57,101,0,34,58,57,3,121,58,24,0,0,59,34,0,25,60,59,2,79,101,60,0,103,102,60,1,41,102,102,8,20,101,101,102,0,61,101,0,41,101,61,16,42,101,101,16,0,62,101,0,0,63,45,0,19,101,63,98,0,64,101,0,27,65,64,12,3,66,62,65,19,101,66,99,0,68,101,0,0,69,34,0,25,70,69,6,19,101,68,98,83,70,101,0,42,102,68,8,107,70,1,102,1,45,0,0,0,71,34,0,1,102,0,0,134,72,0,0,0,0,0,0,71,102,89,0,19,102,72,98,0,73,102,0,19,102,73,98,0,74,102,0,0,2,74,0,0,75,2,0,13,76,98,75,121,76,3,0,1,96,6,0,119,0,41,0,0,77,2,0,41,102,77,1,3,79,78,102,79,102,79,0,103,101,79,1,41,101,101,8,20,102,102,101,0,80,102,0,0,67,80,0,0,81,67,0,0,82,23,0,135,83,117,0,81,82,0,0,0,45,83,0,0,84,45,0,41,102,84,24,42,102,102,24,33,85,102,0,120,85,3,0,1,96,9,0,119,0,20,0,0,86,45,0,135,102,96,0,86,56,0,0,79,102,100,0,103,101,100,1,41,101,101,8,20,102,102,101,0,87,102,0,19,102,87,99,0,88,102,0,26,90,88,1,26,91,90,15,25,92,91,2,19,102,92,99,0,93,102,0,1,101,74,0,135,102,7,0,101,93,56,0,119,0,201,255,32,102,96,6,121,102,6,0,1,12,255,255,0,95,12,0,137,97,0,0,139,95,0,0,119,0,8,0,32,102,96,9,121,102,6,0,0,94,67,0,0,12,94,0,0,95,12,0,137,97,0,0,139,95,0,0,1,102,0,0,139,102,0,0,140,1,100,0,0,0,0,0,2,92,0,0,255,255,0,0,2,93,0,0,255,0,0,0,2,94,0,0,163,32,0,0,2,95,0,0,161,32,0,0,2,96,0,0,158,215,2,0,1,90,0,0,136,97,0,0,0,91,97,0,136,97,0,0,25,97,97,32,137,97,0,0,25,67,91,12,0,12,0,0,0,78,12,0,1,97,15,0,135,89,92,0,78,97,0,0,41,97,89,24,42,97,97,24,33,2,97,0,120,2,9,0,1,98,59,0,134,97,0,0,52,222,2,0,98,0,0,0,1,1,1,0,0,88,1,0,137,91,0,0,139,88,0,0,2,97,0,0,140,180,2,0,82,3,97,0,0,23,3,0,0,4,12,0,0,5,23,0,135,6,29,0,4,5,0,0,0,34,6,0,0,7,34,0,33,8,7,0,120,8,3,0,1,90,5,0,119,0,124,0,0,9,23,0,0,10,34,0,79,97,95,0,103,98,95,1,41,98,98,8,20,97,97,98,0,11,97,0,19,97,11,92,0,13,97,0,26,14,13,1,26,15,14,4,19,97,15,93,0,16,97,0,79,97,94,0,103,98,94,1,41,98,98,8,20,97,97,98,0,17,97,0,19,97,17,92,0,18,97,0,26,19,18,1,26,20,19,2,19,97,20,93,0,21,97,0,1,97,0,0,1,98,4,0,1,99,2,0,134,22,0,0,24,121,0,0,9,10,97,98,99,16,21,0,0,45,22,0,0,24,45,0,19,99,24,92,0,25,99,0,14,26,92,25,120,26,2,0,119,0,86,0,0,27,23,0,0,28,45,0,19,99,28,92,0,29,99,0,41,99,29,1,3,30,27,99,79,99,30,0,103,98,30,1,41,98,98,8,20,99,99,98,0,31,99,0,1,99,15,0,135,32,85,0,31,99,0,0,41,99,32,24,42,99,99,24,33,33,99,0,121,33,63,0,0,35,23,0,0,36,45,0,19,99,36,92,0,37,99,0,41,99,37,1,3,38,35,99,79,99,38,0,103,98,38,1,41,98,98,8,20,99,99,98,0,39,99,0,0,56,39,0,79,99,96,0,103,98,96,1,41,98,98,8,20,99,99,98,0,40,99,0,0,41,23,0,135,42,114,0,40,41,0,0,19,99,42,93,0,43,99,0,0,34,43,0,0,44,23,0,0,46,34,0,79,99,95,0,103,98,95,1,41,98,98,8,20,99,99,98,0,47,99,0,19,99,47,92,0,48,99,0,26,49,48,1,26,50,49,4,19,99,50,93,0,51,99,0,79,99,94,0,103,98,94,1,41,98,98,8,20,99,99,98,0,52,99,0,19,99,52,92,0,53,99,0,26,54,53,1,26,55,54,2,19,99,55,93,0,57,99,0,1,99,0,0,1,98,4,0,1,97,2,0,134,58,0,0,24,121,0,0,44,46,99,98,97,51,57,0,0,45,58,0,0,59,45,0,19,97,59,92,0,60,97,0,14,61,92,60,121,61,131,255,1,90,10,0,119,0,6,0,1,98,60,0,134,97,0,0,52,222,2,0,98,0,0,0,119,0,124,255,32,97,90,5,121,97,6,0,1,98,84,0,134,97,0,0,52,222,2,0,98,0,0,0,119,0,73,0,32,97,90,10,121,97,71,0,1,97,41,20,78,62,97,0,41,97,62,24,42,97,97,24,33,63,97,0,121,63,6,0,0,64,56,0,1,98,15,0,135,97,87,0,64,98,0,0,119,0,15,0,0,65,23,0,0,66,45,0,19,97,66,92,0,68,97,0,41,97,68,1,3,69,65,97,79,97,69,0,103,98,69,1,41,98,98,8,20,97,97,98,0,70,97,0,1,98,15,0,135,97,87,0,70,98,0,0,0,71,12,0,1,98,15,0,135,97,94,0,71,98,0,0,1,97,15,0,83,67,97,0,0,72,56,0,25,73,67,1,19,97,72,93,83,73,97,0,42,98,72,8,107,73,1,98,0,74,12,0,25,75,67,3,83,75,74,0,0,76,23,0,0,77,45,0,19,98,77,92,0,79,98,0,41,98,79,1,3,80,76,98,79,98,80,0,103,97,80,1,41,97,97,8,20,98,98,97,0,81,98,0,25,82,67,4,19,98,81,93,83,82,98,0,42,97,81,8,107,82,1,97,25,83,67,13,1,97,10,0,83,83,97,0,134,84,0,0,12,186,2,0,67,0,0,0,41,97,84,24,42,97,97,24,33,85,97,0,121,85,5,0,0,86,12,0,0,87,56,0,135,97,31,0,86,87,0,0,1,1,1,0,0,88,1,0,137,91,0,0,139,88,0,0,140,3,106,0,0,0,0,0,2,91,0,0,255,0,0,0,2,92,0,0,13,173,0,0,2,93,0,0,17,215,2,0,2,94,0,0,255,255,0,0,2,95,0,0,178,14,0,0,2,96,0,0,225,0,0,0,2,97,0,0,232,214,2,0,2,98,0,0,148,166,2,0,2,99,0,0,90,24,0,0,2,100,0,0,5,16,0,0,1,89,0,0,136,101,0,0,0,90,101,0,136,101,0,0,25,101,101,32,137,101,0,0,25,23,90,28,25,34,90,26,25,88,90,24,25,3,90,22,25,5,90,20,83,23,0,0,19,101,1,91,83,34,101,0,42,102,1,8,107,34,1,102,0,45,2,0,1,102,162,14,135,7,0,0,102,0,0,0,33,8,7,0,120,8,3,0,137,90,0,0,139,0,0,0,1,56,162,14,0,9,56,0,1,102,0,0,14,10,9,102,120,10,2,0,119,0,177,0,135,11,1,0,0,67,11,0,0,12,67,0,1,102,0,0,14,13,12,102,120,13,2,0,119,0,168,0,0,14,67,0,82,15,14,0,25,16,15,8,82,17,16,0,0,78,17,0,0,18,78,0,1,102,0,0,14,19,18,102,120,19,2,0,119,0,153,0,0,20,45,0,1,101,0,0,134,102,0,0,112,32,1,0,101,20,0,0,0,21,45,0,19,102,21,91,0,22,102,0,27,102,22,7,3,24,93,102,78,25,24,0,0,26,45,0,19,102,26,91,0,27,102,0,27,102,27,7,3,28,93,102,25,29,28,1,78,30,29,0,135,31,69,0,25,30,0,0,83,88,31,0,0,32,45,0,19,102,32,91,0,33,102,0,41,102,33,1,3,35,97,102,79,102,35,0,103,101,35,1,41,101,101,8,20,102,102,101,0,36,102,0,19,102,36,94,0,37,102,0,26,38,37,1,19,102,38,94,0,39,102,0,19,102,39,91,83,3,102,0,42,101,39,8,107,3,1,101,2,101,0,0,52,180,2,0,82,40,101,0,25,41,40,3,0,4,41,0,2,101,0,0,52,180,2,0,82,42,101,0,78,43,42,0,83,5,43,0,0,6,34,0,0,44,78,0,1,102,0,0,1,103,0,0,1,104,0,0,135,101,2,0,44,100,102,88,103,104,0,0,0,46,78,0,1,104,1,0,1,103,0,0,1,102,0,0,135,101,2,0,46,99,104,3,103,102,0,0,0,47,78,0,1,102,0,0,1,103,0,0,1,104,0,0,135,101,2,0,47,95,102,23,103,104,0,0,0,48,78,0,0,49,6,0,1,104,1,0,1,103,0,0,1,102,0,0,135,101,2,0,48,98,104,49,103,102,0,0,0,50,78,0,1,102,184,14,1,103,0,0,1,104,0,0,1,105,0,0,135,101,2,0,50,102,103,5,104,105,0,0,0,51,78,0,0,52,4,0,1,105,195,14,1,104,0,0,135,101,133,0,51,105,104,52,96,0,0,0,0,53,56,0,0,54,67,0,134,55,0,0,16,21,1,0,53,54,0,0,32,57,55,0,121,57,49,0,78,58,5,0,2,101,0,0,52,180,2,0,82,59,101,0,83,59,58,0,0,60,45,0,19,101,60,91,0,61,101,0,27,101,61,7,3,62,93,101,78,63,62,0,19,101,63,91,0,64,101,0,78,65,5,0,19,101,65,91,0,66,101,0,42,101,66,1,0,68,101,0,4,69,64,68,19,101,69,91,0,70,101,0,2,101,0,0,52,180,2,0,82,71,101,0,25,72,71,1,83,72,70,0,0,73,45,0,19,101,73,91,0,74,101,0,27,101,74,7,3,75,93,101,25,76,75,1,78,77,76,0,19,101,77,91,0,79,101,0,78,80,5,0,19,101,80,91,0,81,101,0,42,101,81,1,0,82,101,0,4,83,79,82,19,101,83,91,0,84,101,0,2,101,0,0,52,180,2,0,82,85,101,0,25,86,85,2,83,86,84,0,1,78,0,0,119,0,100,255,0,87,67,0,135,101,3,0,87,0,0,0,1,67,0,0,119,0,85,255,1,56,0,0,119,0,76,255,137,90,0,0,139,0,0,0,140,2,116,0,0,0,0,0,2,112,0,0,255,0,0,0,2,113,0,0,255,255,0,0,1,110,0,0,136,114,0,0,0,111,114,0,136,114,0,0,25,114,114,16,137,114,0,0,0,22,0,0,0,33,1,0,2,114,0,0,192,214,2,0,1,115,5,0,83,114,115,0,1,115,161,32,79,115,115,0,1,114,161,32,103,114,114,1,41,114,114,8,20,115,115,114,0,77,115,0,19,115,77,113,0,88,115,0,26,99,88,1,26,3,99,4,19,115,3,112,0,13,115,0,2,115,0,0,194,214,2,0,83,115,13,0,0,14,22,0,135,15,4,0,14,0,0,0,19,115,15,112,0,16,115,0,0,66,16,0,1,115,161,32,79,115,115,0,1,114,161,32,103,114,114,1,41,114,114,8,20,115,115,114,0,17,115,0,19,115,17,113,0,18,115,0,26,19,18,1,26,20,19,0,28,115,20,6,38,115,115,255,0,21,115,0,26,23,21,2,19,115,23,112,0,24,115,0,0,44,24,0,0,25,66,0,19,115,25,112,0,26,115,0,0,27,44,0,19,115,27,112,0,28,115,0,6,115,26,28,38,115,115,255,0,29,115,0,25,30,29,1,19,115,30,112,0,31,115,0,0,55,31,0,0,32,55,0,19,115,32,112,0,34,115,0,1,115,163,32,79,115,115,0,1,114,163,32,103,114,114,1,41,114,114,8,20,115,115,114,0,35,115,0,19,115,35,113,0,36,115,0,26,37,36,1,26,38,37,0,28,115,38,12,38,115,115,255,0,39,115,0,26,40,39,1,15,41,40,34,121,41,18,0,2,115,0,0,193,214,2,0,1,114,5,0,83,115,114,0,1,114,163,32,79,114,114,0,1,115,163,32,103,115,115,1,41,115,115,8,20,114,114,115,0,42,114,0,19,114,42,113,0,43,114,0,26,45,43,1,26,46,45,5,0,2,46,0,119,0,51,0,0,47,55,0,19,114,47,112,0,48,114,0,27,49,48,12,19,114,49,112,0,50,114,0,0,55,50,0,1,114,163,32,79,114,114,0,1,115,163,32,103,115,115,1,41,115,115,8,20,114,114,115,0,51,114,0,19,114,51,113,0,52,114,0,26,53,52,1,26,54,53,0,0,56,55,0,19,114,56,112,0,57,114,0,4,58,54,57,42,114,58,1,0,59,114,0,19,114,59,112,0,60,114,0,2,114,0,0,193,214,2,0,83,114,60,0,2,114,0,0,193,214,2,0,78,61,114,0,19,114,61,112,0,62,114,0,25,63,62,0,19,114,63,112,0,64,114,0,2,114,0,0,193,214,2,0,83,114,64,0,2,114,0,0,193,214,2,0,78,65,114,0,19,114,65,112,0,67,114,0,0,68,55,0,19,114,68,112,0,69,114,0,3,70,67,69,0,2,70,0,19,114,2,112,0,71,114,0,2,114,0,0,195,214,2,0,83,114,71,0,2,114,0,0,192,214,2,0,78,72,114,0,19,114,72,112,0,73,114,0,26,74,73,3,19,114,74,113,0,75,114,0,2,114,0,0,193,214,2,0,78,76,114,0,19,114,76,112,0,78,114,0,26,79,78,3,19,114,79,113,0,80,114,0,2,114,0,0,194,214,2,0,78,81,114,0,19,114,81,112,0,82,114,0,25,83,82,3,19,114,83,113,0,84,114,0,2,114,0,0,195,214,2,0,78,85,114,0,19,114,85,112,0,86,114,0,25,87,86,2,19,114,87,113,0,89,114,0,135,114,5,0,75,80,84,89,2,114,0,0,192,214,2,0,78,90,114,0,19,114,90,112,0,91,114,0,26,92,91,3,19,114,92,113,0,93,114,0,2,114,0,0,193,214,2,0,78,94,114,0,19,114,94,112,0,95,114,0,26,96,95,3,19,114,96,113,0,97,114,0,2,114,0,0,194,214,2,0,78,98,114,0,19,114,98,112,0,100,114,0,25,101,100,3,19,114,101,113,0,102,114,0,2,114,0,0,195,214,2,0,78,103,114,0,19,114,103,112,0,104,114,0,25,105,104,2,19,114,105,113,0,106,114,0,135,114,6,0,93,97,102,106,2,114,0,0,192,214,2,0,78,107,114,0,19,114,107,112,0,108,114,0,2,114,0,0,193,214,2,0,78,109,114,0,19,114,109,112,0,4,114,0,0,5,22,0,135,114,7,0,108,4,5,0,0,6,33,0,19,114,6,112,0,7,114,0,32,8,7,0,121,8,3,0,137,111,0,0,139,0,0,0,0,9,33,0,19,114,9,112,0,10,114,0,27,11,10,100,19,114,11,113,0,12,114,0,1,115,2,0,134,114,0,0,16,135,2,0,12,115,0,0,137,111,0,0,139,0,0,0,140,1,95,0,0,0,0,0,2,87,0,0,255,255,0,0,2,88,0,0,255,0,0,0,2,89,0,0,163,32,0,0,2,90,0,0,20,108,3,0,2,91,0,0,161,32,0,0,1,85,0,0,136,92,0,0,0,86,92,0,136,92,0,0,1,93,48,2,3,92,92,93,137,92,0,0,25,34,86,32,25,84,86,16,0,12,0,0,1,67,0,0,0,2,12,0,1,92,23,0,135,3,92,0,2,92,0,0,41,92,3,24,42,92,92,24,33,4,92,0,120,4,9,0,1,93,59,0,134,92,0,0,52,222,2,0,93,0,0,0,1,1,1,0,0,83,1,0,137,86,0,0,139,83,0,0,2,92,0,0,140,180,2,0,82,5,92,0,0,23,5,0,1,45,0,0,0,6,45,0,32,7,6,0,121,7,76,0,0,8,12,0,0,9,23,0,135,10,29,0,8,9,0,0,0,45,10,0,0,11,45,0,33,13,11,0,120,13,3,0,1,85,6,0,119,0,132,0,0,14,23,0,0,15,45,0,79,92,91,0,103,93,91,1,41,93,93,8,20,92,92,93,0,16,92,0,19,92,16,87,0,17,92,0,26,18,17,1,26,19,18,4,19,92,19,88,0,20,92,0,79,92,89,0,103,93,89,1,41,93,93,8,20,92,92,93,0,21,92,0,19,92,21,87,0,22,92,0,26,24,22,1,26,25,24,2,19,92,25,88,0,26,92,0,1,92,0,0,1,93,4,0,1,94,2,0,134,27,0,0,24,121,0,0,14,15,92,93,94,20,26,0,0,56,27,0,0,28,56,0,19,94,28,87,0,29,94,0,13,30,87,29,120,30,95,0,0,31,23,0,0,32,56,0,19,94,32,87,0,33,94,0,41,94,33,1,3,35,31,94,79,94,35,0,103,93,35,1,41,93,93,8,20,94,94,93,0,36,94,0,0,67,36,0,0,37,67,0,1,94,23,0,135,38,85,0,37,94,0,0,41,94,38,24,42,94,94,24,33,39,94,0,121,39,3,0,1,45,1,0,119,0,185,255,1,93,60,0,134,94,0,0,52,222,2,0,93,0,0,0,1,45,0,0,119,0,179,255,0,40,45,0,32,41,40,1,120,41,2,0,119,0,175,255,1,93,64,0,1,92,93,0,135,94,17,0,93,92,34,0,135,94,30,0,0,42,67,0,134,94,0,0,76,29,2,0,42,34,0,0,2,94,0,0,84,176,3,0,134,43,0,0,84,80,0,0,94,0,0,0,19,94,43,88,0,44,94,0,0,78,44,0,0,46,78,0,13,47,88,46,121,47,3,0,1,45,0,0,119,0,153,255,0,48,78,0,0,49,12,0,19,94,49,88,0,50,94,0,14,51,48,50,120,51,2,0,119,0,146,255,0,52,78,0,27,94,52,37,3,53,90,94,25,54,53,1,79,94,54,0,103,92,54,1,41,92,92,8,20,94,94,92,0,55,94,0,19,94,55,87,0,57,94,0,0,58,12,0,19,94,58,88,0,59,94,0,27,94,59,37,3,60,90,94,25,61,60,1,79,94,61,0,103,92,61,1,41,92,92,8,20,94,94,92,0,62,94,0,19,94,62,87,0,63,94,0,13,64,57,63,120,64,3,0,1,85,17,0,119,0,6,0,1,92,58,0,134,94,0,0,52,222,2,0,92,0,0,0,119,0,113,255,32,94,85,6,121,94,6,0,1,92,84,0,134,94,0,0,52,222,2,0,92,0,0,0,119,0,50,0,32,94,85,17,121,94,48,0,0,65,78,0,19,94,65,88,0,66,94,0,134,94,0,0,148,201,0,0,66,0,0,0,0,68,67,0,1,92,23,0,135,94,87,0,68,92,0,0,0,69,12,0,1,92,23,0,135,94,94,0,69,92,0,0,1,94,23,0,83,84,94,0,0,70,67,0,25,71,84,1,19,94,70,88,83,71,94,0,42,92,70,8,107,71,1,92,0,72,12,0,25,73,84,3,83,73,72,0,0,74,78,0,19,92,74,87,0,75,92,0,25,76,84,4,19,92,75,88,83,76,92,0,42,94,75,8,107,76,1,94,25,77,84,13,1,94,1,0,83,77,94,0,134,79,0,0,12,186,2,0,84,0,0,0,41,94,79,24,42,94,94,24,33,80,94,0,121,80,5,0,0,81,12,0,0,82,67,0,135,94,31,0,81,82,0,0,1,1,1,0,0,83,1,0,137,86,0,0,139,83,0,0,140,2,96,0,0,0,0,0,2,91,0,0,255,255,0,0,2,92,0,0,163,32,0,0,1,89,0,0,136,93,0,0,0,90,93,0,136,93,0,0,25,93,93,32,137,93,0,0,25,34,90,16,25,45,90,8,0,12,0,0,0,23,1,0,79,93,92,0,103,94,92,1,41,94,94,8,20,93,93,94,0,56,93,0,19,93,56,91,0,67,93,0,26,78,67,1,26,88,78,4,26,2,88,44,26,3,2,4,19,93,3,91,0,4,93,0,1,93,161,32,79,93,93,0,1,94,161,32,103,94,94,1,41,94,94,8,20,93,93,94,0,5,93,0,19,93,5,91,0,6,93,0,26,7,6,1,26,8,7,5,19,93,8,91,0,9,93,0,79,93,92,0,103,94,92,1,41,94,94,8,20,93,93,94,0,10,93,0,19,93,10,91,0,11,93,0,26,13,11,1,26,14,13,4,19,93,14,91,0,15,93,0,1,94,4,0,135,93,5,0,94,4,9,15,79,93,92,0,103,94,92,1,41,94,94,8,20,93,93,94,0,16,93,0,19,93,16,91,0,17,93,0,26,18,17,1,26,19,18,4,26,20,19,44,26,21,20,4,19,93,21,91,0,22,93,0,1,93,161,32,79,93,93,0,1,94,161,32,103,94,94,1,41,94,94,8,20,93,93,94,0,24,93,0,19,93,24,91,0,25,93,0,26,26,25,1,26,27,26,5,19,93,27,91,0,28,93,0,79,93,92,0,103,94,92,1,41,94,94,8,20,93,93,94,0,29,93,0,19,93,29,91,0,30,93,0,26,31,30,1,26,32,31,5,19,93,32,91,0,33,93,0,1,94,4,0,135,93,6,0,94,22,28,33,1,93,8,0,1,94,255,0,19,93,93,94,83,34,93,0,1,94,8,0,42,94,94,8,107,34,1,94,79,94,92,0,103,93,92,1,41,93,93,8,20,94,94,93,0,35,94,0,19,94,35,91,0,36,94,0,26,37,36,1,26,38,37,4,26,39,38,44,26,40,39,4,19,94,40,91,0,41,94,0,25,42,34,2,1,94,255,0,19,94,41,94,83,42,94,0,42,93,41,8,107,42,1,93,1,93,161,32,79,93,93,0,1,94,161,32,103,94,94,1,41,94,94,8,20,93,93,94,0,43,93,0,19,93,43,91,0,44,93,0,26,46,44,1,26,47,46,7,19,93,47,91,0,48,93,0,25,49,34,4,1,93,255,0,19,93,48,93,83,49,93,0,42,94,48,8,107,49,1,94,79,94,92,0,103,93,92,1,41,93,93,8,20,94,94,93,0,50,94,0,19,94,50,91,0,51,94,0,26,52,51,1,26,53,52,7,19,94,53,91,0,54,94,0,25,55,34,6,1,94,255,0,19,94,54,94,83,55,94,0,42,93,54,8,107,55,1,93,1,93,10,0,1,94,255,0,19,93,93,94,83,45,93,0,1,94,10,0,42,94,94,8,107,45,1,94,79,94,92,0,103,93,92,1,41,93,93,8,20,94,94,93,0,57,94,0,19,94,57,91,0,58,94,0,26,59,58,1,26,60,59,4,26,61,60,44,25,62,61,2,19,94,62,91,0,63,94,0,25,64,45,2,1,94,255,0,19,94,63,94,83,64,94,0,42,93,63,8,107,64,1,93,25,65,45,4,1,93,62,0,1,94,255,0,19,93,93,94,83,65,93,0,1,94,62,0,42,94,94,8,107,65,1,94,79,94,92,0,103,93,92,1,41,93,93,8,20,94,94,93,0,66,94,0,19,94,66,91,0,68,94,0,26,69,68,1,26,70,69,4,26,71,70,44,26,72,71,4,25,73,72,4,25,74,73,44,19,94,74,91,0,75,94,0,25,76,45,6,1,94,255,0,19,94,75,94,83,76,94,0,42,93,75,8,107,76,1,93,79,93,92,0,103,94,92,1,41,94,94,8,20,93,93,94,0,77,93,0,19,93,77,91,0,79,93,0,26,80,79,1,26,81,80,4,26,82,81,44,26,83,82,4,25,84,83,4,1,93,255,0,19,93,84,93,0,85,93,0,0,86,12,0,1,94,8,0,134,93,0,0,52,198,2,0,94,85,86,0,0,87,23,0,135,93,68,0,34,45,87,0,1,94,44,1,1,95,2,0,134,93,0,0,16,135,2,0,94,95,0,0,137,90,0,0,139,0,0,0,140,0,72,0,0,0,0,0,2,67,0,0,255,0,0,0,2,68,0,0,255,255,0,0,1,65,0,0,136,69,0,0,0,66,69,0,136,69,0,0,25,69,69,64,137,69,0,0,25,2,66,48,25,13,66,40,25,24,66,6,1,70,64,0,1,71,121,0,135,69,17,0,70,71,24,0,1,69,161,32,79,69,69,0,1,71,161,32,103,71,71,1,41,71,71,8,20,69,69,71,0,57,69,0,19,69,57,68,0,62,69,0,26,63,62,1,28,69,63,3,38,69,69,255,0,64,69,0,25,3,64,0,19,69,3,68,0,4,69,0,19,69,4,67,83,2,69,0,42,71,4,8,107,2,1,71,1,71,161,32,79,71,71,0,1,69,161,32,103,69,69,1,41,69,69,8,20,71,71,69,0,5,71,0,19,71,5,68,0,6,71,0,26,7,6,1,28,71,7,3,38,71,71,255,0,8,71,0,25,9,8,0,25,10,9,48,19,71,10,68,0,11,71,0,25,12,2,4,19,71,11,67,83,12,71,0,42,69,11,8,107,12,1,69,25,14,2,2,1,69,10,0,19,69,69,67,83,14,69,0,1,71,10,0,42,71,71,8,107,14,1,71,1,71,163,32,79,71,71,0,1,69,163,32,103,69,69,1,41,69,69,8,20,71,71,69,0,15,71,0,19,71,15,68,0,16,71,0,26,17,16,1,26,18,17,10,1,71,40,0,15,19,71,18,121,19,3,0,1,0,46,0,119,0,20,0,1,71,163,32,79,71,71,0,1,69,163,32,103,69,69,1,41,69,69,8,20,71,71,69,0,20,71,0,19,71,20,68,0,21,71,0,26,22,21,1,26,23,22,10,28,71,23,12,38,71,71,255,0,25,71,0,27,26,25,12,25,27,26,10,19,71,27,68,0,28,71,0,0,0,28,0,25,29,2,6,19,71,0,67,83,29,71,0,42,69,0,8,107,29,1,69,79,69,2,0,103,71,2,1,41,71,71,8,20,69,69,71,0,30,69,0,19,69,30,67,83,13,69,0,42,71,30,8,107,13,1,71,25,31,2,6,79,71,31,0,103,69,31,1,41,69,69,8,20,71,71,69,0,32,71,0,41,71,32,16,42,71,71,16,0,33,71,0,25,34,33,12,19,71,34,68,0,36,71,0,25,37,13,2,19,71,36,67,83,37,71,0,42,69,36,8,107,37,1,69,79,69,13,0,103,71,13,1,41,71,71,8,20,69,69,71,0,38,69,0,41,69,38,16,42,69,69,16,0,39,69,0,25,40,39,48,19,69,40,68,0,41,69,0,25,42,13,4,19,69,41,67,83,42,69,0,42,71,41,8,107,42,1,71,25,43,13,2,79,71,43,0,103,69,43,1,41,69,69,8,20,71,71,69,0,44,71,0,41,71,44,16,42,71,71,16,0,45,71,0,25,47,45,12,19,71,47,68,0,48,71,0,25,49,13,6,19,71,48,67,83,49,71,0,42,69,48,8,107,49,1,69,1,35,33,25,1,46,0,0,0,50,46,0,19,69,50,67,0,51,69,0,134,52,0,0,0,0,0,0,2,51,24,0,19,69,52,67,0,53,69,0,0,46,53,0,19,69,53,67,0,54,69,0,1,69,0,0,1,71,0,1,138,54,69,71,248,39,2,0,0,40,2,0,8,40,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,244,39,2,0,12,40,2,0,119,0,242,254,1,65,5,0,119,0,21,0,1,65,6,0,119,0,19,0,119,0,3,0,1,65,10,0,119,0,16,0,0,55,35,0,1,69,0,0,134,56,0,0,0,0,0,0,13,69,55,0,19,69,56,67,0,58,69,0,19,69,58,67,0,59,69,0,13,60,59,67,120,60,3,0,1,65,9,0,119,0,3,0,135,69,30,0,119,0,220,254,32,69,65,5,121,69,6,0,1,1,1,0,0,61,1,0,137,66,0,0,139,61,0,0,119,0,25,0,32,69,65,6,121,69,10,0,1,71,0,0,134,69,0,0,20,5,1,0,71,0,0,0,1,1,0,0,0,61,1,0,137,66,0,0,139,61,0,0,119,0,14,0,32,69,65,9,121,69,6,0,1,1,2,0,0,61,1,0,137,66,0,0,139,61,0,0,119,0,7,0,32,69,65,10,121,69,5,0,1,1,0,0,0,61,1,0,137,66,0,0,139,61,0,0,1,69,0,0,139,69,0,0,140,2,109,0,0,0,0,0,2,103,0,0,255,255,0,0,2,104,0,0,163,32,0,0,2,105,0,0,161,32,0,0,1,101,0,0,136,106,0,0,0,102,106,0,136,106,0,0,25,106,106,32,137,106,0,0,25,35,102,4,0,13,0,0,0,24,1,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,46,106,0,19,106,46,103,0,57,106,0,26,68,57,1,25,79,68,0,26,90,79,0,26,2,90,72,28,106,2,2,38,106,106,255,0,4,106,0,19,106,4,103,0,5,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,6,106,0,19,106,6,103,0,7,106,0,26,8,7,1,25,9,8,0,26,10,9,0,26,11,10,36,28,106,11,2,38,106,106,255,0,12,106,0,19,106,12,103,0,14,106,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,15,106,0,19,106,15,103,0,16,106,0,26,17,16,1,25,18,17,0,26,19,18,0,26,20,19,72,28,106,20,2,38,106,106,255,0,21,106,0,25,22,21,72,19,106,22,103,0,23,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,25,106,0,19,106,25,103,0,26,106,0,26,27,26,1,25,28,27,0,26,29,28,0,26,30,29,36,28,106,30,2,38,106,106,255,0,31,106,0,25,32,31,36,19,106,32,103,0,33,106,0,135,106,5,0,5,14,23,33,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,34,106,0,19,106,34,103,0,36,106,0,26,37,36,1,25,38,37,0,26,39,38,0,26,40,39,72,28,106,40,2,38,106,106,255,0,41,106,0,26,42,41,1,19,106,42,103,0,43,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,44,106,0,19,106,44,103,0,45,106,0,26,47,45,1,25,48,47,0,26,49,48,0,26,50,49,36,28,106,50,2,38,106,106,255,0,51,106,0,26,52,51,1,19,106,52,103,0,53,106,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,54,106,0,19,106,54,103,0,55,106,0,26,56,55,1,25,58,56,0,26,59,58,0,26,60,59,72,28,106,60,2,38,106,106,255,0,61,106,0,25,62,61,72,25,63,62,1,19,106,63,103,0,64,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,65,106,0,19,106,65,103,0,66,106,0,26,67,66,1,25,69,67,0,26,70,69,0,26,71,70,36,28,106,71,2,38,106,106,255,0,72,106,0,25,73,72,36,25,74,73,1,19,106,74,103,0,75,106,0,135,106,6,0,43,53,64,75,1,107,64,0,1,108,42,0,135,106,17,0,107,108,35,0,79,106,105,0,103,108,105,1,41,108,108,8,20,106,106,108,0,76,106,0,19,106,76,103,0,77,106,0,26,78,77,1,25,80,78,0,26,81,80,0,26,82,81,72,28,106,82,2,38,106,106,255,0,83,106,0,19,106,83,103,0,84,106,0,79,106,104,0,103,108,104,1,41,108,108,8,20,106,106,108,0,85,106,0,19,106,85,103,0,86,106,0,26,87,86,1,25,88,87,0,26,89,88,0,26,91,89,36,28,106,91,2,38,106,106,255,0,92,106,0,19,106,92,103,0,93,106,0,135,106,7,0,84,93,35,0,0,94,13,0,19,106,94,103,0,95,106,0,0,96,24,0,19,106,96,103,0,97,106,0,0,98,24,0,19,106,98,103,0,99,106,0,134,100,0,0,216,97,0,0,95,97,99,0,19,106,100,103,0,3,106,0,137,102,0,0,139,3,0,0,140,2,109,0,0,0,0,0,2,103,0,0,255,255,0,0,2,104,0,0,163,32,0,0,2,105,0,0,161,32,0,0,1,101,0,0,136,106,0,0,0,102,106,0,136,106,0,0,25,106,106,32,137,106,0,0,25,35,102,4,0,13,0,0,0,24,1,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,46,106,0,19,106,46,103,0,57,106,0,26,68,57,1,25,79,68,0,26,90,79,0,26,2,90,72,28,106,2,2,38,106,106,255,0,4,106,0,19,106,4,103,0,5,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,6,106,0,19,106,6,103,0,7,106,0,26,8,7,1,25,9,8,0,26,10,9,0,26,11,10,36,28,106,11,2,38,106,106,255,0,12,106,0,19,106,12,103,0,14,106,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,15,106,0,19,106,15,103,0,16,106,0,26,17,16,1,25,18,17,0,26,19,18,0,26,20,19,72,28,106,20,2,38,106,106,255,0,21,106,0,25,22,21,72,19,106,22,103,0,23,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,25,106,0,19,106,25,103,0,26,106,0,26,27,26,1,25,28,27,0,26,29,28,0,26,30,29,36,28,106,30,2,38,106,106,255,0,31,106,0,25,32,31,36,19,106,32,103,0,33,106,0,135,106,5,0,5,14,23,33,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,34,106,0,19,106,34,103,0,36,106,0,26,37,36,1,25,38,37,0,26,39,38,0,26,40,39,72,28,106,40,2,38,106,106,255,0,41,106,0,26,42,41,1,19,106,42,103,0,43,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,44,106,0,19,106,44,103,0,45,106,0,26,47,45,1,25,48,47,0,26,49,48,0,26,50,49,36,28,106,50,2,38,106,106,255,0,51,106,0,26,52,51,1,19,106,52,103,0,53,106,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,54,106,0,19,106,54,103,0,55,106,0,26,56,55,1,25,58,56,0,26,59,58,0,26,60,59,72,28,106,60,2,38,106,106,255,0,61,106,0,25,62,61,72,25,63,62,1,19,106,63,103,0,64,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,65,106,0,19,106,65,103,0,66,106,0,26,67,66,1,25,69,67,0,26,70,69,0,26,71,70,36,28,106,71,2,38,106,106,255,0,72,106,0,25,73,72,36,25,74,73,1,19,106,74,103,0,75,106,0,135,106,6,0,43,53,64,75,1,107,64,0,1,108,41,0,135,106,17,0,107,108,35,0,79,106,105,0,103,108,105,1,41,108,108,8,20,106,106,108,0,76,106,0,19,106,76,103,0,77,106,0,26,78,77,1,25,80,78,0,26,81,80,0,26,82,81,72,28,106,82,2,38,106,106,255,0,83,106,0,19,106,83,103,0,84,106,0,79,106,104,0,103,108,104,1,41,108,108,8,20,106,106,108,0,85,106,0,19,106,85,103,0,86,106,0,26,87,86,1,25,88,87,0,26,89,88,0,26,91,89,36,28,106,91,2,38,106,106,255,0,92,106,0,19,106,92,103,0,93,106,0,135,106,7,0,84,93,35,0,0,94,13,0,19,106,94,103,0,95,106,0,0,96,24,0,19,106,96,103,0,97,106,0,0,98,24,0,19,106,98,103,0,99,106,0,134,100,0,0,216,97,0,0,95,97,99,0,19,106,100,103,0,3,106,0,137,102,0,0,139,3,0,0,140,2,109,0,0,0,0,0,2,103,0,0,255,255,0,0,2,104,0,0,163,32,0,0,2,105,0,0,161,32,0,0,1,101,0,0,136,106,0,0,0,102,106,0,136,106,0,0,25,106,106,32,137,106,0,0,25,35,102,4,0,13,0,0,0,24,1,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,46,106,0,19,106,46,103,0,57,106,0,26,68,57,1,25,79,68,0,26,90,79,0,26,2,90,72,28,106,2,2,38,106,106,255,0,4,106,0,19,106,4,103,0,5,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107], eb + 133120);
  HEAPU8.set([0,6,106,0,19,106,6,103,0,7,106,0,26,8,7,1,25,9,8,0,26,10,9,0,26,11,10,36,28,106,11,2,38,106,106,255,0,12,106,0,19,106,12,103,0,14,106,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,15,106,0,19,106,15,103,0,16,106,0,26,17,16,1,25,18,17,0,26,19,18,0,26,20,19,72,28,106,20,2,38,106,106,255,0,21,106,0,25,22,21,72,19,106,22,103,0,23,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,25,106,0,19,106,25,103,0,26,106,0,26,27,26,1,25,28,27,0,26,29,28,0,26,30,29,36,28,106,30,2,38,106,106,255,0,31,106,0,25,32,31,36,19,106,32,103,0,33,106,0,135,106,5,0,5,14,23,33,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,34,106,0,19,106,34,103,0,36,106,0,26,37,36,1,25,38,37,0,26,39,38,0,26,40,39,72,28,106,40,2,38,106,106,255,0,41,106,0,26,42,41,1,19,106,42,103,0,43,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,44,106,0,19,106,44,103,0,45,106,0,26,47,45,1,25,48,47,0,26,49,48,0,26,50,49,36,28,106,50,2,38,106,106,255,0,51,106,0,26,52,51,1,19,106,52,103,0,53,106,0,79,106,105,0,103,107,105,1,41,107,107,8,20,106,106,107,0,54,106,0,19,106,54,103,0,55,106,0,26,56,55,1,25,58,56,0,26,59,58,0,26,60,59,72,28,106,60,2,38,106,106,255,0,61,106,0,25,62,61,72,25,63,62,1,19,106,63,103,0,64,106,0,79,106,104,0,103,107,104,1,41,107,107,8,20,106,106,107,0,65,106,0,19,106,65,103,0,66,106,0,26,67,66,1,25,69,67,0,26,70,69,0,26,71,70,36,28,106,71,2,38,106,106,255,0,72,106,0,25,73,72,36,25,74,73,1,19,106,74,103,0,75,106,0,135,106,6,0,43,53,64,75,1,107,64,0,1,108,43,0,135,106,17,0,107,108,35,0,79,106,105,0,103,108,105,1,41,108,108,8,20,106,106,108,0,76,106,0,19,106,76,103,0,77,106,0,26,78,77,1,25,80,78,0,26,81,80,0,26,82,81,72,28,106,82,2,38,106,106,255,0,83,106,0,19,106,83,103,0,84,106,0,79,106,104,0,103,108,104,1,41,108,108,8,20,106,106,108,0,85,106,0,19,106,85,103,0,86,106,0,26,87,86,1,25,88,87,0,26,89,88,0,26,91,89,36,28,106,91,2,38,106,106,255,0,92,106,0,19,106,92,103,0,93,106,0,135,106,7,0,84,93,35,0,0,94,13,0,19,106,94,103,0,95,106,0,0,96,24,0,19,106,96,103,0,97,106,0,0,98,24,0,19,106,98,103,0,99,106,0,134,100,0,0,216,97,0,0,95,97,99,0,19,106,100,103,0,3,106,0,137,102,0,0,139,3,0,0,140,1,91,0,0,0,0,0,2,83,0,0,255,255,0,0,2,84,0,0,255,0,0,0,2,85,0,0,163,32,0,0,2,86,0,0,161,32,0,0,2,87,0,0,158,215,2,0,1,81,0,0,136,88,0,0,0,82,88,0,136,88,0,0,25,88,88,32,137,88,0,0,25,67,82,12,0,12,0,0,0,78,12,0,1,88,17,0,135,80,92,0,78,88,0,0,41,88,80,24,42,88,88,24,33,2,88,0,120,2,9,0,1,89,59,0,134,88,0,0,52,222,2,0,89,0,0,0,1,1,1,0,0,79,1,0,137,82,0,0,139,79,0,0,2,88,0,0,140,180,2,0,82,3,88,0,0,23,3,0,0,4,12,0,0,5,23,0,135,6,29,0,4,5,0,0,0,34,6,0,0,7,34,0,33,8,7,0,120,8,3,0,1,81,5,0,119,0,120,0,135,88,30,0,0,9,23,0,0,10,34,0,79,88,86,0,103,89,86,1,41,89,89,8,20,88,88,89,0,11,88,0,19,88,11,83,0,13,88,0,26,14,13,1,26,15,14,4,19,88,15,84,0,16,88,0,79,88,85,0,103,89,85,1,41,89,89,8,20,88,88,89,0,17,88,0,19,88,17,83,0,18,88,0,26,19,18,1,26,20,19,2,19,88,20,84,0,21,88,0,1,88,0,0,1,89,4,0,1,90,2,0,134,22,0,0,24,121,0,0,9,10,88,89,90,16,21,0,0,45,22,0,0,24,45,0,19,90,24,83,0,25,90,0,14,26,83,25,120,26,2,0,119,0,81,0,0,27,23,0,0,28,45,0,19,90,28,83,0,29,90,0,41,90,29,1,3,30,27,90,79,90,30,0,103,89,30,1,41,89,89,8,20,90,90,89,0,31,90,0,0,56,31,0,0,32,56,0,1,90,17,0,135,33,85,0,32,90,0,0,41,90,33,24,42,90,90,24,33,35,90,0,120,35,6,0,1,89,60,0,134,90,0,0,52,222,2,0,89,0,0,0,119,0,183,255,79,90,87,0,103,89,87,1,41,89,89,8,20,90,90,89,0,36,90,0,0,37,23,0,135,38,115,0,36,37,0,0,19,90,38,84,0,39,90,0,0,34,39,0,0,40,34,0,33,41,40,0,120,41,2,0,119,0,41,0,135,90,30,0,0,42,23,0,0,43,34,0,79,90,86,0,103,89,86,1,41,89,89,8,20,90,90,89,0,44,90,0,19,90,44,83,0,46,90,0,26,47,46,1,26,48,47,4,19,90,48,84,0,49,90,0,79,90,85,0,103,89,85,1,41,89,89,8,20,90,90,89,0,50,90,0,19,90,50,83,0,51,90,0,26,52,51,1,26,53,52,2,19,90,53,84,0,54,90,0,1,90,0,0,1,89,4,0,1,88,2,0,134,55,0,0,24,121,0,0,42,43,90,89,88,49,54,0,0,45,55,0,0,57,45,0,19,88,57,83,0,58,88,0,14,59,83,58,121,59,130,255,1,81,11,0,119,0,1,0,32,88,81,5,121,88,6,0,1,89,84,0,134,88,0,0,52,222,2,0,89,0,0,0,119,0,52,0,32,88,81,11,121,88,50,0,0,60,56,0,1,89,17,0,135,88,87,0,60,89,0,0,0,61,12,0,1,89,17,0,135,88,94,0,61,89,0,0,1,88,17,0,83,67,88,0,0,62,56,0,25,63,67,1,19,88,62,84,83,63,88,0,42,89,62,8,107,63,1,89,0,64,12,0,25,65,67,3,83,65,64,0,0,66,23,0,0,68,45,0,19,89,68,83,0,69,89,0,41,89,69,1,3,70,66,89,79,89,70,0,103,88,70,1,41,88,88,8,20,89,89,88,0,71,89,0,25,72,67,4,19,89,71,84,83,72,89,0,42,88,71,8,107,72,1,88,25,73,67,13,1,88,10,0,83,73,88,0,134,74,0,0,12,186,2,0,67,0,0,0,41,88,74,24,42,88,88,24,33,75,88,0,121,75,5,0,0,76,12,0,0,77,56,0,135,88,31,0,76,77,0,0,1,1,1,0,0,79,1,0,137,82,0,0,139,79,0,0,140,0,96,0,0,0,0,0,2,90,0,0,255,255,0,0,2,91,0,0,163,32,0,0,2,92,0,0,161,32,0,0,1,88,0,0,136,93,0,0,0,89,93,0,136,93,0,0,1,94,16,4,3,93,93,94,137,93,0,0,1,93,16,2,3,0,89,93,25,1,89,16,135,93,30,0,2,93,0,0,140,180,2,0,82,45,93,0,0,12,45,0,2,93,0,0,158,215,2,0,79,93,93,0,2,94,0,0,158,215,2,0,103,94,94,1,41,94,94,8,20,93,93,94,0,56,93,0,0,67,12,0,135,78,116,0,56,67,0,0,1,93,255,0,19,93,78,93,0,87,93,0,0,34,87,0,1,23,0,0,0,2,23,0,0,3,34,0,16,4,2,3,120,4,2,0,119,0,173,0,0,5,12,0,0,6,23,0,41,93,6,1,3,7,5,93,79,93,7,0,103,94,7,1,41,94,94,8,20,93,93,94,0,8,93,0,134,93,0,0,116,120,2,0,8,0,0,0,1,94,64,0,1,95,163,0,135,93,17,0,94,95,1,0,135,93,55,0,0,1,0,0,79,93,92,0,103,95,92,1,41,95,95,8,20,93,93,95,0,9,93,0,19,93,9,90,0,10,93,0,26,11,10,1,28,93,11,2,38,93,93,255,0,13,93,0,25,14,13,0,26,15,14,59,19,93,15,90,0,16,93,0,79,93,91,0,103,95,91,1,41,95,95,8,20,93,93,95,0,17,93,0,19,93,17,90,0,18,93,0,26,19,18,1,26,20,19,2,26,21,20,12,26,22,21,2,19,93,22,90,0,24,93,0,79,93,92,0,103,95,92,1,41,95,95,8,20,93,93,95,0,25,93,0,19,93,25,90,0,26,93,0,26,27,26,1,28,93,27,2,38,93,93,255,0,28,93,0,25,29,28,0,26,30,29,59,25,31,30,114,25,32,31,4,19,93,32,90,0,33,93,0,79,93,91,0,103,95,91,1,41,95,95,8,20,93,93,95,0,35,93,0,19,93,35,90,0,36,93,0,26,37,36,1,26,38,37,2,19,93,38,90,0,39,93,0,135,93,5,0,16,24,33,39,79,93,92,0,103,95,92,1,41,95,95,8,20,93,93,95,0,40,93,0,19,93,40,90,0,41,93,0,26,42,41,1,28,93,42,2,38,93,93,255,0,43,93,0,25,44,43,0,26,46,44,59,19,93,46,90,0,47,93,0,79,93,91,0,103,95,91,1,41,95,95,8,20,93,93,95,0,48,93,0,19,93,48,90,0,49,93,0,26,50,49,1,26,51,50,2,26,52,51,12,26,53,52,2,19,93,53,90,0,54,93,0,79,93,92,0,103,95,92,1,41,95,95,8,20,93,93,95,0,55,93,0,19,93,55,90,0,57,93,0,26,58,57,1,28,93,58,2,38,93,93,255,0,59,93,0,25,60,59,0,26,61,60,59,25,62,61,114,25,63,62,4,19,93,63,90,0,64,93,0,79,93,91,0,103,95,91,1,41,95,95,8,20,93,93,95,0,65,93,0,19,93,65,90,0,66,93,0,26,68,66,1,26,69,68,2,19,93,69,90,0,70,93,0,135,93,6,0,47,54,64,70,79,93,92,0,103,95,92,1,41,95,95,8,20,93,93,95,0,71,93,0,19,93,71,90,0,72,93,0,26,73,72,1,26,74,73,114,28,93,74,2,38,93,93,255,0,75,93,0,25,76,75,0,19,93,76,90,0,77,93,0,79,93,91,0,103,95,91,1,41,95,95,8,20,93,93,95,0,79,93,0,19,93,79,90,0,80,93,0,26,81,80,1,26,82,81,2,26,83,82,12,19,93,83,90,0,84,93,0,135,93,7,0,77,84,0,0,1,95,5,0,1,94,0,0,134,93,0,0,16,135,2,0,95,94,0,0,0,85,23,0,25,86,85,1,0,23,86,0,119,0,80,255,135,93,30,0,137,89,0,0,139,0,0,0,140,1,89,0,0,0,0,0,2,81,0,0,255,255,0,0,2,82,0,0,255,0,0,0,2,83,0,0,163,32,0,0,2,84,0,0,161,32,0,0,2,85,0,0,158,215,2,0,1,79,0,0,136,86,0,0,0,80,86,0,136,86,0,0,25,86,86,32,137,86,0,0,25,67,80,12,0,12,0,0,0,77,12,0,1,86,16,0,135,78,92,0,77,86,0,0,41,86,78,24,42,86,86,24,33,2,86,0,120,2,9,0,1,87,59,0,134,86,0,0,52,222,2,0,87,0,0,0,1,1,1,0,0,76,1,0,137,80,0,0,139,76,0,0,2,86,0,0,140,180,2,0,82,3,86,0,0,23,3,0,0,4,12,0,0,5,23,0,135,6,29,0,4,5,0,0,0,34,6,0,0,7,34,0,33,8,7,0,120,8,3,0,1,79,5,0,119,0,115,0,0,9,23,0,0,10,34,0,79,86,84,0,103,87,84,1,41,87,87,8,20,86,86,87,0,11,86,0,19,86,11,81,0,13,86,0,26,14,13,1,26,15,14,4,19,86,15,82,0,16,86,0,79,86,83,0,103,87,83,1,41,87,87,8,20,86,86,87,0,17,86,0,19,86,17,81,0,18,86,0,26,19,18,1,26,20,19,2,19,86,20,82,0,21,86,0,1,86,0,0,1,87,4,0,1,88,2,0,134,22,0,0,24,121,0,0,9,10,86,87,88,16,21,0,0,45,22,0,0,24,45,0,19,88,24,81,0,25,88,0,14,26,81,25,120,26,2,0,119,0,77,0,0,27,23,0,0,28,45,0,19,88,28,81,0,29,88,0,41,88,29,1,3,30,27,88,79,88,30,0,103,87,30,1,41,87,87,8,20,88,88,87,0,31,88,0,0,56,31,0,0,32,56,0,1,88,16,0,135,33,85,0,32,88,0,0,41,88,33,24,42,88,88,24,33,35,88,0,121,35,52,0,79,88,85,0,103,87,85,1,41,87,87,8,20,88,88,87,0,36,88,0,0,37,23,0,135,38,114,0,36,37,0,0,19,88,38,82,0,39,88,0,0,34,39,0,135,88,30,0,0,40,23,0,0,41,34,0,79,88,84,0,103,87,84,1,41,87,87,8,20,88,88,87,0,42,88,0,19,88,42,81,0,43,88,0,26,44,43,1,26,46,44,4,19,88,46,82,0,47,88,0,79,88,83,0,103,87,83,1,41,87,87,8,20,88,88,87,0,48,88,0,19,88,48,81,0,49,88,0,26,50,49,1,26,51,50,2,19,88,51,82,0,52,88,0,1,88,0,0,1,87,4,0,1,86,2,0,134,53,0,0,24,121,0,0,40,41,88,87,86,47,52,0,0,45,53,0,0,54,45,0,19,86,54,81,0,55,86,0,14,57,81,55,121,57,140,255,1,79,10,0,119,0,6,0,1,87,60,0,134,86,0,0,52,222,2,0,87,0,0,0,119,0,133,255,32,86,79,5,121,86,6,0,1,87,84,0,134,86,0,0,52,222,2,0,87,0,0,0,119,0,52,0,32,86,79,10,121,86,50,0,0,58,56,0,1,87,16,0,135,86,87,0,58,87,0,0,0,59,12,0,1,87,16,0,135,86,94,0,59,87,0,0,1,86,16,0,83,67,86,0,0,60,56,0,25,61,67,1,19,86,60,82,83,61,86,0,42,87,60,8,107,61,1,87,0,62,12,0,25,63,67,3,83,63,62,0,0,64,23,0,0,65,45,0,19,87,65,81,0,66,87,0,41,87,66,1,3,68,64,87,79,87,68,0,103,86,68,1,41,86,86,8,20,87,87,86,0,69,87,0,25,70,67,4,19,87,69,82,83,70,87,0,42,86,69,8,107,70,1,86,25,71,67,13,1,86,10,0,83,71,86,0,134,72,0,0,12,186,2,0,67,0,0,0,41,86,72,24,42,86,86,24,33,73,86,0,121,73,5,0,0,74,12,0,0,75,56,0,135,86,31,0,74,75,0,0,1,1,1,0,0,76,1,0,137,80,0,0,139,76,0,0,140,1,89,0,0,0,0,0,2,81,0,0,255,255,0,0,2,82,0,0,255,0,0,0,2,83,0,0,163,32,0,0,2,84,0,0,161,32,0,0,2,85,0,0,158,215,2,0,1,79,0,0,136,86,0,0,0,80,86,0,136,86,0,0,25,86,86,32,137,86,0,0,25,67,80,12,0,12,0,0,0,77,12,0,1,86,19,0,135,78,92,0,77,86,0,0,41,86,78,24,42,86,86,24,33,2,86,0,120,2,9,0,1,87,59,0,134,86,0,0,52,222,2,0,87,0,0,0,1,1,1,0,0,76,1,0,137,80,0,0,139,76,0,0,2,86,0,0,140,180,2,0,82,3,86,0,0,23,3,0,0,4,12,0,0,5,23,0,135,6,29,0,4,5,0,0,0,34,6,0,0,7,34,0,33,8,7,0,120,8,3,0,1,79,5,0,119,0,114,0,0,9,23,0,0,10,34,0,79,86,84,0,103,87,84,1,41,87,87,8,20,86,86,87,0,11,86,0,19,86,11,81,0,13,86,0,26,14,13,1,26,15,14,4,19,86,15,82,0,16,86,0,79,86,83,0,103,87,83,1,41,87,87,8,20,86,86,87,0,17,86,0,19,86,17,81,0,18,86,0,26,19,18,1,26,20,19,2,19,86,20,82,0,21,86,0,1,86,0,0,1,87,4,0,1,88,2,0,134,22,0,0,24,121,0,0,9,10,86,87,88,16,21,0,0,45,22,0,0,24,45,0,19,88,24,81,0,25,88,0,14,26,81,25,120,26,2,0,119,0,76,0,0,27,23,0,0,28,45,0,19,88,28,81,0,29,88,0,41,88,29,1,3,30,27,88,79,88,30,0,103,87,30,1,41,87,87,8,20,88,88,87,0,31,88,0,0,56,31,0,0,32,56,0,1,88,19,0,135,33,85,0,32,88,0,0,41,88,33,24,42,88,88,24,33,35,88,0,121,35,51,0,79,88,85,0,103,87,85,1,41,87,87,8,20,88,88,87,0,36,88,0,0,37,23,0,135,38,116,0,36,37,0,0,19,88,38,82,0,39,88,0,0,34,39,0,0,40,23,0,0,41,34,0,79,88,84,0,103,87,84,1,41,87,87,8,20,88,88,87,0,42,88,0,19,88,42,81,0,43,88,0,26,44,43,1,26,46,44,4,19,88,46,82,0,47,88,0,79,88,83,0,103,87,83,1,41,87,87,8,20,88,88,87,0,48,88,0,19,88,48,81,0,49,88,0,26,50,49,1,26,51,50,2,19,88,51,82,0,52,88,0,1,88,0,0,1,87,4,0,1,86,2,0,134,53,0,0,24,121,0,0,40,41,88,87,86,47,52,0,0,45,53,0,0,54,45,0,19,86,54,81,0,55,86,0,14,57,81,55,121,57,141,255,1,79,10,0,119,0,6,0,1,87,60,0,134,86,0,0,52,222,2,0,87,0,0,0,119,0,134,255,32,86,79,5,121,86,6,0,1,87,84,0,134,86,0,0,52,222,2,0,87,0,0,0,119,0,52,0,32,86,79,10,121,86,50,0,0,58,56,0,1,87,19,0,135,86,87,0,58,87,0,0,0,59,12,0,1,87,19,0,135,86,94,0,59,87,0,0,1,86,19,0,83,67,86,0,0,60,56,0,25,61,67,1,19,86,60,82,83,61,86,0,42,87,60,8,107,61,1,87,0,62,12,0,25,63,67,3,83,63,62,0,0,64,23,0,0,65,45,0,19,87,65,81,0,66,87,0,41,87,66,1,3,68,64,87,79,87,68,0,103,86,68,1,41,86,86,8,20,87,87,86,0,69,87,0,25,70,67,4,19,87,69,82,83,70,87,0,42,86,69,8,107,70,1,86,25,71,67,13,1,86,10,0,83,71,86,0,134,72,0,0,12,186,2,0,67,0,0,0,41,86,72,24,42,86,86,24,33,73,86,0,121,73,5,0,0,74,12,0,0,75,56,0,135,86,31,0,74,75,0,0,1,1,1,0,0,76,1,0,137,80,0,0,139,76,0,0,140,1,76,0,0,0,0,0,1,70,0,0,136,72,0,0,0,71,72,0,136,72,0,0,25,72,72,48,137,72,0,0,25,23,71,16,25,45,71,14,25,68,71,12,0,69,71,0,0,12,0,0,1,73,1,0,1,74,68,0,135,72,17,0,73,74,23,0,1,74,0,0,134,72,0,0,80,21,2,0,23,74,0,0,1,74,1,0,1,73,64,0,135,72,17,0,74,73,23,0,0,2,12,0,1,72,255,0,19,72,2,72,0,3,72,0,41,72,3,1,0,4,72,0,25,5,4,48,1,72,255,0,19,72,5,72,0,6,72,0,25,7,23,5,83,7,6,0,1,72,114,0,135,8,139,0,23,72,0,0,0,34,8,0,0,9,34,0,1,72,0,0,13,10,72,9,121,10,13,0,1,73,1,0,1,74,70,0,135,72,17,0,73,74,23,0,1,74,2,0,134,72,0,0,80,21,2,0,23,74,0,0,1,1,0,0,0,66,1,0,137,71,0,0,139,66,0,0,1,72,0,0,83,45,72,0,1,56,208,7,1,67,200,0,135,11,73,0,2,72,0,0,255,255,0,0,19,72,11,72,0,13,72,0,1,72,255,0,19,72,13,72,83,68,72,0,42,74,13,8,107,68,1,74,0,14,34,0,1,72,1,0,1,73,1,0,135,74,140,0,45,72,73,14,0,15,34,0,2,73,0,0,163,215,2,0,1,72,1,0,1,75,1,0,135,74,140,0,73,72,75,15,0,16,34,0,1,75,1,0,1,72,2,0,135,74,140,0,68,75,72,16,79,74,68,0,103,72,68,1,41,72,72,8,20,74,74,72,0,17,74,0,2,74,0,0,255,255,0,0,19,74,17,74,0,18,74,0,135,74,141,0,18,0,0,0,0,19,34,0,2,72,0,0,158,215,2,0,1,75,1,0,1,73,2,0,135,74,140,0,72,75,73,19,0,20,34,0,2,73,0,0,160,215,2,0,1,75,2,0,1,72,1,0,135,74,140,0,73,75,72,20,0,21,34,0,2,72,0,0,221,214,2,0,1,75,1,0,1,73,1,0,135,74,140,0,72,75,73,21,0,22,34,0,2,73,0,0,222,214,2,0,1,75,1,0,1,72,1,0,135,74,140,0,73,75,72,22,0,24,34,0,2,72,0,0,223,214,2,0,1,75,1,0,1,73,1,0,135,74,140,0,72,75,73,24,0,25,34,0,2,73,0,0,162,215,2,0,1,75,1,0,1,72,1,0,135,74,140,0,73,75,72,25,0,26,34,0,2,72,0,0,84,176,3,0,1,75,4,0,1,73,1,0,135,74,140,0,72,75,73,26,79,74,68,0,103,73,68,1,41,73,73,8,20,74,74,73,0,27,74,0,0,28,34,0,2,73,0,0,164,215,2,0,1,75,19,0,135,74,140,0,73,75,27,28,79,74,68,0,103,75,68,1,41,75,75,8,20,74,74,75,0,29,74,0,0,30,34,0,2,75,0,0,20,145,3,0,1,73,2,0,135,74,140,0,75,73,29,30,0,31,56,0,0,32,34,0,2,73,0,0,180,160,3,0,1,75,1,0,135,74,140,0,73,75,31,32,2,74,0,0,16,180,2,0,82,33,74,0,1,74,0,0,14,35,33,74,121,35,6,0,2,74,0,0,16,180,2,0,82,36,74,0,135,74,70,0,36,0,0,0,0,37,34,0,135,38,142,0,37,0,0,0,2,74,0,0,16,180,2,0,85,74,38,0,0,39,34,0,135,74,143,0,39,0,0,0,0,40,12,0,1,74,255,0,19,74,40,74,0,41,74,0,41,74,41,1,0,42,74,0,25,43,42,49,1,74,255,0,19,74,43,74,0,44,74,0,25,46,23,5,83,46,44,0,1,74,114,0,135,47,139,0,23,74,0,0,0,34,47,0,0,48,34,0,1,74,0,0,13,49,74,48,121,49,13,0,1,75,1,0,1,73,70,0,135,74,17,0,75,73,23,0,1,73,2,0,134,74,0,0,80,21,2,0,23,73,0,0,1,1,0,0,0,66,1,0,137,71,0,0,139,66,0,0,2,74,0,0,144,180,2,0,82,50,74,0,0,51,34,0,1,73,1,0,1,75,30,0,135,74,140,0,50,73,75,51,2,74,0,0,148,180,2,0,82,52,74,0,0,53,34,0,1,75,10,0,1,73,30,0,135,74,140,0,52,75,73,53,2,74,0,0,152,180,2,0,82,54,74,0,0,55,67,0,0,57,34,0,1,73,14,0,135,74,140,0,54,73,55,57,1,74,136,20,78,58,74,0,1,74,255,0,19,74,58,74,0,59,74,0,0,60,34,0,2,73,0,0,20,108,3,0,1,75,37,0,135,74,140,0,73,75,59,60,1,74,0,0,85,69,74,0,0,61,34,0,1,75,4,0,1,73,1,0,135,74,140,0,69,75,73,61,1,74,42,20,78,62,74,0,41,74,62,24,42,74,74,24,33,63,74,0,121,63,4,0,82,64,69,0,135,74,144,0,64,0,0,0,0,65,34,0,135,74,143,0,65,0,0,0,1,73,213,20,1,75,0,0,134,74,0,0,16,21,1,0,73,75,0,0,1,1,1,0,0,66,1,0,137,71,0,0,139,66,0,0,140,3,76,0,0,0,0,0,2,71,0,0,255,0,0,0,2,72,0,0,163,32,0,0,2,73,0,0,255,255,0,0,1,69,0,0,136,74,0,0,0,70,74,0,136,74,0,0,25,74,74,32,137,74,0,0,25,68,70,12,25,3,70,2,0,34,0,0,0,45,1,0,0,56,2,0,0,4,45,0,19,74,4,73,0,5,74,0,32,6,5,22,120,6,153,0,0,7,45,0,19,74,7,73,0,8,74,0,32,9,8,30,120,9,148,0,1,75,2,0,135,74,136,0,75,68,0,0,1,75,3,0,135,74,136,0,75,3,0,0,135,74,145,0,135,74,51,0,1,74,9,0,134,11,0,0,144,142,0,0,74,0,0,0,19,74,11,71,0,12,74,0,13,13,12,71,121,13,3,0,1,69,6,0,119,0,112,0,2,74,0,0,205,214,2,0,78,15,74,0,2,74,0,0,206,214,2,0,78,16,74,0,135,17,61,0,15,16,0,0,0,66,17,0,0,18,66,0,19,74,18,71,0,19,74,0,13,20,71,19,121,20,17,0,79,74,72,0,103,75,72,1,41,75,75,8,20,74,74,75,0,21,74,0,19,74,21,73,0,22,74,0,26,24,22,1,26,25,24,15,25,26,25,2,19,74,26,71,0,27,74,0,1,75,74,0,135,74,137,0,75,27,68,0,119,0,216,255,135,28,146,0,41,74,28,24,42,74,74,24,33,29,74,0,121,29,61,0,0,30,56,0,19,74,30,71,0,31,74,0,34,32,31,10,121,32,10,0,0,33,66,0,19,74,33,71,0,35,74,0,34,36,35,10,121,36,3,0,1,44,1,0,119,0,4,0,1,69,12,0,119,0,2,0,1,69,12,0,32,74,69,12,121,74,16,0,1,69,0,0,0,37,56,0,19,74,37,71,0,38,74,0,1,74,10,0,15,39,74,38,121,39,8,0,0,40,66,0,19,74,40,71,0,41,74,0,1,74,10,0,15,42,74,41,0,44,42,0,119,0,2,0,1,44,0,0,38,74,44,1,0,43,74,0,19,74,43,71,0,46,74,0,0,67,46,0,0,47,34,0,19,74,47,71,0,48,74,0,32,49,48,1,121,49,12,0,0,50,45,0,0,51,67,0,0,52,66,0,135,53,79,0,50,51,52,0,41,74,53,24,42,74,74,24,33,54,74,0,121,54,10,0,1,69,18,0,119,0,24,0,0,55,67,0,41,74,55,24,42,74,74,24,33,57,74,0,120,57,3,0,1,69,18,0,119,0,17,0,79,74,72,0,103,75,72,1,41,75,75,8,20,74,74,75,0,58,74,0,19,74,58,73,0,59,74,0,26,60,59,1,26,61,60,15,25,62,61,2,19,74,62,71,0,63,74,0,1,75,74,0,135,74,137,0,75,63,3,0,119,0,135,255,32,74,69,6,121,74,10,0,0,14,56,0,134,74,0,0,136,143,2,0,14,0,0,0,1,23,255,255,0,65,23,0,137,70,0,0,139,65,0,0,119,0,8,0,32,74,69,18,121,74,6,0,0,64,66,0,0,23,64,0,0,65,23,0,137,70,0,0,139,65,0,0,0,10,56,0,0,23,10,0,0,65,23,0,137,70,0,0,139,65,0,0,140,1,90,0,0,0,0,0,2,82,0,0,255,0,0,0,2,83,0,0,255,255,0,0,2,84,0,0,158,215,2,0,2,85,0,0,161,32,0,0,2,86,0,0,163,32,0,0,1,80,0,0,136,87,0,0,0,81,87,0,136,87,0,0,1,88,32,2,3,87,87,88,137,87,0,0,25,23,81,16,0,12,0,0,1,56,0,0,2,87,0,0,140,180,2,0,82,79,87,0,0,34,79,0,0,2,12,0,0,3,34,0,135,4,29,0,2,3,0,0,0,45,4,0,0,5,45,0,33,6,5,0,120,6,9,0,1,88,84,0,134,87,0,0,52,222,2,0,88,0,0,0,1,1,1,0,0,77,1,0,137,81,0,0,139,77,0,0,0,7,12,0,1,87,12,0,135,8,92,0,7,87,0,0,41,87,8,24,42,87,87,24,33,9,87,0,120,9,3,0,1,80,4,0,119,0,136,0,135,87,30,0,0,10,12,0,0,11,34,0,135,13,29,0,10,11,0,0,0,45,13,0,0,14,45,0,33,15,14,0,120,15,3,0,1,80,6,0,119,0,125,0,0,16,34,0,0,17,45,0,0,18,56,0,79,87,85,0,103,88,85,1,41,88,88,8,20,87,87,88,0,19,87,0,19,87,19,83,0,20,87,0,26,21,20,1,26,22,21,4,19,87,22,82,0,24,87,0,79,87,86,0,103,88,86,1,41,88,88,8,20,87,87,88,0,25,87,0,19,87,25,83,0,26,87,0,26,27,26,1,26,28,27,2,19,87,28,82,0,29,87,0,1,87,4,0,1,88,2,0,134,30,0,0,24,121,0,0,16,17,18,87,88,24,29,0,0,56,30,0,0,31,56,0,19,88,31,83,0,32,88,0,14,33,83,32,120,33,3,0,1,80,13,0,119,0,86,0,0,35,34,0,0,36,56,0,19,88,36,83,0,37,88,0,41,88,37,1,3,38,35,88,79,88,38,0,103,87,38,1,41,87,87,8,20,88,88,87,0,39,88,0,0,67,39,0,0,40,67,0,19,88,40,83,0,41,88,0,2,88,0,0,164,215,2,0,27,87,41,19,3,42,88,87,0,78,42,0,0,43,12,0,1,88,12,0,135,87,94,0,43,88,0,0,0,44,78,0,25,46,44,10,78,47,46,0,19,87,47,82,0,48,87,0,25,49,48,50,19,87,49,82,0,50,87,0,83,46,50,0,0,51,78,0,25,52,51,10,78,53,52,0,19,87,53,82,0,54,87,0,1,87,100,0,15,55,87,54,121,55,5,0,0,57,78,0,25,58,57,10,1,87,100,0,83,58,87,0,0,59,67,0,19,87,59,83,0,60,87,0,79,87,84,0,103,88,84,1,41,88,88,8,20,87,87,88,0,61,87,0,19,87,61,83,0,62,87,0,14,63,60,62,120,63,2,0,119,0,139,255,1,88,64,0,1,89,161,0,135,87,17,0,88,89,23,0,135,87,30,0,0,64,67,0,134,87,0,0,76,29,2,0,64,23,0,0,0,65,78,0,25,66,65,7,78,68,66,0,19,87,68,82,0,69,87,0,34,70,69,100,120,70,2,0,119,0,122,255,0,71,78,0,25,72,71,7,78,73,72,0,19,87,73,82,0,74,87,0,25,75,74,1,19,87,75,82,0,76,87,0,83,72,76,0,119,0,112,255,32,87,80,4,121,87,10,0,1,89,59,0,134,87,0,0,52,222,2,0,89,0,0,0,1,1,1,0,0,77,1,0,137,81,0,0,139,77,0,0,119,0,14,0,32,87,80,6,121,87,6,0,1,1,1,0,0,77,1,0,137,81,0,0,139,77,0,0,119,0,7,0,32,87,80,13,121,87,5,0,1,1,1,0,0,77,1,0,137,81,0,0,139,77,0,0,1,87,0,0,139,87,0,0,140,1,83,0,0,0,0,0,2,75,0,0,255,255,0,0,2,76,0,0,255,0,0,0,2,77,0,0,163,32,0,0,2,78,0,0,161,32,0,0,2,79,0,0,158,215,2,0,1,73,0,0,136,80,0,0,0,74,80,0,136,80,0,0,1,81,48,2,3,80,80,81,137,80,0,0,25,23,74,32,25,72,74,16,0,12,0,0,2,80,0,0,140,180,2,0,82,2,80,0,0,34,2,0,0,3,12,0,0,4,34,0,135,5,29,0,3,4,0,0,0,45,5,0,0,6,45,0,33,7,6,0,120,7,9,0,1,81,84,0,134,80,0,0,52,222,2,0,81,0,0,0,1,1,1,0,0,70,1,0,137,74,0,0,139,70,0,0,0,8,12,0,1,80,3,0,135,9,92,0,8,80,0,0,41,80,9,24,42,80,80,24,33,10,80,0,120,10,3,0,1,73,4,0,119,0,146,0,0,11,12,0,0,13,34,0,135,14,29,0,11,13,0,0,0,45,14,0,0,15,45,0,33,16,15,0,120,16,3,0,1,73,15,0,119,0,136,0,135,80,30,0,0,17,34,0,0,18,45,0,79,80,78,0,103,81,78,1,41,81,81,8,20,80,80,81,0,19,80,0,19,80,19,75,0,20,80,0,26,21,20,1,26,22,21,4,19,80,22,76,0,24,80,0,79,80,77,0,103,81,77,1,41,81,81,8,20,80,80,81,0,25,80,0,19,80,25,75,0,26,80,0,26,27,26,1,26,28,27,2,19,80,28,76,0,29,80,0,1,80,0,0,1,81,4,0,1,82,2,0,134,30,0,0,24,121,0,0,17,18,80,81,82,24,29,0,0,56,30,0,0,31,56,0,19,82,31,75,0,32,82,0,14,33,75,32,120,33,3,0,1,73,14,0,119,0,96,0,0,35,34,0,0,36,56,0,19,82,36,75,0,37,82,0,41,82,37,1,3,38,35,82,79,82,38,0,103,81,38,1,41,81,81,8,20,82,82,81,0,39,82,0,0,67,39,0,0,40,67,0,1,82,3,0,135,41,85,0,40,82,0,0,41,82,41,24,42,82,82,24,33,42,82,0,120,42,6,0,1,81,60,0,134,82,0,0,52,222,2,0,81,0,0,0,119,0,192,255,0,43,67,0,1,81,3,0,135,82,87,0,43,81,0,0,0,44,12,0,1,81,3,0,135,82,94,0,44,81,0,0,135,46,52,0,30,82,46,3,38,82,82,255,0,47,82,0,0,71,47,0,0,48,67,0,19,82,48,75,0,49,82,0,79,82,79,0,103,81,79,1,41,81,81,8,20,82,82,81,0,50,82,0,19,82,50,75,0,51,82,0,13,52,49,51,0,53,71,0,121,52,5,0,1,82,145,0,3,54,53,82,0,71,54,0,119,0,4,0,1,82,142,0,3,55,53,82,0,71,55,0,0,57,71,0,19,82,57,75,0,58,82,0,1,81,64,0,135,82,17,0,81,58,23,0,0,59,67,0,134,82,0,0,76,29,2,0,59,23,0,0,1,82,3,0,83,72,82,0,0,60,67,0,25,61,72,1,19,82,60,76,83,61,82,0,42,81,60,8,107,61,1,81,0,62,12,0,25,63,72,3,83,63,62,0,25,64,72,13,1,81,0,0,83,64,81,0,134,65,0,0,12,186,2,0,72,0,0,0,41,81,65,24,42,81,81,24,33,66,81,0,120,66,2,0,119,0,107,255,0,68,12,0,0,69,67,0,135,81,31,0,68,69,0,0,119,0,102,255,32,81,73,4,121,81,10,0,1,82,59,0,134,81,0,0,52,222,2,0,82,0,0,0,1,1,1,0,0,70,1,0,137,74,0,0,139,70,0,0,119,0,14,0,32,81,73,14,121,81,6,0,1,1,1,0,0,70,1,0,137,74,0,0,139,70,0,0,119,0,7,0,32,81,73,15,121,81,5,0,1,1,1,0,0,70,1,0,137,74,0,0,139,70,0,0,1,81,0,0,139,81,0,0,140,1,69,0,0,0,0,0,1,63,0,0,136,65,0,0,0,64,65,0,136,65,0,0,25,65,65,48,137,65,0,0,25,23,64,12,25,45,64,10,25,56,64,8,0,60,64,0,0,12,0,0,1,66,1,0,1,67,67,0,135,65,17,0,66,67,23,0,1,67,0,0,134,65,0,0,80,21,2,0,23,67,0,0,1,67,1,0,1,66,0,0,134,65,0,0,16,135,2,0,67,66,0,0,1,66,1,0,1,67,64,0,135,65,17,0,66,67,23,0,1,67,198,20,1,66,0,0,134,65,0,0,16,21,1,0,67,66,0,0,0,61,12,0,1,65,255,0,19,65,61,65,0,62,65,0,41,65,62,1,0,2,65,0,25,3,2,48,1,65,255,0,19,65,3,65,0,4,65,0,25,5,23,5,83,5,4,0,1,65,119,0,135,6,139,0,23,65,0,0,0,34,6,0,0,7,34,0,1,65,0,0,13,8,65,7,121,8,13,0,1,66,1,0,1,67,69,0,135,65,17,0,66,67,23,0,1,67,2,0,134,65,0,0,80,21,2,0,23,67,0,0,1,1,0,0,0,59,1,0,137,64,0,0,139,59,0,0,1,65,147,255,83,45,65,0,135,9,73,0,2,65,0,0,255,255,0,0,19,65,9,65,0,10,65,0,1,65,255,0,19,65,10,65,83,56,65,0,42,67,10,8,107,56,1,67,0,11,34,0,1,65,1,0,1,66,1,0,135,67,147,0,45,65,66,11,0,13,34,0,2,66,0,0,163,215,2,0,1,65,1,0,1,68,1,0,135,67,147,0,66,65,68,13,0,14,34,0,1,68,1,0,1,65,2,0,135,67,147,0,56,68,65,14,0,15,34,0,2,65,0,0,158,215,2,0,1,68,1,0,1,66,2,0,135,67,147,0,65,68,66,15,0,16,34,0,2,66,0,0,160,215,2,0,1,68,2,0,1,65,1,0,135,67,147,0,66,68,65,16,0,17,34,0,2,65,0,0,221,214,2,0,1,68,1,0,1,66,1,0,135,67,147,0,65,68,66,17,0,18,34,0,2,66,0,0,222,214,2,0,1,68,1,0,1,65,1,0,135,67,147,0,66,68,65,18,0,19,34,0,2,65,0,0,223,214,2,0,1,68,1,0,1,66,1,0,135,67,147,0,65,68,66,19,0,20,34,0,2,66,0,0,162,215,2,0,1,68,1,0,1,65,1,0,135,67,147,0,66,68,65,20,0,21,34,0,2,65,0,0,84,176,3,0,1,68,4,0,1,66,1,0,135,67,147,0,65,68,66,21,79,67,56,0,103,66,56,1,41,66,66,8,20,67,67,66,0,22,67,0,0,24,34,0,2,66,0,0,164,215,2,0,1,68,19,0,135,67,147,0,66,68,22,24,79,67,56,0,103,68,56,1,41,68,68,8,20,67,67,68,0,25,67,0,0,26,34,0,2,68,0,0,20,145,3,0,1,66,2,0,135,67,147,0,68,66,25,26,0,27,34,0,2,66,0,0,180,160,3,0,1,68,1,0,1,65,208,7,135,67,147,0,66,68,65,27,2,67,0,0,16,180,2,0,82,28,67,0,1,67,0,0,14,29,28,67,121,29,13,0,2,67,0,0,16,180,2,0,82,30,67,0,2,67,0,0,16,180,2,0,82,31,67,0,135,32,4,0,31,0,0,0,0,33,34,0,1,65,1,0,135,67,147,0,30,32,65,33,0,35,34,0,135,67,143,0,35,0,0,0,0,36,12,0,1,67,255,0,19,67,36,67,0,37,67,0,41,67,37,1,0,38,67,0,25,39,38,49,1,67,255,0,19,67,39,67,0,40,67,0,25,41,23,5,83,41,40,0,1,67,119,0,135,42,139,0,23,67,0,0,0,34,42,0,0,43,34,0,1,67,0,0,13,44,67,43,121,44,14,0,1,65,1,0,1,68,69,0,135,67,17,0,65,68,23,0,1,68,2,0,134,67,0,0,80,21,2,0,23,68,0,0,1,1,0,0,0,59,1,0,137,64,0,0,139,59,0,0,119,0,50,0,2,67,0,0,144,180,2,0,82,46,67,0,0,47,34,0,1,68,1,0,1,65,30,0,135,67,147,0,46,68,65,47,2,67,0,0,148,180,2,0,82,48,67,0,0,49,34,0,1,65,10,0,1,68,30,0,135,67,147,0,48,65,68,49,2,67,0,0,152,180,2,0,82,50,67,0,0,51,34,0,1,68,14,0,1,65,200,0,135,67,147,0,50,68,65,51,1,67,136,20,78,52,67,0,1,67,255,0,19,67,52,67,0,53,67,0,0,54,34,0,2,65,0,0,20,108,3,0,1,68,37,0,135,67,147,0,65,68,53,54,135,55,148,0,85,60,55,0,0,57,34,0,1,68,4,0,1,65,1,0,135,67,147,0,60,68,65,57,0,58,34,0,135,67,143,0,58,0,0,0,1,1,1,0,0,59,1,0,137,64,0,0,139,59,0,0,1,67,0,0,139,67,0,0,140,2,82,0,0,0,0,0,2,74,0,0,255,0,0,0,2,75,0,0,90,24,0,0,2,76,0,0,78,21,0,0,2,77,0,0,67,21,0,0,1,72,0,0,136,78,0,0,0,73,78,0,136,78,0,0,25,78,78,32,137,78,0,0,25,71,73,24,25,2,73,22,25,3,73,20,0,23,0,0,0,34,1,0,2,78,0,0,24,180,2,0,82,4,78,0,1,78,66,0,1,79,1,0,135,5,21,0,78,79,4,0,0,45,5,0,1,79,86,21,135,6,0,0,79,0,0,0,33,7,6,0,121,7,85,0,1,56,86,21,0,8,56,0,1,79,0,0,14,9,8,79,120,9,2,0,119,0,79,0,135,10,1,0,0,67,10,0,0,11,67,0,1,79,0,0,14,13,11,79,120,13,2,0,119,0,63,0,0,14,67,0,82,15,14,0,25,16,15,8,82,17,16,0,0,70,17,0,0,18,70,0,1,79,0,0,14,19,18,79,120,19,2,0,119,0,48,0,0,20,34,0,19,79,20,74,83,71,79,0,42,78,20,8,107,71,1,78,0,21,23,0,19,78,21,74,83,2,78,0,42,79,21,8,107,2,1,79,1,79,0,0,83,3,79,0,0,22,70,0,1,78,1,0,1,80,0,0,1,81,0,0,135,79,2,0,22,75,78,71,80,81,0,0,0,24,70,0,1,81,1,0,1,80,0,0,1,78,0,0,135,79,2,0,24,77,81,2,80,78,0,0,0,25,70,0,1,78,0,0,1,80,0,0,1,81,0,0,135,79,2,0,25,76,78,3,80,81,0,0,0,26,56,0,0,27,67,0,134,28,0,0,16,21,1,0,26,27,0,0,32,29,28,0,121,29,6,0,78,30,3,0,19,79,30,74,0,31,79,0,32,32,31,0,120,32,10,0,1,70,0,0,119,0,205,255,0,35,67,0,135,79,3,0,35,0,0,0,1,67,0,0,119,0,190,255,1,56,0,0,119,0,181,255,0,33,67,0,135,79,3,0,33,0,0,0,1,12,0,0,0,69,12,0,137,73,0,0,139,69,0,0,0,36,45,0,0,37,23,0,2,79,0,0,255,255,0,0,19,79,37,79,0,38,79,0,27,79,38,66,3,39,36,79,25,40,39,62,78,41,40,0,19,79,41,74,0,42,79,0,0,43,34,0,2,79,0,0,255,255,0,0,19,79,43,79,0,44,79,0,2,79,0,0,164,215,2,0,27,81,44,19,3,46,79,81,25,47,46,5,78,48,47,0,19,81,48,74,0,49,81,0,4,50,49,42,19,81,50,74,0,51,81,0,83,47,51,0,0,52,45,0,0,53,23,0,2,81,0,0,255,255,0,0,19,81,53,81,0,54,81,0,27,81,54,66,3,55,52,81,25,57,55,63,78,58,57,0,19,81,58,74,0,59,81,0,0,60,34,0,2,81,0,0,255,255,0,0,19,81,60,81,0,61,81,0,2,81,0,0,164,215,2,0,27,79,61,19,3,62,81,79,25,63,62,6,78,64,63,0,19,79,64,74,0,65,79,0,4,66,65,59,19,79,66,74,0,68,79,0,83,63,68,0,1,12,1,0,0,69,12,0,137,73,0,0,139,69,0,0,140,1,91,0,0,0,0,0,2,87,0,0,255,255,0,0,1,85,0,0,136,88,0,0,0,86,88,0,136,88,0,0,1,89,32,4,3,88,88,89,137,88,0,0,25,56,86,24,0,1,0,0,2,88,0,0,140,180,2,0,82,84,88,0,0,12,84,0,0,2,1,0,0,3,12,0,135,4,74,0,2,3,0,0,1,88,255,0,19,88,4,88,0,5,88,0,0,23,5,0,0,6,23,0,33,7,6,0,120,7,5,0,1,89,88,0,134,88,0,0,52,222,2,0,89,0,0,0,0,8,12,0,0,9,23,0,1,88,161,32,79,88,88,0,1,89,161,32,103,89,89,1,41,89,89,8,20,88,88,89,0,10,88,0,19,88,10,87,0,11,88,0,26,13,11,1,26,14,13,4,1,88,255,0,19,88,14,88,0,15,88,0,1,88,163,32,79,88,88,0,1,89,163,32,103,89,89,1,41,89,89,8,20,88,88,89,0,16,88,0,19,88,16,87,0,17,88,0,26,18,17,1,26,19,18,2,1,88,255,0,19,88,19,88,0,20,88,0,1,88,0,0,1,89,4,0,1,90,2,0,134,21,0,0,24,121,0,0,8,9,88,89,90,15,20,0,0,34,21,0,0,22,34,0,19,90,22,87,0,24,90,0,14,25,87,24,120,25,4,0,137,86,0,0,1,90,1,0,139,90,0,0,0,26,12,0,0,27,34,0,19,90,27,87,0,28,90,0,41,90,28,1,3,29,26,90,79,90,29,0,103,89,29,1,41,89,89,8,20,90,90,89,0,30,90,0,19,90,30,87,0,31,90,0,2,90,0,0,164,215,2,0,27,89,31,19,3,32,90,89,25,33,32,14,0,45,33,0,0,35,45,0,79,89,35,0,103,90,35,1,41,90,90,8,20,89,89,90,0,36,89,0,41,89,36,16,42,89,89,16,33,37,89,0,121,37,24,0,0,38,1,0,0,39,45,0,79,89,39,0,103,90,39,1,41,90,90,8,20,89,89,90,0,40,89,0,19,89,40,87,0,41,89,0], eb + 143360);
  HEAPU8.set([26,42,41,1,19,89,42,87,0,43,89,0,135,44,108,0,38,43,0,0,0,67,44,0,0,46,67,0,19,89,46,87,0,47,89,0,26,48,47,1,19,89,48,87,0,49,89,0,135,89,109,0,49,0,0,0,0,50,45,0,25,51,50,2,79,89,51,0,103,90,51,1,41,90,90,8,20,89,89,90,0,52,89,0,41,89,52,16,42,89,89,16,33,53,89,0,121,53,25,0,0,54,1,0,0,55,45,0,25,57,55,2,79,89,57,0,103,90,57,1,41,90,90,8,20,89,89,90,0,58,89,0,19,89,58,87,0,59,89,0,26,60,59,1,19,89,60,87,0,61,89,0,135,62,108,0,54,61,0,0,0,78,62,0,0,63,78,0,19,89,63,87,0,64,89,0,26,65,64,1,19,89,65,87,0,66,89,0,135,89,109,0,66,0,0,0,135,68,52,0,30,89,68,3,38,89,89,255,0,69,89,0,25,70,69,125,19,89,70,87,0,71,89,0,1,90,64,0,135,89,17,0,90,71,56,0,135,89,30,0,0,72,12,0,0,73,34,0,19,89,73,87,0,74,89,0,41,89,74,1,3,75,72,89,79,89,75,0,103,90,75,1,41,90,90,8,20,89,89,90,0,76,89,0,134,89,0,0,76,29,2,0,76,56,0,0,0,77,1,0,0,79,12,0,0,80,34,0,19,89,80,87,0,81,89,0,41,89,81,1,3,82,79,89,79,89,82,0,103,90,82,1,41,90,90,8,20,89,89,90,0,83,89,0,135,89,31,0,77,83,0,0,137,86,0,0,1,89,1,0,139,89,0,0,140,3,78,0,0,0,0,0,2,75,0,0,255,0,0,0,1,73,0,0,136,76,0,0,0,74,76,0,136,76,0,0,25,76,76,48,137,76,0,0,25,3,74,8,25,71,74,24,25,72,74,16,0,24,0,0,0,35,1,0,0,46,2,0,0,4,24,0,83,71,4,0,0,5,46,0,2,76,0,0,255,255,0,0,19,76,5,76,0,6,76,0,25,7,71,1,1,77,10,0,135,76,59,0,6,7,77,0,0,8,35,0,19,76,8,75,0,9,76,0,2,76,0,0,17,215,2,0,27,77,9,7,3,10,76,77,78,11,10,0,19,77,11,75,0,12,77,0,2,77,0,0,207,214,2,0,78,13,77,0,19,77,13,75,0,14,77,0,4,15,12,14,41,77,15,4,0,16,77,0,25,17,16,0,2,77,0,0,255,255,0,0,19,77,17,77,0,18,77,0,0,57,18,0,0,19,35,0,19,77,19,75,0,20,77,0,2,77,0,0,17,215,2,0,27,76,20,7,3,21,77,76,25,22,21,1,78,23,22,0,19,76,23,75,0,25,76,0,2,76,0,0,208,214,2,0,78,26,76,0,19,76,26,75,0,27,76,0,4,28,25,27,41,76,28,4,0,29,76,0,25,30,29,0,2,76,0,0,255,255,0,0,19,76,30,76,0,31,76,0,0,68,31,0,1,76,0,0,19,76,76,75,83,72,76,0,1,77,0,0,42,77,77,8,107,72,1,77,25,32,72,2,1,77,0,0,19,77,77,75,83,32,77,0,1,76,0,0,42,76,76,8,107,32,1,76,25,33,72,4,1,76,161,32,79,76,76,0,1,77,161,32,103,77,77,1,41,77,77,8,20,76,76,77,0,34,76,0,19,76,34,75,83,33,76,0,42,77,34,8,107,33,1,77,25,36,72,6,1,77,163,32,79,77,77,0,1,76,163,32,103,76,76,1,41,76,76,8,20,77,77,76,0,37,77,0,19,77,37,75,83,36,77,0,42,76,37,8,107,36,1,76,0,38,57,0,0,39,68,0,80,76,72,0,84,3,76,0,104,77,72,2,108,3,2,77,104,76,72,4,108,3,4,76,104,77,72,6,108,3,6,77,135,40,25,0,38,39,3,0,41,77,40,24,42,77,77,24,33,41,77,0,121,41,7,0,0,69,57,0,0,70,68,0,135,77,7,0,69,70,71,0,137,74,0,0,139,0,0,0,0,42,35,0,134,77,0,0,136,143,2,0,42,0,0,0,0,43,35,0,19,77,43,75,0,44,77,0,2,77,0,0,17,215,2,0,27,76,44,7,3,45,77,76,78,47,45,0,19,76,47,75,0,48,76,0,2,76,0,0,207,214,2,0,78,49,76,0,19,76,49,75,0,50,76,0,4,51,48,50,41,76,51,4,0,52,76,0,25,53,52,0,2,76,0,0,255,255,0,0,19,76,53,76,0,54,76,0,0,57,54,0,0,55,35,0,19,76,55,75,0,56,76,0,2,76,0,0,17,215,2,0,27,77,56,7,3,58,76,77,25,59,58,1,78,60,59,0,19,77,60,75,0,61,77,0,2,77,0,0,208,214,2,0,78,62,77,0,19,77,62,75,0,63,77,0,4,64,61,63,41,77,64,4,0,65,77,0,25,66,65,0,2,77,0,0,255,255,0,0,19,77,66,77,0,67,77,0,0,68,67,0,0,69,57,0,0,70,68,0,135,77,7,0,69,70,71,0,137,74,0,0,139,0,0,0,140,4,85,0,0,0,0,0,2,81,0,0,255,255,0,0,2,82,0,0,255,0,0,0,1,79,0,0,136,83,0,0,0,80,83,0,136,83,0,0,25,83,83,32,137,83,0,0,0,45,0,0,0,56,1,0,0,67,2,0,0,77,3,0,0,8,67,0,0,9,77,0,1,84,1,0,134,83,0,0,16,201,1,0,84,8,9,0,1,78,0,0,0,10,78,0,19,83,10,82,0,11,83,0,34,12,11,20,120,12,3,0,1,79,14,0,119,0,106,0,0,13,78,0,19,83,13,82,0,14,83,0,2,83,0,0,17,215,2,0,27,84,14,7,3,15,83,84,0,4,15,0,0,16,4,0,25,17,16,6,78,18,17,0,19,84,18,82,0,19,84,0,32,20,19,8,120,20,83,0,0,21,4,0,78,22,21,0,0,23,4,0,25,24,23,1,78,25,24,0,135,26,78,0,22,25,0,0,41,84,26,24,42,84,84,24,33,27,84,0,121,27,72,0,0,28,78,0,19,84,28,82,0,29,84,0,1,84,10,0,17,30,84,29,121,30,3,0,1,5,1,0,119,0,2,0,1,5,0,0,0,31,67,0,0,32,5,0,0,33,78,0,135,35,79,0,31,32,33,0,41,84,35,24,42,84,84,24,33,36,84,0,121,36,54,0,0,37,67,0,19,84,37,81,0,38,84,0,32,39,38,17,120,39,8,0,0,40,67,0,19,84,40,81,0,41,84,0,32,42,41,29,120,42,3,0,1,79,12,0,119,0,50,0,0,43,78,0,19,84,43,82,0,44,84,0,2,84,0,0,232,214,2,0,41,83,44,1,3,46,84,83,79,83,46,0,103,84,46,1,41,84,84,8,20,83,83,84,0,47,83,0,19,83,47,81,0,48,83,0,26,49,48,1,19,83,49,81,0,50,83,0,0,7,50,0,0,51,7,0,134,52,0,0,240,136,2,0,51,0,0,0,19,83,52,81,0,53,83,0,42,83,53,1,0,54,83,0,19,83,54,81,0,55,83,0,0,6,55,0,0,57,6,0,19,83,57,81,0,58,83,0,42,83,58,1,0,59,83,0,0,60,6,0,19,83,60,81,0,61,83,0,3,62,61,59,19,83,62,81,0,63,83,0,0,6,63,0,0,72,78,0,19,83,72,82,0,73,83,0,25,74,73,1,19,83,74,82,0,75,83,0,0,78,75,0,119,0,145,255,32,83,79,12,121,83,20,0,0,64,45,0,1,83,1,0,83,64,83,0,0,65,78,0,0,66,45,0,25,68,66,4,83,68,65,0,0,69,67,0,0,70,45,0,25,71,70,1,19,83,69,82,83,71,83,0,42,84,69,8,107,71,1,84,1,34,1,0,0,76,34,0,137,80,0,0,139,76,0,0,119,0,7,0,32,84,79,14,121,84,5,0,1,34,0,0,0,76,34,0,137,80,0,0,139,76,0,0,1,84,0,0,139,84,0,0,140,0,87,0,0,0,0,0,2,81,0,0,255,0,0,0,2,82,0,0,164,215,2,0,2,83,0,0,255,255,0,0,1,79,0,0,136,84,0,0,0,80,84,0,136,84,0,0,25,84,84,32,137,84,0,0,2,84,0,0,140,180,2,0,82,77,84,0,0,34,77,0,1,0,0,0,0,78,0,0,19,84,78,81,0,2,84,0,34,3,2,20,120,3,2,0,119,0,140,0,0,4,0,0,19,84,4,81,0,5,84,0,2,84,0,0,17,215,2,0,27,85,5,7,3,6,84,85,0,56,6,0,0,7,56,0,25,8,7,6,78,9,8,0,19,85,9,81,0,10,85,0,32,11,10,8,120,11,117,0,0,13,0,0,135,14,120,0,13,0,0,0,0,67,14,0,0,15,67,0,19,85,15,83,0,16,85,0,27,85,16,19,3,17,82,85,0,45,17,0,0,18,56,0,78,19,18,0,0,12,19,0,0,20,56,0,25,21,20,1,78,22,21,0,0,23,22,0,135,24,52,0,30,85,24,3,38,85,85,255,0,25,85,0,19,85,25,81,0,26,85,0,0,1,26,0,0,27,45,0,25,28,27,9,78,29,28,0,19,85,29,81,0,30,85,0,1,85,99,0,15,31,85,30,121,31,38,0,0,32,0,0,134,85,0,0,136,143,2,0,32,0,0,0,0,33,45,0,25,35,33,9,78,36,35,0,19,85,36,81,0,37,85,0,26,38,37,100,19,85,38,81,0,39,85,0,83,35,39,0,0,40,45,0,135,85,89,0,40,0,0,0,0,41,12,0,0,42,23,0,1,84,0,0,1,86,5,0,134,85,0,0,88,141,2,0,84,86,41,42,0,43,1,0,19,85,43,81,0,44,85,0,25,46,44,39,19,85,46,81,0,47,85,0,0,48,34,0,135,85,136,0,47,48,0,0,0,49,67,0,0,50,34,0,134,85,0,0,76,29,2,0,49,50,0,0,0,51,56,0,25,52,51,2,78,53,52,0,41,85,53,24,42,85,85,24,33,54,85,0,121,54,12,0,0,55,45,0,25,57,55,12,79,85,57,0,103,86,57,1,41,86,86,8,20,85,85,86,0,58,85,0,41,85,58,16,42,85,85,16,33,59,85,0,120,59,30,0,0,60,0,0,134,85,0,0,136,143,2,0,60,0,0,0,0,61,56,0,25,62,61,6,1,85,8,0,83,62,85,0,0,63,12,0,0,64,23,0,1,86,6,0,1,84,11,0,134,85,0,0,88,141,2,0,86,84,63,64,0,65,1,0,19,85,65,81,0,66,85,0,25,68,66,42,19,85,68,81,0,69,85,0,0,70,34,0,135,85,136,0,69,70,0,0,0,71,67,0,0,72,34,0,134,85,0,0,76,29,2,0,71,72,0,0,0,73,0,0,19,85,73,81,0,74,85,0,25,75,74,1,19,85,75,81,0,76,85,0,0,0,76,0,119,0,112,255,137,80,0,0,139,0,0,0,140,0,77,0,0,0,0,0,2,71,0,0,255,0,0,0,2,72,0,0,255,255,0,0,1,69,0,0,136,73,0,0,0,70,73,0,136,73,0,0,25,73,73,48,137,73,0,0,25,2,70,31,0,24,70,0,2,73,0,0,219,214,2,0,78,35,73,0,19,73,35,71,0,46,73,0,25,57,46,1,19,73,57,71,0,66,73,0,2,73,0,0,219,214,2,0,83,73,66,0,2,73,0,0,201,214,2,0,1,74,0,0,19,74,74,71,83,73,74,0,2,74,0,0,201,214,2,0,1,73,0,0,42,73,73,8,107,74,1,73,2,73,0,0,219,214,2,0,78,67,73,0,19,73,67,71,0,68,73,0,1,73,30,0,15,3,73,68,121,3,16,0,2,73,0,0,224,214,2,0,78,4,73,0,19,73,4,71,0,5,73,0,32,6,5,1,1,73,2,0,1,74,1,0,125,0,6,73,74,0,0,0,2,74,0,0,217,214,2,0,83,74,0,0,137,70,0,0,139,0,0,0,1,1,0,0,0,7,1,0,19,74,7,71,0,8,74,0,34,9,8,20,120,9,2,0,119,0,19,0,0,10,1,0,19,74,10,71,0,11,74,0,2,74,0,0,17,215,2,0,27,73,11,7,3,12,74,73,25,14,12,5,1,73,0,0,83,14,73,0,0,15,1,0,19,73,15,71,0,16,73,0,25,17,16,1,19,73,17,71,0,18,73,0,0,1,18,0,119,0,233,255,134,73,0,0,92,182,2,0,1,73,161,32,79,73,73,0,1,74,161,32,103,74,74,1,41,74,74,8,20,73,73,74,0,19,73,0,19,73,19,72,0,20,73,0,1,73,130,0,4,21,20,73,28,73,21,2,38,73,73,255,0,22,73,0,25,23,22,46,19,73,23,72,0,25,73,0,1,73,163,32,79,73,73,0,1,74,163,32,103,74,74,1,41,74,74,8,20,73,73,74,0,26,73,0,19,73,26,72,0,27,73,0,26,28,27,64,28,73,28,2,38,73,73,255,0,29,73,0,25,30,29,18,19,73,30,72,0,31,73,0,1,74,33,0,1,75,1,0,1,76,1,0,135,73,18,0,74,75,25,31,76,0,0,0,2,73,0,0,219,214,2,0,78,32,73,0,19,73,32,71,0,33,73,0,1,76,10,0,135,73,59,0,33,2,76,0,135,34,4,0,2,0,0,0,26,36,34,1,27,37,36,6,29,73,37,2,38,73,73,255,0,38,73,0,1,73,64,0,4,39,73,38,19,73,39,71,0,40,73,0,0,13,40,0,1,73,161,32,79,73,73,0,1,76,161,32,103,76,76,1,41,76,76,8,20,73,73,76,0,41,73,0,19,73,41,72,0,42,73,0,1,73,130,0,4,43,42,73,28,73,43,2,38,73,73,255,0,44,73,0,0,45,13,0,19,73,45,71,0,47,73,0,3,48,44,47,19,73,48,72,0,49,73,0,1,73,163,32,79,73,73,0,1,76,163,32,103,76,76,1,41,76,76,8,20,73,73,76,0,50,73,0,19,73,50,72,0,51,73,0,26,52,51,64,28,73,52,2,38,73,73,255,0,53,73,0,25,54,53,22,19,73,54,72,0,55,73,0,135,73,7,0,49,55,2,0,1,76,50,0,1,75,0,0,134,73,0,0,16,135,2,0,76,75,0,0,2,73,0,0,230,214,2,0,79,73,73,0,2,75,0,0,230,214,2,0,103,75,75,1,41,75,75,8,20,73,73,75,0,56,73,0,19,73,56,72,0,58,73,0,32,59,58,0,121,59,6,0,2,73,0,0,217,214,2,0,1,75,1,0,83,73,75,0,1,1,38,0,2,75,0,0,228,214,2,0,79,75,75,0,2,73,0,0,228,214,2,0,103,73,73,1,41,73,73,8,20,75,75,73,0,60,75,0,19,75,60,72,0,61,75,0,32,62,61,0,121,62,6,0,2,75,0,0,217,214,2,0,1,73,2,0,83,75,73,0,1,1,37,0,2,73,0,0,217,214,2,0,78,63,73,0,41,73,63,24,42,73,73,24,33,64,73,0,121,64,8,0,0,65,1,0,135,73,136,0,65,24,0,0,1,75,1,0,134,73,0,0,80,21,2,0,24,75,0,0,134,73,0,0,160,129,1,0,137,70,0,0,139,0,0,0,140,1,71,0,0,0,0,0,2,63,0,0,255,0,0,0,2,64,0,0,255,255,0,0,1,61,0,0,136,65,0,0,0,62,65,0,136,65,0,0,25,65,65,64,137,65,0,0,25,23,62,32,25,45,62,18,25,56,62,16,25,59,62,14,25,2,62,8,25,3,62,6,25,4,62,4,0,1,0,0,1,65,132,20,78,65,65,0,83,2,65,0,1,66,132,20,102,66,66,1,107,2,1,66,1,65,132,20,102,65,65,2,107,2,2,65,1,66,132,20,102,66,66,3,107,2,3,66,1,65,46,0,1,67,1,0,1,68,0,0,1,69,0,0,1,70,1,0,135,66,18,0,65,67,68,69,70,0,0,0,2,66,0,0,163,215,2,0,78,5,66,0,0,34,5,0,1,12,0,0,0,6,12,0,19,66,6,63,0,7,66,0,0,8,1,0,19,66,8,63,0,9,66,0,15,10,7,9,120,10,2,0,119,0,133,0,1,70,1,0,1,69,64,0,135,66,17,0,70,69,23,0,0,11,12,0,19,66,11,63,0,13,66,0,41,66,13,1,0,14,66,0,25,15,14,48,19,66,15,63,0,16,66,0,25,17,23,5,83,17,16,0,1,66,114,0,135,18,139,0,23,66,0,0,0,58,18,0,0,19,58,0,1,66,0,0,13,20,66,19,121,20,6,0,1,69,1,0,1,70,66,0,135,66,17,0,69,70,23,0,119,0,75,0,0,21,58,0,1,70,1,0,1,69,1,0,135,66,140,0,3,70,69,21,0,22,58,0,2,69,0,0,163,215,2,0,1,70,1,0,1,68,1,0,135,66,140,0,69,70,68,22,0,24,58,0,1,68,1,0,1,70,2,0,135,66,140,0,4,68,70,24,0,25,58,0,1,70,1,0,1,68,2,0,135,66,140,0,59,70,68,25,0,26,58,0,1,68,1,0,1,70,2,0,135,66,140,0,56,68,70,26,0,27,58,0,135,66,143,0,27,0,0,0,1,70,1,0,1,68,65,0,135,66,17,0,70,68,23,0,79,66,59,0,103,68,59,1,41,68,68,8,20,66,66,68,0,28,66,0,134,66,0,0,116,120,2,0,28,45,0,0,135,29,4,0,45,0,0,0,19,66,29,63,0,30,66,0,0,60,30,0,0,31,60,0,19,66,31,63,0,32,66,0,135,66,127,0,23,45,32,0,79,66,56,0,103,68,56,1,41,68,68,8,20,66,66,68,0,33,66,0,19,66,33,64,0,35,66,0,1,68,10,0,135,66,59,0,35,45,68,0,135,36,4,0,45,0,0,0,25,37,36,1,19,66,37,63,0,38,66,0,0,60,38,0,25,39,23,10,0,40,60,0,19,66,40,63,0,41,66,0,135,66,127,0,39,45,41,0,79,66,2,0,103,68,2,1,41,68,68,8,20,66,66,68,0,42,66,0,25,43,2,2,79,66,43,0,103,68,43,1,41,68,68,8,20,66,66,68,0,44,66,0,41,66,44,16,42,66,66,16,0,46,66,0,0,47,12,0,19,66,47,63,0,48,66,0,27,49,48,14,3,50,46,49,19,66,50,64,0,51,66,0,135,66,7,0,42,51,23,0,0,52,12,0,19,66,52,63,0,53,66,0,25,54,53,1,19,66,54,63,0,55,66,0,0,12,55,0,119,0,116,255,0,57,34,0,2,66,0,0,163,215,2,0,83,66,57,0,137,62,0,0,139,0,0,0,140,1,89,0,0,0,0,0,2,83,0,0,255,0,0,0,2,84,0,0,128,0,0,0,2,85,0,0,237,15,0,0,2,86,0,0,17,215,2,0,1,81,0,0,136,87,0,0,0,82,87,0,136,87,0,0,25,87,87,32,137,87,0,0,0,1,0,0,1,12,0,0,1,23,0,0,0,75,12,0,1,87,3,0,16,76,87,75,120,76,120,0,0,2,1,0,19,87,2,83,0,3,87,0,27,87,3,7,3,4,86,87,78,5,4,0,19,87,5,83,0,6,87,0,0,56,6,0,0,7,1,0,19,87,7,83,0,8,87,0,27,87,8,7,3,9,86,87,25,10,9,1,78,11,10,0,19,87,11,83,0,13,87,0,0,67,13,0,0,14,12,0,41,87,14,1,0,15,87,0,3,16,85,15,78,17,16,0,19,87,17,83,0,18,87,0,0,34,18,0,0,19,12,0,41,87,19,1,0,20,87,0,25,21,20,1,3,22,85,21,78,24,22,0,19,87,24,83,0,25,87,0,0,45,25,0,0,26,12,0,25,27,26,1,0,12,27,0,0,28,56,0,32,29,28,0,0,30,34,0,16,31,84,30,19,87,29,31,0,77,87,0,120,77,207,255,0,32,67,0,32,33,32,0,0,35,45,0,16,36,84,35,19,87,33,36,0,78,87,0,120,78,200,255,0,37,34,0,0,38,56,0,3,39,38,37,0,56,39,0,0,40,45,0,0,41,67,0,3,42,41,40,0,67,42,0,0,43,56,0,19,87,43,83,0,44,87,0,0,46,67,0,19,87,46,83,0,47,87,0,135,48,61,0,44,47,0,0,19,87,48,83,0,49,87,0,0,34,49,0,0,50,34,0,13,51,50,83,120,51,178,255,0,52,1,0,19,87,52,83,0,53,87,0,34,54,53,10,0,55,34,0,35,57,55,10,19,87,54,57,0,79,87,0,120,79,169,255,0,58,1,0,19,87,58,83,0,59,87,0,1,87,10,0,15,60,87,59,0,61,34,0,1,87,10,0,16,62,87,61,19,87,60,62,0,80,87,0,120,80,158,255,0,63,34,0,19,87,63,83,0,64,87,0,1,88,2,0,134,87,0,0,148,202,2,0,64,88,0,0,0,65,34,0,19,87,65,83,0,66,87,0,1,88,0,0,134,87,0,0,112,32,1,0,88,66,0,0,0,68,1,0,134,69,0,0,228,191,1,0,68,0,0,0,19,87,69,83,0,70,87,0,0,71,23,0,3,72,71,70,0,23,72,0,119,0,134,255,0,73,23,0,43,87,73,1,0,74,87,0,137,82,0,0,139,74,0,0,140,0,62,0,0,0,0,0,2,57,0,0,94,166,2,0,1,55,0,0,136,58,0,0,0,56,58,0,136,58,0,0,25,58,58,16,137,58,0,0,25,1,56,14,2,58,0,0,78,166,2,0,135,45,0,0,58,0,0,0,33,51,45,0,121,51,60,0,2,12,0,0,78,166,2,0,0,52,12,0,1,58,0,0,14,53,52,58,120,53,2,0,119,0,53,0,135,54,1,0,0,23,54,0,0,2,23,0,1,58,0,0,14,3,2,58,120,3,2,0,119,0,32,0,0,4,23,0,82,5,4,0,25,6,5,8,82,7,6,0,0,34,7,0,0,8,34,0,1,58,0,0,14,9,8,58,120,9,2,0,119,0,17,0,0,10,34,0,1,59,1,0,1,60,0,0,1,61,0,0,135,58,2,0,10,57,59,1,60,61,0,0,0,11,12,0,0,13,23,0,134,14,0,0,16,21,1,0,11,13,0,0,32,15,14,0,120,15,10,0,1,34,0,0,119,0,236,255,0,18,23,0,135,58,3,0,18,0,0,0,1,23,0,0,119,0,221,255,1,12,0,0,119,0,212,255,0,16,23,0,135,58,3,0,16,0,0,0,79,58,1,0,103,61,1,1,41,61,61,8,20,58,58,61,0,17,58,0,0,0,17,0,0,50,0,0,137,56,0,0,139,50,0,0,2,58,0,0,72,180,2,0,80,19,58,0,2,58,0,0,255,255,0,0,19,58,19,58,76,58,58,0,58,20,58,0,2,58,0,0,98,180,2,0,80,21,58,0,2,58,0,0,255,255,0,0,19,58,21,58,0,22,58,0,76,58,22,0,58,24,58,0,66,25,20,24,2,58,0,0,68,180,2,0,82,26,58,0,79,58,26,0,103,61,26,1,41,61,61,8,20,58,58,61,0,27,58,0,2,58,0,0,255,255,0,0,19,58,27,58,0,28,58,0,42,58,28,3,0,29,58,0,76,58,29,0,58,30,58,0,65,31,25,30,75,58,31,0,2,61,0,0,255,255,0,0,19,58,58,61,0,32,58,0,1,58,255,0,19,58,32,58,83,1,58,0,42,61,32,8,107,1,1,61,2,61,0,0,63,180,2,0,78,33,61,0,1,61,255,0,19,61,33,61,0,35,61,0,1,61,8,8,27,58,35,24,3,36,61,58,2,58,0,0,87,180,2,0,78,37,58,0,1,58,255,0,19,58,37,58,0,38,58,0,41,58,38,2,3,39,36,58,88,40,39,0,79,58,1,0,103,61,1,1,41,61,61,8,20,58,58,61,0,41,58,0,2,58,0,0,255,255,0,0,19,58,41,58,76,58,58,0,58,42,58,0,65,43,42,40,75,58,43,0,2,61,0,0,255,255,0,0,19,58,58,61,0,44,58,0,1,58,255,0,19,58,44,58,83,1,58,0,42,61,44,8,107,1,1,61,79,61,1,0,103,58,1,1,41,58,58,8,20,61,61,58,0,46,61,0,2,61,0,0,255,255,0,0,19,61,46,61,0,47,61,0,25,48,47,10,2,61,0,0,255,255,0,0,19,61,48,61,0,49,61,0,0,0,49,0,0,50,0,0,137,56,0,0,139,50,0,0,140,1,69,0,0,0,0,0,2,64,0,0,255,0,0,0,2,65,0,0,255,255,0,0,2,66,0,0,17,215,2,0,1,62,0,0,136,67,0,0,0,63,67,0,136,67,0,0,1,68,32,4,3,67,67,68,137,67,0,0,1,67,24,4,3,59,63,67,25,60,63,24,0,1,0,0,1,23,0,0,1,56,0,0,1,34,1,0,0,61,1,0,25,2,61,3,78,3,2,0,19,67,3,64,0,4,67,0,0,12,4,0,1,45,0,0,0,5,34,0,33,6,5,0,120,6,2,0,119,0,98,1,135,67,51,0,0,7,12,0,19,67,7,64,0,8,67,0,135,67,149,0,8,59,0,0,1,68,8,0,135,67,136,0,68,60,0,0,0,9,45,0,19,67,9,65,0,10,67,0,134,11,0,0,0,0,0,0,59,10,60,0,19,67,11,64,0,13,67,0,19,67,13,64,0,14,67,0,0,45,14,0,0,15,45,0,19,67,15,64,0,16,67,0,0,17,1,0,83,17,16,0,1,56,0,0,0,18,45,0,1,67,1,0,1,68,255,0,138,18,67,68,112,114,2,0,200,114,2,0,220,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,108,114,2,0,228,114,2,0,119,0,31,0,0,19,12,0,27,67,19,7,3,20,66,67,25,21,20,6,78,22,21,0,19,67,22,64,0,24,67,0,32,25,24,2,121,25,4,0,2,56,0,0,255,255,0,0,119,0,19,0,0,26,12,0,19,67,26,64,0,27,67,0,134,28,0,0,168,9,2,0,27,59,0,0,19,67,28,65,0,29,67,0,0,56,29,0,119,0,9,0,134,67,0,0,240,162,0,0,2,56,0,0,255,255,0,0,119,0,4,0,1,62,12,0,119,0,39,0,119,0,254,255,0,30,56,0,14,31,30,65,120,31,2,0,119,0,189,254,0,32,45,0,19,67,32,64,0,33,67,0,0,35,56,0,19,67,35,65,0,36,67,0,0,37,12,0,19,67,37,64,0,38,67,0,134,67,0,0,16,201,1,0,33,36,38,0,0,39,45,0,19,67,39,64,0,40,67,0,0,41,56,0,19,67,41,65,0,42,67,0,0,43,12,0,19,67,43,64,0,44,67,0,134,46,0,0,96,69,2,0,40,42,44,0,19,67,46,64,0,47,67,0,0,23,47,0,0,48,23,0,14,49,48,64,120,49,2,0,119,0,158,254,1,34,0,0,119,0,156,254,32,67,62,12,121,67,3,0,137,63,0,0,139,0,0,0,0,50,56,0,19,67,50,65,0,51,67,0,0,52,1,0,25,53,52,1,19,67,51,64,83,53,67,0,42,68,51,8,107,53,1,68,0,54,23,0,19,68,54,64,0,55,68,0,0,57,1,0,25,58,57,4,83,58,55,0,137,63,0,0,139,0,0,0,140,5,78,0,0,0,0,0,2,75,0,0,255,0,0,0,1,73,0,0,136,76,0,0,0,74,76,0,136,76,0,0,1,77,160,0,3,76,76,77,137,76,0,0,1,76,153,0,3,5,74,76,1,76,152,0,3,6,74,76,25,7,74,24,25,10,74,8,0,45,0,0,0,56,1,0,0,67,2,0,0,71,3,0,0,72,4,0,1,8,164,21,0,11,67,0,0,12,71,0,0,13,67,0,19,76,13,75,0,14,76,0,0,15,72,0,19,76,15,75,0,16,76,0,3,17,14,16,26,18,17,1,19,76,18,75,0,19,76,0,0,20,71,0,19,76,20,75,0,21,76,0,25,22,21,12,19,76,22,75,0,23,76,0,135,76,134,0,11,12,19,23,10,0,0,0,1,76,49,0,1,77,12,0,135,24,135,0,76,77,10,5,6,0,0,0,41,77,24,24,42,77,77,24,33,25,77,0,120,25,3,0,137,74,0,0,139,0,0,0,0,26,45,0,134,77,0,0,116,120,2,0,26,7,0,0,78,27,5,0,19,77,27,75,0,28,77,0,25,29,28,24,2,77,0,0,255,255,0,0,19,77,29,77,0,30,77,0,78,31,6,0,19,77,31,75,0,32,77,0,135,77,63,0,30,32,7,0,0,33,56,0,0,9,33,0,0,34,9,0,19,77,34,75,0,35,77,0,1,77,164,22,78,36,77,0,19,77,36,75,0,37,77,0,15,38,35,37,120,38,3,0,1,73,6,0,119,0,60,0,0,39,8,0,0,40,9,0,19,77,40,75,0,41,77,0,3,42,39,41,78,43,42,0,19,77,43,75,0,44,77,0,27,46,44,6,25,47,46,1,19,77,47,75,0,48,77,0,1,77,12,0,135,49,135,0,48,77,10,5,6,0,0,0,41,77,49,24,42,77,77,24,33,50,77,0,120,50,3,0,1,73,6,0,119,0,38,0,0,51,45,0,0,52,9,0,134,77,0,0,20,251,0,0,51,52,7,0,78,53,5,0,19,77,53,75,0,54,77,0,0,55,8,0,0,57,9,0,19,77,57,75,0,58,77,0,3,59,55,58,78,60,59,0,19,77,60,75,0,61,77,0,27,62,61,6,28,77,62,2,38,77,77,255,0,63,77,0,3,64,54,63,2,77,0,0,255,255,0,0,19,77,64,77,0,65,77,0,78,66,6,0,19,77,66,75,0,68,77,0,135,77,63,0,65,68,7,0,0,69,9,0,25,77,69,1,41,77,77,24,42,77,77,24,0,70,77,0,0,9,70,0,119,0,187,255,32,77,73,6,121,77,3,0,137,74,0,0,139,0,0,0,139,0,0,0,140,5,78,0,0,0,0,0,2,75,0,0,255,0,0,0,1,73,0,0,136,76,0,0,0,74,76,0,136,76,0,0,1,77,160,0,3,76,76,77,137,76,0,0,1,76,153,0,3,5,74,76,1,76,152,0,3,6,74,76,25,7,74,24,25,10,74,8,0,45,0,0,0,56,1,0,0,67,2,0,0,71,3,0,0,72,4,0,1,9,165,22,0,11,67,0,0,12,71,0,0,13,67,0,19,76,13,75,0,14,76,0,0,15,72,0,19,76,15,75,0,16,76,0,3,17,14,16,26,18,17,1,19,76,18,75,0,19,76,0,0,20,71,0,19,76,20,75,0,21,76,0,25,22,21,12,19,76,22,75,0,23,76,0,135,76,134,0,11,12,19,23,10,0,0,0,1,76,61,0,1,77,12,0,135,24,135,0,76,77,10,5,6,0,0,0,41,77,24,24,42,77,77,24,33,25,77,0,120,25,3,0,137,74,0,0,139,0,0,0,0,26,45,0,135,77,54,0,26,7,0,0,78,27,5,0,19,77,27,75,0,28,77,0,25,29,28,30,2,77,0,0,255,255,0,0,19,77,29,77,0,30,77,0,78,31,6,0,19,77,31,75,0,32,77,0,135,77,63,0,30,32,7,0,0,33,56,0,0,8,33,0,0,34,8,0,19,77,34,75,0,35,77,0,1,77,165,23,78,36,77,0,19,77,36,75,0,37,77,0,15,38,35,37,120,38,3,0,1,73,6,0,119,0,60,0,0,39,9,0,0,40,8,0,19,77,40,75,0,41,77,0,3,42,39,41,78,43,42,0,19,77,43,75,0,44,77,0,27,46,44,6,25,47,46,1,19,77,47,75,0,48,77,0,1,77,12,0,135,49,135,0,48,77,10,5,6,0,0,0,41,77,49,24,42,77,77,24,33,50,77,0,120,50,3,0,1,73,6,0,119,0,38,0,0,51,45,0,0,52,8,0,134,77,0,0,212,5,2,0,51,52,7,0,78,53,5,0,19,77,53,75,0,54,77,0,0,55,9,0,0,57,8,0,19,77,57,75,0,58,77,0,3,59,55,58,78,60,59,0,19,77,60,75,0,61,77,0,27,62,61,6,28,77,62,2,38,77,77,255,0,63,77,0,3,64,54,63,2,77,0,0,255,255,0,0,19,77,64,77,0,65,77,0,78,66,6,0,19,77,66,75,0,68,77,0,135,77,63,0,65,68,7,0,0,69,8,0,25,77,69,1,41,77,77,24,42,77,77,24,0,70,77,0,0,8,70,0,119,0,187,255,32,77,73,6,121,77,3,0,137,74,0,0,139,0,0,0,139,0,0,0,140,2,54,0,0,0,0,0,2,47,0,0,255,0,0,0,2,48,0,0,90,24,0,0,2,49,0,0,103,24,0,0,1,43,0,0,136,50,0,0,0,44,50,0,136,50,0,0,25,50,50,48,137,50,0,0,25,40,44,32,25,41,44,20,0,12,0,0,0,23,1,0,1,34,0,0,1,50,76,24,135,2,0,0,50,0,0,0,33,3,2,0,121,3,78,0,1,37,76,24,0,4,37,0,1,50,0,0,14,5,4,50,120,5,2,0,119,0,72,0,135,6,1,0,0,38,6,0,0,7,38,0,1,50,0,0,14,8,7,50,120,8,2,0,119,0,48,0,0,9,38,0,82,10,9,0,25,11,10,8,82,13,11,0,0,39,13,0,0,14,39,0,1,50,0,0,14,15,14,50,120,15,2,0,119,0,33,0,0,16,12,0,19,50,16,47,83,40,50,0,42,51,16,8,107,40,1,51,0,42,41,0,25,46,42,12,1,51,0,0,83,42,51,0,25,42,42,1,54,51,42,46,76,121,2,0,0,17,39,0,1,50,1,0,1,52,0,0,1,53,0,0,135,51,2,0,17,48,50,40,52,53,0,0,0,18,39,0,1,53,12,0,135,51,64,0,18,49,41,53,0,19,37,0,0,20,38,0,134,21,0,0,16,21,1,0,19,20,0,0,32,22,21,0,120,22,10,0,1,39,0,0,119,0,220,255,0,26,38,0,135,51,3,0,26,0,0,0,1,38,0,0,119,0,205,255,1,37,0,0,119,0,196,255,0,24,23,0,0,42,24,0,0,45,41,0,25,46,42,12,78,51,45,0,83,42,51,0,25,42,42,1,25,45,45,1,54,51,42,46,220,121,2,0,0,25,38,0,135,51,3,0,25,0,0,0,137,44,0,0,139,0,0,0,2,51,0,0,163,215,2,0,78,27,51,0,19,51,27,47,0,28,51,0,1,51,1,0,1,53,4,0,138,28,51,53,60,122,2,0,68,122,2,0,76,122,2,0,84,122,2,0,119,0,9,0,1,34,62,0,119,0,7,0,1,34,70,0,119,0,5,0,1,34,71,0,119,0,3,0,1,34,72,0,119,0,1,0,0,29,34,0,19,51,29,47,0,30,51,0,0,31,12,0,2,51,0,0,255,255,0,0,19,51,31,51,0,32,51,0,25,33,32,1,2,51,0,0,255,255,0,0,19,51,33,51,0,35,51,0,0,36,23,0,135,51,17,0,30,35,36,0,137,44,0,0,139,0,0,0,140,3,82,0,0,0,0,0,2,76,0,0,255,255,0,0,1,74,0,0,136,77,0,0,0,75,77,0,136,77,0,0,25,77,77,32,137,77,0,0,0,23,0,0,0,34,1,0,0,45,2,0,2,77,0,0,24,180,2,0,82,5,77,0,1,77,26,0,1,78,1,0,135,6,21,0,77,78,5,0,0,3,6,0,0,7,3,0,0,4,7,0,0,8,4,0,79,78,8,0,103,77,8,1,41,77,77,8,20,78,78,77,0,9,78,0,19,78,9,76,0,10,78,0,28,78,10,2,38,78,78,255,0,11,78,0,19,78,11,76,0,12,78,0,0,72,12,0,0,13,4,0,79,78,13,0,103,77,13,1,41,77,77,8,20,78,78,77,0,14,78,0,19,78,14,76,0,15,78,0,28,78,15,2,38,78,78,255,0,16,78,0,19,78,16,76,0,17,78,0,0,73,17,0,1,78,161,32,79,78,78,0,1,77,161,32,103,77,77,1,41,77,77,8,20,78,78,77,0,18,78,0,19,78,18,76,0,19,78,0,26,20,19,1,26,21,20,0,0,22,72,0,19,78,22,76,0,24,78,0,4,25,21,24,28,78,25,2,38,78,78,255,0,26,78,0,19,78,26,76,0,27,78,0,0,56,27,0,0,28,56,0,19,78,28,76,0,29,78,0,25,30,29,0,19,78,30,76,0,31,78,0,0,56,31,0,0,32,45,0,1,78,255,0,19,78,32,78,0,33,78,0,1,78,255,0,14,35,33,78,121,35,11,0,0,36,45,0,1,78,255,0,19,78,36,78,0,37,78,0,27,38,37,12,25,39,38,0,19,78,39,76,0,40,78,0,0,67,40,0,119,0,28,0,1,78,163,32,79,78,78,0,1,77,163,32,103,77,77,1,41,77,77,8,20,78,78,77,0,41,78,0,19,78,41,76,0,42,78,0,26,43,42,1,26,44,43,0,0,46,73,0,19,78,46,76,0,47,78,0,4,48,44,47,42,78,48,1,0,49,78,0,19,78,49,76,0,50,78,0,0,67,50,0,0,51,67,0,19,78,51,76,0,52,78,0,25,53,52,0,19,78,53,76,0,54,78,0,0,67,54,0,0,55,56,0,0,57,67,0,1,77,26,0,1,79,0,0,1,80,1,0,1,81,1,0,135,78,36,0,77,79,80,55,57,81,0,0,0,58,56,0,19,78,58,76,0,59,78,0,25,60,59,10,19,78,60,76,0,61,78,0,0,62,67,0,19,78,62,76,0,63,78,0,25,64,63,6,19,78,64,76,0,65,78,0,0,66,23,0,135,78,7,0,61,65,66,0,0,68,34,0,1,78,255,0,19,78,68,78,0,69,78,0,27,70,69,100,19,78,70,76,0,71,78,0,1,81,2,0,134,78,0,0,16,135,2,0,71,81,0,0,137,75,0,0,139,0,0,0,140,3,80,0,0,0,0,0,2,74,0,0,255,0,0,0,2,75,0,0,255,255,0,0,1,72,0,0,136,76,0,0,0,73,76,0,136,76,0,0,25,76,76,32,137,76,0,0,25,67,73,12,0,23,0,0,0,34,1,0,0,45,2,0,0,7,45,0,19,76,7,75,0,8,76,0,1,77,10,0,135,76,59,0,8,67,77,0,135,9,4,0,67,0,0,0,19,76,9,74,0,10,76,0,0,56,10,0,2,76,0,0,24,180,2,0,82,11,76,0,1,76,15,0,1,77,1,0,135,12,21,0,76,77,11,0,0,6,12,0,0,13,6,0,79,77,13,0,103,76,13,1,41,76,76,8,20,77,77,76,0,14,77,0,19,77,14,74,0,15,77,0,0,70,15,0,0,16,6,0,25,17,16,2,79,77,17,0,103,76,17,1,41,76,76,8,20,77,77,76,0,18,77,0,19,77,18,74,0,19,77,0,0,71,19,0,1,4,0,0,0,20,4,0,19,77,20,74,0,21,77,0,0,22,56,0,19,77,22,74,0,24,77,0,15,25,21,24,120,25,2,0,119,0,88,0,0,26,4,0,19,77,26,74,0,27,77,0,3,28,67,27,78,29,28,0,19,77,29,74,0,30,77,0,26,31,30,48,19,77,31,74,0,32,77,0,0,3,32,0,1,76,4,0,1,78,0,0,134,77,0,0,16,135,2,0,76,78,0,0,1,5,0,0,0,33,5,0,19,77,33,74,0,35,77,0,0,36,71,0,19,77,36,74,0,37,77,0,28,77,37,2,38,77,77,255,0,38,77,0,15,39,35,38,120,39,2,0,119,0,38,0,0,40,3,0,19,77,40,74,0,41,77,0,25,42,41,1,19,77,42,75,0,43,77,0,0,44,23,0,19,77,44,74,0,46,77,0,0,47,34,0,19,77,47,74,0,48,77,0,0,49,5,0,19,77,49,74,0,50,77,0,4,51,48,50,19,77,51,75,0,52,77,0,1,78,15,0,1,76,0,0,1,79,1,0,135,77,36,0,78,76,43,46,52,79,0,0,1,79,1,0,1,76,0,0,134,77,0,0,16,135,2,0,79,76,0,0,0,53,5,0,19,77,53,74,0,54,77,0,25,55,54,1,19,77,55,74,0,57,77,0,0,5,57,0,119,0,208,255,0,58,70,0,19,77,58,74,0,59,77,0,28,77,59,2,38,77,77,255,0,60,77,0,0,61,23,0,19,77,61,74,0,62,77,0,3,63,62,60,19,77,63,74,0,64,77,0,0,23,64,0,0,65,4,0,19,77,65,74,0,66,77,0,25,68,66,1,19,77,68,74,0,69,77,0,0,4,69,0,119,0,161,255,137,73,0,0,139,0,0,0,140,1,58,0,0,0,0,0,2,51,0,0,255,255,0,0,2,52,0,0,255,0,0,0,2,53,0,0,163,32,0,0,2,54,0,0,161,32,0,0,1,49,0,0,136,55,0,0,0,50,55,0,136,55,0,0,1,56,48,2,3,55,55,56,137,55,0,0,25,12,50,32,25,46,50,12,0,1,0,0,2,55,0,0,140,180,2,0,82,47,55,0,0,23,47,0,0,48,1,0,0,2,23,0,135,3,29,0,48,2,0,0,0,34,3,0,0,4,34,0], eb + 153600);
  HEAPU8.set([33,5,4,0,120,5,3,0,1,49,3,0,119,0,67,0,0,6,23,0,0,7,34,0,79,55,54,0,103,56,54,1,41,56,56,8,20,55,55,56,0,8,55,0,19,55,8,51,0,9,55,0,26,10,9,1,26,11,10,4,19,55,11,52,0,13,55,0,79,55,53,0,103,56,53,1,41,56,56,8,20,55,55,56,0,14,55,0,19,55,14,51,0,15,55,0,26,16,15,1,26,17,16,2,19,55,17,52,0,18,55,0,1,55,0,0,1,56,4,0,1,57,2,0,134,19,0,0,24,121,0,0,6,7,55,56,57,13,18,0,0,44,19,0,0,20,44,0,19,57,20,51,0,21,57,0,14,22,51,21,120,22,3,0,1,49,9,0,119,0,28,0,0,24,23,0,0,25,44,0,19,57,25,51,0,26,57,0,41,57,26,1,3,27,24,57,79,57,27,0,103,56,27,1,41,56,56,8,20,57,57,56,0,28,57,0,0,45,28,0,0,29,45,0,1,57,24,0,135,30,85,0,29,57,0,0,41,57,30,24,42,57,57,24,33,31,57,0,121,31,3,0,1,49,7,0,119,0,6,0,1,56,60,0,134,57,0,0,52,222,2,0,56,0,0,0,119,0,181,255,32,57,49,3,121,57,9,0,1,56,84,0,134,57,0,0,52,222,2,0,56,0,0,0,137,50,0,0,1,57,1,0,139,57,0,0,119,0,52,0,32,57,49,7,121,57,45,0,0,32,45,0,1,56,24,0,135,57,87,0,32,56,0,0,1,56,64,0,1,55,148,0,135,57,17,0,56,55,12,0,0,33,45,0,134,57,0,0,76,29,2,0,33,12,0,0,1,57,26,0,83,46,57,0,0,35,45,0,25,36,46,1,19,57,35,52,83,36,57,0,42,55,35,8,107,36,1,55,0,37,1,0,25,38,46,3,83,38,37,0,25,39,46,13,1,55,0,0,83,39,55,0,134,40,0,0,12,186,2,0,46,0,0,0,41,55,40,24,42,55,55,24,33,41,55,0,120,41,4,0,137,50,0,0,1,55,1,0,139,55,0,0,0,42,1,0,0,43,45,0,135,55,31,0,42,43,0,0,137,50,0,0,1,55,1,0,139,55,0,0,119,0,6,0,32,55,49,9,121,55,4,0,137,50,0,0,1,55,1,0,139,55,0,0,1,55,0,0,139,55,0,0,140,1,34,0,0,0,0,0,1,30,0,0,136,32,0,0,0,31,32,0,136,32,0,0,25,32,32,16,137,32,0,0,0,12,0,0,0,23,12,0,0,24,23,0,1,32,60,9,85,32,24,0,2,32,0,0,173,168,2,0,1,33,56,9,134,25,0,0,16,21,1,0,32,33,0,0,32,26,25,0,121,26,5,0,1,1,0,0,0,22,1,0,137,31,0,0,139,22,0,0,0,27,12,0,78,28,27,0,1,33,255,0,19,33,28,33,0,29,33,0,1,33,0,0,1,32,28,0,138,29,33,32,12,131,2,0,28,131,2,0,44,131,2,0,60,131,2,0,80,131,2,0,96,131,2,0,112,131,2,0,8,131,2,0,8,131,2,0,8,131,2,0,8,131,2,0,132,131,2,0,8,131,2,0,148,131,2,0,168,131,2,0,184,131,2,0,204,131,2,0,224,131,2,0,244,131,2,0,4,132,2,0,8,131,2,0,8,131,2,0,8,131,2,0,24,132,2,0,40,132,2,0,8,131,2,0,56,132,2,0,76,132,2,0,119,0,86,0,0,2,12,0,135,33,150,0,2,0,0,0,119,0,82,0,0,3,12,0,135,33,151,0,3,0,0,0,119,0,78,0,0,4,12,0,135,33,152,0,4,0,0,0,119,0,74,0,0,5,12,0,134,33,0,0,76,154,0,0,5,0,0,0,119,0,69,0,0,6,12,0,135,33,153,0,6,0,0,0,119,0,65,0,0,7,12,0,135,33,154,0,7,0,0,0,119,0,61,0,0,8,12,0,134,33,0,0,168,149,1,0,8,0,0,0,119,0,56,0,0,9,12,0,135,33,155,0,9,0,0,0,119,0,52,0,0,10,12,0,134,33,0,0,60,205,1,0,10,0,0,0,119,0,47,0,0,11,12,0,135,33,156,0,11,0,0,0,119,0,43,0,0,13,12,0,134,33,0,0,164,144,1,0,13,0,0,0,119,0,38,0,0,14,12,0,134,33,0,0,40,254,1,0,14,0,0,0,119,0,33,0,0,15,12,0,134,33,0,0,100,214,1,0,15,0,0,0,119,0,28,0,0,16,12,0,135,33,157,0,16,0,0,0,119,0,24,0,0,17,12,0,134,33,0,0,108,60,1,0,17,0,0,0,119,0,19,0,0,18,12,0,135,33,158,0,18,0,0,0,119,0,15,0,0,19,12,0,135,33,159,0,19,0,0,0,119,0,11,0,0,20,12,0,134,33,0,0,92,178,1,0,20,0,0,0,119,0,6,0,0,21,12,0,134,33,0,0,0,62,0,0,21,0,0,0,119,0,1,0,1,1,1,0,0,22,1,0,137,31,0,0,139,22,0,0,140,0,47,0,0,0,0,0,1,42,0,0,136,44,0,0,0,43,44,0,136,44,0,0,1,45,16,8,3,44,44,45,137,44,0,0,1,44,8,4,3,1,43,44,25,12,43,8,1,44,163,32,79,44,44,0,1,45,163,32,103,45,45,1,41,45,45,8,20,44,44,45,0,34,44,0,2,44,0,0,255,255,0,0,19,44,34,44,0,37,44,0,26,38,37,1,26,39,38,15,25,40,39,2,2,44,0,0,255,255,0,0,19,44,40,44,0,41,44,0,1,44,163,32,79,44,44,0,1,45,163,32,103,45,45,1,41,45,45,8,20,44,44,45,0,2,44,0,2,44,0,0,255,255,0,0,19,44,2,44,0,3,44,0,26,4,3,1,26,5,4,15,25,6,5,2,25,7,6,12,2,44,0,0,255,255,0,0,19,44,7,44,0,8,44,0,2,44,0,0,36,180,2,0,82,9,44,0,1,45,74,0,1,46,122,0,135,44,33,0,45,41,46,8,9,0,0,0,2,44,0,0,205,214,2,0,78,10,44,0,2,44,0,0,206,214,2,0,78,11,44,0,135,13,61,0,10,11,0,0,1,44,255,0,19,44,13,44,0,14,44,0,0,0,14,0,0,15,0,0,1,44,255,0,13,16,44,15,121,16,58,0,2,44,0,0,205,214,2,0,78,17,44,0,2,44,0,0,206,214,2,0,78,18,44,0,135,19,69,0,17,18,0,0,1,44,255,0,19,44,19,44,0,20,44,0,41,44,20,2,0,21,44,0,0,0,21,0,1,46,7,0,135,44,136,0,46,1,0,0,0,22,0,0,3,24,1,22,78,44,24,0,83,12,44,0,102,46,24,1,107,12,1,46,102,44,24,2,107,12,2,44,102,46,24,3,107,12,3,46,25,25,12,4,1,46,0,0,83,25,46,0,1,46,163,32,79,46,46,0,1,44,163,32,103,44,44,1,41,44,44,8,20,46,46,44,0,30,46,0,2,46,0,0,255,255,0,0,19,46,30,46,0,31,46,0,26,32,31,1,26,33,32,15,25,35,33,2,1,46,255,0,19,46,35,46,0,36,46,0,1,44,74,0,135,46,137,0,44,36,12,0,1,44,112,15,1,45,0,0,135,46,99,0,44,45,0,0,137,43,0,0,139,0,0,0,119,0,38,0,0,26,0,0,1,46,255,0,19,46,26,46,0,27,46,0,135,28,120,0,27,0,0,0,0,23,28,0,0,29,23,0,134,46,0,0,116,120,2,0,29,12,0,0,1,46,163,32,79,46,46,0,1,45,163,32,103,45,45,1,41,45,45,8,20,46,46,45,0,30,46,0,2,46,0,0,255,255,0,0,19,46,30,46,0,31,46,0,26,32,31,1,26,33,32,15,25,35,33,2,1,46,255,0,19,46,35,46,0,36,46,0,1,45,74,0,135,46,137,0,45,36,12,0,1,45,112,15,1,44,0,0,135,46,99,0,45,44,0,0,137,43,0,0,139,0,0,0,139,0,0,0,140,2,47,0,0,0,0,0,2,43,0,0,255,0,0,0,2,44,0,0,255,255,0,0,1,41,0,0,136,45,0,0,0,42,45,0,136,45,0,0,25,45,45,16,137,45,0,0,25,36,42,2,0,12,0,0,0,23,1,0,135,37,160,0,0,34,37,0,135,45,161,0,0,38,12,0,41,45,38,16,42,45,45,16,33,39,45,0,121,39,66,0,1,46,1,0,135,45,162,0,46,0,0,0,0,40,12,0,41,45,40,16,42,45,45,16,33,2,45,0,120,2,2,0,119,0,60,0,134,45,0,0,100,208,2,0,36,0,0,0,78,3,36,0,19,45,3,43,0,4,45,0,32,5,4,6,121,5,9,0,0,6,12,0,19,45,6,44,0,7,45,0,26,8,7,1,19,45,8,44,0,9,45,0,0,12,9,0,119,0,33,0,0,10,23,0,41,45,10,24,42,45,45,24,0,11,45,0,32,13,11,1,120,13,38,0,0,14,23,0,41,45,14,24,42,45,45,24,0,15,45,0,32,16,15,2,121,16,21,0,78,17,36,0,19,45,17,43,0,18,45,0,32,19,18,5,120,19,27,0,78,20,36,0,19,45,20,43,0,21,45,0,32,22,21,16,121,22,11,0,25,24,36,1,79,45,24,0,103,46,24,1,41,46,46,8,20,45,45,46,0,25,45,0,19,45,25,44,0,26,45,0,32,27,26,2,120,27,12,0,25,28,36,1,1,45,0,0,19,45,45,43,83,28,45,0,1,46,0,0,42,46,46,8,107,28,1,46,119,0,195,255,134,46,0,0,100,208,2,0,36,0,0,0,0,29,34,0,41,46,29,24,42,46,46,24,33,30,46,0,120,30,11,0,25,32,36,1,79,46,32,0,103,45,32,1,41,45,45,8,20,46,46,45,0,33,46,0,19,46,33,43,0,35,46,0,137,42,0,0,139,35,0,0,135,46,161,0,0,31,34,0,135,46,162,0,31,0,0,0,25,32,36,1,79,46,32,0,103,45,32,1,41,45,45,8,20,46,46,45,0,33,46,0,19,46,33,43,0,35,46,0,137,42,0,0,139,35,0,0,140,1,44,0,0,0,0,0,2,37,0,0,255,0,0,0,2,38,0,0,91,19,0,0,2,39,0,0,242,168,2,0,1,35,0,0,136,40,0,0,0,36,40,0,136,40,0,0,25,40,40,32,137,40,0,0,25,12,36,20,25,31,36,16,19,40,0,37,83,12,40,0,42,41,0,8,107,12,1,41,1,41,80,19,135,32,0,0,41,0,0,0,33,33,32,0,121,33,90,0,1,23,80,19,0,34,23,0,1,41,0,0,14,2,34,41,120,2,2,0,119,0,84,0,135,3,1,0,0,29,3,0,0,4,29,0,1,41,0,0,14,5,4,41,120,5,2,0,119,0,53,0,0,6,29,0,82,7,6,0,25,8,7,8,82,9,8,0,0,30,9,0,0,10,30,0,1,41,0,0,14,11,10,41,120,11,2,0,119,0,38,0,1,41,0,0,19,41,41,37,83,31,41,0,1,40,0,0,42,40,40,8,19,40,40,37,107,31,1,40,1,41,0,0,42,41,41,16,19,41,41,37,107,31,2,41,1,40,0,0,42,40,40,24,107,31,3,40,0,13,30,0,1,41,1,0,1,42,0,0,1,43,0,0,135,40,2,0,13,39,41,12,42,43,0,0,0,14,30,0,1,43,2,0,1,42,0,0,1,41,0,0,135,40,2,0,14,38,43,31,42,41,0,0,0,15,23,0,0,16,29,0,134,17,0,0,16,21,1,0,15,16,0,0,32,18,17,0,120,18,10,0,1,30,0,0,119,0,215,255,0,22,29,0,135,40,3,0,22,0,0,0,1,29,0,0,119,0,200,255,1,23,0,0,119,0,191,255,0,19,29,0,135,40,3,0,19,0,0,0,79,40,31,0,103,41,31,1,41,41,41,8,20,40,40,41,103,41,31,2,41,41,41,16,20,40,40,41,103,41,31,3,41,41,41,24,20,40,40,41,0,20,40,0,2,40,0,0,255,255,0,0,19,40,20,40,0,21,40,0,0,1,21,0,0,28,1,0,137,36,0,0,139,28,0,0,79,40,12,0,103,41,12,1,41,41,41,8,20,40,40,41,0,24,40,0,2,40,0,0,255,255,0,0,19,40,24,40,0,25,40,0,2,40,0,0,164,215,2,0,27,41,25,19,3,26,40,41,135,27,163,0,26,0,0,0,0,1,27,0,0,28,1,0,137,36,0,0,139,28,0,0,140,1,62,0,0,0,0,0,1,57,0,0,136,59,0,0,0,58,59,0,136,59,0,0,25,59,59,32,137,59,0,0,0,12,0,0,2,59,0,0,140,180,2,0,82,55,59,0,0,23,55,0,0,56,12,0,0,2,23,0,135,3,29,0,56,2,0,0,0,34,3,0,0,4,12,0,0,5,23,0,0,6,34,0,41,59,6,1,3,7,5,59,135,8,74,0,4,7,0,0,1,59,255,0,19,59,8,59,0,9,59,0,0,10,34,0,3,11,10,9,0,34,11,0,0,13,34,0,33,14,13,0,120,14,9,0,1,60,84,0,134,59,0,0,52,222,2,0,60,0,0,0,1,1,1,0,0,52,1,0,137,58,0,0,139,52,0,0,0,15,23,0,0,16,34,0,1,59,161,32,79,59,59,0,1,60,161,32,103,60,60,1,41,60,60,8,20,59,59,60,0,17,59,0,2,59,0,0,255,255,0,0,19,59,17,59,0,18,59,0,26,19,18,1,26,20,19,4,1,59,255,0,19,59,20,59,0,21,59,0,1,59,163,32,79,59,59,0,1,60,163,32,103,60,60,1,41,60,60,8,20,59,59,60,0,22,59,0,2,59,0,0,255,255,0,0,19,59,22,59,0,24,59,0,26,25,24,1,26,26,25,2,1,59,255,0,19,59,26,59,0,27,59,0,1,59,0,0,1,60,4,0,1,61,2,0,134,28,0,0,24,121,0,0,15,16,59,60,61,21,27,0,0,45,28,0,0,29,45,0,2,61,0,0,255,255,0,0,19,61,29,61,0,30,61,0,2,61,0,0,255,255,0,0,14,31,61,30,121,31,53,0,0,32,23,0,0,33,45,0,2,61,0,0,255,255,0,0,19,61,33,61,0,35,61,0,41,61,35,1,3,36,32,61,79,61,36,0,103,60,36,1,41,60,60,8,20,61,61,60,0,37,61,0,0,53,37,0,0,38,53,0,2,61,0,0,255,255,0,0,19,61,38,61,0,39,61,0,2,61,0,0,164,215,2,0,27,60,39,19,3,40,61,60,25,41,40,2,1,60,0,0,1,61,255,0,19,60,60,61,83,41,60,0,1,61,0,0,42,61,61,8,107,41,1,61,0,42,12,0,0,43,53,0,135,61,31,0,42,43,0,0,135,44,52,0,1,61,136,20,78,46,61,0,1,61,255,0,19,61,46,61,0,47,61,0,8,61,44,47,38,61,61,255,0,48,61,0,0,54,48,0,0,49,54,0,1,61,255,0,19,61,49,61,0,50,61,0,0,51,53,0,135,61,32,0,50,51,0,0,1,1,1,0,0,52,1,0,137,58,0,0,139,52,0,0,140,4,66,0,0,0,0,0,2,61,0,0,255,0,0,0,1,59,0,0,136,62,0,0,0,60,62,0,136,62,0,0,25,62,62,16,137,62,0,0,0,34,0,0,0,45,1,0,0,55,2,0,0,56,3,0,0,57,55,0,19,62,57,61,0,58,62,0,2,62,0,0,207,214,2,0,78,4,62,0,19,62,4,61,0,5,62,0,15,6,58,5,121,6,3,0,137,60,0,0,139,0,0,0,0,7,55,0,19,62,7,61,0,8,62,0,2,62,0,0,207,214,2,0,78,9,62,0,19,62,9,61,0,10,62,0,1,62,161,32,79,62,62,0,1,63,161,32,103,63,63,1,41,63,63,8,20,62,62,63,0,11,62,0,2,62,0,0,255,255,0,0,19,62,11,62,0,12,62,0,28,62,12,16,38,62,62,255,0,13,62,0,3,14,10,13,17,15,14,8,121,15,3,0,137,60,0,0,139,0,0,0,0,16,56,0,19,62,16,61,0,17,62,0,2,62,0,0,208,214,2,0,78,18,62,0,19,62,18,61,0,19,62,0,15,20,17,19,121,20,3,0,137,60,0,0,139,0,0,0,0,21,56,0,19,62,21,61,0,22,62,0,2,62,0,0,208,214,2,0,78,23,62,0,19,62,23,61,0,24,62,0,1,62,163,32,79,62,62,0,1,63,163,32,103,63,63,1,41,63,63,8,20,62,62,63,0,25,62,0,2,62,0,0,255,255,0,0,19,62,25,62,0,26,62,0,28,62,26,16,38,62,62,255,0,27,62,0,26,28,27,1,3,29,24,28,17,30,29,22,121,30,3,0,137,60,0,0,139,0,0,0,0,31,55,0,19,62,31,61,0,32,62,0,2,62,0,0,207,214,2,0,78,33,62,0,19,62,33,61,0,35,62,0,4,36,32,35,41,62,36,4,0,37,62,0,25,38,37,0,19,62,38,61,0,39,62,0,0,55,39,0,0,40,56,0,19,62,40,61,0,41,62,0,2,62,0,0,208,214,2,0,78,42,62,0,19,62,42,61,0,43,62,0,4,44,41,43,41,62,44,4,0,46,62,0,25,47,46,0,19,62,47,61,0,48,62,0,0,56,48,0,0,49,34,0,0,50,45,0,0,51,55,0,19,62,51,61,0,52,62,0,0,53,56,0,19,62,53,61,0,54,62,0,1,63,27,0,1,64,0,0,1,65,0,0,134,62,0,0,76,111,0,0,63,64,49,50,65,52,54,0,137,60,0,0,139,0,0,0,140,1,53,0,0,0,0,0,1,49,0,0,136,51,0,0,0,50,51,0,136,51,0,0,25,51,51,16,137,51,0,0,0,1,0,0,0,34,1,0,1,51,255,0,19,51,34,51,0,44,51,0,2,51,0,0,17,215,2,0,27,52,44,7,3,45,51,52,78,46,45,0,0,12,46,0,0,47,1,0,1,52,255,0,19,52,47,52,0,48,52,0,2,52,0,0,17,215,2,0,27,51,48,7,3,2,52,51,25,3,2,1,78,4,3,0,0,23,4,0,0,5,12,0,2,51,0,0,205,214,2,0,83,51,5,0,0,6,23,0,2,51,0,0,206,214,2,0,83,51,6,0,0,7,12,0,1,51,255,0,19,51,7,51,0,8,51,0,1,51,161,32,79,51,51,0,1,52,161,32,103,52,52,1,41,52,52,8,20,51,51,52,0,9,51,0,2,51,0,0,255,255,0,0,19,51,9,51,0,10,51,0,28,51,10,16,38,51,51,255,0,11,51,0,28,51,11,2,38,51,51,255,0,13,51,0,15,14,8,13,121,14,3,0,1,12,0,0,119,0,27,0,1,51,161,32,79,51,51,0,1,52,161,32,103,52,52,1,41,52,52,8,20,51,51,52,0,15,51,0,2,51,0,0,255,255,0,0,19,51,15,51,0,16,51,0,28,51,16,16,38,51,51,255,0,17,51,0,28,51,17,2,38,51,51,255,0,18,51,0,0,19,12,0,1,51,255,0,19,51,19,51,0,20,51,0,4,21,20,18,1,51,255,0,19,51,21,51,0,22,51,0,0,12,22,0,0,24,23,0,1,51,255,0,19,51,24,51,0,25,51,0,1,51,163,32,79,51,51,0,1,52,163,32,103,52,52,1,41,52,52,8,20,51,51,52,0,26,51,0,2,51,0,0,255,255,0,0,19,51,26,51,0,27,51,0,28,51,27,16,38,51,51,255,0,28,51,0,26,29,28,1,28,51,29,2,38,51,51,255,0,30,51,0,15,31,25,30,121,31,15,0,1,23,0,0,0,42,12,0,0,43,23,0,135,51,48,0,42,43,0,0,1,52,0,0,135,51,49,0,52,0,0,0,134,51,0,0,112,132,2,0,135,51,51,0,137,50,0,0,139,0,0,0,119,0,40,0,1,51,163,32,79,51,51,0,1,52,163,32,103,52,52,1,41,52,52,8,20,51,51,52,0,32,51,0,2,51,0,0,255,255,0,0,19,51,32,51,0,33,51,0,28,51,33,16,38,51,51,255,0,35,51,0,26,36,35,1,28,51,36,2,38,51,51,255,0,37,51,0,0,38,23,0,1,51,255,0,19,51,38,51,0,39,51,0,4,40,39,37,1,51,255,0,19,51,40,51,0,41,51,0,0,23,41,0,0,42,12,0,0,43,23,0,135,51,48,0,42,43,0,0,1,52,0,0,135,51,49,0,52,0,0,0,134,51,0,0,112,132,2,0,135,51,51,0,137,50,0,0,139,0,0,0,139,0,0,0,140,2,55,0,0,0,0,0,2,51,0,0,255,0,0,0,2,52,0,0,255,255,0,0,1,49,0,0,136,53,0,0,0,50,53,0,136,53,0,0,25,53,53,32,137,53,0,0,0,12,0,0,0,23,1,0,1,44,255,255,1,45,0,0,1,34,0,0,0,48,34,0,19,53,48,51,0,2,53,0,34,3,2,10,120,3,3,0,1,49,10,0,119,0,65,0,0,4,34,0,19,53,4,51,0,5,53,0,2,53,0,0,17,215,2,0,27,54,5,7,3,6,53,54,0,47,6,0,0,7,47,0,25,8,7,6,78,9,8,0,19,54,9,51,0,10,54,0,32,11,10,8,120,11,42,0,0,13,47,0,78,14,13,0,0,15,47,0,25,16,15,1,78,17,16,0,135,18,78,0,14,17,0,0,41,54,18,24,42,54,54,24,33,19,54,0,121,19,31,0,0,20,34,0,19,54,20,51,0,21,54,0,2,54,0,0,220,214,2,0,78,22,54,0,19,54,22,51,0,24,54,0,13,25,21,24,0,26,34,0,120,25,28,0,1,53,1,0,134,54,0,0,112,32,1,0,53,26,0,0,134,27,0,0,172,106,2,0,0,46,27,0,0,28,45,0,19,54,28,52,0,29,54,0,0,30,46,0,19,54,30,52,0,31,54,0,15,32,29,31,121,32,5,0,0,33,46,0,0,45,33,0,0,35,34,0,0,44,35,0,0,36,34,0,19,54,36,51,0,37,54,0,25,38,37,1,19,54,38,51,0,39,54,0,0,34,39,0,119,0,186,255,32,54,49,10,121,54,12,0,0,40,45,0,0,41,12,0,19,54,40,51,83,41,54,0,42,53,40,8,107,41,1,53,0,42,44,0,0,43,23,0,83,43,42,0,137,50,0,0,139,0,0,0,0,44,26,0,1,45,255,255,0,40,45,0,0,41,12,0,19,53,40,51,83,41,53,0,42,54,40,8,107,41,1,54,0,42,44,0,0,43,23,0,83,43,42,0,137,50,0,0,139,0,0,0,140,4,44,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,1,42,16,8,3,41,41,42,137,41,0,0,1,41,8,4,3,37,40,41,25,38,40,8,0,33,0,0,0,34,1,0,0,35,2,0,0,36,3,0,0,4,36,0,1,41,255,0,19,41,4,41,0,5,41,0,1,43,0,0,1,41,4,0,138,5,43,41,92,148,2,0,196,148,2,0,44,149,2,0,128,149,2,0,119,0,95,0,1,42,64,0,1,43,113,0,135,41,17,0,42,43,37,0,0,6,33,0,1,41,255,0,19,41,6,41,0,7,41,0,2,41,0,0,20,108,3,0,27,43,7,37,3,8,41,43,25,9,8,7,79,43,9,0,103,41,9,1,41,41,41,8,20,43,43,41,0,10,43,0,2,43,0,0,255,255,0,0,19,43,10,43,0,11,43,0,1,41,10,0,135,43,59,0,11,38,41,0,119,0,69,0,1,41,64,0,1,42,116,0,135,43,17,0,41,42,37,0,0,12,33,0,1,43,255,0,19,43,12,43,0,13,43,0,2,43,0,0,20,108,3,0,27,42,13,37,3,14,43,42,25,15,14,11,79,42,15,0,103,43,15,1,41,43,43,8,20,42,42,43,0,16,42,0,2,42,0,0,255,255,0,0,19,42,16,42,0,17,42,0,1,43,10,0,135,42,59,0,17,38,43,0,119,0,43,0,1,43,64,0,1,41,117,0,135,42,17,0,43,41,37,0,0,18,33,0,1,42,255,0,19,42,18,42,0,19,42,0,2,42,0,0,20,108,3,0,27,41,19,37,3,20,42,41,25,21,20,13,78,22,21,0,1,41,255,0,19,41,22,41,0,23,41,0,1,42,10,0,135,41,59,0,23,38,42,0,119,0,22,0,1,42,64,0,1,43,118,0,135,41,17,0,42,43,37,0,0,24,33,0,1,41,255,0,19,41,24,41,0,25,41,0,2,41,0,0,20,108,3,0,27,43,25,37,3,26,41,43,25,27,26,14,78,28,27,0,1,43,255,0,19,43,28,43,0,29,43,0,1,41,10,0,135,43,59,0,29,38,41,0,119,0,1,0,135,43,55,0,37,38,0,0,1,41,64,0,1,42,114,0,135,43,17,0,41,42,38,0,135,43,55,0,37,38,0,0,0,30,35,0,1,43,255,0,19,43,30,43,0,31,43,0,1,42,10,0,135,43,59,0,31,38,42,0,135,43,55,0,37,38,0,0,1,42,64,0,1,41,115,0,135,43,17,0,42,41,38,0,135,43,55,0,37,38,0,0,135,43,30,0,0,32,34,0,134,43,0,0,76,29,2,0,32,37,0,0,137,40,0,0,139,0,0,0,140,1,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,0,12,0,0,1,34,0,0,0,36,12,0,25,37,36,3,78,38,37,0,0,23,38,0,0,39,23,0,1,42,255,0,19,42,39,42,0,2,42,0,2,42,0,0,17,215,2,0,27,43,2,7,3,3,42,43,0,35,3,0,0,4,35,0,25,5,4,5,1,43,1,0,83,5,43,0,0,6,23,0,1,42,0,0,134,43,0,0,112,32,1,0,42,6,0,0,0,7,12,0,25,8,7,4,78,9,8,0,1,42,1,0,134,43,0,0,112,32,1,0,42,9,0,0,0,10,12,0,78,11,10,0,1,43,255,0,19,43,11,43,0,13,43,0,1,43,0,0,1,42,0,1,138,13,43,42,16,155,2,0,52,155,2,0,8,155,2,0,80,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,8,155,2,0,88,155,2,0,1,40,7,0,119,0,51,0,0,14,12,0,25,15,14,4,78,16,15,0,134,17,0,0,228,191,1,0,16,0,0,0,0,34,17,0,1,40,7,0,119,0,42,0,0,18,12,0,134,19,0,0,104,180,0,0,18,0,0,0,0,34,19,0,1,40,7,0,119,0,35,0,1,40,6,0,119,0,33,0,0,20,35,0,25,21,20,5,1,43,0,0,83,21,43,0,2,43,0,0,213,214,2,0,78,22,43,0,0,24,35,0,83,24,22,0,2,43,0,0,214,214,2,0,78,25,43,0,0,26,35,0,25,27,26,1,83,27,25,0,0,28,23,0,134,43,0,0,136,143,2,0,28,0,0,0,1,43,35,20,78,29,43,0,41,43,29,24,42,43,43,24,33,30,43,0,121,30,6,0,1,1,0,0,0,33,1,0,137,41,0,0,139,33,0,0,119,0,3,0,1,40,6,0,119,0,1,0,32,43,40,6,121,43,9,0,0,31,23,0,135,43,164,0,31,0,0,0,1,1,0,0,0,33,1,0,137,41,0,0,139,33,0,0,119,0,8,0,32,43,40,7,121,43,6,0,0,32,34,0,0,1,32,0,0,33,1,0,137,41,0,0,139,33,0,0,1,43,0,0,139,43,0,0,140,2,49,0,0,0,0,0,1,42,0,0,136,46,0,0,0,43,46,0,136,46,0,0,25,46,46,32,137,46,0,0,0,23,0,0,0,34,1,0,2,46,0,0,144,180,2,0,82,40,46,0,0,37,40,0,1,36,0,0,0,2,36,0,35,3,2,30,120,3,3,0,1,42,7,0,119,0,35,0,0,4,37,0,0,5,36,0,3,6,4,5,78,7,6,0,41,46,7,24,42,46,46,24,33,8,46,0,120,8,23,0,0,9,36,0,2,46,0,0,255,255,0,0,19,46,9,46,0,10,46,0,0,11,23,0,25,13,11,1,1,46,255,0,19,46,10,46,83,13,46,0,42,47,10,8,107,13,1,47,0,14,23,0,134,15,0,0,152,184,2,0,14,0,0,0,41,47,15,24,42,47,47,24,33,16,47,0,121,16,3,0,1,42,5,0,119,0,5,0,0,32,36,0,25,33,32,1,0,36,33,0,119,0,218,255,32,47,42,5,121,47,46,0,0,17,37,0,0,18,36,0,3,19,17,18,1,47,1,0,83,19,47,0,2,47,0,0,148,180,2,0,82,20,47,0,0,38,20,0,1,39,20,0,0,21,36,0,0,22,39,0,2,47,0,0,255,255,0,0,19,47,22,47,0,24,47,0,5,25,24,21,2,47,0,0,255,255,0,0,19,47,25,47,0,26,47,0,0,39,26,0,0,27,38,0,0,28,39,0,2,47,0,0,255,255,0,0,19,47,28,47,0,29,47,0,41,47,29,1,3,30,27,47,0,31,34,0,0,41,30,0,0,44,31,0,25,45,41,20,78,47,44,0,83,41,47,0,25,41,41,1,25,44,44,1,54,47,41,45,140,157,2,0,1,12,1,0,0,35,12,0,137,43,0,0,139,35,0,0,119,0,13,0,32,47,42,7,121,47,11,0,2,46,0,0,17,169,2,0,1,48,1,0,134,47,0,0,80,21,2,0,46,48,0,0,1,12,0,0,0,35,12,0,137,43,0,0,139,35,0,0,1,47,0,0,139,47,0,0,140,2,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,0,23,0,0,0,34,1,0,0,36,23,0,25,37,36,8,82,38,37,0,134,42,0,0,8,216,2,0,38,0,0,0,0,39,23,0,25,2,39,12,82,3,2,0,135,42,165,0,3,0,0,0,0,4,23,0,82,5,4,0,0,35,5,0,0,6,35,0,82,7,6,0,0,8,35,0,13,9,7,8,121,9,11,0,0,10,23,0,25,11,10,12,82,13,11,0,135,42,166,0,13,0,0,0,1,12,0,0,0,33,12,0,137,41,0,0,139,33,0,0,119,0,43,0,0,14,35,0,25,15,14,4,82,16,15,0,0,17,35,0,82,18,17,0,25,19,18,4,85,19,16,0,0,20,35,0,82,21,20,0,0,22,35,0,25,24,22,4,82,25,24,0,85,25,21,0,0,26,23,0,25,27,26,12,82,28,27,0,135,42,166,0,28,0,0,0,0,29,34,0,0,30,35,0,25,31,30,8,78,42,31,0,83,29,42,0,102,43,31,1,107,29,1,43,102,42,31,2,107,29,2,42,102,43,31,3,107,29,3,43,102,42,31,4,107,29,4,42,102,43,31,5,107,29,5,43,102,42,31,6,107,29,6,42,0,32,35,0,135,42,167,0,32,0,0,0,1,12,1,0,0,33,12,0,137,41,0,0,139,33,0,0,1,42,0,0,139,42,0,0,140,1,60,0,0,0,0,0,2,53,0,0,255,0,0,0,1,51,0,0,136,54,0,0,0,52,54,0,136,54,0,0,25,54,54,16,137,54,0,0,0,12,0,0,0,47,12,0,134,48,0,0,120,222,1,0,47,0,0,0,0,23,48,0,0,49,23,0,19,54,49,53,0,50,54,0,13,2,53,50,121,2,5,0,1,1,0,0,0,46,1,0,137,52,0,0,139,46,0,0,0,3,12,0,78,4,3,0,19,54,4,53,0,5,54,0,32,6,5,0,121,6,3,0,1,51,5,0,119,0,8,0,0,7,12,0,78,8,7,0,19,54,8,53,0,9,54,0,32,10,9,1,121,10,2,0,1,51,5,0,32,54,51,5,121,54,69,0,0,11,12,0,25,13,11,4,78,14,13,0,0,23,14,0,0,15,23,0,134,54,0,0,136,143,2,0,15,0,0,0,0,16,23,0,19,54,16,53,0,17,54,0,2,54,0,0,17,215,2,0,27,55,17,7,3,18,54,55,78,19,18,0,19,55,19,53,0,20,55,0,2,55,0,0,207,214,2,0,78,21,55,0,19,55,21,53,0,22,55,0,4,24,20,22,41,55,24,4,0,25,55,0,25,26,25,0,19,55,26,53,0,27,55,0,0,34,27,0,0,28,23,0,19,55,28,53,0,29,55,0,2,55,0,0,17,215,2,0,27,54,29,7,3,30,55,54,25,31,30,1,78,32,31,0,19,54,32,53,0,33,54,0,2,54,0,0,208,214,2,0,78,35,54,0,19,54,35,53,0,36,54,0,4,37,33,36,41,54,37,4,0,38,54,0,25,39,38,0,19,54,39,53,0,40,54,0,0,45,40,0,0,41,34,0,19,54,41,53,0,42,54,0,0,43,45,0,19,54,43,53,0,44,54,0,1,55,27,0,1,56,0,0,1,57,12,0,1,58,17,0,1,59,0,0,134,54,0,0,76,111,0,0,55,56,57,58,59,42,44,0,1,1,1,0,0,46,1,0,137,52,0,0,139,46,0,0,140,0,34,0,0,0,0,0,2,31,0,0,255,0,0,0,1,29,0,0,136,32,0,0,0,30,32,0,136,32,0,0,25,32,32,16,137,32,0,0,135,32,30,0,134,12,0,0,56,173,2,0,19,32,12,31,0,22,32,0,1,32,0,0,1,33,0,1,138,22,32,33,80,165,2,0,120,165,2,0,160,165,2,0,200,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,76,165,2,0,208,165,2,0,119,0,248,254,134,23,0,0,184,168,2,0,0,1,23,0,0,24,1,0,19,32,24,31,0,25,32,0,14,26,31,25,121,26,240,254,1,29,4,0,119,0,25,0,134,4,0,0,120,166,2,0,0,1,4,0,0,5,1,0,19,32,5,31,0,6,32,0,14,7,31,6,121,7,230,254,1,29,6,0,119,0,15,0,134,13,0,0,248,170,2,0,0,1,13,0,0,14,1,0,19,32,14,31,0,15,32,0,14,16,31,15,121,16,220,254,1,29,8,0,119,0,5,0,1,29,9,0,119,0,3,0,1,29,10,0,119,0,1,0,32,32,29,4,121,32,9,0,0,27,1,0,19,32,27,31,0,28,32,0,25,2,28,1,19,32,2,31,0,3,32,0,0,0,3,0,119,0,28,0,32,32,29,6,121,32,9,0,0,8,1,0,19,32,8,31,0,9,32,0,25,10,9,15,19,32,10,31,0,11,32,0,0,0,11,0,119,0,18,0,32,32,29,8,121,32,9,0,0,17,1,0,19,32,17,31,0,18,32,0,25,19,18,23,19,32,19,31,0,20,32,0,0,0,20,0,119,0,8,0,32,32,29,9,121,32,3,0,1,0,254,255,119,0,4,0,32,32,29,10,121,32,2,0,1,0,255,255,0,21,0,0,137,30,0,0,139,21,0,0,140,0,39,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,48,137,36,0,0,25,1,35,32,0,2,35,0,1,37,64,0,1,38,39,0,135,36,17,0,37,38,2,0,1,36,161,32,79,36,36,0,1,38,161,32,103,38,38,1,41,38,38,8,20,36,36,38,0,13,36,0,2,36,0,0,255,255,0,0,19,36,13,36,0,24,36,0,26,28,24,1,28,36,28,2,38,36,36,255,0,29,36,0,25,30,29,0,2,36,0,0,255,255,0,0,19,36,30,36,0,31,36,0,1,36,255,0,19,36,31,36,83,1,36,0,42,38,31,8,107,1,1,38,1,38,161,32,79,38,38,0,1,36,161,32,103,36,36,1,41,36,36,8,20,38,38,36,0,32,38,0,2,38,0,0,255,255,0,0,19,38,32,38,0,33,38,0,26,3,33,1,28,38,3,2,38,38,38,255,0,4,38,0,25,5,4,0,25,6,5,24,2,38,0,0,255,255,0,0,19,38,6,38,0,7,38,0,25,8,1,4,1,38,255,0,19,38,7,38,83,8,38,0,42,36,7,8,107,8,1,36,25,9,1,2,1,36,14,0,1,38,255,0,19,36,36,38,83,9,36,0,1,38,14,0,42,38,38,8,107,9,1,38,1,38,163,32,79,38,38,0,1,36,163,32,103,36,36,1,41,36,36,8,20,38,38,36,0,10,38,0,2,38,0,0,255,255,0,0,19,38,10,38,0,11,38,0,26,12,11,1,26,14,12,14,1,38,64,0,15,15,38,14,121,15,17,0,1,0,74,0,25,25,1,6,1,38,255,0,19,38,0,38,83,25,38,0,42,36,0,8,107,25,1,36,1,36,0,0], eb + 163840);
  HEAPU8.set([134,26,0,0,0,0,0,0,1,36,2,0,1,36,255,0,19,36,26,36,0,27,36,0,137,35,0,0,139,27,0,0,1,36,163,32,79,36,36,0,1,38,163,32,103,38,38,1,41,38,38,8,20,36,36,38,0,16,36,0,2,36,0,0,255,255,0,0,19,36,16,36,0,17,36,0,26,18,17,1,26,19,18,14,28,36,19,12,38,36,36,255,0,20,36,0,27,21,20,12,25,22,21,14,2,36,0,0,255,255,0,0,19,36,22,36,0,23,36,0,0,0,23,0,25,25,1,6,1,36,255,0,19,36,0,36,83,25,36,0,42,38,0,8,107,25,1,38,1,38,0,0,134,26,0,0,0,0,0,0,1,38,2,0,1,38,255,0,19,38,26,38,0,27,38,0,137,35,0,0,139,27,0,0,140,0,39,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,96,137,36,0,0,25,1,35,80,0,2,35,0,1,37,64,0,1,38,38,0,135,36,17,0,37,38,2,0,1,36,161,32,79,36,36,0,1,38,161,32,103,38,38,1,41,38,38,8,20,36,36,38,0,13,36,0,2,36,0,0,255,255,0,0,19,36,13,36,0,24,36,0,26,28,24,1,28,36,28,2,38,36,36,255,0,29,36,0,25,30,29,0,2,36,0,0,255,255,0,0,19,36,30,36,0,31,36,0,1,36,255,0,19,36,31,36,83,1,36,0,42,38,31,8,107,1,1,38,1,38,161,32,79,38,38,0,1,36,161,32,103,36,36,1,41,36,36,8,20,38,38,36,0,32,38,0,2,38,0,0,255,255,0,0,19,38,32,38,0,33,38,0,26,3,33,1,28,38,3,2,38,38,38,255,0,4,38,0,25,5,4,0,25,6,5,24,2,38,0,0,255,255,0,0,19,38,6,38,0,7,38,0,25,8,1,4,1,38,255,0,19,38,7,38,83,8,38,0,42,36,7,8,107,8,1,36,25,9,1,2,1,36,14,0,1,38,255,0,19,36,36,38,83,9,36,0,1,38,14,0,42,38,38,8,107,9,1,38,1,38,163,32,79,38,38,0,1,36,163,32,103,36,36,1,41,36,36,8,20,38,38,36,0,10,38,0,2,38,0,0,255,255,0,0,19,38,10,38,0,11,38,0,26,12,11,1,26,14,12,14,1,38,172,0,15,15,38,14,121,15,17,0,1,0,178,0,25,25,1,6,1,38,255,0,19,38,0,38,83,25,38,0,42,36,0,8,107,25,1,36,1,36,0,0,134,26,0,0,0,0,0,0,1,36,2,0,1,36,255,0,19,36,26,36,0,27,36,0,137,35,0,0,139,27,0,0,1,36,163,32,79,36,36,0,1,38,163,32,103,38,38,1,41,38,38,8,20,36,36,38,0,16,36,0,2,36,0,0,255,255,0,0,19,36,16,36,0,17,36,0,26,18,17,1,26,19,18,14,28,36,19,12,38,36,36,255,0,20,36,0,27,21,20,12,25,22,21,14,2,36,0,0,255,255,0,0,19,36,22,36,0,23,36,0,0,0,23,0,25,25,1,6,1,36,255,0,19,36,0,36,83,25,36,0,42,38,0,8,107,25,1,38,1,38,0,0,134,26,0,0,0,0,0,0,1,38,2,0,1,38,255,0,19,38,26,38,0,27,38,0,137,35,0,0,139,27,0,0,140,0,39,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,48,137,36,0,0,25,1,35,32,0,2,35,0,1,37,64,0,1,38,40,0,135,36,17,0,37,38,2,0,1,36,161,32,79,36,36,0,1,38,161,32,103,38,38,1,41,38,38,8,20,36,36,38,0,13,36,0,2,36,0,0,255,255,0,0,19,36,13,36,0,24,36,0,26,28,24,1,28,36,28,2,38,36,36,255,0,29,36,0,25,30,29,0,2,36,0,0,255,255,0,0,19,36,30,36,0,31,36,0,1,36,255,0,19,36,31,36,83,1,36,0,42,38,31,8,107,1,1,38,1,38,161,32,79,38,38,0,1,36,161,32,103,36,36,1,41,36,36,8,20,38,38,36,0,32,38,0,2,38,0,0,255,255,0,0,19,38,32,38,0,33,38,0,26,3,33,1,28,38,3,2,38,38,38,255,0,4,38,0,25,5,4,0,25,6,5,24,2,38,0,0,255,255,0,0,19,38,6,38,0,7,38,0,25,8,1,4,1,38,255,0,19,38,7,38,83,8,38,0,42,36,7,8,107,8,1,36,25,9,1,2,1,36,14,0,1,38,255,0,19,36,36,38,83,9,36,0,1,38,14,0,42,38,38,8,107,9,1,38,1,38,163,32,79,38,38,0,1,36,163,32,103,36,36,1,41,36,36,8,20,38,38,36,0,10,38,0,2,38,0,0,255,255,0,0,19,38,10,38,0,11,38,0,26,12,11,1,26,14,12,14,1,38,64,0,15,15,38,14,121,15,17,0,1,0,74,0,25,25,1,6,1,38,255,0,19,38,0,38,83,25,38,0,42,36,0,8,107,25,1,36,1,36,0,0,134,26,0,0,0,0,0,0,1,36,2,0,1,36,255,0,19,36,26,36,0,27,36,0,137,35,0,0,139,27,0,0,1,36,163,32,79,36,36,0,1,38,163,32,103,38,38,1,41,38,38,8,20,36,36,38,0,16,36,0,2,36,0,0,255,255,0,0,19,36,16,36,0,17,36,0,26,18,17,1,26,19,18,14,28,36,19,12,38,36,36,255,0,20,36,0,27,21,20,12,25,22,21,14,2,36,0,0,255,255,0,0,19,36,22,36,0,23,36,0,0,0,23,0,25,25,1,6,1,36,255,0,19,36,0,36,83,25,36,0,42,38,0,8,107,25,1,38,1,38,0,0,134,26,0,0,0,0,0,0,1,38,2,0,1,38,255,0,19,38,26,38,0,27,38,0,137,35,0,0,139,27,0,0,140,0,39,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,48,137,36,0,0,25,1,35,32,0,2,35,0,1,37,64,0,1,38,37,0,135,36,17,0,37,38,2,0,1,36,161,32,79,36,36,0,1,38,161,32,103,38,38,1,41,38,38,8,20,36,36,38,0,13,36,0,2,36,0,0,255,255,0,0,19,36,13,36,0,24,36,0,26,28,24,1,28,36,28,3,38,36,36,255,0,29,36,0,25,30,29,0,2,36,0,0,255,255,0,0,19,36,30,36,0,31,36,0,1,36,255,0,19,36,31,36,83,1,36,0,42,38,31,8,107,1,1,38,1,38,161,32,79,38,38,0,1,36,161,32,103,36,36,1,41,36,36,8,20,38,38,36,0,32,38,0,2,38,0,0,255,255,0,0,19,38,32,38,0,33,38,0,26,3,33,1,28,38,3,3,38,38,38,255,0,4,38,0,25,5,4,0,25,6,5,24,2,38,0,0,255,255,0,0,19,38,6,38,0,7,38,0,25,8,1,4,1,38,255,0,19,38,7,38,83,8,38,0,42,36,7,8,107,8,1,36,25,9,1,2,1,36,10,0,1,38,255,0,19,36,36,38,83,9,36,0,1,38,10,0,42,38,38,8,107,9,1,38,1,38,163,32,79,38,38,0,1,36,163,32,103,36,36,1,41,36,36,8,20,38,38,36,0,10,38,0,2,38,0,0,255,255,0,0,19,38,10,38,0,11,38,0,26,12,11,1,26,14,12,10,1,38,52,0,15,15,38,14,121,15,17,0,1,0,58,0,25,25,1,6,1,38,255,0,19,38,0,38,83,25,38,0,42,36,0,8,107,25,1,36,1,36,0,0,134,26,0,0,0,0,0,0,1,36,2,0,1,36,255,0,19,36,26,36,0,27,36,0,137,35,0,0,139,27,0,0,1,36,163,32,79,36,36,0,1,38,163,32,103,38,38,1,41,38,38,8,20,36,36,38,0,16,36,0,2,36,0,0,255,255,0,0,19,36,16,36,0,17,36,0,26,18,17,1,26,19,18,10,28,36,19,12,38,36,36,255,0,20,36,0,27,21,20,12,25,22,21,10,2,36,0,0,255,255,0,0,19,36,22,36,0,23,36,0,0,0,23,0,25,25,1,6,1,36,255,0,19,36,0,36,83,25,36,0,42,38,0,8,107,25,1,38,1,38,0,0,134,26,0,0,0,0,0,0,1,38,2,0,1,38,255,0,19,38,26,38,0,27,38,0,137,35,0,0,139,27,0,0,140,0,37,0,0,0,0,0,2,33,0,0,255,0,0,0,2,34,0,0,217,214,2,0,1,31,0,0,136,35,0,0,0,32,35,0,136,35,0,0,25,35,35,16,137,35,0,0,135,35,168,0,78,23,34,0,19,35,23,33,0,25,35,0,33,26,25,0,121,26,3,0,137,32,0,0,139,0,0,0,2,35,0,0,224,214,2,0,78,27,35,0,19,35,27,33,0,28,35,0,32,29,28,2,120,29,15,0,134,35,0,0,60,218,1,0,134,35,0,0,248,223,2,0,134,35,0,0,4,95,2,0,1,36,0,0,135,35,169,0,36,0,0,0,1,36,1,0,135,35,169,0,36,0,0,0,137,32,0,0,139,0,0,0,1,35,207,15,135,30,0,0,35,0,0,0,33,2,30,0,121,2,50,0,1,0,207,15,0,3,0,0,1,35,0,0,14,4,3,35,120,4,2,0,119,0,44,0,135,5,1,0,0,1,5,0,0,6,1,0,1,35,0,0,14,7,6,35,120,7,2,0,119,0,30,0,0,8,1,0,82,9,8,0,25,10,9,8,82,11,10,0,0,12,11,0,0,13,12,0,1,35,0,0,14,14,13,35,120,14,2,0,119,0,15,0,0,15,0,0,0,16,1,0,134,17,0,0,16,21,1,0,15,16,0,0,32,18,17,0,121,18,6,0,78,19,34,0,19,35,19,33,0,20,35,0,33,21,20,0,120,21,10,0,1,12,0,0,119,0,238,255,0,24,1,0,135,35,3,0,24,0,0,0,1,1,0,0,119,0,223,255,1,0,0,0,119,0,214,255,0,22,1,0,135,35,3,0,22,0,0,0,137,32,0,0,139,0,0,0,135,35,170,0,137,32,0,0,139,0,0,0,140,0,42,0,0,0,0,0,2,38,0,0,255,0,0,0,2,39,0,0,217,214,2,0,1,36,0,0,136,40,0,0,0,37,40,0,136,40,0,0,25,40,40,16,137,40,0,0,0,12,37,0,1,1,0,0,0,23,1,0,19,40,23,38,0,30,40,0,34,31,30,10,120,31,2,0,119,0,24,0,0,32,1,0,19,40,32,38,0,33,40,0,2,40,0,0,17,215,2,0,27,41,33,7,3,34,40,41,25,35,34,6,78,2,35,0,19,41,2,38,0,3,41,0,32,4,3,8,0,5,1,0,120,4,3,0,1,36,4,0,119,0,8,0,19,41,5,38,0,6,41,0,25,7,6,1,19,41,7,38,0,8,41,0,0,1,8,0,119,0,228,255,32,41,36,4,121,41,4,0,134,41,0,0,136,143,2,0,5,0,0,0,78,9,39,0,41,41,9,24,42,41,41,24,33,10,41,0,40,41,10,1,0,11,41,0,120,11,3,0,1,36,13,0,119,0,48,0,134,13,0,0,192,200,2,0,0,0,13,0,0,14,0,0,19,41,14,38,0,15,41,0,13,16,15,38,121,16,3,0,1,36,13,0,119,0,38,0,0,17,0,0,134,18,0,0,40,2,2,0,17,0,0,0,41,41,18,24,42,41,41,24,33,19,41,0,120,19,230,255,0,20,0,0,25,21,12,3,83,21,20,0,134,41,0,0,116,109,2,0,12,0,0,0,134,22,0,0,52,189,2,0,12,0,0,0,0,1,22,0,2,41,0,0,224,214,2,0,78,24,41,0,19,41,24,38,0,25,41,0,32,26,25,1,121,26,9,0,0,27,1,0,19,41,27,38,0,28,41,0,32,29,28,5,121,29,4,0,1,41,1,0,83,39,41,0,119,0,205,255,1,40,0,0,135,41,169,0,40,0,0,0,119,0,201,255,32,41,36,13,121,41,3,0,137,37,0,0,139,0,0,0,139,0,0,0,140,0,29,0,0,0,0,0,2,24,0,0,255,0,0,0,2,25,0,0,221,24,0,0,1,22,0,0,136,26,0,0,0,23,26,0,136,26,0,0,25,26,26,16,137,26,0,0,2,26,0,0,186,214,2,0,78,15,26,0,0,12,15,0,135,16,171,0,41,26,16,24,42,26,26,24,33,17,26,0,121,17,3,0,1,22,3,0,119,0,79,0,135,18,172,0,41,26,18,24,42,26,26,24,33,19,26,0,121,19,3,0,1,22,5,0,119,0,72,0,0,20,12,0,41,26,20,24,42,26,26,24,33,21,26,0,121,21,3,0,1,12,0,0,119,0,7,0,135,26,173,0,1,27,208,24,1,28,0,0,134,26,0,0,16,21,1,0,27,28,0,0,1,26,0,0,134,2,0,0,16,21,1,0,25,26,0,0,32,3,2,255,121,3,3,0,134,26,0,0,192,180,2,0,134,4,0,0,24,33,2,0,0,1,4,0,0,5,1,0,41,26,5,24,42,26,26,24,33,6,26,0,120,6,2,0,119,0,240,255,0,7,1,0,19,26,7,24,0,8,26,0,32,9,8,1,120,9,8,0,0,10,1,0,19,26,10,24,0,11,26,0,32,13,11,2,121,13,230,255,1,22,14,0,119,0,30,0,1,28,237,24,1,27,0,0,134,26,0,0,16,21,1,0,28,27,0,0,134,26,0,0,84,54,2,0,134,26,0,0,92,154,1,0,1,27,250,24,1,28,0,0,134,26,0,0,16,21,1,0,27,28,0,0,134,26,0,0,144,203,2,0,1,28,7,25,1,27,0,0,134,26,0,0,16,21,1,0,28,27,0,0,134,26,0,0,96,211,2,0,1,27,20,25,1,28,0,0,134,26,0,0,16,21,1,0,27,28,0,0,119,0,172,255,32,26,22,3,121,26,10,0,1,28,89,0,134,26,0,0,52,222,2,0,28,0,0,0,1,0,1,0,0,14,0,0,137,23,0,0,139,14,0,0,119,0,18,0,32,26,22,5,121,26,10,0,1,28,90,0,134,26,0,0,52,222,2,0,28,0,0,0,1,0,0,0,0,14,0,0,137,23,0,0,139,14,0,0,119,0,7,0,32,26,22,14,121,26,5,0,1,0,2,0,0,14,0,0,137,23,0,0,139,14,0,0,1,26,0,0,139,26,0,0,140,0,35,0,0,0,0,0,2,30,0,0,255,0,0,0,2,31,0,0,255,255,0,0,2,32,0,0,158,215,2,0,1,28,0,0,136,33,0,0,0,29,33,0,136,33,0,0,25,33,33,16,137,33,0,0,2,33,0,0,84,176,3,0,134,12,0,0,84,80,0,0,33,0,0,0,0,0,12,0,0,21,0,0,19,33,21,30,0,22,33,0,13,23,30,22,120,23,76,0,0,24,0,0,19,33,24,30,0,25,33,0,2,33,0,0,20,108,3,0,27,34,25,37,3,26,33,34,25,27,26,1,79,34,27,0,103,33,27,1,41,33,33,8,20,34,34,33,0,2,34,0,19,34,2,31,0,3,34,0,79,34,32,0,103,33,32,1,41,33,33,8,20,34,34,33,0,4,34,0,19,34,4,31,0,5,34,0,25,6,5,1,14,7,3,6,121,7,28,0,0,8,0,0,19,34,8,30,0,9,34,0,2,34,0,0,20,108,3,0,27,33,9,37,3,10,34,33,25,11,10,1,79,33,11,0,103,34,11,1,41,34,34,8,20,33,33,34,0,13,33,0,41,33,13,16,42,33,33,16,33,14,33,0,121,14,6,0,1,34,54,0,134,33,0,0,52,222,2,0,34,0,0,0,119,0,199,255,1,34,56,0,134,33,0,0,52,222,2,0,34,0,0,0,119,0,194,255,134,15,0,0,4,161,2,0,0,1,15,0,0,16,1,0,19,33,16,30,0,17,33,0,1,33,254,0,1,34,2,0,138,17,33,34,56,182,2,0,76,182,2,0,0,19,0,0,0,20,1,0,134,33,0,0,72,183,1,0,19,20,0,0,119,0,177,255,0,18,0,0,134,33,0,0,148,201,0,0,18,0,0,0,119,0,172,255,119,0,171,255,137,29,0,0,1,33,1,0,139,33,0,0,140,0,42,0,0,0,0,0,1,36,0,0,136,38,0,0,0,37,38,0,1,38,67,20,78,0,38,0,41,38,0,24,42,38,38,24,33,1,38,0,120,1,12,0,135,12,52,0,30,38,12,5,38,38,38,255,0,23,38,0,25,30,23,1,1,38,255,0,19,38,30,38,0,31,38,0,2,38,0,0,218,214,2,0,83,38,31,0,2,38,0,0,218,214,2,0,78,32,38,0,1,38,255,0,19,38,32,38,0,33,38,0,25,34,33,27,2,38,0,0,255,255,0,0,19,38,34,38,0,35,38,0,1,38,161,32,79,38,38,0,1,39,161,32,103,39,39,1,41,39,39,8,20,38,38,39,0,2,38,0,2,38,0,0,255,255,0,0,19,38,2,38,0,3,38,0,1,38,130,0,4,4,3,38,28,38,4,2,38,38,38,255,0,5,38,0,2,38,0,0,255,255,0,0,19,38,5,38,0,6,38,0,1,38,163,32,79,38,38,0,1,39,163,32,103,39,39,1,41,39,39,8,20,38,38,39,0,7,38,0,2,38,0,0,255,255,0,0,19,38,7,38,0,8,38,0,26,9,8,64,28,38,9,2,38,38,38,255,0,10,38,0,2,38,0,0,255,255,0,0,19,38,10,38,0,11,38,0,1,39,1,0,1,40,1,0,135,38,18,0,35,39,6,11,40,0,0,0,2,38,0,0,218,214,2,0,78,13,38,0,1,38,255,0,19,38,13,38,0,14,38,0,1,38,163,32,79,38,38,0,1,40,163,32,103,40,40,1,41,40,40,8,20,38,38,40,0,15,38,0,2,38,0,0,255,255,0,0,19,38,15,38,0,16,38,0,26,17,16,1,26,18,17,15,25,19,18,2,2,38,0,0,255,255,0,0,19,38,19,38,0,20,38,0,1,40,9,0,1,39,47,0,1,41,1,0,135,38,18,0,40,14,39,20,41,0,0,0,2,38,0,0,218,214,2,0,78,21,38,0,1,38,255,0,19,38,21,38,0,22,38,0,1,38,163,32,79,38,38,0,1,41,163,32,103,41,41,1,41,41,41,8,20,38,38,41,0,24,38,0,2,38,0,0,255,255,0,0,19,38,24,38,0,25,38,0,26,26,25,1,26,27,26,15,25,28,27,2,2,38,0,0,255,255,0,0,19,38,28,38,0,29,38,0,1,41,9,0,1,39,47,0,1,40,0,0,135,38,18,0,41,22,39,29,40,0,0,0,1,40,50,0,1,39,0,0,134,38,0,0,16,135,2,0,40,39,0,0,139,0,0,0,140,1,36,0,0,0,0,0,2,32,0,0,255,0,0,0,1,28,0,0,136,33,0,0,0,29,33,0,136,33,0,0,25,33,33,16,137,33,0,0,0,12,0,0,0,22,12,0,134,23,0,0,0,218,2,0,22,0,0,0,41,33,23,24,42,33,33,24,33,24,33,0,120,24,5,0,1,1,0,0,0,19,1,0,137,29,0,0,139,19,0,0,2,33,0,0,152,180,2,0,82,25,33,0,0,21,25,0,1,20,170,255,0,26,20,0,19,33,26,32,0,2,33,0,1,33,200,0,15,3,2,33,120,3,3,0,1,28,8,0,119,0,21,0,0,4,21,0,0,5,20,0,19,33,5,32,0,6,33,0,27,33,6,14,3,7,4,33,78,8,7,0,19,33,8,32,0,9,33,0,13,10,32,9,121,10,3,0,1,28,6,0,119,0,8,0,0,17,20,0,25,33,17,1,41,33,33,24,42,33,33,24,0,18,33,0,0,20,18,0,119,0,229,255,32,33,28,6,121,33,22,0,0,11,21,0,0,13,20,0,19,33,13,32,0,14,33,0,27,33,14,14,3,15,11,33,0,16,12,0,0,27,15,0,0,30,16,0,25,31,27,14,78,33,30,0,83,27,33,0,25,27,27,1,25,30,30,1,54,33,27,31,168,185,2,0,1,1,1,0,0,19,1,0,137,29,0,0,139,19,0,0,119,0,13,0,32,33,28,8,121,33,11,0,2,34,0,0,34,169,2,0,1,35,1,0,134,33,0,0,80,21,2,0,34,35,0,0,1,1,0,0,0,19,1,0,137,29,0,0,139,19,0,0,1,33,0,0,139,33,0,0,140,1,36,0,0,0,0,0,2,32,0,0,255,0,0,0,1,28,0,0,136,33,0,0,0,29,33,0,136,33,0,0,25,33,33,16,137,33,0,0,0,12,0,0,0,22,12,0,134,23,0,0,0,218,2,0,22,0,0,0,41,33,23,24,42,33,33,24,33,24,33,0,120,24,5,0,1,1,0,0,0,19,1,0,137,29,0,0,139,19,0,0,2,33,0,0,152,180,2,0,82,25,33,0,0,21,25,0,1,20,0,0,0,26,20,0,19,33,26,32,0,2,33,0,1,33,200,0,15,3,2,33,120,3,3,0,1,28,8,0,119,0,21,0,0,4,21,0,0,5,20,0,19,33,5,32,0,6,33,0,27,33,6,14,3,7,4,33,78,8,7,0,19,33,8,32,0,9,33,0,13,10,32,9,121,10,3,0,1,28,6,0,119,0,8,0,0,17,20,0,25,33,17,1,41,33,33,24,42,33,33,24,0,18,33,0,0,20,18,0,119,0,229,255,32,33,28,6,121,33,22,0,0,11,21,0,0,13,20,0,19,33,13,32,0,14,33,0,27,33,14,14,3,15,11,33,0,16,12,0,0,27,15,0,0,30,16,0,25,31,27,14,78,33,30,0,83,27,33,0,25,27,27,1,25,30,30,1,54,33,27,31,28,187,2,0,1,1,1,0,0,19,1,0,137,29,0,0,139,19,0,0,119,0,13,0,32,33,28,8,121,33,11,0,2,34,0,0,34,169,2,0,1,35,1,0,134,33,0,0,80,21,2,0,34,35,0,0,1,1,0,0,0,19,1,0,137,29,0,0,139,19,0,0,1,33,0,0,139,33,0,0,140,0,27,0,0,0,0,0,2,23,0,0,217,214,2,0,1,21,0,0,136,24,0,0,0,22,24,0,134,24,0,0,120,175,2,0,78,0,23,0,41,24,0,24,42,24,24,24,33,1,24,0,121,1,3,0,1,24,0,0,139,24,0,0,1,25,24,15,1,26,0,0,134,24,0,0,16,21,1,0,25,26,0,0,78,12,23,0,41,24,12,24,42,24,24,24,33,14,24,0,40,24,14,1,0,15,24,0,120,15,2,0,119,0,74,0,1,26,36,15,1,25,0,0,134,24,0,0,16,21,1,0,26,25,0,0,78,16,23,0,41,24,16,24,42,24,24,24,33,17,24,0,120,17,64,0,134,24,0,0,156,97,2,0,78,18,23,0,41,24,18,24,42,24,24,24,33,19,24,0,120,19,57,0,1,25,49,15,1,26,0,0,134,24,0,0,16,21,1,0,25,26,0,0,78,20,23,0,41,24,20,24,42,24,24,24,33,2,24,0,120,2,47,0,134,24,0,0,0,177,2,0,78,3,23,0,41,24,3,24,42,24,24,24,33,4,24,0,120,4,40,0,1,26,62,15,1,25,0,0,134,24,0,0,16,21,1,0,26,25,0,0,78,5,23,0,41,24,5,24,42,24,24,24,33,6,24,0,120,6,30,0,134,24,0,0,116,210,2,0,78,7,23,0,41,24,7,24,42,24,24,24,33,8,24,0,120,8,23,0,1,25,75,15,1,26,0,0,134,24,0,0,16,21,1,0,25,26,0,0,78,9,23,0,41,24,9,24,42,24,24,24,33,10,24,0,120,10,13,0,135,24,174,0,78,11,23,0,41,24,11,24,42,24,24,24,33,13,24,0,120,13,7,0,1,26,88,15,1,25,0,0,134,24,0,0,16,21,1,0,26,25,0,0,119,0,176,255,1,25,101,15,1,26,0,0,134,24,0,0,16,21,1,0,25,26,0,0,1,24,0,0,139,24,0,0,140,1,40,0,0,0,0,0,1,36,0,0,136,38,0,0,0,37,38,0,136,38,0,0,25,38,38,16,137,38,0,0,0,1,0,0,0,30,1,0,25,31,30,3,78,32,31,0,0,12,32,0,0,33,1,0,134,34,0,0,76,150,2,0,33,0,0,0,0,23,34,0,0,35,23,0,41,38,35,24,42,38,38,24,33,2,38,0,121,2,46,0,2,38,0,0,207,214,2,0,78,3,38,0,2,38,0,0,208,214,2,0,78,4,38,0,135,38,48,0,3,4,0,0,1,39,0,0,135,38,49,0,39,0,0,0,1,38,139,20,78,5,38,0,41,38,5,24,42,38,38,24,33,6,38,0,120,6,27,0,0,7,23,0,1,38,255,0,19,38,7,38,0,8,38,0,2,38,0,0,64,180,2,0,82,9,38,0,78,10,9,0,1,38,255,0,19,38,10,38,0,11,38,0,3,13,11,8,1,38,255,0,19,38,13,38,0,14,38,0,83,9,14,0,0,15,12,0,1,38,255,0,19,38,15,38,0,16,38,0,34,17,16,10,121,17,5,0,0,18,23,0,134,38,0,0,60,219,2,0,18,0,0,0,134,38,0,0,4,95,2,0,0,19,12,0,1,38,255,0,19,38,19,38,0,20,38,0,2,38,0,0,17,215,2,0,27,39,20,7,3,21,38,39,78,22,21,0,0,24,12,0,1,39,255,0,19,39,24,39,0,25,39,0,2,39,0,0,17,215,2,0,27,38,25,7,3,26,39,38,25,27,26,1,78,28,27,0,135,29,69,0,22,28,0,0,137,37,0,0,139,29,0,0,140,2,36,0,0,0,0,0,1,31,0,0,136,33,0,0,0,32,33,0,136,33,0,0,1,34,16,8,3,33,33,34,137,33,0,0,1,33,8,4,3,25,32,33,25,26,32,8,0,12,0,0,0,23,1,0,1,34,0,0,135,33,175,0,34,0,0,0,0,27,12,0,2,33,0,0,255,255,0,0,19,33,27,33,0,28,33,0,2,33,0,0,158,215,2,0,79,33,33,0,2,34,0,0,158,215,2,0,103,34,34,1,41,34,34,8,20,33,33,34,0,29,33,0,2,33,0,0,255,255,0,0,19,33,29,33,0,30,33,0,13,2,28,30,121,2,6,0,1,34,64,0,1,35,98,0,135,33,17,0,34,35,25,0,119,0,5,0,0,3,12,0,134,33,0,0,116,120,2,0,3,25,0,0,1,35,64,0,1,34,97,0,135,33,17,0,35,34,26,0,135,33,55,0,25,26,0,0,0,4,23,0,135,33,83,0,4,26,0,0,135,33,55,0,25,26,0,0,1,33,161,32,79,33,33,0,1,34,161,32,103,34,34,1,41,34,34,8,20,33,33,34,0,5,33,0,2,33,0,0,255,255,0,0,19,33,5,33,0,6,33,0,26,7,6,1,26,8,7,0,28,33,8,2,38,33,33,255,0,9,33,0,25,10,9,0,2,33,0,0,255,255,0,0,19,33,10,33,0,11,33,0,1,33,163,32,79,33,33,0,1,34,163,32,103,34,34,1,41,34,34,8,20,33,33,34,0,13,33,0,2,33,0,0,255,255,0,0,19,33,13,33,0,14,33,0,26,15,14,1,26,16,15,84,26,17,16,0,28,33,17,2,38,33,33,255,0,18,33,0,25,19,18,0,25,20,19,2,25,21,20,64,25,22,21,2,2,33,0,0,255,255,0,0,19,33,22,33,0,24,33,0,135,33,63,0,11,24,25,0,1,34,100,0,1,35,0,0,134,33,0,0,16,135,2,0,34,35,0,0,137,32,0,0,139,0,0,0,140,6,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,32,137,41,0,0,25,8,40,24,0,35,0,0,0,36,1,0,0,37,2,0,0,38,3,0,0,6,4,0,0,7,5,0,0,11,35,0,1,41,255,0,19,41,11,41,83,8,41,0,42,42,11,8,107,8,1,42,25,12,8,2,0,13,36,0,1,42,255,0,19,42,13,42,83,12,42,0,42,41,13,8,107,12,1,41,25,14,8,4,0,15,35,0,2,41,0,0,255,255,0,0,19,41,15,41,0,16,41,0,0,17,37,0,2,41,0,0,255,255,0,0,19,41,17,41,0,18,41,0,3,19,16,18,2,41,0,0,255,255,0,0,19,41,19,41,0,20,41,0,1,41,255,0,19,41,20,41,83,14,41,0,42,42,20,8,107,14,1,42,25,21,8,6,0,22,36,0,2,42,0,0,255,255,0,0,19,42,22,42,0,23,42,0,0,24,38,0,2,42,0,0,255,255,0,0,19,42,24,42,0,25,42,0,3,26,23,25,2,42,0,0,255,255,0,0,19,42,26,42,0,27,42,0,1,42,255,0,19,42,27,42,83,21,42,0,42,41,27,8,107,21,1,41,0,28,7,0,135,29,176,0,28,0,0,0,0,9,29,0,0,30,6,0,0,31,9,0,134,32,0,0,0,0,0,0,8,30,31,0,0,10,32,0,0,33,9,0,135,41,70,0,33,0,0,0,0,34,10,0,137,40,0,0,139,34,0,0,140,3,46,0,0,0,0,0,2,42,0,0,255,0,0,0,1,40,0,0,136,43,0,0,0,41,43,0,136,43,0,0,25,43,43,16,137,43,0,0,25,38,41,2,0,23,0,0,0,34,1,0,0,35,2,0,0,39,23,0,83,38,39,0,0,3,35,0,2,43,0,0,255,255,0,0,19,43,3,43,0,4,43,0,25,5,38,1,1,44,10,0,135,43,59,0,4,5,44,0,0,6,34,0,19,43,6,42,0,7,43,0,2,43,0,0,17,215,2,0,27,44,7,7,3,8,43,44,78,9,8,0,19,44,9,42,0,10,44,0,2,44,0,0,207,214,2,0,78,11,44,0,19,44,11,42,0,12,44,0,4,13,10,12,41,44,13,4,0,14,44,0,25,15,14,0,19,44,15,42,0,16,44,0,0,36,16,0,0,17,34,0,19,44,17,42,0,18,44,0,2,44,0,0,17,215,2,0,27,43,18,7,3,19,44,43,25,20,19,1,78,21,20,0,19,43,21,42,0,22,43,0,2,43,0,0,208,214,2,0,78,24,43,0,19,43,24,42,0,25,43,0,4,26,22,25,41,43,26,4,0,27,43,0,25,28,27,0,19,43,28,42,0,29,43,0,0,37,29,0,0,30,36,0,19,43,30,42,0,31,43,0,0,32,37,0,19,43,32,42,0,33,43,0,135,43,7,0,31,33,38,0,1,44,50,0,1,45,0,0,134,43,0,0,16,135,2,0,44,45,0,0,137,41,0,0,139,0,0,0,140,1,34,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,1,32,16,8,3,31,31,32,137,31,0,0,1,31,8,4,3,12,30,31,25,22,30,8,0,1,0,0,1,32,2,0,135,31,175,0,32,0,0,0,0,23,1,0,2,31,0,0,255,255,0,0,19,31,23,31,0,24,31,0,2,31,0,0,158,215,2,0,79,31,31,0,2,32,0,0,158,215,2,0,103,32,32,1,41,32,32,8,20,31,31,32,0,25,31,0,2,31,0,0,255,255,0,0,19,31,25,31,0,26,31,0,13,27,24,26,121,27,6,0,1,32,64,0,1,33,98,0,135,31,17,0,32,33,12,0,119,0,5,0,0,28,1,0,134,31,0,0,116,120,2,0,28,12,0,0,1,33,64,0,1,32,91,0,135,31,17,0,33,32,22,0,135,31,55,0,12,22,0,0,1,31,161,32,79,31,31,0,1,32,161,32,103,32,32,1,41,32,32,8,20,31,31,32,0,2,31,0,2,31,0,0,255,255,0,0,19,31,2,31,0,3,31,0,26,4,3,1,26,5,4,0,28,31,5,2,38,31,31,255,0,6,31,0,25,7,6,0,2,31,0,0,255,255,0,0,19,31,7,31,0,8,31,0,1,31,163,32,79,31,31,0,1,32,163,32,103,32,32,1,41,32,32,8,20,31,31,32,0,9,31,0,2,31,0,0,255,255,0,0,19,31,9,31,0,10,31,0,26,11,10,1,26,13,11,84,26,14,13,0,28,31,14,2,38,31,31,255,0,15,31,0,25,16,15,0,25,17,16,2,25,18,17,64,25,19,18,2,2,31,0,0,255,255,0,0,19,31,19,31,0,20,31,0,135,31,63,0,8,20,12,0,1,31,64,20,78,21,31,0,1,32,44,1,134,31,0,0,16,135,2,0,32,21,0,0,137,30,0,0,139,0,0,0,140,2,32,0,0,0,0,0,1,27,0,0,136,29,0,0,0,28,29,0,136,29,0,0,1,30,16,8,3,29,29,30,137,29,0,0,1,29,8,4,3,21,28,29,25,22,28,8,0,12,0,0,0,20,1,0,1,30,1,0,135,29,175,0,30,0,0,0,0,23,12,0,134,29,0,0,116,120,2,0,23,21,0,0,1,30,64,0,1,31,104,0,135,29,17,0,30,31,22,0,135,29,55,0,21,22,0,0,0,24,20,0,134,29,0,0,116,120,2,0,24,22,0,0,135,29,55,0,21,22,0,0,1,31,64,0,1,30,105,0,135,29,17,0,31,30,22,0,135,29,55,0,21,22,0,0,1,29,161,32,79,29,29,0,1,30,161,32,103,30,30,1,41,30,30,8,20,29,29,30,0,25,29,0,2,29,0,0,255,255,0,0,19,29,25,29,0,26,29,0,26,2,26,1,26,3,2,0,28,29,3,2,38,29,29,255,0,4,29,0,25,5,4,0,2,29,0,0,255,255,0,0,19,29,5,29,0,6,29,0,1,29,163,32,79,29,29,0,1,30,163,32,103,30,30,1,41,30,30,8,20,29,29,30,0,7,29,0,2,29,0,0,255,255,0,0,19,29,7,29,0,8,29,0,26,9,8,1,26,10,9,84,26,11,10,0,28,29,11,2,38,29,29,255,0,13,29,0,25,14,13,0,25,15,14,2,25,16,15,64,25,17,16,2,2,29,0,0,255,255,0,0,19,29,17,29,0,18,29,0,135,29,63,0,6,18,21,0,1,29,64,20,78,19,29,0,1,30,44,1,134,29,0,0,16,135,2,0,30,19,0,0,137,28,0,0,139,0,0,0,140,3,37,0,0,0,0,0,1,32,0,0,136,34,0,0,0,33,34,0,136,34,0,0,25,34,34,32,137,34,0,0,25,28,33,2,0,23,0,0,0,26,1,0,0,27,2,0,2,34,0,0,163,215,2,0,78,29,34,0,1,34,255,0,19,34,29,34,0,30,34,0,25,31,30,47,2,34,0,0,255,255,0,0,19,34,31,34,0,3,34,0,0,4,27,0,2,34,0,0,255,255,0,0,19,34,4,34,0,5,34,0,25,6,5,1,2,34,0,0,255,255,0,0,19,34,6,34,0,7,34,0,0,8,23,0,1,34,255,0,19,34,8,34,0,9,34,0,25,10,9,13,2,34,0,0,255,255,0,0,19,34,10,34,0,11,34,0,0,12,26,0,1,34,255,0,19,34,12,34,0,13,34,0,25,14,13,2,2,34,0,0,255,255,0,0,19,34,14,34,0,15,34,0,1,35,0,0,1,36,1,0,135,34,36,0,3,35,7,11,15,36,0,0,0,16,27,0,134,34,0,0,116,120,2,0,16,28,0,0,0,17,23,0,1,34,255,0,19,34,17,34,0,18,34,0,25,19,18,26,2,34,0,0,255,255,0,0,19,34,19,34,0,20,34,0,0,21,26,0,1,34,255,0,19,34,21,34,0,22,34,0,25,24,22,28,2,34,0,0,255,255,0,0,19,34,24,34,0,25,34,0,135,34,63,0,20,25,28,0,137,33,0,0,139,0,0,0,140,0,26,0,0,0,0,0,1,21,0,0,136,23,0,0,0,22,23,0,136,23,0,0,1,24,0,8,3,23,23,24,137,23,0,0,1,23,0,4,3,0,22,23,0,1,22,0,1,24,3,0,135,23,175,0,24,0,0,0,1,24,64,0,1,25,98,0,135,23,17,0,24,25,0,0,1,25,64,0,1,24,92,0,135,23,17,0,25,24,1,0,135,23,55,0,0,1,0,0,1,23,161,32,79,23,23,0,1,24,161,32,103,24,24,1,41,24,24,8,20,23,23,24,0,12,23,0,2,23,0,0,255,255,0,0,19,23,12,23,0,14,23,0,26,15,14,1,26,16,15,0,28,23,16,2,38,23,23,255,0,17,23,0,25,18,17,0,2,23,0,0,255,255,0,0,19,23,18,23,0,19,23,0,1,23,163,32,79,23,23,0,1,24,163,32,103,24,24,1,41,24,24,8,20,23,23,24,0,20,23,0,2,23,0,0,255,255,0,0,19,23,20,23,0,2,23,0,26,3,2,1,26,4,3,84,26,5,4,0,28,23,5,2,38,23,23,255,0,6,23,0,25,7,6,0,25,8,7,2,25,9,8,64,25,10,9,2,2,23,0,0,255,255,0,0,19,23,10,23,0,11,23,0,135,23,63,0,19,11,0,0,1,23,64,20,78,13,23,0,1,24,44,1,134,23,0,0,16,135,2,0,24,13,0,0,137,22,0,0,139,0,0,0,140,0,19,0,0,0,0,0,2,17,0,0,255,0,0,0,1,15,0,0,136,18,0,0,0,16,18,0,136,18,0,0,25,18,18,16,137,18,0,0,2,18,0,0,207,214,2,0,78,7,18,0,2,18,0,0,208,214,2,0,78,8,18,0,135,18,48,0,7,8,0,0,134,18,0,0,72,209,2,0,134,18,0,0,112,132,2,0,1,18,7,0,134,9,0,0,144,142,0,0,18,0,0,0,41,18,9,24,42,18,18,24,33,10,18,0,121,10,9,0,134,3,0,0,56,93,1,0,19,18,3,17,0,4,18,0,13,5,4,17,121,5,243,255,1,15,6,0,119,0,10,0,135,11,177,0,0,1,11,0,0,12,1,0,19,18,12,17,0,13,18,0,14,14,13,17,121,14,234,255,1,15,4,0,119,0,1,0,32,18,15,4,121,18,7,0,0,2,1,0,0,0,2,0,0,6,0,0,137,16,0,0,139,6,0,0,119,0,7,0,32,18,15,6,121,18,5,0,1,0,255,255,0,6,0,0,137,16,0,0,139,6,0,0,1,18,0,0,139,18,0,0,140,3,34,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,0,22,0,0,0,23,1,0,0,24,2,0,0,28,22,0,1,31,255,0,19,31,28,31,0,3,31,0,2,31,0,0,17,215,2,0,27,32,3,7,3,4,31,32,0,27,4,0,0,5,27,0,78,6,5,0,0,25,6,0,0,7,27,0,25,8,7,1,78,9,8,0,0,26,9,0,0,10,23,0,0,11,27,0,83,11,10,0,0,12,24,0,0,13,27,0,25,14,13,1,83,14,12,0,0,15,22,0,1,31,0,0,134,32,0,0,112,32,1,0,31,15,0,0,0,16,22,0,1,31,0,0,1,33,0,0,134,32,0,0,16,201,1,0,31,33,16,0,0,17,25,0,0,18,27,0,83,18,17,0,0,19,26,0,0,20,27,0,25,21,20,1,83,21,19,0,137,30,0,0,139,0,0,0,140,2,30,0,0,0,0,0,2,25,0,0,255,0,0,0,2,26,0,0,17,215,2,0,1,23,0,0,136,27,0,0,0,24,27,0,136,27,0,0,25,27,27,16,137,27,0,0,0,12,0,0,0,16,1,0,1,28,0,0,135,27,49,0,28,0,0,0,1,17,0,0,0,18,17,0,19,27,18,25,0,19,27,0,25,20,19,1,19,27,20,25,0,21,27,0,0,17,21,0,135,27,51,0,0,22,17,0,19,27,22,25,0,2,27,0,0,3,16,0,19,27,3,25,0,4,27,0,15,5,4,2,120,5,28,0,1,28,10,0,1,29,0,0,134,27,0,0,16,135,2,0,28,29,0,0,0,6,12,0,19,27,6,25,0,7,27,0,27,27,7,7,3,8,26,27,78,9,8,0,0,10,12,0,19,27,10,25,0,11,27,0,27,27,11,7,3,13,26,27,25,14,13,1,78,15,14,0,1,29,1,0,135,27,46,0,9,15,29,0,1,29,10,0,1,28,0,0,134,27,0,0,16,135,2,0,29,28,0,0,119,0,214,255,137,24,0,0,139,0,0,0,140,0,27,0,0,0,0,0,2,25,0,0,255,0,0,0,1,23,0,0,136,26,0,0,0,24,26,0,136,26,0,0,25,26,26,16,137,26,0,0,2,26,0,0,152,180,2,0,82,12,26,0,0,1,12,0,1,0,0,0,0,16,0,0,19,26,16,25,0,17,26,0,1,26,200,0,15,18,17,26,120,18,2,0,119,0,36,0,0,19,1,0,0,20,0,0,19,26,20,25,0,21,26,0,27,26,21,14,3,22,19,26,78,2,22,0,19,26,2,25,0,3,26,0,13,4,25,3,120,4,18,0,0,5,1,0,0,6,0,0,19,26,6,25,0,7,26,0,27,26,7,14,3,8,5,26,134,26,0,0,20,130,2,0,8,0,0,0,0,9,1,0,0,10,0,0,19,26,10,25,0,11,26,0,27,26,11,14,3,13,9,26,135,26,178,0,13,0,0,0,0,14,0,0,25,26,14,1,41,26,26,24,42,26,26,24,0,15,26,0,0,0,15,0,119,0,215,255,137,24,0,0,139,0,0,0,140,1,23,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,1,21,16,8,3,20,20,21,137,20,0,0,1,20,8,4,3,10,19,20,25,11,19,8,0,1,0,0,0,13,1,0,1,20,255,0,19,20,13,20,0,14,20,0,2,20,0,0,20,108,3,0,27,21,14,37,3,15,20,21,25,16,15,3,79,21,16,0,103,20,16,1,41,20,20,8,20,21,21,20,0,17,21,0,2,21,0,0,255,255,0,0,19,21,17,21,0,2,21,0,0,12,2,0,0,3,12,0,33,4,3,0,120,4,3,0,137,19,0,0,139,0,0,0,0,5,1,0,135,21,83,0,5,10,0,0,1,20,64,0,1,22,111,0,135,21,17,0,20,22,11,0,135,21,55,0,10,11,0,0,0,6,1,0,135,21,104,0,6,11,0,0,135,21,55,0,10,11,0,0,1,22,64,0,1,20,112,0,135,21,17,0,22,20,11,0,135,21,55,0,10,11,0,0,135,21,30,0,0,7,12,0,26,8,7,1,2,21,0,0,255,255,0,0,19,21,8,21,0,9,21,0,134,21,0,0,76,29,2,0,9,10,0,0,137,19,0,0,139,0,0,0,140,0,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,1,21,224,15,1,22,0,0,134,1,0,0,16,21,1,0,21,22,0,0,32,11,1,255,120,11,3,0,137,20,0,0,139,0,0,0,2,22,0,0,226,214,2,0,79,22,22,0,2,21,0,0,226,214,2,0,103,21,21,1,41,21,21,8,20,22,22,21,0,12,22,0,1,22,1,0,135,13,129,0,12,22,0,0,0,0,13,0,0,14,0,0,78,15,14,0,2,22,0,0,203,214,2,0,83,22,15,0,0,16,0,0,25,17,16,2,78,18,17,0,2,22,0,0,204,214,2,0,83,22,18,0,0,2,0,0,25,3,2,16,0,0,3,0,2,22,0,0,40,180,2,0,82,4,22,0,0,5,0,0,2,22,0,0,203,214,2,0,78,6,22,0,1,22,255,0,19,22,6,22,0,7,22,0,2,22,0,0,204,214,2,0,78,8,22,0,1,22,255,0,19,22,8,22,0,9,22,0,5,10,7,9,135,22,127,0,4,5,10,0,137,20,0,0,139,0,0,0,140,3,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,0,15,0,0,0,16,1,0,0,17,2,0,0,19,15,0,2,24,0,0,255,255,0,0,19,24,19,24,0,20,24,0,2,24,0,0,164,215,2,0,27,25,20,19,3,21,24,25,25,3,21,2,79,25,3,0,103,24,3,1,41,24,24,8,20,25,25,24,0,4,25,0,2,25,0,0,255,255,0,0,19,25,4,25,0,5,25,0,0,18,5,0,0,6,18,0,33,7,6,0,120,7,3,0,137,23,0,0,139,0,0,0,0,8,18,0,26,9,8,1,2,25,0,0,158,215,2,0,79,25,25,0,2,24,0,0,158,215,2,0,103,24,24,1,41,24,24,8,20,25,25,24,0,10,25,0,2,25,0,0,255,255,0,0,19,25,10,25,0,11,25,0,13,12,9,11,120,12,3,0,137,23,0,0,139,0,0,0,0,13,16,0,0,14,17,0,134,25,0,0,76,29,2,0,13,14,0,0,137,23,0,0,139,0,0,0,140,1,24,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,25,13,20,6,25,14,20,4,0,11,0,0,0,15,11,0,25,16,15,3,78,17,16,0,0,12,17,0,0,18,12,0,1,22,0,0,1,23,0,0,134,21,0,0,16,201,1,0,22,23,18,0,0,2,12,0,1,23,0,0,134,21,0,0,112,32,1,0,23,2,0,0,134,21,0,0,36,146,2,0,14,13,0,0], eb + 174080);
  HEAPU8.set([78,3,13,0,1,21,255,0,19,21,3,21,0,4,21,0,1,21,255,0,14,5,4,21,121,5,13,0,0,6,11,0,1,21,0,0,83,6,21,0,78,7,13,0,0,8,11,0,25,9,8,4,83,9,7,0,1,1,1,0,0,10,1,0,137,20,0,0,139,10,0,0,119,0,5,0,1,1,0,0,0,10,1,0,137,20,0,0,139,10,0,0,1,21,0,0,139,21,0,0,140,1,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,0,1,0,0,0,2,1,0,134,3,0,0,80,223,2,0,2,0,0,0,41,11,3,24,42,11,11,24,33,4,11,0,120,4,2,0,119,0,248,255,0,5,1,0,135,6,179,0,5,0,0,0,41,11,6,24,42,11,11,24,33,7,11,0,121,7,241,255,119,0,1,0,0,8,1,0,2,11,0,0,65,191,2,0,78,12,8,0,83,11,12,0,2,12,0,0,65,191,2,0,102,11,8,1,107,12,1,11,2,11,0,0,65,191,2,0,102,12,8,2,107,11,2,12,2,12,0,0,65,191,2,0,102,11,8,3,107,12,3,11,2,11,0,0,65,191,2,0,102,12,8,4,107,11,4,12,2,12,0,0,65,191,2,0,102,11,8,5,107,12,5,11,2,11,0,0,65,191,2,0,102,12,8,6,107,11,6,12,137,10,0,0,139,0,0,0,140,0,21,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,135,18,180,0,1,18,163,32,79,18,18,0,1,19,163,32,103,19,19,1,41,19,19,8,20,18,18,19,0,0,18,0,2,18,0,0,255,255,0,0,19,18,0,18,0,1,18,0,26,8,1,1,26,9,8,15,25,10,9,3,2,18,0,0,255,255,0,0,19,18,10,18,0,11,18,0,2,18,0,0,228,214,2,0,79,18,18,0,2,19,0,0,228,214,2,0,103,19,19,1,41,19,19,8,20,18,18,19,0,12,18,0,2,18,0,0,255,255,0,0,19,18,12,18,0,13,18,0,2,18,0,0,36,180,2,0,82,14,18,0,1,19,14,0,1,20,3,0,135,18,181,0,19,11,13,20,14,0,0,0,2,18,0,0,218,214,2,0,78,15,18,0,1,18,163,32,79,18,18,0,1,20,163,32,103,20,20,1,41,20,20,8,20,18,18,20,0,2,18,0,2,18,0,0,255,255,0,0,19,18,2,18,0,3,18,0,26,4,3,1,26,5,4,15,25,6,5,2,1,18,255,0,19,18,6,18,0,7,18,0,1,20,9,0,1,19,47,0,135,18,182,0,20,15,19,7,1,19,155,15,1,20,0,0,134,18,0,0,16,21,1,0,19,20,0,0,139,0,0,0,140,0,20,0,0,0,0,0,2,16,0,0,255,0,0,0,2,17,0,0,217,214,2,0,1,14,0,0,136,18,0,0,0,15,18,0,136,18,0,0,25,18,18,16,137,18,0,0,0,1,15,0,78,6,17,0,41,18,6,24,42,18,18,24,33,7,18,0,40,18,7,1,0,8,18,0,120,8,3,0,1,14,8,0,119,0,33,0,134,9,0,0,60,159,2,0,1,0,0,0,41,18,9,24,42,18,18,24,33,10,18,0,120,10,3,0,1,14,8,0,119,0,24,0,134,11,0,0,52,189,2,0,1,0,0,0,0,0,11,0,2,18,0,0,224,214,2,0,78,12,18,0,19,18,12,16,0,13,18,0,32,2,13,0,121,2,9,0,0,3,0,0,19,18,3,16,0,4,18,0,32,5,4,5,121,5,4,0,1,18,2,0,83,17,18,0,119,0,220,255,1,19,1,0,135,18,169,0,19,0,0,0,119,0,216,255,32,18,14,8,121,18,3,0,137,15,0,0,139,0,0,0,139,0,0,0,140,0,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,2,13,0,0,162,215,2,0,78,0,13,0,1,13,255,0,19,13,0,13,0,1,13,0,25,3,1,1,1,13,255,0,19,13,3,13,0,4,13,0,2,13,0,0,162,215,2,0,83,13,4,0,2,13,0,0,162,215,2,0,78,5,13,0,1,13,255,0,19,13,5,13,0,6,13,0,1,13,12,0,15,7,13,6,120,7,7,0,134,13,0,0,0,172,0,0,135,13,183,0,134,13,0,0,148,226,1,0,139,0,0,0,2,13,0,0,160,215,2,0,79,13,13,0,2,14,0,0,160,215,2,0,103,14,14,1,41,14,14,8,20,13,13,14,0,8,13,0,2,13,0,0,255,255,0,0,19,13,8,13,0,9,13,0,25,10,9,1,2,13,0,0,255,255,0,0,19,13,10,13,0,2,13,0,2,13,0,0,160,215,2,0,1,14,255,0,19,14,2,14,83,13,14,0,2,14,0,0,160,215,2,0,42,13,2,8,107,14,1,13,2,13,0,0,162,215,2,0,1,14,1,0,83,13,14,0,135,14,184,0,135,14,185,0,134,14,0,0,0,172,0,0,135,14,183,0,134,14,0,0,148,226,1,0,139,0,0,0,140,3,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,0,13,0,0,0,14,1,0,0,15,2,0,0,16,13,0,0,17,14,0,0,18,15,0,1,22,161,32,79,22,22,0,1,23,161,32,103,23,23,1,41,23,23,8,20,22,22,23,0,19,22,0,2,22,0,0,255,255,0,0,19,22,19,22,0,3,22,0,26,4,3,1,26,5,4,4,1,22,255,0,19,22,5,22,0,6,22,0,1,22,163,32,79,22,22,0,1,23,163,32,103,23,23,1,41,23,23,8,20,22,22,23,0,7,22,0,2,22,0,0,255,255,0,0,19,22,7,22,0,8,22,0,26,9,8,1,26,10,9,2,1,22,255,0,19,22,10,22,0,11,22,0,1,22,4,0,1,23,2,0,134,12,0,0,24,121,0,0,16,17,18,22,23,6,11,0,137,21,0,0,139,12,0,0,140,4,24,0,0,0,0,0,1,21,0,0,136,23,0,0,0,22,23,0,136,23,0,0,25,23,23,16,137,23,0,0,0,15,0,0,0,16,1,0,0,17,2,0,0,18,3,0,135,20,52,0,0,4,18,0,1,23,255,0,19,23,4,23,0,5,23,0,8,23,20,5,38,23,23,255,0,6,23,0,1,23,255,0,19,23,6,23,0,7,23,0,0,19,7,0,0,8,15,0,0,9,16,0,0,10,17,0,0,11,19,0,1,23,255,0,19,23,11,23,0,12,23,0,41,23,12,2,3,13,10,23,82,14,13,0,134,23,0,0,148,206,2,0,8,9,14,0,137,22,0,0,139,0,0,0,140,1,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,0,1,0,0,0,9,1,0,0,8,9,0,0,10,8,0,25,11,10,4,82,12,11,0,33,13,12,0,121,13,13,0,0,14,8,0,25,15,14,12,82,2,15,0,1,18,0,0,14,3,2,18,121,3,7,0,0,4,8,0,25,5,4,12,82,6,5,0,38,19,6,15,135,18,186,0,19,0,0,0,0,7,8,0,135,18,187,0,7,0,0,0,137,17,0,0,139,0,0,0,140,0,15,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,2,12,0,0,36,180,2,0,82,0,12,0,1,12,161,32,79,12,12,0,1,13,161,32,103,13,13,1,41,13,13,8,20,12,12,13,0,1,12,0,2,12,0,0,255,255,0,0,19,12,1,12,0,2,12,0,25,3,2,7,28,12,3,8,38,12,12,255,0,4,12,0,1,12,163,32,79,12,12,0,1,13,163,32,103,13,13,1,41,13,13,8,20,12,12,13,0,5,12,0,2,12,0,0,255,255,0,0,19,12,5,12,0,6,12,0,5,7,4,6,1,13,0,0,135,12,16,0,0,13,7,0,1,12,188,20,1,13,0,0,134,8,0,0,16,21,1,0,12,13,0,0,32,9,8,255,120,9,2,0,139,0,0,0,1,12,6,0,134,13,0,0,160,223,2,0,12,0,0,0,1,12,136,19,1,14,2,0,134,13,0,0,16,135,2,0,12,14,0,0,139,0,0,0,140,0,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,135,0,188,0,41,8,0,24,42,8,8,24,33,1,8,0,121,1,6,0,1,9,141,20,134,8,0,0,124,216,2,0,9,0,0,0,139,0,0,0,135,2,189,0,41,8,2,24,42,8,8,24,33,3,8,0,121,3,8,0,1,9,157,20,134,8,0,0,124,216,2,0,9,0,0,0,135,8,190,0,135,8,191,0,139,0,0,0,1,9,3,0,134,8,0,0,160,223,2,0,9,0,0,0,134,4,0,0,12,189,0,0,41,8,4,24,42,8,8,24,33,5,8,0,120,5,2,0,119,0,4,0,134,8,0,0,180,178,2,0,119,0,247,255,135,8,190,0,135,8,191,0,139,0,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,0,1,0,0,0,3,1,0,0,2,3,0,1,13,1,0,135,12,192,0,13,0,0,0,0,4,2,0,82,5,4,0,32,6,5,0,120,6,2,0,119,0,5,0,1,13,10,0,135,12,192,0,13,0,0,0,119,0,248,255,0,7,2,0,82,8,7,0,26,9,8,1,85,7,9,0,137,11,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,5,0,0,136,9,0,0,0,6,9,0,136,9,0,0,25,9,9,80,137,9,0,0,25,2,6,8,0,1,0,0,0,4,2,0,1,7,250,20,25,8,4,64,78,9,7,0,83,4,9,0,25,4,4,1,25,7,7,1,54,9,4,8,176,216,2,0,0,3,1,0,135,9,55,0,2,3,0,0,1,10,2,0,134,9,0,0,80,21,2,0,2,10,0,0,137,6,0,0,139,0,0,0,140,0,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,2,10,0,0,230,220,7,0,78,0,10,0,41,10,0,24,42,10,10,24,0,1,10,0,33,2,1,0,2,10,0,0,124,188,2,0,82,3,10,0,1,10,0,0,14,4,3,10,19,10,2,4,0,7,10,0,120,7,2,0,139,0,0,0,2,10,0,0,124,188,2,0,82,5,10,0,1,10,224,7,82,6,10,0,38,11,5,31,135,10,47,0,11,6,0,0,2,10,0,0,230,220,7,0,1,11,0,0,83,10,11,0,139,0,0,0,140,1,10,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,1,8,16,8,3,7,7,8,137,7,0,0,1,7,8,4,3,2,6,7,25,3,6,8,0,1,0,0,1,8,64,0,1,9,78,0,135,7,17,0,8,9,2,0,0,4,1,0,134,7,0,0,116,120,2,0,4,3,0,0,135,7,55,0,2,3,0,0,1,9,64,0,1,8,79,0,135,7,17,0,9,8,3,0,135,7,55,0,2,3,0,0,1,8,2,0,134,7,0,0,80,21,2,0,2,8,0,0,137,6,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,0,2,0,0,0,3,2,0,0,4,3,0,1,10,200,9,85,10,4,0,2,10,0,0,47,169,2,0,1,11,196,9,134,5,0,0,16,21,1,0,10,11,0,0,32,6,5,0,121,6,3,0,1,1,0,0,119,0,2,0,1,1,1,0,0,7,1,0,137,9,0,0,139,7,0,0,140,1,9,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,0,1,0,0,0,2,1,0,78,3,2,0,41,8,3,24,42,8,8,24,33,4,8,0,121,4,5,0,135,8,132,0,137,7,0,0,139,0,0,0,119,0,7,0,0,5,1,0,134,8,0,0,180,219,2,0,5,0,0,0,137,7,0,0,139,0,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,0,1,0,0,0,2,1,0,78,3,2,0,41,8,3,24,42,8,8,24,33,4,8,0,121,4,5,0,135,8,145,0,137,7,0,0,139,0,0,0,119,0,7,0,0,5,1,0,134,8,0,0,180,219,2,0,5,0,0,0,137,7,0,0,139,0,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,25,2,7,8,0,3,7,0,0,1,0,0,1,9,22,0,135,8,136,0,9,2,0,0,0,4,1,0,1,8,255,0,19,8,4,8,0,5,8,0,1,9,10,0,135,8,59,0,5,3,9,0,135,8,55,0,2,3,0,0,1,9,1,0,1,10,255,255,134,8,0,0,164,122,2,0,2,9,10,0,137,7,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,0,1,0,0,0,2,1,0,78,3,2,0,41,7,3,24,42,7,7,24,33,4,7,0,121,4,3,0,137,6,0,0,139,0,0,0,135,7,193,0,134,7,0,0,72,209,2,0,134,7,0,0,112,132,2,0,137,6,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,1,8,16,8,3,7,7,8,137,7,0,0,1,7,8,4,3,2,6,7,25,3,6,8,0,1,0,0,0,4,1,0,134,7,0,0,116,120,2,0,4,2,0,0,1,8,64,0,1,9,83,0,135,7,17,0,8,9,3,0,135,7,55,0,2,3,0,0,1,9,2,0,134,7,0,0,80,21,2,0,2,9,0,0,137,6,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,1,8,16,8,3,7,7,8,137,7,0,0,1,7,8,4,3,2,6,7,25,3,6,8,0,1,0,0,0,4,1,0,134,7,0,0,116,120,2,0,4,2,0,0,1,8,64,0,1,9,82,0,135,7,17,0,8,9,3,0,135,7,55,0,2,3,0,0,1,9,2,0,134,7,0,0,80,21,2,0,2,9,0,0,137,6,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,1,8,16,8,3,7,7,8,137,7,0,0,1,7,8,4,3,2,6,7,25,3,6,8,0,1,0,0,0,4,1,0,134,7,0,0,116,120,2,0,4,2,0,0,1,8,64,0,1,9,81,0,135,7,17,0,8,9,3,0,135,7,55,0,2,3,0,0,1,9,2,0,134,7,0,0,80,21,2,0,2,9,0,0,137,6,0,0,139,0,0,0,140,2,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,1,2,0,0,0,3,0,0,0,4,1,0,1,8,1,0,135,7,194,0,8,0,0,0,1,8,1,0,135,7,195,0,8,0,0,0,135,7,196,0,134,7,0,0,88,215,2,0,1,8,2,0,135,7,194,0,8,0,0,0,137,6,0,0,1,7,0,0,139,7,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,0,4,6,0,0,1,0,0,0,2,1,0,85,4,2,0,1,8,18,20,135,7,42,0,8,4,0,0,1,7,68,11,82,3,7,0,135,7,197,0,3,0,0,0,1,8,0,0,135,7,198,0,8,0,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,32,137,7,0,0,0,2,6,0,0,1,0,0,0,3,1,0,1,7,255,0,19,7,3,7,0,4,7,0,1,8,64,0,135,7,17,0,8,4,2,0,1,8,2,0,134,7,0,0,80,21,2,0,2,8,0,0,137,6,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,0,1,0,0,2,6,0,0,192,190,2,0,1,7,0,0,83,6,7,0,0,2,1,0,2,7,0,0,255,255,0,0,19,7,2,7,0,3,7,0,2,6,0,0,192,190,2,0,134,7,0,0,116,120,2,0,3,6,0,0,137,5,0,0,2,7,0,0,192,190,2,0,139,7,0,0,140,1,9,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,1,7,16,4,3,6,6,7,137,6,0,0,25,2,5,8,0,1,0,0,1,7,64,0,1,8,95,0,135,6,17,0,7,8,2,0,0,3,1,0,134,6,0,0,76,29,2,0,3,2,0,0,137,5,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,0,1,0,0,0,2,1,0,2,7,0,0,108,188,2,0,134,3,0,0,240,157,2,0,7,2,0,0,1,7,255,0,19,7,3,7,0,4,7,0,137,6,0,0,139,4,0,0,140,1,12,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,0,1,0,0,0,2,1,0,1,6,0,0,1,7,0,0,1,8,255,255,1,9,1,0,1,10,0,0,1,11,0,0,134,3,0,0,76,111,0,0,2,6,7,8,9,10,11,0,137,5,0,0,139,3,0,0,140,0,5,0,0,0,0,0,1,0,0,0,136,2,0,0,0,1,2,0,134,2,0,0,72,209,2,0,1,3,10,0,134,2,0,0,136,143,2,0,3,0,0,0,1,3,100,0,1,4,0,0,134,2,0,0,16,135,2,0,3,4,0,0,1,4,0,0,134,2,0,0,136,143,2,0,4,0,0,0,1,4,100,0,1,3,0,0,134,2,0,0,16,135,2,0,4,3,0,0,139,0,0,0], eb + 184320);

  var relocations = [];
  relocations = relocations.concat([164,408,452,520,704,748,816,1144,1200,1896,2280,2648,2676,2712,2828,3740,3744,3748,4032,4088,4540,4820,4964,4968,4972,4976,4980,4984,4988,5360,5472,5592,5752,5912,5940,5976,6272,6336,6540,6584,6652,7172,7216,7284,7648,7892,8084,9948,10000,10220,10248,10284,10552,10604,10780,10784,10788,10792,10796,10800,10804,10976,11236,11500,11692,11744,11968,11996,12032,12652,12656,12660,13040,13372,13400,13452,13800,13852,14076,14104,14140,14660,14832,14884,15108,15136,15172,16116,16508,16528,16860,17088,17312,17624,18016,18072,18100,18288,18716,18740,19204,19436,19492,19520,19708,20112,20136,20668,21872,21876,21880,22856,22860,22864,22868,22872,22876,22880,22884,22888,22892,22896,22900,22904,22908,22912,22916,22920,22924,22996,23044,23148,23300,23348,23460,24396,24416,24784,24840,25180,26440,27052,27056,27060,27596,28036,28040,28044,28048,28052,28056,28060,28088,28128,28152,28256,28320,28616,28704,28836,28952,29272,29728,30152,30688,30836,30860,30896,30924,31188,31720,31736,31876,31900,32244,32248,32252,32456,32480,32696,32748,32844,32884,33000,33004,33008,33012,33016,33020,33024,33028,33032,33036,33040,33044,33048,33052,33056,33060,33064,33068,33072,33076,33128,33160,33196,33324,33372,33408,33444,33508,34036,34604,34624,34764,34788,34992,34996,35000,35004,35008,35012,35016,35060,35096,35132,35260,35500,35504,35508,35708,35732,35952,36004,36100,36140,36620,37136,37140,37144,37148,37152,37156,37160,37164,37168,37172,37176,37180,37376,37380,37384,37944,37948,37952,37956,37960,37964,37968,37972,37976,37980,37984,37988,37992,37996,38000,38004,38008,38012,38096,38200,38592,38612,39160,39216,39776,39780,39784,39872,40136,40180,40468,40600,40736,42060,42112,42892,42924,42960,43164,43576,43608,43644,44228,44304,44376,44488,44556,44800,44976,45100,45104,45108,45500,45604,45856,45920,46040,46452,46492,46520,46556,46740,47988,48528,48564,48624,48628,48632,48636,48640,48644,48648,48652,48656,48660,48664,48668,48672,48676,48680,48684,48688,48692,48696,48700,48704,48708,48712,48716,48720,48724,48728,48732,48736,48740,48744,48748,48752,48756,48760,48764,48768,48772,48776,48780,48784,48788,48792,48796,48800,48804,48808,48812,48816,48820,48824,48828,48832,48836,48840,48844,48848,48852,48856,48860,48864,48868,48872,48876,48880,48884,48888,48892,48896,48900,48904,48908,48912,48916,48920,48924,48928,48932,48936,48940,48944,48948,48952,48956,48960,48964,48968,48972,48976,48980,48984,48988,48992,48996,49000,49004,49008,49012,49016,49020,49024,49028,49032,49036,49040,49044,49048,49052,49056,49060,49064,49068,49072,49076,49080,49084,49088,49092,49096,49100,49104,49108,49112,49116,49120,49124,49128,49132,49136,49140,49144,49148,49152,49156,49160,49164,49168,49172,49176,49180,49184,49188,49192,49196,49200,49204,49208,49212,49216,49220,49224,49228,49232,49236,49240,49244,49248,49252,49256,49260,49264,49268,49272,49276,49280,49284,49288,49292,49296,49300,49304,49308,49312,49316,49320,49324,49328,49332,49336,49340,49344,49348,49352,49356,49360,49364,49368,49372,49376,49380,49384,49388,49392,49396,49400,49404,49408,49412,49416,49420,49424,49428,49432,49436,49440,49444,49448,49452,49456,49460,49464,49468,49472,49476,49480,49484,49488,49492,49496,49500,49504,49508,49512,49516,49520,49524,49528,49532,49536,49540,49544,49548,49552,49556,49560,49564,49568,49572,49576,49580,49584,49588,49592,49596,49600,49604,49608,49612,49616,49620,49624,49628,49632,49636,49640,49644,49704,49776,49820,49904,50000,50236,50316,50508,50716,50780,50940,51068,51164,51216,51724,51764,51792,51828,52528,52560,53140,53288,53292,53296,53300,53304,53308,53312,53504,53972,54236,54400,54564,54680,54704,54904,54956,57796,57824,57860,58520,58564,58568,58572,58576,58580,58584,58588,58592,58596,58940,59016,59128,59156,59344,59788,59812,59860,60152,60600,60644,60800,61140,61176,61356,61380,61496,61572,61636,62180,62516,62880,63016,63152,63284,64096,64760,64764,64768,64772,64776,64780,64784,64788,64792,64796,64800,64804,64808,65988,65992,65996,66000,66004,66008,66984,67544,67548,67552,67556,67560,67564,67568,70412,70484,70644,70648,70652,70656,70660,70664,70668,70752,70792,71184,71188,71192,71196,71200,71204,71208,71212,71216,71220,71224,71228,73940,74204,74232,74268,75452,75456,75460,75464,75468,75472,75476,75480,75484,75488,75492,77516,77520,81712,81716,81720,81724,81728,85904,85908,85912,85916,85920,85924,85928,85932,85936,85940,85944,85948,85952,85956,85960,85964,85968,85972,85976,85980,85984,85988,85992,85996,86000,86004,86008,86012,86016,86020,86024,86028,86032,86036,86040,86044,86048,86052,86056,86060,86064,86068,86072,86076,86080,86084,86088,86092,86096,86100,86104,86108,86112,86116,86120,86124,86128,86132,86136,86140,86144,86148,86152,86156,86160,86164,86168,86172,86176,86180,86184,86188,86192,86196,86200,86204,86208,86212,86216,86220,86224,86228,86232,86236,86240,86244,86248,86252,86256,86260,86264,86268,86272,86276,86280,86284,86288,86292,86296,86300,86304,86308,86312,86316,86320,86324,86328,86332,86336,86340,86344,86348,86352,86356,86360,86364,86368,86372,86376,86380,86384,86388,86392,86396,86400,86404,86408,86412,86416,86420,86424,86428,86432,86436,86440,86444,86448,86452,86456,86460,86464,86468,86472,86476,86480,86484,86488,86492,86496,86500,86504,86508,86512,86516,86520,86524,86528,86532,86536,86540,86544,86548,86552,86556,86560,86564,86568,86572,86576,86580,86584,86588,86592,86596,86600,86604,86608,86612,86616,86620,86624,86628,86632,86636,86640,86644,86648,86652,86656,86660,86664,86668,86672,86676,86680,86684,86688,86692,86696,86700,86704,86708,86712,86716,86720,86724,86728,86732,86736,86740,86744,86748,86752,86756,86760,86764,86768,86772,86776,86780,86784,86788,86792,86796,86800,86804,86808,86812,86816,86820,86824,86828,86832,86836,86840,86844,86848,86852,86856,86860,86864,86868,86872,86876,86880,86884,86888,86892,86896,86900,86904,86908,86912,86916,86920,86924,90604,90608,90612,90616,90620,90624,90628,90632,90636,90640,90644,90648,90652,90656,90660,90664,90668,90672,90676,90680,90684,90688,90692,90696,90700,90704,90708,90712,90716,90720,90724,90728,90732,90736,90740,90744,90748,90752,90756,90760,90764,90768,90772,90776,90780,90784,90788,90792,90796,90800,90804,90808,90812,90816,90820,90824,90828,90832,90836,90840,90844,90848,90852,90856,90860,90864,90868,90872,90876,90880,90884,90888,90892,90896,90900,90904,90908,90912,90916,90920,90924,90928,90932,90936,90940,90944,90948,90952,90956,90960,90964,90968,90972,90976,90980,90984,90988,90992,90996,91000,91004,91008,91012,91016,91020,91024,91028,91032,91036,91040,91044,91048,91052,91056,91060,91064,91068,91072,91076,91080,91084,91088,91092,91096,91100,91104,91108,91112,91116,91120,91124,91128,91132,91136,91140,91144,91148,91152,91156,91160,91164,91168,91172,91176,91180,91184,91188,91192,91196,91200,91204,91208,91212,91216,91220,91224,91228,91232,91236,91240,91244,91248,91252,91256,91260,91264,91268,91272,91276,91280,91284,91288,91292,91296,91300,91304,91308,91312,91316,91320,91324,91328,91332,91336,91340,91344,91348,91352,91356,91360,91364,91368,91372,91376,91380,91384,91388,91392,91396,91400,91404,91408,91412,91416,91420,91424,91428,91432,91436,91440,91444,91448,91452,91456,91460,91464,91468,91472,91476,91480,91484,91488,91492,91496,91500,91504,91508,91512,91516,91520,91524,91528,91532,91536,91540,91544,91548,91552,91556,91560,91564,91568,91572,91576,91580,91584,91588,91592,91596,91600,91604,91608,91612,91616,91620,91624,92280,92284,92288,92292,92296,92300,92304,92308,96332,96336,96340,96344,96348,99376,99380,99384,99388,99392,99396,99400,100572,100576,100580,100584,103036,103040,103044,103048,103052,104388,104392,104396,104400,104404,112792,112796,112996,113000,113004,113008,113012,113016,113020,113024,113028,113032,113036,113040,113044,113048,113052,113056,113060,113064,113068,113072,113076,113080,113084,113088,113092,113096,113100,113692,113936,113940,113944,113948,113952,113956,113960,117128,117132,120780,120784,120788,120792,120796,123796,123800,123804,123808,123812,123932,123936,123940,125732,128052,128056,128060,128064,128068,128072,128076,131060,131064,131068,131072,131076,131848,133068,133072,133076,133080,133084,133136,133140,133404,133408,133412,133416,140276,140280,140284,140288,140292,140296,140300,140304,140308,140312,140316,140320,140324,140328,140332,140336,140340,140344,140348,140352,140356,140360,140364,140368,140372,140376,140380,140384,140388,140392,140396,140400,140404,140408,140412,140416,140420,140424,140428,140432,140436,140440,140444,140448,140452,140456,140460,140464,140468,140472,140476,140480,140484,140488,140492,140496,140500,140504,140508,140512,140516,140520,140524,140528,140532,140536,140540,140544,140548,140552,140556,140560,140564,140568,140572,140576,140580,140584,140588,140592,140596,140600,140604,140608,140612,140616,140620,140624,140628,140632,140636,140640,140644,140648,140652,140656,140660,140664,140668,140672,140676,140680,140684,140688,140692,140696,140700,140704,140708,140712,140716,140720,140724,140728,140732,140736,140740,140744,140748,140752,140756,140760,140764,140768,140772,140776,140780,140784,140788,140792,140796,140800,140804,140808,140812,140816,140820,140824,140828,140832,140836,140840,140844,140848,140852,140856,140860,140864,140868,140872,140876,140880,140884,140888,140892,140896,140900,140904,140908,140912,140916,140920,140924,140928,140932,140936,140940,140944,140948,140952,140956,140960,140964,140968,140972,140976,140980,140984,140988,140992,140996,141000,141004,141008,141012,141016,141020,141024,141028,141032,141036,141040,141044,141048,141052,141056,141060,141064,141068,141072,141076,141080,141084,141088,141092,141096,141100,141104,141108,141112,141116,141120,141124,141128,141132,141136,141140,141144,141148,141152,141156,141160,141164,141168,141172,141176,141180,141184,141188,141192,141196,141200,141204,141208,141212,141216,141220,141224,141228,141232,141236,141240,141244,141248,141252,141256,141260,141264,141268,141272,141276,141280,141284,141288,141292,141296,159344,159348,159352,159356,159360,159364,159368,159372,159376,159380,159384,159388,159392,159396,159400,159404,159408,159412,159416,159420,159424,159428,159432,159436,159440,159444,159448,159452,159456,159460,159464,159468,159472,159476,159480,159484,159488,159492,159496,159500,159504,159508,159512,159516,159520,159524,159528,159532,159536,159540,159544,159548,159552,159556,159560,159564,159568,159572,159576,159580,159584,159588,159592,159596,159600,159604,159608,159612,159616,159620,159624,159628,159632,159636,159640,159644,159648,159652,159656,159660,159664,159668,159672,159676,159680,159684,159688,159692,159696,159700,159704,159708,159712,159716,159720,159724,159728,159732,159736,159740,159744,159748,159752,159756,159760,159764,159768,159772,159776,159780,159784,159788,159792,159796,159800,159804,159808,159812,159816,159820,159824,159828,159832,159836,159840,159844,159848,159852,159856,159860,159864,159868,159872,159876,159880,159884,159888,159892,159896,159900,159904,159908,159912,159916,159920,159924,159928,159932,159936,159940,159944,159948,159952,159956,159960,159964,159968,159972,159976,159980,159984,159988,159992,159996,160000,160004,160008,160012,160016,160020,160024,160028,160032,160036,160040,160044,160048,160052,160056,160060,160064,160068,160072,160076,160080,160084,160088,160092,160096,160100,160104,160108,160112,160116,160120,160124,160128,160132,160136,160140,160144,160148,160152,160156,160160,160164,160168,160172,160176,160180,160184,160188,160192,160196,160200,160204,160208,160212,160216,160220,160224,160228,160232,160236,160240,160244,160248,160252,160256,160260,160264,160268,160272,160276,160280,160284,160288,160292,160296,160300,160304,160308,160312,160316,160320,160324,160328,160332,160336,160340,160344,160348,160352,160356,160360,162140,162288,162344,162348,162352,162356,164504,164508,164512,164516,164520,164524,164528,164532,164536,164540,164544,164548,164552,164556,164560,164564,164568,164572,164576,164580,164584,164588,164592,164596,164600,164604,164608,164612,169032,169036,169040,169044,169736,169740,169744,169748,169752,169756,169760,169764,169768,169772,169776,169780,169784,169788,169792,169796,169800,169804,169808,169812,169816,169820,169824,169828,169832,169836,169840,169844,169848,169852,169856,169860,169864,169868,169872,169876,169880,169884,169888,169892,169896,169900,169904,169908,169912,169916,169920,169924,169928,169932,169936,169940,169944,169948,169952,169956,169960,169964,169968,169972,169976,169980,169984,169988,169992,169996,170000,170004,170008,170012,170016,170020,170024,170028,170032,170036,170040,170044,170048,170052,170056,170060,170064,170068,170072,170076,170080,170084,170088,170092,170096,170100,170104,170108,170112,170116,170120,170124,170128,170132,170136,170140,170144,170148,170152,170156,170160,170164,170168,170172,170176,170180,170184,170188,170192,170196,170200,170204,170208,170212,170216,170220,170224,170228,170232,170236,170240,170244,170248,170252,170256,170260,170264,170268,170272,170276,170280,170284,170288,170292,170296,170300,170304,170308,170312,170316,170320,170324,170328,170332,170336,170340,170344,170348,170352,170356,170360,170364,170368,170372,170376,170380,170384,170388,170392,170396,170400,170404,170408,170412,170416,170420,170424,170428,170432,170436,170440,170444,170448,170452,170456,170460,170464,170468,170472,170476,170480,170484,170488,170492,170496,170500,170504,170508,170512,170516,170520,170524,170528,170532,170536,170540,170544,170548,170552,170556,170560,170564,170568,170572,170576,170580,170584,170588,170592,170596,170600,170604,170608,170612,170616,170620,170624,170628,170632,170636,170640,170644,170648,170652,170656,170660,170664,170668,170672,170676,170680,170684,170688,170692,170696,170700,170704,170708,170712,170716,170720,170724,170728,170732,170736,170740,170744,170748,170752,170756,171424,172364,172368,172372,172376,172380,172384,172388,172392,172396,172400,172404,172408,172412,172416,172420,172424,172428,172432,172436,172440,172444,172448,172452,172456,172460,172464,172468,172472,172476,172480,172484,172488,172492,172496,172500,172504,172508,172512,172516,172520,172524,172528,172532,172536,172540,172544,172548,172552,172556,172560,172564,172568,172572,172576,172580,172584,172588,172592,172596,172600,172604,172608,172612,172616,172620,172624,172628,172632,172636,172640,172644,172648,172652,172656,172660,172664,172668,172672,172676,172680,172684,172688,172692,172696,172700,172704,172708,172712,172716,172720,172724,172728,172732,172736,172740,172744,172748,172752,172756,172760,172764,172768,172772,172776,172780,172784,172788,172792,172796,172800,172804,172808,172812,172816,172820,172824,172828,172832,172836,172840,172844,172848,172852,172856,172860,172864,172868,172872,172876,172880,172884,172888,172892,172896,172900,172904,172908,172912,172916,172920,172924,172928,172932,172936,172940,172944,172948,172952,172956,172960,172964,172968,172972,172976,172980,172984,172988,172992,172996,173000,173004,173008,173012,173016,173020,173024,173028,173032,173036,173040,173044,173048,173052,173056,173060,173064,173068,173072,173076,173080,173084,173088,173092,173096,173100,173104,173108,173112,173116,173120,173124,173128,173132,173136,173140,173144,173148,173152,173156,173160,173164,173168,173172,173176,173180,173184,173188,173192,173196,173200,173204,173208,173212,173216,173220,173224,173228,173232,173236,173240,173244,173248,173252,173256,173260,173264,173268,173272,173276,173280,173284,173288,173292,173296,173300,173304,173308,173312,173316,173320,173324,173328,173332,173336,173340,173344,173348,173352,173356,173360,173364,173368,173372,173376,173380,173384,177688,177692,178620,178992,186564,600,896,2768,3392,6032,6732,7364,8036,10448,10508,12196,14304,15336,16412,16840,17096,17272,17552,17784,18928,19172,19376,20508,20520,20544,21608,21624,23568,23780,26840,28656,30616,31676,31840,32032,34560,34728,34920,36968,38232,38244,40240,40784,40824,40856,40964,41668,41816,42652,42676,43028,43712,44008,45872,46684,46944,47032,47060,47096,47112,47268,47328,47812,47856,47876,47888,48276,48336,48596,49676,49760,49796,49836,51500,51880,52600,52728,53952,54076,54160,54324,54488,54644,54664,54784,54916,54976,55004,55892,56000,56188,56276,56412,56848,56932,57388,57464,57484,57536,57620,57704,57944,58020,58096,58212,58232,58692,58780,60104,60356,60476,60552,60772,61064,61328,61340,61508,61584,61728,62124,62496,62604,62992,63128,63260,63316,64220,64580,65052,67048,67396,67668,67688,67736,68484,68504,68552,69504,69624,69820,69840,70896,71300,71392,71860,72104,72456,72732,73256,73520,73584,73664,73808,74352,75352,75704,75956,77780,77940,78244,78416,78432,78528,78592,79100,80052,80064,80876,82504,82564,82588,82712,83040,83592,83740,84016,84228,84468,84656,84992,85236,85648,85836,85872,86952,86984,87220,87448,88188,89144,90456,90560,91684,91880,93288,93720,93876,94088,94400,94740,94840,94892,95084,95220,95600,97268,97484,97720,97852,98188,98568,98632,99272,99784,99836,99864,99904,99924,100392,101580,103524,103780,104936,105000,105940,105964,106060,106076,106232,106612,106744,107080,107180,107244,107288,107496,107876,108008,108344,108444,108508,108552,108808,108916,108936,109168,109188,109296,109488,109620,109716,109824,110068,110288,110420,110976,111044,111108,112388,112772,112932,113116,113136,113156,113176,113196,113216,113236,113256,113276,113296,113316,113336,113356,113376,113396,113416,113436,113456,113476,113496,113516,113536,113556,113772,113864,114716,114820,115388,115540,115568,115588,115700,115804,115892,116920,116960,118060,118220,119240,119428,119636,119800,120088,120124,121268,121284,121336,121504,122676,122700,122760,123028,123120,123156,123196,123244,123276,123364,123400,123480,124172,124608,124688,124936,125176,125304,125452,125524,125552,125596,126668,126856,127172,127304,127564,127632,127696,127740,128632,129372,130312,131492,131580,131880,132436,132540,132884,133640,134312,134704,134896,135212,135264,135292,135552,135896,136276,137564,137712,137920,138052,138112,138132,138320,138348,138384,138516,139496,139528,140236,141344,141436,142344,143188,144032,144176,144372,144500,144688,144748,144924,145200,145824,145980,146172,146452,146504,146532,146708,146884,147076,147352,147404,147432,147608,147740,147868,148556,148808,148988,149480,149700,149920,150224,150320,150552,150772,150904,151080,151148,151212,151376,151396,151432,151544,152184,152788,153256,153400,153888,154512,154820,155164,155692,155768,155824,155912,155956,156012,156396,156800,157000,157012,157508,158284,158312,158328,158584,159276,160432,160460,160544,160592,160948,161160,161752,162200,163092,163420,163588,163968,164108,164136,164208,164276,164440,164676,164728,164764,164800,164820,164840,164876,164928,164948,165532,165780,166004,166444,166804,166980,167796,168304,168464,168736,168748,169532,169668,169696,170784,170812,170908,171212,171472,171560,171888,172028,172264,172340,173396,173436,173476,174084,174236,174660,174812,175236,175388,175812,175964,176104,176112,176120,176280,176568,176616,176660,176700,176712,176984,177000,177020,177028,177120,177132,177140,177156,177168,177184,177196,177212,177240,177284,177412,177620,177640,177656,177708,177728,178316,178380,178668,178752,179040,179104,179148,179200,179232,179268,179300,179336,179368,179404,179468,179492,179568,179764,179776,180048,180304,180628,180988,181176,181416,181508,181548,181796,182044,182448,182540,182548,182560,182588,182864,182888,183080,183164,183344,183680,183740,184188,184280,184300,184312,184464,184936,185040,185076,185296,185308,185452,185464,185668,185828,186140,186168,186188,186248,186288,186316,186328,186356,186588,186816,186864,186948,187072,187176,187300,187392,187400,187472,187512,187588,187628,187704,187744,187836,188032,188132,188224,188292,188388,188432,188444,188464,188480,188500]);

  for (var i = 0; i < relocations.length; i++) {
    //assert(relocations[i] % 4 === 0);
    //assert(relocations[i] >= 0 && relocations[i] < eb + 188512); // in range
    //assert(HEAPU32[eb + relocations[i] >> 2] + eb < (-1 >>> 0), [i, relocations[i]]); // no overflows
    HEAPU32[eb + relocations[i] >> 2] = HEAPU32[eb + relocations[i] >> 2] + eb;
  }
});



   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,asyncFinalizers:[],ensureInit:function () {
        if (this.initted) return;
        this.initted = true;
      },setState:function (s) {
        this.ensureInit();
        this.state = s;
        Module['asm'].setAsyncState(s);
      },handle:function (doAsyncOp, yieldDuring) {
        Module['noExitRuntime'] = true;
        if (EmterpreterAsync.state === 0) {
          // save the stack we want to resume. this lets other code run in between
          // XXX this assumes that this stack top never ever leak! exceptions might violate that
          var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2, Module['asm'].emtStackSave()>>2));
          var stacktop = Module['asm'].stackSave();
  
          var resumedCallbacksForYield = false;
          function resumeCallbacksForYield() {
            if (resumedCallbacksForYield) return;
            resumedCallbacksForYield = true;
            // allow async callbacks, and also make sure to call the specified yield callbacks. we must
            // do this when nothing is on the stack, i.e. after it unwound
            EmterpreterAsync.yieldCallbacks.forEach(function(func) {
              func();
            });
            Browser.resumeAsyncCallbacks(); // if we were paused (e.g. we are after a sleep), then since we are now yielding, it is safe to call callbacks
          }
  
          var callingDoAsyncOp = 1; // if resume is called synchronously - during the doAsyncOp - we must make it truly async, for consistency
  
          doAsyncOp(function resume(post) {
            if (callingDoAsyncOp) {
              assert(callingDoAsyncOp === 1); // avoid infinite recursion
              callingDoAsyncOp++;
              setTimeout(function() {
                resume(post);
              }, 0);
              return;
            }
  
            assert(EmterpreterAsync.state === 1 || EmterpreterAsync.state === 3);
            EmterpreterAsync.setState(3);
            if (yieldDuring) {
              resumeCallbacksForYield();
            }
            // copy the stack back in and resume
            HEAP32.set(stack, EMTSTACKTOP>>2);
            EmterpreterAsync.setState(2);
            // Resume the main loop
            if (Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            assert(!EmterpreterAsync.postAsync);
            EmterpreterAsync.postAsync = post || null;
            Module['asm'].emterpret(stack[0]); // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
            if (!yieldDuring && EmterpreterAsync.state === 0) {
              // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
              Browser.resumeAsyncCallbacks();
            }
            if (EmterpreterAsync.state === 0) {
              EmterpreterAsync.asyncFinalizers.forEach(function(func) {
                func();
              });
              EmterpreterAsync.asyncFinalizers.length = 0;
            }
          });
  
          callingDoAsyncOp = 0;
  
          EmterpreterAsync.setState(1);
          // Pause the main loop, until we resume
          if (Browser.mainLoop.func) {
            Browser.mainLoop.pause();
          }
          if (yieldDuring) {
            // do this when we are not on the stack, i.e., the stack unwound. we might be too late, in which case we do it in resume()
            setTimeout(function() {
              resumeCallbacksForYield();
            }, 0);
          } else {
            Browser.pauseAsyncCallbacks();
          }
        } else {
          // nothing to do here, the stack was just recreated. reset the state.
          assert(EmterpreterAsync.state === 2);
          EmterpreterAsync.setState(0);
  
          if (EmterpreterAsync.postAsync) {
            var ret = EmterpreterAsync.postAsync();
            EmterpreterAsync.postAsync = null;
            return ret;
          }
        }
      }};function _emscripten_sleep_with_yield(ms) {
      EmterpreterAsync.handle(function(resume) {
        Browser.safeSetTimeout(resume, ms);
      }, true);
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _emscripten_sleep(ms) {
      EmterpreterAsync.handle(function(resume) {
        setTimeout(function() {
          if (ABORT) return; // do this manually; we can't call into Browser.safeSetTimeout, because that is paused/resumed!
          resume();
        }, ms);
      });
    }

  function ___lock() {}

  function ___unlock() {}

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  var _emscripten_asm_const=true;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

   
  Module["_sbrk"] = _sbrk;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

   
  Module["___uremdi3"] = ___uremdi3;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _emscripten_asm_const_int=true;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_async_call(func, arg, millis) {
      Module['noExitRuntime'] = true;
  
      function wrapper() {
        Runtime.getFuncWrapper(func, 'vi')(arg);
      }
  
      if (millis >= 0) {
        Browser.safeSetTimeout(wrapper, millis);
      } else {
        Browser.safeRequestAnimationFrame(wrapper);
      }
    }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory



function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_iiiii": invoke_iiiii, "invoke_v": invoke_v, "_abort": _abort, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_llvm_stackrestore": _llvm_stackrestore, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "___setErrNo": ___setErrNo, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_asm_const_v": _emscripten_asm_const_v, "__exit": __exit, "_llvm_stacksave": _llvm_stacksave, "_emscripten_sleep_with_yield": _emscripten_sleep_with_yield, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_get_now": _emscripten_get_now, "_emscripten_sleep": _emscripten_sleep, "___lock": ___lock, "___syscall6": ___syscall6, "_emscripten_async_call": _emscripten_async_call, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
Module.asmLibraryArg['EMTSTACKTOP'] = EMTSTACKTOP; Module.asmLibraryArg['EMT_STACK_MAX'] = EMT_STACK_MAX; Module.asmLibraryArg['eb'] = eb;
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_v=env.invoke_v;
  var _abort=env._abort;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_asm_const_v=env._emscripten_asm_const_v;
  var __exit=env.__exit;
  var _llvm_stacksave=env._llvm_stacksave;
  var _emscripten_sleep_with_yield=env._emscripten_sleep_with_yield;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_sleep=env._emscripten_sleep;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _emscripten_async_call=env._emscripten_async_call;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;
  var asyncState = 0;

var EMTSTACKTOP = env.EMTSTACKTOP|0;
var EMT_STACK_MAX = env.EMT_STACK_MAX|0;
var eb = env.eb|0;
// EMSCRIPTEN_START_FUNCS
function emterpret(pc) {
 pc = pc | 0;
 var sp = 0, inst = 0, lx = 0, ly = 0, lz = 0;
 var ld = 0.0;
 HEAP32[EMTSTACKTOP >> 2] = pc;
 sp = EMTSTACKTOP + 8 | 0;
 lx = HEAPU16[pc + 2 >> 1] | 0;
 EMTSTACKTOP = EMTSTACKTOP + (lx + 1 << 3) | 0;
 if ((asyncState | 0) != 2) {} else {
  pc = (HEAP32[sp - 4 >> 2] | 0) - 8 | 0;
 }
 pc = pc + 4 | 0;
 while (1) {
  pc = pc + 4 | 0;
  inst = HEAP32[pc >> 2] | 0;
  lx = inst >> 8 & 255;
  ly = inst >> 16 & 255;
  lz = inst >>> 24;
  switch (inst & 255) {
  case 0:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 1:
   HEAP32[sp + (lx << 3) >> 2] = inst >> 16;
   break;
  case 2:
   pc = pc + 4 | 0;
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[pc >> 2] | 0;
   break;
  case 3:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 4:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 5:
   HEAP32[sp + (lx << 3) >> 2] = Math_imul(HEAP32[sp + (ly << 3) >> 2] | 0, HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 6:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) / (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 7:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) / (HEAP32[sp + (lz << 3) >> 2] >>> 0) >>> 0;
   break;
  case 8:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) % (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 9:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) % (HEAP32[sp + (lz << 3) >> 2] >>> 0) >>> 0;
   break;
  case 13:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 14:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 15:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 16:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0 | 0;
   break;
  case 17:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 19:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 20:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 | (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 25:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) | 0;
   break;
  case 26:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (inst >> 24) | 0;
   break;
  case 27:
   HEAP32[sp + (lx << 3) >> 2] = Math_imul(HEAP32[sp + (ly << 3) >> 2] | 0, inst >> 24) | 0;
   break;
  case 28:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) / (inst >> 24) | 0;
   break;
  case 29:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) / (lz >>> 0) >>> 0;
   break;
  case 30:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) % (inst >> 24) | 0;
   break;
  case 31:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) % (lz >>> 0) >>> 0;
   break;
  case 32:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == inst >> 24 | 0;
   break;
  case 33:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != inst >> 24 | 0;
   break;
  case 34:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) < inst >> 24 | 0;
   break;
  case 35:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 < lz >>> 0 | 0;
   break;
  case 36:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) <= inst >> 24 | 0;
   break;
  case 38:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & inst >> 24;
   break;
  case 40:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) ^ inst >> 24;
   break;
  case 41:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) << lz;
   break;
  case 42:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >> lz;
   break;
  case 43:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >>> lz;
   break;
  case 45:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 46:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 47:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 48:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 49:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 50:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 <= HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 52:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 53:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 54:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 55:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 56:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 57:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 <= HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 58:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 59:
   HEAPF64[sp + (lx << 3) >> 3] = +(inst >> 16);
   break;
  case 63:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] + +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 65:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] * +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 66:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] / +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 75:
   HEAP32[sp + (lx << 3) >> 2] = ~~+HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 76:
   HEAPF64[sp + (lx << 3) >> 3] = +(HEAP32[sp + (ly << 3) >> 2] | 0);
   break;
  case 78:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[HEAP32[sp + (ly << 3) >> 2] >> 0];
   break;
  case 79:
   HEAP32[sp + (lx << 3) >> 2] = HEAPU8[HEAP32[sp + (ly << 3) >> 2] >> 0];
   break;
  case 80:
   HEAP32[sp + (lx << 3) >> 2] = HEAP16[HEAP32[sp + (ly << 3) >> 2] >> 1];
   break;
  case 82:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[HEAP32[sp + (ly << 3) >> 2] >> 2];
   break;
  case 83:
   HEAP8[HEAP32[sp + (lx << 3) >> 2] >> 0] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 84:
   HEAP16[HEAP32[sp + (lx << 3) >> 2] >> 1] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 85:
   HEAP32[HEAP32[sp + (lx << 3) >> 2] >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 88:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF32[HEAP32[sp + (ly << 3) >> 2] >> 2];
   break;
  case 90:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 0];
   break;
  case 91:
   HEAP32[sp + (lx << 3) >> 2] = HEAPU8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 0];
   break;
  case 92:
   HEAP32[sp + (lx << 3) >> 2] = HEAP16[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 1];
   break;
  case 94:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 2];
   break;
  case 95:
   HEAP8[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 0] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 97:
   HEAP32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 2] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 100:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 2];
   break;
  case 102:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 0];
   break;
  case 103:
   HEAP32[sp + (lx << 3) >> 2] = HEAPU8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 0];
   break;
  case 104:
   HEAP32[sp + (lx << 3) >> 2] = HEAP16[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 1];
   break;
  case 106:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 2];
   break;
  case 107:
   HEAP8[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 0] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 108:
   HEAP16[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 1] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 109:
   HEAP32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 2] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 119:
   pc = pc + (inst >> 16 << 2) | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 120:
   if (HEAP32[sp + (lx << 3) >> 2] | 0) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 121:
   if (!(HEAP32[sp + (lx << 3) >> 2] | 0)) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 125:
   pc = pc + 4 | 0;
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 ? HEAP32[sp + (lz << 3) >> 2] | 0 : HEAP32[sp + ((HEAPU8[pc >> 0] | 0) << 3) >> 2] | 0;
   break;
  case 134:
   lz = HEAPU8[(HEAP32[pc + 4 >> 2] | 0) + 1 | 0] | 0;
   ly = 0;
   if ((asyncState | 0) != 2) {
    while ((ly | 0) < (lz | 0)) {
     HEAP32[EMTSTACKTOP + (ly << 3) + 8 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) >> 2] | 0;
     HEAP32[EMTSTACKTOP + (ly << 3) + 12 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) + 4 >> 2] | 0;
     ly = ly + 1 | 0;
    }
   }
   HEAP32[sp - 4 >> 2] = pc;
   emterpret(HEAP32[pc + 4 >> 2] | 0);
   if ((asyncState | 0) == 1) {
    EMTSTACKTOP = sp - 8 | 0;
    return;
   }
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[EMTSTACKTOP >> 2] | 0;
   HEAP32[sp + (lx << 3) + 4 >> 2] = HEAP32[EMTSTACKTOP + 4 >> 2] | 0;
   pc = pc + (4 + lz + 3 >> 2 << 2) | 0;
   break;
  case 135:
   switch (inst >>> 16 | 0) {
   case 0:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _has_hook(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 1:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _Value_ObjectValue_new() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 2:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ObjectDef_addFieldF(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 3:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _Value_ObjectValue_free(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 4:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _strlen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 5:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_clrlcd(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 6:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_rect(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 7:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GamStrShowS(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 8:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_revlcd(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 9:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_rectc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 10:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_putpixel(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 11:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _touchUpdate(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 12:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _touchListViewItemIndexAtPoint(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 10 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 11 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 13:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _limitValueInRange(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 14:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _llvm_stacksave() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 15:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_clslcd();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 16:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _memset(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 17:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ResLoadToMem(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 18:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _PlcRPicShow(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 19:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _MakeRect(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 20:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _touchDrawButton(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 21:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ResLoadToCon(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 22:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamShowKing(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 23:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetKingCitys(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 24:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamRevCity(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 25:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _touchIsPointInRect(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 26:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _llvm_stackrestore(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 27:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ResItemGet(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 28:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetDirect(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 29:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityPersons(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 30:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ShowMapClear();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 31:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _DelPerson(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 32:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AddPerson(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 33:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamClearScreenV(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 34:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ShowCityMap(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 35:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _sprintf(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 36:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _PlcRPicShowEx(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 37:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _touchListViewCalcTopLeftForMove(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 10 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 11 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 38:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ltoa(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 39:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysSaveScreen();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 40:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysRestoreScreen();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 41:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamAsciiS(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 42:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _printf(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 43:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamMPicShowV(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 44:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamPicShowV(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 45:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamShowFrame(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 46:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtMapUnitShow(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 47:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_vi[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 31](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 48:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowMap(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 49:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowGen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 50:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowCursor();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 51:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowFrame();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 52:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_rand() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 53:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityDispGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 54:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GetGoodsName(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 55:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _strcat(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 56:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SetGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 57:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityOutPersons(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 58:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _add_16(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 59:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _itoa(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 60:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _calloc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 61:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetGenIdx(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 62:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _TransIdxToGen1(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 63:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _PlcMidShowStr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 64:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ObjectDef_addFieldGBKArray(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 65:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtLoadToMem2(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 66:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtFormatStr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 67:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetArmType(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 68:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _PlcStrShowS(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 69:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetTerrain(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 70:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _free(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 71:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _HarvestryFood();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 72:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _RevenueMoney();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 73:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GamGetPersonCount() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 74:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityCaptives(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 75:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetJNPtr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 76:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetGenTer(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 77:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _CountPlusSub(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 78:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtChkAkRng(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 79:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtJNChkAim(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 80:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetExp(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 81:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamClearLastMsg();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 82:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetPeriodKings(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 83:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GetCityName(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 84:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = Math_abs(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 85:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _IsManual(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 86:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _SearchRoad(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 87:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _OrderConsumeThew(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 88:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _CountOverAdd(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 89:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _LevelUp(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 90:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetRoundEnemyCity(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 91:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetWeekCity(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 92:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _IsMoney(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 93:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AttackCityRoad(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 94:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _OrderConsumeMoney(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 95:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetPersonCity(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 96:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtLoadToMem3(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 97:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamGetLastMsg(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 98:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtStatGen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 99:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _call_hook_s(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 100:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _js_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 101:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GamChooseCity() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 102:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _TransIdxToGen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 103:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _calcAt(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 104:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GetCityState(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 105:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _BeOccupied(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 106:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtGetAimPos(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 107:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtCntInterval(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 108:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AddGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 109:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SetGoodsByIndex(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 110:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityPGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 111:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _DelGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 112:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_line(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 113:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _TransIdxToGen3(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 114:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetEnemyPersons(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 115:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetEnemySatraps(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 116:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetEnemyKing(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 117:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtCanUse(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 118:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _sqrt32(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 119:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetKingPersons(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 120:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _TransIdxToGen2(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 121:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ResItemGetN(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 122:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _bind_clear_error_string();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 123:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _bind_get_error_string() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 124:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _HoldCaptive(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 125:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _LostEscape(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 126:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _bits_to_bytes(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 127:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _memcpy(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 128:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetBaseXY(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 129:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtLoadToCon(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 130:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetNearGen() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 131:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtCountPath(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 132:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowMvRng();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 133:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ObjectDef_addFieldArray(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 134:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _InitItem(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 135:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AddItem(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 136:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtLoadToMem(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 137:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtStrShowV(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 138:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtMakeSklNam(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 139:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _sav_fopen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 140:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_fread(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 141:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamSetPersonCount(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 142:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_freadall(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 143:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_fclose(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 144:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_srand(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 145:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowAtRng();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 146:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtChkRng() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 147:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_fwrite(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 148:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_seed() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 149:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtGetMPos(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 150:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _NopDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 151:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AssartDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 152:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AccractbusinessDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 153:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FatherDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 154:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _InspectionDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 155:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ExchangeDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 156:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _MoveDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 157:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _RealienateDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 158:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ReconnoitreDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 159:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ConscriptionDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 160:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _SysGetTimer1Number() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 161:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysTimer1Close();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 162:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysTimer1Open(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 163:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _PlcArmsMaxP(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 164:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtResumeMp(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 165:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_lock_lock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 166:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_lock_unlock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 167:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _msg_free(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 168:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtIntVar() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 169:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtChkEnd(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 170:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtCountWon();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 171:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _IsLoss() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 172:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _IsWin() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 173:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SetCitySatrap();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 174:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _CountProvUse();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 175:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ShowFightNoteFace(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 176:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___strdup(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 177:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtCheckIdx() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 178:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _DelOrder(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 179:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GuiTranslateMsg(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 180:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowStateBackground();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 181:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _PlcNumShow(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 182:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtRPicShowV(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 183:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _EventStateDeal() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 184:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GoodsUpDatadate() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 185:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _PersonUpDatadate() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 186:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_v[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 15]();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 187:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _schedule_timer(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 188:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GamConInit() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 189:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GamVarInit() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 190:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamVarRst();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 191:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamConRst();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 192:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_sleep_with_yield(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 193:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtRefrashMap();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 194:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_asm_const_v(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 195:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_sleep(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 196:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _baye_init_for_js();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 197:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _fflush(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 198:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _exit(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   default:
   }
   break;
  case 136:
   HEAP32[sp + (lx << 3) >> 2] = STACKTOP;
   break;
  case 137:
   STACKTOP = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 138:
   lz = HEAP32[sp + (lz << 3) >> 2] | 0;
   lx = (HEAP32[sp + (lx << 3) >> 2] | 0) - (HEAP32[sp + (ly << 3) >> 2] | 0) >>> 0;
   if (lx >>> 0 >= lz >>> 0) {
    pc = pc + (lz << 2) | 0;
    continue;
   }
   pc = HEAP32[pc + 4 + (lx << 2) >> 2] | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 139:
   EMTSTACKTOP = sp - 8 | 0;
   HEAP32[EMTSTACKTOP >> 2] = HEAP32[sp + (lx << 3) >> 2] | 0;
   HEAP32[EMTSTACKTOP + 4 >> 2] = HEAP32[sp + (lx << 3) + 4 >> 2] | 0;
   return;
   break;
  case 141:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (inst >>> 16 << 3) >> 2] | 0;
   break;
  case 143:
   HEAP32[sp + (inst >>> 16 << 3) >> 2] = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  default:
  }
 }
}

function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0, $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = $0 >>> 0 < 245;
 do {
  if ($2) {
   $3 = $0 >>> 0 < 11;
   $4 = $0 + 11 | 0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[44852] | 0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10 | 0) == 0;
   if (!$11) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = $13 + $7 | 0;
    $15 = $14 << 1;
    $16 = 179448 + ($15 << 2) | 0;
    $17 = $16 + 8 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 + 8 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = ($16 | 0) == ($20 | 0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[44852] = $24;
     } else {
      $25 = HEAP32[179424 >> 2] | 0;
      $26 = $20 >>> 0 < $25 >>> 0;
      if ($26) {
       _abort();
      }
      $27 = $20 + 12 | 0;
      $28 = HEAP32[$27 >> 2] | 0;
      $29 = ($28 | 0) == ($18 | 0);
      if ($29) {
       HEAP32[$27 >> 2] = $16;
       HEAP32[$17 >> 2] = $20;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = $18 + 4 | 0;
    HEAP32[$32 >> 2] = $31;
    $33 = $18 + $30 | 0;
    $34 = $33 + 4 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $35 | 1;
    HEAP32[$34 >> 2] = $36;
    $$0 = $19;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $37 = HEAP32[179416 >> 2] | 0;
   $38 = $6 >>> 0 > $37 >>> 0;
   if ($38) {
    $39 = ($9 | 0) == 0;
    if (!$39) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = 0 - $41 | 0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = 0 - $44 | 0;
     $46 = $44 & $45;
     $47 = $46 + -1 | 0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = $65 + $66 | 0;
     $68 = $67 << 1;
     $69 = 179448 + ($68 << 2) | 0;
     $70 = $69 + 8 | 0;
     $71 = HEAP32[$70 >> 2] | 0;
     $72 = $71 + 8 | 0;
     $73 = HEAP32[$72 >> 2] | 0;
     $74 = ($69 | 0) == ($73 | 0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[44852] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[179424 >> 2] | 0;
       $79 = $73 >>> 0 < $78 >>> 0;
       if ($79) {
        _abort();
       }
       $80 = $73 + 12 | 0;
       $81 = HEAP32[$80 >> 2] | 0;
       $82 = ($81 | 0) == ($71 | 0);
       if ($82) {
        HEAP32[$80 >> 2] = $69;
        HEAP32[$70 >> 2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $83 = $67 << 3;
     $84 = $83 - $6 | 0;
     $85 = $6 | 3;
     $86 = $71 + 4 | 0;
     HEAP32[$86 >> 2] = $85;
     $87 = $71 + $6 | 0;
     $88 = $84 | 1;
     $89 = $87 + 4 | 0;
     HEAP32[$89 >> 2] = $88;
     $90 = $87 + $84 | 0;
     HEAP32[$90 >> 2] = $84;
     $91 = ($37 | 0) == 0;
     if (!$91) {
      $92 = HEAP32[179428 >> 2] | 0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = 179448 + ($94 << 2) | 0;
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97 | 0) == 0;
      if ($99) {
       $100 = $98 | $96;
       HEAP32[44852] = $100;
       $$pre = $95 + 8 | 0;
       $$0199 = $95;
       $$pre$phiZ2D = $$pre;
      } else {
       $101 = $95 + 8 | 0;
       $102 = HEAP32[$101 >> 2] | 0;
       $103 = HEAP32[179424 >> 2] | 0;
       $104 = $102 >>> 0 < $103 >>> 0;
       if ($104) {
        _abort();
       } else {
        $$0199 = $102;
        $$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92;
      $105 = $$0199 + 12 | 0;
      HEAP32[$105 >> 2] = $92;
      $106 = $92 + 8 | 0;
      HEAP32[$106 >> 2] = $$0199;
      $107 = $92 + 12 | 0;
      HEAP32[$107 >> 2] = $95;
     }
     HEAP32[179416 >> 2] = $84;
     HEAP32[179428 >> 2] = $87;
     $$0 = $72;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $108 = HEAP32[179412 >> 2] | 0;
    $109 = ($108 | 0) == 0;
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = 0 - $108 | 0;
     $111 = $108 & $110;
     $112 = $111 + -1 | 0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = $130 + $131 | 0;
     $133 = 179712 + ($132 << 2) | 0;
     $134 = HEAP32[$133 >> 2] | 0;
     $135 = $134 + 4 | 0;
     $136 = HEAP32[$135 >> 2] | 0;
     $137 = $136 & -8;
     $138 = $137 - $6 | 0;
     $139 = $134 + 16 | 0;
     $140 = HEAP32[$139 >> 2] | 0;
     $not$5$i = ($140 | 0) == (0 | 0);
     $$sink16$i = $not$5$i & 1;
     $141 = ($134 + 16 | 0) + ($$sink16$i << 2) | 0;
     $142 = HEAP32[$141 >> 2] | 0;
     $143 = ($142 | 0) == (0 | 0);
     if ($143) {
      $$0192$lcssa$i = $134;
      $$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;
      $$01937$i = $138;
      $145 = $142;
      while (1) {
       $144 = $145 + 4 | 0;
       $146 = HEAP32[$144 >> 2] | 0;
       $147 = $146 & -8;
       $148 = $147 - $6 | 0;
       $149 = $148 >>> 0 < $$01937$i >>> 0;
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = $145 + 16 | 0;
       $151 = HEAP32[$150 >> 2] | 0;
       $not$$i = ($151 | 0) == (0 | 0);
       $$sink1$i = $not$$i & 1;
       $152 = ($145 + 16 | 0) + ($$sink1$i << 2) | 0;
       $153 = HEAP32[$152 >> 2] | 0;
       $154 = ($153 | 0) == (0 | 0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;
        $$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;
        $$01937$i = $$$0193$i;
        $145 = $153;
       }
      }
     }
     $155 = HEAP32[179424 >> 2] | 0;
     $156 = $$0192$lcssa$i >>> 0 < $155 >>> 0;
     if ($156) {
      _abort();
     }
     $157 = $$0192$lcssa$i + $6 | 0;
     $158 = $$0192$lcssa$i >>> 0 < $157 >>> 0;
     if (!$158) {
      _abort();
     }
     $159 = $$0192$lcssa$i + 24 | 0;
     $160 = HEAP32[$159 >> 2] | 0;
     $161 = $$0192$lcssa$i + 12 | 0;
     $162 = HEAP32[$161 >> 2] | 0;
     $163 = ($162 | 0) == ($$0192$lcssa$i | 0);
     do {
      if ($163) {
       $173 = $$0192$lcssa$i + 20 | 0;
       $174 = HEAP32[$173 >> 2] | 0;
       $175 = ($174 | 0) == (0 | 0);
       if ($175) {
        $176 = $$0192$lcssa$i + 16 | 0;
        $177 = HEAP32[$176 >> 2] | 0;
        $178 = ($177 | 0) == (0 | 0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;
         $$1198$i = $176;
        }
       } else {
        $$1196$i = $174;
        $$1198$i = $173;
       }
       while (1) {
        $179 = $$1196$i + 20 | 0;
        $180 = HEAP32[$179 >> 2] | 0;
        $181 = ($180 | 0) == (0 | 0);
        if (!$181) {
         $$1196$i = $180;
         $$1198$i = $179;
         continue;
        }
        $182 = $$1196$i + 16 | 0;
        $183 = HEAP32[$182 >> 2] | 0;
        $184 = ($183 | 0) == (0 | 0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;
         $$1198$i = $182;
        }
       }
       $185 = $$1198$i >>> 0 < $155 >>> 0;
       if ($185) {
        _abort();
       } else {
        HEAP32[$$1198$i >> 2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = $$0192$lcssa$i + 8 | 0;
       $165 = HEAP32[$164 >> 2] | 0;
       $166 = $165 >>> 0 < $155 >>> 0;
       if ($166) {
        _abort();
       }
       $167 = $165 + 12 | 0;
       $168 = HEAP32[$167 >> 2] | 0;
       $169 = ($168 | 0) == ($$0192$lcssa$i | 0);
       if (!$169) {
        _abort();
       }
       $170 = $162 + 8 | 0;
       $171 = HEAP32[$170 >> 2] | 0;
       $172 = ($171 | 0) == ($$0192$lcssa$i | 0);
       if ($172) {
        HEAP32[$167 >> 2] = $162;
        HEAP32[$170 >> 2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $186 = ($160 | 0) == (0 | 0);
     L73 : do {
      if (!$186) {
       $187 = $$0192$lcssa$i + 28 | 0;
       $188 = HEAP32[$187 >> 2] | 0;
       $189 = 179712 + ($188 << 2) | 0;
       $190 = HEAP32[$189 >> 2] | 0;
       $191 = ($$0192$lcssa$i | 0) == ($190 | 0);
       do {
        if ($191) {
         HEAP32[$189 >> 2] = $$3$i;
         $cond$i = ($$3$i | 0) == (0 | 0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[179412 >> 2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[179424 >> 2] | 0;
         $196 = $160 >>> 0 < $195 >>> 0;
         if ($196) {
          _abort();
         } else {
          $197 = $160 + 16 | 0;
          $198 = HEAP32[$197 >> 2] | 0;
          $not$1$i = ($198 | 0) != ($$0192$lcssa$i | 0);
          $$sink2$i = $not$1$i & 1;
          $199 = ($160 + 16 | 0) + ($$sink2$i << 2) | 0;
          HEAP32[$199 >> 2] = $$3$i;
          $200 = ($$3$i | 0) == (0 | 0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $201 = HEAP32[179424 >> 2] | 0;
       $202 = $$3$i >>> 0 < $201 >>> 0;
       if ($202) {
        _abort();
       }
       $203 = $$3$i + 24 | 0;
       HEAP32[$203 >> 2] = $160;
       $204 = $$0192$lcssa$i + 16 | 0;
       $205 = HEAP32[$204 >> 2] | 0;
       $206 = ($205 | 0) == (0 | 0);
       do {
        if (!$206) {
         $207 = $205 >>> 0 < $201 >>> 0;
         if ($207) {
          _abort();
         } else {
          $208 = $$3$i + 16 | 0;
          HEAP32[$208 >> 2] = $205;
          $209 = $205 + 24 | 0;
          HEAP32[$209 >> 2] = $$3$i;
          break;
         }
        }
       } while (0);
       $210 = $$0192$lcssa$i + 20 | 0;
       $211 = HEAP32[$210 >> 2] | 0;
       $212 = ($211 | 0) == (0 | 0);
       if (!$212) {
        $213 = HEAP32[179424 >> 2] | 0;
        $214 = $211 >>> 0 < $213 >>> 0;
        if ($214) {
         _abort();
        } else {
         $215 = $$3$i + 20 | 0;
         HEAP32[$215 >> 2] = $211;
         $216 = $211 + 24 | 0;
         HEAP32[$216 >> 2] = $$3$i;
         break;
        }
       }
      }
     } while (0);
     $217 = $$0193$lcssa$i >>> 0 < 16;
     if ($217) {
      $218 = $$0193$lcssa$i + $6 | 0;
      $219 = $218 | 3;
      $220 = $$0192$lcssa$i + 4 | 0;
      HEAP32[$220 >> 2] = $219;
      $221 = $$0192$lcssa$i + $218 | 0;
      $222 = $221 + 4 | 0;
      $223 = HEAP32[$222 >> 2] | 0;
      $224 = $223 | 1;
      HEAP32[$222 >> 2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = $$0192$lcssa$i + 4 | 0;
      HEAP32[$226 >> 2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = $157 + 4 | 0;
      HEAP32[$228 >> 2] = $227;
      $229 = $157 + $$0193$lcssa$i | 0;
      HEAP32[$229 >> 2] = $$0193$lcssa$i;
      $230 = ($37 | 0) == 0;
      if (!$230) {
       $231 = HEAP32[179428 >> 2] | 0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = 179448 + ($233 << 2) | 0;
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236 | 0) == 0;
       if ($237) {
        $238 = $8 | $235;
        HEAP32[44852] = $238;
        $$pre$i = $234 + 8 | 0;
        $$0189$i = $234;
        $$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = $234 + 8 | 0;
        $240 = HEAP32[$239 >> 2] | 0;
        $241 = HEAP32[179424 >> 2] | 0;
        $242 = $240 >>> 0 < $241 >>> 0;
        if ($242) {
         _abort();
        } else {
         $$0189$i = $240;
         $$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $231;
       $243 = $$0189$i + 12 | 0;
       HEAP32[$243 >> 2] = $231;
       $244 = $231 + 8 | 0;
       HEAP32[$244 >> 2] = $$0189$i;
       $245 = $231 + 12 | 0;
       HEAP32[$245 >> 2] = $234;
      }
      HEAP32[179416 >> 2] = $$0193$lcssa$i;
      HEAP32[179428 >> 2] = $157;
     }
     $246 = $$0192$lcssa$i + 8 | 0;
     $$0 = $246;
     STACKTOP = sp;
     return $$0 | 0;
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = $0 >>> 0 > 4294967231;
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = $0 + 11 | 0;
    $249 = $248 & -8;
    $250 = HEAP32[179412 >> 2] | 0;
    $251 = ($250 | 0) == 0;
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = 0 - $249 | 0;
     $253 = $248 >>> 8;
     $254 = ($253 | 0) == 0;
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = $249 >>> 0 > 16777215;
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = $253 + 1048320 | 0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = $259 + 520192 | 0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = $264 + 245760 | 0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = 14 - $268 | 0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = $269 + $271 | 0;
       $273 = $272 << 1;
       $274 = $272 + 7 | 0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = 179712 + ($$0358$i << 2) | 0;
     $279 = HEAP32[$278 >> 2] | 0;
     $280 = ($279 | 0) == (0 | 0);
     L117 : do {
      if ($280) {
       $$2355$i = 0;
       $$3$i201 = 0;
       $$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i | 0) == 31;
       $282 = $$0358$i >>> 1;
       $283 = 25 - $282 | 0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;
       $$0347$i = $252;
       $$0353$i = $279;
       $$0359$i = $285;
       $$0362$i = 0;
       while (1) {
        $286 = $$0353$i + 4 | 0;
        $287 = HEAP32[$286 >> 2] | 0;
        $288 = $287 & -8;
        $289 = $288 - $249 | 0;
        $290 = $289 >>> 0 < $$0347$i >>> 0;
        if ($290) {
         $291 = ($289 | 0) == 0;
         if ($291) {
          $$415$i = $$0353$i;
          $$435114$i = 0;
          $$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;
          $$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;
         $$1348$i = $$0347$i;
        }
        $292 = $$0353$i + 20 | 0;
        $293 = HEAP32[$292 >> 2] | 0;
        $294 = $$0359$i >>> 31;
        $295 = ($$0353$i + 16 | 0) + ($294 << 2) | 0;
        $296 = HEAP32[$295 >> 2] | 0;
        $297 = ($293 | 0) == (0 | 0);
        $298 = ($293 | 0) == ($296 | 0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296 | 0) == (0 | 0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i & 1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;
         $$3$i201 = $$1343$i;
         $$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;
         $$0347$i = $$1348$i;
         $$0353$i = $296;
         $$0359$i = $$0359$$i;
         $$0362$i = $$1363$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      $301 = ($$2355$i | 0) == (0 | 0);
      $302 = ($$3$i201 | 0) == (0 | 0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = 0 - $303 | 0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306 | 0) == 0;
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = 0 - $306 | 0;
       $309 = $306 & $308;
       $310 = $309 + -1 | 0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = $328 + $329 | 0;
       $331 = 179712 + ($330 << 2) | 0;
       $332 = HEAP32[$331 >> 2] | 0;
       $$4$ph$i = 0;
       $$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;
       $$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i | 0) == (0 | 0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;
       $$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;
       $$435114$i = $$3350$i;
       $$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0;
       $334 = $$435713$i + 4 | 0;
       $335 = HEAP32[$334 >> 2] | 0;
       $336 = $335 & -8;
       $337 = $336 - $249 | 0;
       $338 = $337 >>> 0 < $$435114$i >>> 0;
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = $$435713$i + 16 | 0;
       $340 = HEAP32[$339 >> 2] | 0;
       $not$1$i203 = ($340 | 0) == (0 | 0);
       $$sink2$i204 = $not$1$i203 & 1;
       $341 = ($$435713$i + 16 | 0) + ($$sink2$i204 << 2) | 0;
       $342 = HEAP32[$341 >> 2] | 0;
       $343 = ($342 | 0) == (0 | 0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;
        $$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;
        $$435114$i = $$$4351$i;
        $$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i | 0) == (0 | 0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[179416 >> 2] | 0;
      $346 = $345 - $249 | 0;
      $347 = $$4351$lcssa$i >>> 0 < $346 >>> 0;
      if ($347) {
       $348 = HEAP32[179424 >> 2] | 0;
       $349 = $$4$lcssa$i >>> 0 < $348 >>> 0;
       if ($349) {
        _abort();
       }
       $350 = $$4$lcssa$i + $249 | 0;
       $351 = $$4$lcssa$i >>> 0 < $350 >>> 0;
       if (!$351) {
        _abort();
       }
       $352 = $$4$lcssa$i + 24 | 0;
       $353 = HEAP32[$352 >> 2] | 0;
       $354 = $$4$lcssa$i + 12 | 0;
       $355 = HEAP32[$354 >> 2] | 0;
       $356 = ($355 | 0) == ($$4$lcssa$i | 0);
       do {
        if ($356) {
         $366 = $$4$lcssa$i + 20 | 0;
         $367 = HEAP32[$366 >> 2] | 0;
         $368 = ($367 | 0) == (0 | 0);
         if ($368) {
          $369 = $$4$lcssa$i + 16 | 0;
          $370 = HEAP32[$369 >> 2] | 0;
          $371 = ($370 | 0) == (0 | 0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;
           $$1374$i = $369;
          }
         } else {
          $$1370$i = $367;
          $$1374$i = $366;
         }
         while (1) {
          $372 = $$1370$i + 20 | 0;
          $373 = HEAP32[$372 >> 2] | 0;
          $374 = ($373 | 0) == (0 | 0);
          if (!$374) {
           $$1370$i = $373;
           $$1374$i = $372;
           continue;
          }
          $375 = $$1370$i + 16 | 0;
          $376 = HEAP32[$375 >> 2] | 0;
          $377 = ($376 | 0) == (0 | 0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;
           $$1374$i = $375;
          }
         }
         $378 = $$1374$i >>> 0 < $348 >>> 0;
         if ($378) {
          _abort();
         } else {
          HEAP32[$$1374$i >> 2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = $$4$lcssa$i + 8 | 0;
         $358 = HEAP32[$357 >> 2] | 0;
         $359 = $358 >>> 0 < $348 >>> 0;
         if ($359) {
          _abort();
         }
         $360 = $358 + 12 | 0;
         $361 = HEAP32[$360 >> 2] | 0;
         $362 = ($361 | 0) == ($$4$lcssa$i | 0);
         if (!$362) {
          _abort();
         }
         $363 = $355 + 8 | 0;
         $364 = HEAP32[$363 >> 2] | 0;
         $365 = ($364 | 0) == ($$4$lcssa$i | 0);
         if ($365) {
          HEAP32[$360 >> 2] = $355;
          HEAP32[$363 >> 2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $379 = ($353 | 0) == (0 | 0);
       L164 : do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = $$4$lcssa$i + 28 | 0;
         $381 = HEAP32[$380 >> 2] | 0;
         $382 = 179712 + ($381 << 2) | 0;
         $383 = HEAP32[$382 >> 2] | 0;
         $384 = ($$4$lcssa$i | 0) == ($383 | 0);
         do {
          if ($384) {
           HEAP32[$382 >> 2] = $$3372$i;
           $cond$i208 = ($$3372$i | 0) == (0 | 0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[179412 >> 2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[179424 >> 2] | 0;
           $389 = $353 >>> 0 < $388 >>> 0;
           if ($389) {
            _abort();
           } else {
            $390 = $353 + 16 | 0;
            $391 = HEAP32[$390 >> 2] | 0;
            $not$$i209 = ($391 | 0) != ($$4$lcssa$i | 0);
            $$sink3$i = $not$$i209 & 1;
            $392 = ($353 + 16 | 0) + ($$sink3$i << 2) | 0;
            HEAP32[$392 >> 2] = $$3372$i;
            $393 = ($$3372$i | 0) == (0 | 0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $394 = HEAP32[179424 >> 2] | 0;
         $395 = $$3372$i >>> 0 < $394 >>> 0;
         if ($395) {
          _abort();
         }
         $396 = $$3372$i + 24 | 0;
         HEAP32[$396 >> 2] = $353;
         $397 = $$4$lcssa$i + 16 | 0;
         $398 = HEAP32[$397 >> 2] | 0;
         $399 = ($398 | 0) == (0 | 0);
         do {
          if (!$399) {
           $400 = $398 >>> 0 < $394 >>> 0;
           if ($400) {
            _abort();
           } else {
            $401 = $$3372$i + 16 | 0;
            HEAP32[$401 >> 2] = $398;
            $402 = $398 + 24 | 0;
            HEAP32[$402 >> 2] = $$3372$i;
            break;
           }
          }
         } while (0);
         $403 = $$4$lcssa$i + 20 | 0;
         $404 = HEAP32[$403 >> 2] | 0;
         $405 = ($404 | 0) == (0 | 0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[179424 >> 2] | 0;
          $407 = $404 >>> 0 < $406 >>> 0;
          if ($407) {
           _abort();
          } else {
           $408 = $$3372$i + 20 | 0;
           HEAP32[$408 >> 2] = $404;
           $409 = $404 + 24 | 0;
           HEAP32[$409 >> 2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while (0);
       $410 = $$4351$lcssa$i >>> 0 < 16;
       do {
        if ($410) {
         $411 = $$4351$lcssa$i + $249 | 0;
         $412 = $411 | 3;
         $413 = $$4$lcssa$i + 4 | 0;
         HEAP32[$413 >> 2] = $412;
         $414 = $$4$lcssa$i + $411 | 0;
         $415 = $414 + 4 | 0;
         $416 = HEAP32[$415 >> 2] | 0;
         $417 = $416 | 1;
         HEAP32[$415 >> 2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = $$4$lcssa$i + 4 | 0;
         HEAP32[$419 >> 2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = $350 + 4 | 0;
         HEAP32[$421 >> 2] = $420;
         $422 = $350 + $$4351$lcssa$i | 0;
         HEAP32[$422 >> 2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = $$4351$lcssa$i >>> 0 < 256;
         if ($424) {
          $425 = $423 << 1;
          $426 = 179448 + ($425 << 2) | 0;
          $427 = HEAP32[44852] | 0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429 | 0) == 0;
          if ($430) {
           $431 = $427 | $428;
           HEAP32[44852] = $431;
           $$pre$i210 = $426 + 8 | 0;
           $$0368$i = $426;
           $$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = $426 + 8 | 0;
           $433 = HEAP32[$432 >> 2] | 0;
           $434 = HEAP32[179424 >> 2] | 0;
           $435 = $433 >>> 0 < $434 >>> 0;
           if ($435) {
            _abort();
           } else {
            $$0368$i = $433;
            $$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $350;
          $436 = $$0368$i + 12 | 0;
          HEAP32[$436 >> 2] = $350;
          $437 = $350 + 8 | 0;
          HEAP32[$437 >> 2] = $$0368$i;
          $438 = $350 + 12 | 0;
          HEAP32[$438 >> 2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439 | 0) == 0;
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = $$4351$lcssa$i >>> 0 > 16777215;
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = $439 + 1048320 | 0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = $445 + 520192 | 0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = $450 + 245760 | 0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = 14 - $454 | 0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = $455 + $457 | 0;
           $459 = $458 << 1;
           $460 = $458 + 7 | 0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = 179712 + ($$0361$i << 2) | 0;
         $465 = $350 + 28 | 0;
         HEAP32[$465 >> 2] = $$0361$i;
         $466 = $350 + 16 | 0;
         $467 = $466 + 4 | 0;
         HEAP32[$467 >> 2] = 0;
         HEAP32[$466 >> 2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469 | 0) == 0;
         if ($471) {
          $472 = $470 | $468;
          HEAP32[179412 >> 2] = $472;
          HEAP32[$464 >> 2] = $350;
          $473 = $350 + 24 | 0;
          HEAP32[$473 >> 2] = $464;
          $474 = $350 + 12 | 0;
          HEAP32[$474 >> 2] = $350;
          $475 = $350 + 8 | 0;
          HEAP32[$475 >> 2] = $350;
          break;
         }
         $476 = HEAP32[$464 >> 2] | 0;
         $477 = ($$0361$i | 0) == 31;
         $478 = $$0361$i >>> 1;
         $479 = 25 - $478 | 0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;
         $$0345$i = $476;
         while (1) {
          $482 = $$0345$i + 4 | 0;
          $483 = HEAP32[$482 >> 2] | 0;
          $484 = $483 & -8;
          $485 = ($484 | 0) == ($$4351$lcssa$i | 0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = ($$0345$i + 16 | 0) + ($486 << 2) | 0;
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487 >> 2] | 0;
          $490 = ($489 | 0) == (0 | 0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;
           $$0345$i = $489;
          }
         }
         if ((label | 0) == 136) {
          $491 = HEAP32[179424 >> 2] | 0;
          $492 = $487 >>> 0 < $491 >>> 0;
          if ($492) {
           _abort();
          } else {
           HEAP32[$487 >> 2] = $350;
           $493 = $350 + 24 | 0;
           HEAP32[$493 >> 2] = $$0345$i;
           $494 = $350 + 12 | 0;
           HEAP32[$494 >> 2] = $350;
           $495 = $350 + 8 | 0;
           HEAP32[$495 >> 2] = $350;
           break;
          }
         } else if ((label | 0) == 139) {
          $496 = $$0345$i + 8 | 0;
          $497 = HEAP32[$496 >> 2] | 0;
          $498 = HEAP32[179424 >> 2] | 0;
          $499 = $497 >>> 0 >= $498 >>> 0;
          $not$9$i = $$0345$i >>> 0 >= $498 >>> 0;
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = $497 + 12 | 0;
           HEAP32[$501 >> 2] = $350;
           HEAP32[$496 >> 2] = $350;
           $502 = $350 + 8 | 0;
           HEAP32[$502 >> 2] = $497;
           $503 = $350 + 12 | 0;
           HEAP32[$503 >> 2] = $$0345$i;
           $504 = $350 + 24 | 0;
           HEAP32[$504 >> 2] = 0;
           break;
          } else {
           _abort();
          }
         }
        }
       } while (0);
       $505 = $$4$lcssa$i + 8 | 0;
       $$0 = $505;
       STACKTOP = sp;
       return $$0 | 0;
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while (0);
 $506 = HEAP32[179416 >> 2] | 0;
 $507 = $506 >>> 0 < $$0197 >>> 0;
 if (!$507) {
  $508 = $506 - $$0197 | 0;
  $509 = HEAP32[179428 >> 2] | 0;
  $510 = $508 >>> 0 > 15;
  if ($510) {
   $511 = $509 + $$0197 | 0;
   HEAP32[179428 >> 2] = $511;
   HEAP32[179416 >> 2] = $508;
   $512 = $508 | 1;
   $513 = $511 + 4 | 0;
   HEAP32[$513 >> 2] = $512;
   $514 = $511 + $508 | 0;
   HEAP32[$514 >> 2] = $508;
   $515 = $$0197 | 3;
   $516 = $509 + 4 | 0;
   HEAP32[$516 >> 2] = $515;
  } else {
   HEAP32[179416 >> 2] = 0;
   HEAP32[179428 >> 2] = 0;
   $517 = $506 | 3;
   $518 = $509 + 4 | 0;
   HEAP32[$518 >> 2] = $517;
   $519 = $509 + $506 | 0;
   $520 = $519 + 4 | 0;
   $521 = HEAP32[$520 >> 2] | 0;
   $522 = $521 | 1;
   HEAP32[$520 >> 2] = $522;
  }
  $523 = $509 + 8 | 0;
  $$0 = $523;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $524 = HEAP32[179420 >> 2] | 0;
 $525 = $524 >>> 0 > $$0197 >>> 0;
 if ($525) {
  $526 = $524 - $$0197 | 0;
  HEAP32[179420 >> 2] = $526;
  $527 = HEAP32[179432 >> 2] | 0;
  $528 = $527 + $$0197 | 0;
  HEAP32[179432 >> 2] = $528;
  $529 = $526 | 1;
  $530 = $528 + 4 | 0;
  HEAP32[$530 >> 2] = $529;
  $531 = $$0197 | 3;
  $532 = $527 + 4 | 0;
  HEAP32[$532 >> 2] = $531;
  $533 = $527 + 8 | 0;
  $$0 = $533;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $534 = HEAP32[44970] | 0;
 $535 = ($534 | 0) == 0;
 if ($535) {
  HEAP32[179888 >> 2] = 4096;
  HEAP32[179884 >> 2] = 4096;
  HEAP32[179892 >> 2] = -1;
  HEAP32[179896 >> 2] = -1;
  HEAP32[179900 >> 2] = 0;
  HEAP32[179852 >> 2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1 >> 2] = $538;
  HEAP32[44970] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[179888 >> 2] | 0;
  $542 = $$pre$i212;
 }
 $539 = $$0197 + 48 | 0;
 $540 = $$0197 + 47 | 0;
 $541 = $542 + $540 | 0;
 $543 = 0 - $542 | 0;
 $544 = $541 & $543;
 $545 = $544 >>> 0 > $$0197 >>> 0;
 if (!$545) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $546 = HEAP32[179848 >> 2] | 0;
 $547 = ($546 | 0) == 0;
 if (!$547) {
  $548 = HEAP32[179840 >> 2] | 0;
  $549 = $548 + $544 | 0;
  $550 = $549 >>> 0 <= $548 >>> 0;
  $551 = $549 >>> 0 > $546 >>> 0;
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $552 = HEAP32[179852 >> 2] | 0;
 $553 = $552 & 4;
 $554 = ($553 | 0) == 0;
 L244 : do {
  if ($554) {
   $555 = HEAP32[179432 >> 2] | 0;
   $556 = ($555 | 0) == (0 | 0);
   L246 : do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = 179856;
     while (1) {
      $557 = HEAP32[$$0$i$i >> 2] | 0;
      $558 = $557 >>> 0 > $555 >>> 0;
      if (!$558) {
       $559 = $$0$i$i + 4 | 0;
       $560 = HEAP32[$559 >> 2] | 0;
       $561 = $557 + $560 | 0;
       $562 = $561 >>> 0 > $555 >>> 0;
       if ($562) {
        break;
       }
      }
      $563 = $$0$i$i + 8 | 0;
      $564 = HEAP32[$563 >> 2] | 0;
      $565 = ($564 | 0) == (0 | 0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = $541 - $524 | 0;
     $589 = $588 & $543;
     $590 = $589 >>> 0 < 2147483647;
     if ($590) {
      $591 = _sbrk($589 | 0) | 0;
      $592 = HEAP32[$$0$i$i >> 2] | 0;
      $593 = HEAP32[$559 >> 2] | 0;
      $594 = $592 + $593 | 0;
      $595 = ($591 | 0) == ($594 | 0);
      if ($595) {
       $596 = ($591 | 0) == (-1 | 0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;
        $$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;
       $$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $566 = _sbrk(0) | 0;
     $567 = ($566 | 0) == (-1 | 0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[179884 >> 2] | 0;
      $570 = $569 + -1 | 0;
      $571 = $570 & $568;
      $572 = ($571 | 0) == 0;
      $573 = $570 + $568 | 0;
      $574 = 0 - $569 | 0;
      $575 = $573 & $574;
      $576 = $575 - $568 | 0;
      $577 = $572 ? 0 : $576;
      $$$i = $577 + $544 | 0;
      $578 = HEAP32[179840 >> 2] | 0;
      $579 = $$$i + $578 | 0;
      $580 = $$$i >>> 0 > $$0197 >>> 0;
      $581 = $$$i >>> 0 < 2147483647;
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[179848 >> 2] | 0;
       $583 = ($582 | 0) == 0;
       if (!$583) {
        $584 = $579 >>> 0 <= $578 >>> 0;
        $585 = $579 >>> 0 > $582 >>> 0;
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = _sbrk($$$i | 0) | 0;
       $587 = ($586 | 0) == ($566 | 0);
       if ($587) {
        $$723948$i = $$$i;
        $$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;
        $$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $597 = 0 - $$2253$ph$i | 0;
     $598 = ($$2247$ph$i | 0) != (-1 | 0);
     $599 = $$2253$ph$i >>> 0 < 2147483647;
     $or$cond7$i = $599 & $598;
     $600 = $539 >>> 0 > $$2253$ph$i >>> 0;
     $or$cond10$i = $600 & $or$cond7$i;
     if (!$or$cond10$i) {
      $610 = ($$2247$ph$i | 0) == (-1 | 0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;
       $$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[179888 >> 2] | 0;
     $602 = $540 - $$2253$ph$i | 0;
     $603 = $602 + $601 | 0;
     $604 = 0 - $601 | 0;
     $605 = $603 & $604;
     $606 = $605 >>> 0 < 2147483647;
     if (!$606) {
      $$723948$i = $$2253$ph$i;
      $$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = _sbrk($605 | 0) | 0;
     $608 = ($607 | 0) == (-1 | 0);
     if ($608) {
      _sbrk($597 | 0) | 0;
      $$2234253237$i = 0;
      break;
     } else {
      $609 = $605 + $$2253$ph$i | 0;
      $$723948$i = $609;
      $$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while (0);
   $611 = HEAP32[179852 >> 2] | 0;
   $612 = $611 | 4;
   HEAP32[179852 >> 2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while (0);
 if ((label | 0) == 178) {
  $613 = $544 >>> 0 < 2147483647;
  if ($613) {
   $614 = _sbrk($544 | 0) | 0;
   $615 = _sbrk(0) | 0;
   $616 = ($614 | 0) != (-1 | 0);
   $617 = ($615 | 0) != (-1 | 0);
   $or$cond5$i = $616 & $617;
   $618 = $614 >>> 0 < $615 >>> 0;
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = $619 - $620 | 0;
   $622 = $$0197 + 40 | 0;
   $623 = $621 >>> 0 > $622 >>> 0;
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614 | 0) == (-1 | 0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!$or$cond50$i) {
    $$723948$i = $$$4236$i;
    $$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label | 0) == 180) {
  $626 = HEAP32[179840 >> 2] | 0;
  $627 = $626 + $$723948$i | 0;
  HEAP32[179840 >> 2] = $627;
  $628 = HEAP32[179844 >> 2] | 0;
  $629 = $627 >>> 0 > $628 >>> 0;
  if ($629) {
   HEAP32[179844 >> 2] = $627;
  }
  $630 = HEAP32[179432 >> 2] | 0;
  $631 = ($630 | 0) == (0 | 0);
  do {
   if ($631) {
    $632 = HEAP32[179424 >> 2] | 0;
    $633 = ($632 | 0) == (0 | 0);
    $634 = $$749$i >>> 0 < $632 >>> 0;
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[179424 >> 2] = $$749$i;
    }
    HEAP32[179856 >> 2] = $$749$i;
    HEAP32[179860 >> 2] = $$723948$i;
    HEAP32[179868 >> 2] = 0;
    $635 = HEAP32[44970] | 0;
    HEAP32[179444 >> 2] = $635;
    HEAP32[179440 >> 2] = -1;
    $$01$i$i = 0;
    while (1) {
     $636 = $$01$i$i << 1;
     $637 = 179448 + ($636 << 2) | 0;
     $638 = $637 + 12 | 0;
     HEAP32[$638 >> 2] = $637;
     $639 = $637 + 8 | 0;
     HEAP32[$639 >> 2] = $637;
     $640 = $$01$i$i + 1 | 0;
     $exitcond$i$i = ($640 | 0) == 32;
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = $$723948$i + -40 | 0;
    $642 = $$749$i + 8 | 0;
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644 | 0) == 0;
    $646 = 0 - $643 | 0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = $$749$i + $648 | 0;
    $650 = $641 - $648 | 0;
    HEAP32[179432 >> 2] = $649;
    HEAP32[179420 >> 2] = $650;
    $651 = $650 | 1;
    $652 = $649 + 4 | 0;
    HEAP32[$652 >> 2] = $651;
    $653 = $649 + $650 | 0;
    $654 = $653 + 4 | 0;
    HEAP32[$654 >> 2] = 40;
    $655 = HEAP32[179896 >> 2] | 0;
    HEAP32[179436 >> 2] = $655;
   } else {
    $$024371$i = 179856;
    while (1) {
     $656 = HEAP32[$$024371$i >> 2] | 0;
     $657 = $$024371$i + 4 | 0;
     $658 = HEAP32[$657 >> 2] | 0;
     $659 = $656 + $658 | 0;
     $660 = ($$749$i | 0) == ($659 | 0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = $$024371$i + 8 | 0;
     $662 = HEAP32[$661 >> 2] | 0;
     $663 = ($662 | 0) == (0 | 0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label | 0) == 190) {
     $664 = $$024371$i + 12 | 0;
     $665 = HEAP32[$664 >> 2] | 0;
     $666 = $665 & 8;
     $667 = ($666 | 0) == 0;
     if ($667) {
      $668 = $630 >>> 0 >= $656 >>> 0;
      $669 = $630 >>> 0 < $$749$i >>> 0;
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = $658 + $$723948$i | 0;
       HEAP32[$657 >> 2] = $670;
       $671 = HEAP32[179420 >> 2] | 0;
       $672 = $630 + 8 | 0;
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674 | 0) == 0;
       $676 = 0 - $673 | 0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = $630 + $678 | 0;
       $680 = $$723948$i - $678 | 0;
       $681 = $671 + $680 | 0;
       HEAP32[179432 >> 2] = $679;
       HEAP32[179420 >> 2] = $681;
       $682 = $681 | 1;
       $683 = $679 + 4 | 0;
       HEAP32[$683 >> 2] = $682;
       $684 = $679 + $681 | 0;
       $685 = $684 + 4 | 0;
       HEAP32[$685 >> 2] = 40;
       $686 = HEAP32[179896 >> 2] | 0;
       HEAP32[179436 >> 2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[179424 >> 2] | 0;
    $688 = $$749$i >>> 0 < $687 >>> 0;
    if ($688) {
     HEAP32[179424 >> 2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = $$749$i + $$723948$i | 0;
    $$124470$i = 179856;
    while (1) {
     $690 = HEAP32[$$124470$i >> 2] | 0;
     $691 = ($690 | 0) == ($689 | 0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = $$124470$i + 8 | 0;
     $693 = HEAP32[$692 >> 2] | 0;
     $694 = ($693 | 0) == (0 | 0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label | 0) == 198) {
     $695 = $$124470$i + 12 | 0;
     $696 = HEAP32[$695 >> 2] | 0;
     $697 = $696 & 8;
     $698 = ($697 | 0) == 0;
     if ($698) {
      HEAP32[$$124470$i >> 2] = $$749$i;
      $699 = $$124470$i + 4 | 0;
      $700 = HEAP32[$699 >> 2] | 0;
      $701 = $700 + $$723948$i | 0;
      HEAP32[$699 >> 2] = $701;
      $702 = $$749$i + 8 | 0;
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704 | 0) == 0;
      $706 = 0 - $703 | 0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = $$749$i + $708 | 0;
      $710 = $689 + 8 | 0;
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712 | 0) == 0;
      $714 = 0 - $711 | 0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = $689 + $716 | 0;
      $718 = $717;
      $719 = $709;
      $720 = $718 - $719 | 0;
      $721 = $709 + $$0197 | 0;
      $722 = $720 - $$0197 | 0;
      $723 = $$0197 | 3;
      $724 = $709 + 4 | 0;
      HEAP32[$724 >> 2] = $723;
      $725 = ($717 | 0) == ($630 | 0);
      do {
       if ($725) {
        $726 = HEAP32[179420 >> 2] | 0;
        $727 = $726 + $722 | 0;
        HEAP32[179420 >> 2] = $727;
        HEAP32[179432 >> 2] = $721;
        $728 = $727 | 1;
        $729 = $721 + 4 | 0;
        HEAP32[$729 >> 2] = $728;
       } else {
        $730 = HEAP32[179428 >> 2] | 0;
        $731 = ($717 | 0) == ($730 | 0);
        if ($731) {
         $732 = HEAP32[179416 >> 2] | 0;
         $733 = $732 + $722 | 0;
         HEAP32[179416 >> 2] = $733;
         HEAP32[179428 >> 2] = $721;
         $734 = $733 | 1;
         $735 = $721 + 4 | 0;
         HEAP32[$735 >> 2] = $734;
         $736 = $721 + $733 | 0;
         HEAP32[$736 >> 2] = $733;
         break;
        }
        $737 = $717 + 4 | 0;
        $738 = HEAP32[$737 >> 2] | 0;
        $739 = $738 & 3;
        $740 = ($739 | 0) == 1;
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = $738 >>> 0 < 256;
         L314 : do {
          if ($743) {
           $744 = $717 + 8 | 0;
           $745 = HEAP32[$744 >> 2] | 0;
           $746 = $717 + 12 | 0;
           $747 = HEAP32[$746 >> 2] | 0;
           $748 = $742 << 1;
           $749 = 179448 + ($748 << 2) | 0;
           $750 = ($745 | 0) == ($749 | 0);
           do {
            if (!$750) {
             $751 = $745 >>> 0 < $752 >>> 0;
             if ($751) {
              _abort();
             }
             $753 = $745 + 12 | 0;
             $754 = HEAP32[$753 >> 2] | 0;
             $755 = ($754 | 0) == ($717 | 0);
             if ($755) {
              break;
             }
             _abort();
            }
           } while (0);
           $756 = ($747 | 0) == ($745 | 0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[44852] | 0;
            $760 = $759 & $758;
            HEAP32[44852] = $760;
            break;
           }
           $761 = ($747 | 0) == ($749 | 0);
           do {
            if ($761) {
             $$pre10$i$i = $747 + 8 | 0;
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = $747 >>> 0 < $752 >>> 0;
             if ($762) {
              _abort();
             }
             $763 = $747 + 8 | 0;
             $764 = HEAP32[$763 >> 2] | 0;
             $765 = ($764 | 0) == ($717 | 0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
            }
           } while (0);
           $766 = $745 + 12 | 0;
           HEAP32[$766 >> 2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $745;
          } else {
           $767 = $717 + 24 | 0;
           $768 = HEAP32[$767 >> 2] | 0;
           $769 = $717 + 12 | 0;
           $770 = HEAP32[$769 >> 2] | 0;
           $771 = ($770 | 0) == ($717 | 0);
           do {
            if ($771) {
             $781 = $717 + 16 | 0;
             $782 = $781 + 4 | 0;
             $783 = HEAP32[$782 >> 2] | 0;
             $784 = ($783 | 0) == (0 | 0);
             if ($784) {
              $785 = HEAP32[$781 >> 2] | 0;
              $786 = ($785 | 0) == (0 | 0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;
               $$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;
              $$1293$i$i = $782;
             }
             while (1) {
              $787 = $$1291$i$i + 20 | 0;
              $788 = HEAP32[$787 >> 2] | 0;
              $789 = ($788 | 0) == (0 | 0);
              if (!$789) {
               $$1291$i$i = $788;
               $$1293$i$i = $787;
               continue;
              }
              $790 = $$1291$i$i + 16 | 0;
              $791 = HEAP32[$790 >> 2] | 0;
              $792 = ($791 | 0) == (0 | 0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;
               $$1293$i$i = $790;
              }
             }
             $793 = $$1293$i$i >>> 0 < $752 >>> 0;
             if ($793) {
              _abort();
             } else {
              HEAP32[$$1293$i$i >> 2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = $717 + 8 | 0;
             $773 = HEAP32[$772 >> 2] | 0;
             $774 = $773 >>> 0 < $752 >>> 0;
             if ($774) {
              _abort();
             }
             $775 = $773 + 12 | 0;
             $776 = HEAP32[$775 >> 2] | 0;
             $777 = ($776 | 0) == ($717 | 0);
             if (!$777) {
              _abort();
             }
             $778 = $770 + 8 | 0;
             $779 = HEAP32[$778 >> 2] | 0;
             $780 = ($779 | 0) == ($717 | 0);
             if ($780) {
              HEAP32[$775 >> 2] = $770;
              HEAP32[$778 >> 2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
             }
            }
           } while (0);
           $794 = ($768 | 0) == (0 | 0);
           if ($794) {
            break;
           }
           $795 = $717 + 28 | 0;
           $796 = HEAP32[$795 >> 2] | 0;
           $797 = 179712 + ($796 << 2) | 0;
           $798 = HEAP32[$797 >> 2] | 0;
           $799 = ($717 | 0) == ($798 | 0);
           do {
            if ($799) {
             HEAP32[$797 >> 2] = $$3$i$i;
             $cond$i$i = ($$3$i$i | 0) == (0 | 0);
             if (!$cond$i$i) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[179412 >> 2] | 0;
             $803 = $802 & $801;
             HEAP32[179412 >> 2] = $803;
             break L314;
            } else {
             $804 = HEAP32[179424 >> 2] | 0;
             $805 = $768 >>> 0 < $804 >>> 0;
             if ($805) {
              _abort();
             } else {
              $806 = $768 + 16 | 0;
              $807 = HEAP32[$806 >> 2] | 0;
              $not$$i17$i = ($807 | 0) != ($717 | 0);
              $$sink1$i$i = $not$$i17$i & 1;
              $808 = ($768 + 16 | 0) + ($$sink1$i$i << 2) | 0;
              HEAP32[$808 >> 2] = $$3$i$i;
              $809 = ($$3$i$i | 0) == (0 | 0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while (0);
           $810 = HEAP32[179424 >> 2] | 0;
           $811 = $$3$i$i >>> 0 < $810 >>> 0;
           if ($811) {
            _abort();
           }
           $812 = $$3$i$i + 24 | 0;
           HEAP32[$812 >> 2] = $768;
           $813 = $717 + 16 | 0;
           $814 = HEAP32[$813 >> 2] | 0;
           $815 = ($814 | 0) == (0 | 0);
           do {
            if (!$815) {
             $816 = $814 >>> 0 < $810 >>> 0;
             if ($816) {
              _abort();
             } else {
              $817 = $$3$i$i + 16 | 0;
              HEAP32[$817 >> 2] = $814;
              $818 = $814 + 24 | 0;
              HEAP32[$818 >> 2] = $$3$i$i;
              break;
             }
            }
           } while (0);
           $819 = $813 + 4 | 0;
           $820 = HEAP32[$819 >> 2] | 0;
           $821 = ($820 | 0) == (0 | 0);
           if ($821) {
            break;
           }
           $822 = HEAP32[179424 >> 2] | 0;
           $823 = $820 >>> 0 < $822 >>> 0;
           if ($823) {
            _abort();
           } else {
            $824 = $$3$i$i + 20 | 0;
            HEAP32[$824 >> 2] = $820;
            $825 = $820 + 24 | 0;
            HEAP32[$825 >> 2] = $$3$i$i;
            break;
           }
          }
         } while (0);
         $826 = $717 + $741 | 0;
         $827 = $741 + $722 | 0;
         $$0$i18$i = $826;
         $$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;
         $$0287$i$i = $722;
        }
        $828 = $$0$i18$i + 4 | 0;
        $829 = HEAP32[$828 >> 2] | 0;
        $830 = $829 & -2;
        HEAP32[$828 >> 2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = $721 + 4 | 0;
        HEAP32[$832 >> 2] = $831;
        $833 = $721 + $$0287$i$i | 0;
        HEAP32[$833 >> 2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = $$0287$i$i >>> 0 < 256;
        if ($835) {
         $836 = $834 << 1;
         $837 = 179448 + ($836 << 2) | 0;
         $838 = HEAP32[44852] | 0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840 | 0) == 0;
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[44852] = $842;
           $$pre$i19$i = $837 + 8 | 0;
           $$0295$i$i = $837;
           $$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = $837 + 8 | 0;
           $844 = HEAP32[$843 >> 2] | 0;
           $845 = HEAP32[179424 >> 2] | 0;
           $846 = $844 >>> 0 < $845 >>> 0;
           if (!$846) {
            $$0295$i$i = $844;
            $$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
          }
         } while (0);
         HEAP32[$$pre$phi$i20$iZ2D >> 2] = $721;
         $847 = $$0295$i$i + 12 | 0;
         HEAP32[$847 >> 2] = $721;
         $848 = $721 + 8 | 0;
         HEAP32[$848 >> 2] = $$0295$i$i;
         $849 = $721 + 12 | 0;
         HEAP32[$849 >> 2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850 | 0) == 0;
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = $$0287$i$i >>> 0 > 16777215;
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = $850 + 1048320 | 0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = $856 + 520192 | 0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = $861 + 245760 | 0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = 14 - $865 | 0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = $866 + $868 | 0;
          $870 = $869 << 1;
          $871 = $869 + 7 | 0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while (0);
        $875 = 179712 + ($$0296$i$i << 2) | 0;
        $876 = $721 + 28 | 0;
        HEAP32[$876 >> 2] = $$0296$i$i;
        $877 = $721 + 16 | 0;
        $878 = $877 + 4 | 0;
        HEAP32[$878 >> 2] = 0;
        HEAP32[$877 >> 2] = 0;
        $879 = HEAP32[179412 >> 2] | 0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881 | 0) == 0;
        if ($882) {
         $883 = $879 | $880;
         HEAP32[179412 >> 2] = $883;
         HEAP32[$875 >> 2] = $721;
         $884 = $721 + 24 | 0;
         HEAP32[$884 >> 2] = $875;
         $885 = $721 + 12 | 0;
         HEAP32[$885 >> 2] = $721;
         $886 = $721 + 8 | 0;
         HEAP32[$886 >> 2] = $721;
         break;
        }
        $887 = HEAP32[$875 >> 2] | 0;
        $888 = ($$0296$i$i | 0) == 31;
        $889 = $$0296$i$i >>> 1;
        $890 = 25 - $889 | 0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;
        $$0289$i$i = $887;
        while (1) {
         $893 = $$0289$i$i + 4 | 0;
         $894 = HEAP32[$893 >> 2] | 0;
         $895 = $894 & -8;
         $896 = ($895 | 0) == ($$0287$i$i | 0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = ($$0289$i$i + 16 | 0) + ($897 << 2) | 0;
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898 >> 2] | 0;
         $901 = ($900 | 0) == (0 | 0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;
          $$0289$i$i = $900;
         }
        }
        if ((label | 0) == 262) {
         $902 = HEAP32[179424 >> 2] | 0;
         $903 = $898 >>> 0 < $902 >>> 0;
         if ($903) {
          _abort();
         } else {
          HEAP32[$898 >> 2] = $721;
          $904 = $721 + 24 | 0;
          HEAP32[$904 >> 2] = $$0289$i$i;
          $905 = $721 + 12 | 0;
          HEAP32[$905 >> 2] = $721;
          $906 = $721 + 8 | 0;
          HEAP32[$906 >> 2] = $721;
          break;
         }
        } else if ((label | 0) == 265) {
         $907 = $$0289$i$i + 8 | 0;
         $908 = HEAP32[$907 >> 2] | 0;
         $909 = HEAP32[179424 >> 2] | 0;
         $910 = $908 >>> 0 >= $909 >>> 0;
         $not$7$i$i = $$0289$i$i >>> 0 >= $909 >>> 0;
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = $908 + 12 | 0;
          HEAP32[$912 >> 2] = $721;
          HEAP32[$907 >> 2] = $721;
          $913 = $721 + 8 | 0;
          HEAP32[$913 >> 2] = $908;
          $914 = $721 + 12 | 0;
          HEAP32[$914 >> 2] = $$0289$i$i;
          $915 = $721 + 24 | 0;
          HEAP32[$915 >> 2] = 0;
          break;
         } else {
          _abort();
         }
        }
       }
      } while (0);
      $1047 = $709 + 8 | 0;
      $$0 = $1047;
      STACKTOP = sp;
      return $$0 | 0;
     }
    }
    $$0$i$i$i = 179856;
    while (1) {
     $916 = HEAP32[$$0$i$i$i >> 2] | 0;
     $917 = $916 >>> 0 > $630 >>> 0;
     if (!$917) {
      $918 = $$0$i$i$i + 4 | 0;
      $919 = HEAP32[$918 >> 2] | 0;
      $920 = $916 + $919 | 0;
      $921 = $920 >>> 0 > $630 >>> 0;
      if ($921) {
       break;
      }
     }
     $922 = $$0$i$i$i + 8 | 0;
     $923 = HEAP32[$922 >> 2] | 0;
     $$0$i$i$i = $923;
    }
    $924 = $920 + -47 | 0;
    $925 = $924 + 8 | 0;
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927 | 0) == 0;
    $929 = 0 - $926 | 0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = $924 + $931 | 0;
    $933 = $630 + 16 | 0;
    $934 = $932 >>> 0 < $933 >>> 0;
    $935 = $934 ? $630 : $932;
    $936 = $935 + 8 | 0;
    $937 = $935 + 24 | 0;
    $938 = $$723948$i + -40 | 0;
    $939 = $$749$i + 8 | 0;
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941 | 0) == 0;
    $943 = 0 - $940 | 0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = $$749$i + $945 | 0;
    $947 = $938 - $945 | 0;
    HEAP32[179432 >> 2] = $946;
    HEAP32[179420 >> 2] = $947;
    $948 = $947 | 1;
    $949 = $946 + 4 | 0;
    HEAP32[$949 >> 2] = $948;
    $950 = $946 + $947 | 0;
    $951 = $950 + 4 | 0;
    HEAP32[$951 >> 2] = 40;
    $952 = HEAP32[179896 >> 2] | 0;
    HEAP32[179436 >> 2] = $952;
    $953 = $935 + 4 | 0;
    HEAP32[$953 >> 2] = 27;
    HEAP32[$936 >> 2] = HEAP32[179856 >> 2] | 0;
    HEAP32[$936 + 4 >> 2] = HEAP32[179856 + 4 >> 2] | 0;
    HEAP32[$936 + 8 >> 2] = HEAP32[179856 + 8 >> 2] | 0;
    HEAP32[$936 + 12 >> 2] = HEAP32[179856 + 12 >> 2] | 0;
    HEAP32[179856 >> 2] = $$749$i;
    HEAP32[179860 >> 2] = $$723948$i;
    HEAP32[179868 >> 2] = 0;
    HEAP32[179864 >> 2] = $936;
    $955 = $937;
    while (1) {
     $954 = $955 + 4 | 0;
     HEAP32[$954 >> 2] = 7;
     $956 = $955 + 8 | 0;
     $957 = $956 >>> 0 < $920 >>> 0;
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935 | 0) == ($630 | 0);
    if (!$958) {
     $959 = $935;
     $960 = $630;
     $961 = $959 - $960 | 0;
     $962 = HEAP32[$953 >> 2] | 0;
     $963 = $962 & -2;
     HEAP32[$953 >> 2] = $963;
     $964 = $961 | 1;
     $965 = $630 + 4 | 0;
     HEAP32[$965 >> 2] = $964;
     HEAP32[$935 >> 2] = $961;
     $966 = $961 >>> 3;
     $967 = $961 >>> 0 < 256;
     if ($967) {
      $968 = $966 << 1;
      $969 = 179448 + ($968 << 2) | 0;
      $970 = HEAP32[44852] | 0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972 | 0) == 0;
      if ($973) {
       $974 = $970 | $971;
       HEAP32[44852] = $974;
       $$pre$i$i = $969 + 8 | 0;
       $$0211$i$i = $969;
       $$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = $969 + 8 | 0;
       $976 = HEAP32[$975 >> 2] | 0;
       $977 = HEAP32[179424 >> 2] | 0;
       $978 = $976 >>> 0 < $977 >>> 0;
       if ($978) {
        _abort();
       } else {
        $$0211$i$i = $976;
        $$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $630;
      $979 = $$0211$i$i + 12 | 0;
      HEAP32[$979 >> 2] = $630;
      $980 = $630 + 8 | 0;
      HEAP32[$980 >> 2] = $$0211$i$i;
      $981 = $630 + 12 | 0;
      HEAP32[$981 >> 2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982 | 0) == 0;
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = $961 >>> 0 > 16777215;
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = $982 + 1048320 | 0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = $988 + 520192 | 0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = $993 + 245760 | 0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = 14 - $997 | 0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = $998 + $1000 | 0;
       $1002 = $1001 << 1;
       $1003 = $1001 + 7 | 0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = 179712 + ($$0212$i$i << 2) | 0;
     $1008 = $630 + 28 | 0;
     HEAP32[$1008 >> 2] = $$0212$i$i;
     $1009 = $630 + 20 | 0;
     HEAP32[$1009 >> 2] = 0;
     HEAP32[$933 >> 2] = 0;
     $1010 = HEAP32[179412 >> 2] | 0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012 | 0) == 0;
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[179412 >> 2] = $1014;
      HEAP32[$1007 >> 2] = $630;
      $1015 = $630 + 24 | 0;
      HEAP32[$1015 >> 2] = $1007;
      $1016 = $630 + 12 | 0;
      HEAP32[$1016 >> 2] = $630;
      $1017 = $630 + 8 | 0;
      HEAP32[$1017 >> 2] = $630;
      break;
     }
     $1018 = HEAP32[$1007 >> 2] | 0;
     $1019 = ($$0212$i$i | 0) == 31;
     $1020 = $$0212$i$i >>> 1;
     $1021 = 25 - $1020 | 0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;
     $$0207$i$i = $1018;
     while (1) {
      $1024 = $$0207$i$i + 4 | 0;
      $1025 = HEAP32[$1024 >> 2] | 0;
      $1026 = $1025 & -8;
      $1027 = ($1026 | 0) == ($961 | 0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = ($$0207$i$i + 16 | 0) + ($1028 << 2) | 0;
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029 >> 2] | 0;
      $1032 = ($1031 | 0) == (0 | 0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;
       $$0207$i$i = $1031;
      }
     }
     if ((label | 0) == 289) {
      $1033 = HEAP32[179424 >> 2] | 0;
      $1034 = $1029 >>> 0 < $1033 >>> 0;
      if ($1034) {
       _abort();
      } else {
       HEAP32[$1029 >> 2] = $630;
       $1035 = $630 + 24 | 0;
       HEAP32[$1035 >> 2] = $$0207$i$i;
       $1036 = $630 + 12 | 0;
       HEAP32[$1036 >> 2] = $630;
       $1037 = $630 + 8 | 0;
       HEAP32[$1037 >> 2] = $630;
       break;
      }
     } else if ((label | 0) == 292) {
      $1038 = $$0207$i$i + 8 | 0;
      $1039 = HEAP32[$1038 >> 2] | 0;
      $1040 = HEAP32[179424 >> 2] | 0;
      $1041 = $1039 >>> 0 >= $1040 >>> 0;
      $not$$i$i = $$0207$i$i >>> 0 >= $1040 >>> 0;
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = $1039 + 12 | 0;
       HEAP32[$1043 >> 2] = $630;
       HEAP32[$1038 >> 2] = $630;
       $1044 = $630 + 8 | 0;
       HEAP32[$1044 >> 2] = $1039;
       $1045 = $630 + 12 | 0;
       HEAP32[$1045 >> 2] = $$0207$i$i;
       $1046 = $630 + 24 | 0;
       HEAP32[$1046 >> 2] = 0;
       break;
      } else {
       _abort();
      }
     }
    }
   }
  } while (0);
  $1048 = HEAP32[179420 >> 2] | 0;
  $1049 = $1048 >>> 0 > $$0197 >>> 0;
  if ($1049) {
   $1050 = $1048 - $$0197 | 0;
   HEAP32[179420 >> 2] = $1050;
   $1051 = HEAP32[179432 >> 2] | 0;
   $1052 = $1051 + $$0197 | 0;
   HEAP32[179432 >> 2] = $1052;
   $1053 = $1050 | 1;
   $1054 = $1052 + 4 | 0;
   HEAP32[$1054 >> 2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = $1051 + 4 | 0;
   HEAP32[$1056 >> 2] = $1055;
   $1057 = $1051 + 8 | 0;
   $$0 = $1057;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $1058 = ___errno_location() | 0;
 HEAP32[$1058 >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266417 = 0, $$0268 = 0, $$0272 = 0, $$0273429 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283428 = 0, $$0286420 = 0, $$0288$ = 0, $$0288425 = 0, $$0292 = 0, $$0293 = 0, $$0305423 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0, $$320 = 0, $$321 = 0, $$322 = 0, $$327 = 0, $$328$le439 = 0, $$328$le441 = 0, $$3281 = 0, $$3291 = 0, $$3416 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa355 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$ph353 = 0, $$pre = 0, $$pre$phi516Z2D = 0, $$pre507 = 0, $$pre509 = 0, $$pre511 = 0, $$pre512 = 0, $$pre513 = 0, $$pre514 = 0, $$pre515 = 0, $$sink443 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor331 = 0, $isdigit = 0, $isdigit316 = 0, $isdigit316415 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315414 = 0, $narrow = 0, $narrow469 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 17 | 0;
 $5 = sp;
 $6 = sp + 16 | 0;
 $7 = $0 + 76 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = ($8 | 0) > -1;
 if ($9) {
  $10 = ___lockfile($0) | 0;
  $306 = $10;
 } else {
  $306 = 0;
 }
 $11 = HEAP8[$1 >> 0] | 0;
 $12 = $11 << 24 >> 24 == 0;
 L4 : do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = $0 + 4 | 0;
   $14 = $0 + 100 | 0;
   $15 = $0 + 108 | 0;
   $16 = $0 + 8 | 0;
   $17 = $4 + 10 | 0;
   $18 = $4 + 33 | 0;
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0;
   $19 = $4 + 46 | 0;
   $20 = $4 + 94 | 0;
   $21 = $4 + 1 | 0;
   $22 = $4 + 1 | 0;
   $$0273429 = $1;
   $$0283428 = 0;
   $$0288425 = 0;
   $$0305423 = 0;
   $102 = 0;
   $24 = $11;
   L6 : while (1) {
    $23 = $24 & 255;
    $25 = _isspace($23) | 0;
    $26 = ($25 | 0) == 0;
    L8 : do {
     if ($26) {
      $53 = $24 << 24 >> 24 == 37;
      L10 : do {
       if ($53) {
        $54 = $$0273429 + 1 | 0;
        $55 = HEAP8[$54 >> 0] | 0;
        L12 : do {
         switch ($55 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $76 = $$0273429 + 2 | 0;
           $$0293 = 0;
           $$2275 = $76;
           break;
          }
         default:
          {
           $77 = $55 & 255;
           $isdigittmp = $77 + -48 | 0;
           $isdigit = $isdigittmp >>> 0 < 10;
           if ($isdigit) {
            $78 = $$0273429 + 2 | 0;
            $79 = HEAP8[$78 >> 0] | 0;
            $80 = $79 << 24 >> 24 == 36;
            if ($80) {
             $81 = _arg_n_728($2, $isdigittmp) | 0;
             $82 = $$0273429 + 3 | 0;
             $$0293 = $81;
             $$2275 = $82;
             break L12;
            }
           }
           $arglist_current = HEAP32[$2 >> 2] | 0;
           $83 = $arglist_current;
           $84 = 0 + 4 | 0;
           $expanded1 = $84;
           $expanded = $expanded1 - 1 | 0;
           $85 = $83 + $expanded | 0;
           $86 = 0 + 4 | 0;
           $expanded5 = $86;
           $expanded4 = $expanded5 - 1 | 0;
           $expanded3 = $expanded4 ^ -1;
           $87 = $85 & $expanded3;
           $88 = $87;
           $89 = HEAP32[$88 >> 2] | 0;
           $arglist_next = $88 + 4 | 0;
           HEAP32[$2 >> 2] = $arglist_next;
           $$0293 = $89;
           $$2275 = $54;
          }
         }
        } while (0);
        $90 = HEAP8[$$2275 >> 0] | 0;
        $91 = $90 & 255;
        $isdigittmp315414 = $91 + -48 | 0;
        $isdigit316415 = $isdigittmp315414 >>> 0 < 10;
        if ($isdigit316415) {
         $$0266417 = 0;
         $$3416 = $$2275;
         $95 = $91;
         while (1) {
          $92 = $$0266417 * 10 | 0;
          $93 = $92 + -48 | 0;
          $94 = $93 + $95 | 0;
          $96 = $$3416 + 1 | 0;
          $97 = HEAP8[$96 >> 0] | 0;
          $98 = $97 & 255;
          $isdigittmp315 = $98 + -48 | 0;
          $isdigit316 = $isdigittmp315 >>> 0 < 10;
          if ($isdigit316) {
           $$0266417 = $94;
           $$3416 = $96;
           $95 = $98;
          } else {
           $$0266$lcssa = $94;
           $$3$lcssa = $96;
           $$lcssa355 = $97;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;
         $$3$lcssa = $$2275;
         $$lcssa355 = $90;
        }
        $99 = $$lcssa355 << 24 >> 24 == 109;
        $100 = ($$0293 | 0) != (0 | 0);
        $101 = $$3$lcssa + 1 | 0;
        $$$0305 = $99 ? 0 : $$0305423;
        $$327 = $99 ? 0 : $102;
        $$$3 = $99 ? $101 : $$3$lcssa;
        $narrow = $100 & $99;
        $103 = $$$3 + 1 | 0;
        $104 = HEAP8[$$$3 >> 0] | 0;
        switch ($104 << 24 >> 24) {
        case 104:
         {
          $105 = HEAP8[$103 >> 0] | 0;
          $106 = $105 << 24 >> 24 == 104;
          $107 = $$$3 + 2 | 0;
          $$319 = $106 ? $107 : $103;
          $$320 = $106 ? -2 : -1;
          $$0268 = $$320;
          $$5 = $$319;
          break;
         }
        case 108:
         {
          $108 = HEAP8[$103 >> 0] | 0;
          $109 = $108 << 24 >> 24 == 108;
          $110 = $$$3 + 2 | 0;
          $$321 = $109 ? $110 : $103;
          $$322 = $109 ? 3 : 1;
          $$0268 = $$322;
          $$5 = $$321;
          break;
         }
        case 106:
         {
          $$0268 = 3;
          $$5 = $103;
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1;
          $$5 = $103;
          break;
         }
        case 76:
         {
          $$0268 = 2;
          $$5 = $103;
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0;
          $$5 = $$$3;
          break;
         }
        default:
         {
          $$7312 = $$$0305;
          $309 = $$327;
          $narrow469 = $narrow;
          label = 137;
          break L6;
         }
        }
        $111 = HEAP8[$$5 >> 0] | 0;
        $112 = $111 & 255;
        $113 = $112 & 47;
        $114 = ($113 | 0) == 3;
        $115 = $112 | 32;
        $$ = $114 ? $115 : $112;
        $$$0268 = $114 ? 1 : $$0268;
        $trunc = $$ & 255;
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $116 = ($$0266$lcssa | 0) > 1;
          $$$0266 = $116 ? $$0266$lcssa : 1;
          $$1267 = $$$0266;
          $$1284 = $$0283428;
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa;
          $$1284 = $$0283428;
          break;
         }
        case 110:
         {
          $117 = ($$0283428 | 0) < 0;
          $118 = $117 << 31 >> 31;
          _store_int_729($$0293, $$$0268, $$0283428, $118);
          $$11 = $$5;
          $$1289 = $$0288425;
          $$2285 = $$0283428;
          $$6311 = $$$0305;
          $307 = $$327;
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0);
          while (1) {
           $119 = HEAP32[$13 >> 2] | 0;
           $120 = HEAP32[$14 >> 2] | 0;
           $121 = $119 >>> 0 < $120 >>> 0;
           if ($121) {
            $122 = $119 + 1 | 0;
            HEAP32[$13 >> 2] = $122;
            $123 = HEAP8[$119 >> 0] | 0;
            $124 = $123 & 255;
            $126 = $124;
           } else {
            $125 = ___shgetc($0) | 0;
            $126 = $125;
           }
           $127 = _isspace($126) | 0;
           $128 = ($127 | 0) == 0;
           if ($128) {
            break;
           }
          }
          $129 = HEAP32[$14 >> 2] | 0;
          $130 = ($129 | 0) == (0 | 0);
          if ($130) {
           $$pre507 = HEAP32[$13 >> 2] | 0;
           $138 = $$pre507;
          } else {
           $131 = HEAP32[$13 >> 2] | 0;
           $132 = $131 + -1 | 0;
           HEAP32[$13 >> 2] = $132;
           $133 = $132;
           $138 = $133;
          }
          $134 = HEAP32[$15 >> 2] | 0;
          $135 = HEAP32[$16 >> 2] | 0;
          $136 = $134 + $$0283428 | 0;
          $137 = $136 + $138 | 0;
          $139 = $137 - $135 | 0;
          $$1267 = $$0266$lcssa;
          $$1284 = $139;
         }
        }
        ___shlim($0, $$1267);
        $140 = HEAP32[$13 >> 2] | 0;
        $141 = HEAP32[$14 >> 2] | 0;
        $142 = $140 >>> 0 < $141 >>> 0;
        if ($142) {
         $143 = $140 + 1 | 0;
         HEAP32[$13 >> 2] = $143;
         $147 = $141;
        } else {
         $144 = ___shgetc($0) | 0;
         $145 = ($144 | 0) < 0;
         if ($145) {
          $$7312 = $$$0305;
          $309 = $$327;
          $narrow469 = $narrow;
          label = 137;
          break L6;
         }
         $$pre509 = HEAP32[$14 >> 2] | 0;
         $147 = $$pre509;
        }
        $146 = ($147 | 0) == (0 | 0);
        if (!$146) {
         $148 = HEAP32[$13 >> 2] | 0;
         $149 = $148 + -1 | 0;
         HEAP32[$13 >> 2] = $149;
        }
        L55 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $150 = ($$ | 0) == 99;
           $151 = $$ | 16;
           $152 = ($151 | 0) == 115;
           L57 : do {
            if ($152) {
             $153 = ($$ | 0) == 115;
             _memset($21 | 0, -1, 256) | 0;
             HEAP8[$4 >> 0] = 0;
             if ($153) {
              HEAP8[$18 >> 0] = 0;
              HEAP8[$17 >> 0] = 0 | 0;
              HEAP8[$17 + 1 >> 0] = 0 | 0;
              HEAP8[$17 + 2 >> 0] = 0 | 0;
              HEAP8[$17 + 3 >> 0] = 0 | 0;
              HEAP8[$17 + 4 >> 0] = 0 | 0;
              $$9 = $$5;
             } else {
              $$9 = $$5;
             }
            } else {
             $154 = $$5 + 1 | 0;
             $155 = HEAP8[$154 >> 0] | 0;
             $156 = $155 << 24 >> 24 == 94;
             $157 = $$5 + 2 | 0;
             $$0292 = $156 & 1;
             $$6 = $156 ? $157 : $154;
             $158 = $156 & 1;
             _memset($22 | 0, $158 | 0, 256) | 0;
             HEAP8[$4 >> 0] = 0;
             $159 = HEAP8[$$6 >> 0] | 0;
             switch ($159 << 24 >> 24) {
             case 45:
              {
               $$sink443 = $19;
               label = 64;
               break;
              }
             case 93:
              {
               $$sink443 = $20;
               label = 64;
               break;
              }
             default:
              {
               $$pre514 = $$0292 ^ 1;
               $$pre515 = $$pre514 & 255;
               $$7$ph = $$6;
               $$pre$phi516Z2D = $$pre515;
              }
             }
             if ((label | 0) == 64) {
              label = 0;
              $160 = $$6 + 1 | 0;
              $161 = $$0292 ^ 1;
              $162 = $161 & 255;
              HEAP8[$$sink443 >> 0] = $162;
              $$7$ph = $160;
              $$pre$phi516Z2D = $162;
             }
             $$7 = $$7$ph;
             while (1) {
              $163 = HEAP8[$$7 >> 0] | 0;
              L69 : do {
               switch ($163 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$$0305;
                 $309 = $$327;
                 $narrow469 = $narrow;
                 label = 137;
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7;
                 break L57;
                 break;
                }
               case 45:
                {
                 $164 = $$7 + 1 | 0;
                 $165 = HEAP8[$164 >> 0] | 0;
                 switch ($165 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7;
                   $176 = 45;
                   break L69;
                   break;
                  }
                 default:
                  {}
                 }
                 $166 = $$7 + -1 | 0;
                 $167 = HEAP8[$166 >> 0] | 0;
                 $168 = ($167 & 255) < ($165 & 255);
                 if ($168) {
                  $169 = $167 & 255;
                  $$0286420 = $169;
                  while (1) {
                   $170 = $$0286420 + 1 | 0;
                   $171 = $4 + $170 | 0;
                   HEAP8[$171 >> 0] = $$pre$phi516Z2D;
                   $172 = HEAP8[$164 >> 0] | 0;
                   $173 = $172 & 255;
                   $174 = ($170 | 0) < ($173 | 0);
                   if ($174) {
                    $$0286420 = $170;
                   } else {
                    $$8 = $164;
                    $176 = $172;
                    break;
                   }
                  }
                 } else {
                  $$8 = $164;
                  $176 = $165;
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7;
                 $176 = $163;
                }
               }
              } while (0);
              $175 = $176 & 255;
              $177 = $175 + 1 | 0;
              $178 = $4 + $177 | 0;
              HEAP8[$178 >> 0] = $$pre$phi516Z2D;
              $179 = $$8 + 1 | 0;
              $$7 = $179;
             }
            }
           } while (0);
           $180 = $$1267 + 1 | 0;
           $181 = $150 ? $180 : 31;
           $182 = ($$$0268 | 0) == 1;
           L77 : do {
            if ($182) {
             if ($narrow) {
              $183 = $181 << 2;
              $184 = _malloc($183) | 0;
              $185 = ($184 | 0) == (0 | 0);
              if ($185) {
               $$7312 = 0;
               $309 = 0;
               $narrow469 = 1;
               label = 137;
               break L6;
              } else {
               $311 = $184;
              }
             } else {
              $311 = $$0293;
             }
             HEAP32[$3 >> 2] = 0;
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0;
             $$0276$ph = $181;
             $$0278$ph = 0;
             $$ph = $311;
             L82 : while (1) {
              $186 = ($$ph | 0) == (0 | 0);
              $$0278$ph336 = $$0278$ph;
              while (1) {
               L86 : while (1) {
                $187 = HEAP32[$13 >> 2] | 0;
                $188 = HEAP32[$14 >> 2] | 0;
                $189 = $187 >>> 0 < $188 >>> 0;
                if ($189) {
                 $190 = $187 + 1 | 0;
                 HEAP32[$13 >> 2] = $190;
                 $191 = HEAP8[$187 >> 0] | 0;
                 $192 = $191 & 255;
                 $195 = $192;
                } else {
                 $193 = ___shgetc($0) | 0;
                 $195 = $193;
                }
                $194 = $195 + 1 | 0;
                $196 = $4 + $194 | 0;
                $197 = HEAP8[$196 >> 0] | 0;
                $198 = $197 << 24 >> 24 == 0;
                if ($198) {
                 break L82;
                }
                $199 = $195 & 255;
                HEAP8[$6 >> 0] = $199;
                $200 = _mbrtowc($5, $6, 1, $3) | 0;
                switch ($200 | 0) {
                case -1:
                 {
                  $$7312 = 0;
                  $309 = $$ph;
                  $narrow469 = $narrow;
                  label = 137;
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L86;
                 }
                }
               }
               if ($186) {
                $$1279 = $$0278$ph336;
               } else {
                $201 = $$ph + ($$0278$ph336 << 2) | 0;
                $202 = $$0278$ph336 + 1 | 0;
                $203 = HEAP32[$5 >> 2] | 0;
                HEAP32[$201 >> 2] = $203;
                $$1279 = $202;
               }
               $204 = ($$1279 | 0) == ($$0276$ph | 0);
               $or$cond = $narrow & $204;
               if ($or$cond) {
                break;
               } else {
                $$0278$ph336 = $$1279;
               }
              }
              $factor331 = $$0276$ph << 1;
              $205 = $factor331 | 1;
              $206 = $205 << 2;
              $207 = _realloc($$ph, $206) | 0;
              $208 = ($207 | 0) == (0 | 0);
              if ($208) {
               $$7312 = 0;
               $309 = $$ph;
               $narrow469 = 1;
               label = 137;
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph;
               $$0276$ph = $205;
               $$ph = $207;
               $$0278$ph = $$0278$ph$phi;
              }
             }
             $209 = _mbsinit($3) | 0;
             $210 = ($209 | 0) == 0;
             if ($210) {
              $$7312 = 0;
              $309 = $$ph;
              $narrow469 = $narrow;
              label = 137;
              break L6;
             } else {
              $$4282 = $$0278$ph336;
              $$4309 = 0;
              $$5299 = $$ph;
              $312 = $$ph;
             }
            } else {
             if ($narrow) {
              $211 = _malloc($181) | 0;
              $212 = ($211 | 0) == (0 | 0);
              if ($212) {
               $$7312 = 0;
               $309 = 0;
               $narrow469 = 1;
               label = 137;
               break L6;
              } else {
               $$1277$ph = $181;
               $$2280$ph = 0;
               $$2307$ph = $211;
              }
              while (1) {
               $$2280 = $$2280$ph;
               while (1) {
                $213 = HEAP32[$13 >> 2] | 0;
                $214 = HEAP32[$14 >> 2] | 0;
                $215 = $213 >>> 0 < $214 >>> 0;
                if ($215) {
                 $216 = $213 + 1 | 0;
                 HEAP32[$13 >> 2] = $216;
                 $217 = HEAP8[$213 >> 0] | 0;
                 $218 = $217 & 255;
                 $221 = $218;
                } else {
                 $219 = ___shgetc($0) | 0;
                 $221 = $219;
                }
                $220 = $221 + 1 | 0;
                $222 = $4 + $220 | 0;
                $223 = HEAP8[$222 >> 0] | 0;
                $224 = $223 << 24 >> 24 == 0;
                if ($224) {
                 $$4282 = $$2280;
                 $$4309 = $$2307$ph;
                 $$5299 = 0;
                 $312 = 0;
                 break L77;
                }
                $225 = $221 & 255;
                $226 = $$2280 + 1 | 0;
                $227 = $$2307$ph + $$2280 | 0;
                HEAP8[$227 >> 0] = $225;
                $228 = ($226 | 0) == ($$1277$ph | 0);
                if ($228) {
                 break;
                } else {
                 $$2280 = $226;
                }
               }
               $factor = $$1277$ph << 1;
               $229 = $factor | 1;
               $230 = _realloc($$2307$ph, $229) | 0;
               $231 = ($230 | 0) == (0 | 0);
               if ($231) {
                $$7312 = $$2307$ph;
                $309 = 0;
                $narrow469 = 1;
                label = 137;
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph;
                $$1277$ph = $229;
                $$2307$ph = $230;
                $$2280$ph = $$2280$ph$phi;
               }
              }
             }
             $232 = ($$0293 | 0) == (0 | 0);
             if ($232) {
              $250 = $147;
              while (1) {
               $248 = HEAP32[$13 >> 2] | 0;
               $249 = $248 >>> 0 < $250 >>> 0;
               if ($249) {
                $251 = $248 + 1 | 0;
                HEAP32[$13 >> 2] = $251;
                $252 = HEAP8[$248 >> 0] | 0;
                $253 = $252 & 255;
                $256 = $253;
               } else {
                $254 = ___shgetc($0) | 0;
                $256 = $254;
               }
               $255 = $256 + 1 | 0;
               $257 = $4 + $255 | 0;
               $258 = HEAP8[$257 >> 0] | 0;
               $259 = $258 << 24 >> 24 == 0;
               if ($259) {
                $$4282 = 0;
                $$4309 = 0;
                $$5299 = 0;
                $312 = 0;
                break L77;
               }
               $$pre512 = HEAP32[$14 >> 2] | 0;
               $250 = $$pre512;
              }
             } else {
              $$3281 = 0;
              $235 = $147;
              while (1) {
               $233 = HEAP32[$13 >> 2] | 0;
               $234 = $233 >>> 0 < $235 >>> 0;
               if ($234) {
                $236 = $233 + 1 | 0;
                HEAP32[$13 >> 2] = $236;
                $237 = HEAP8[$233 >> 0] | 0;
                $238 = $237 & 255;
                $241 = $238;
               } else {
                $239 = ___shgetc($0) | 0;
                $241 = $239;
               }
               $240 = $241 + 1 | 0;
               $242 = $4 + $240 | 0;
               $243 = HEAP8[$242 >> 0] | 0;
               $244 = $243 << 24 >> 24 == 0;
               if ($244) {
                $$4282 = $$3281;
                $$4309 = $$0293;
                $$5299 = 0;
                $312 = 0;
                break L77;
               }
               $245 = $241 & 255;
               $246 = $$3281 + 1 | 0;
               $247 = $$0293 + $$3281 | 0;
               HEAP8[$247 >> 0] = $245;
               $$pre511 = HEAP32[$14 >> 2] | 0;
               $$3281 = $246;
               $235 = $$pre511;
              }
             }
            }
           } while (0);
           $260 = HEAP32[$14 >> 2] | 0;
           $261 = ($260 | 0) == (0 | 0);
           if ($261) {
            $$pre513 = HEAP32[$13 >> 2] | 0;
            $268 = $$pre513;
           } else {
            $262 = HEAP32[$13 >> 2] | 0;
            $263 = $262 + -1 | 0;
            HEAP32[$13 >> 2] = $263;
            $264 = $263;
            $268 = $264;
           }
           $265 = HEAP32[$15 >> 2] | 0;
           $266 = HEAP32[$16 >> 2] | 0;
           $267 = $268 - $266 | 0;
           $269 = $267 + $265 | 0;
           $270 = ($269 | 0) == 0;
           if ($270) {
            $$9314$ph = $$4309;
            $$ph353 = $312;
            label = 139;
            break L6;
           }
           $$not = $150 ^ 1;
           $271 = ($269 | 0) == ($$1267 | 0);
           $or$cond318 = $271 | $$not;
           if (!$or$cond318) {
            $$9314$ph = $$4309;
            $$ph353 = $312;
            label = 139;
            break L6;
           }
           do {
            if ($narrow) {
             if ($182) {
              HEAP32[$$0293 >> 2] = $$5299;
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309;
              break;
             }
            }
           } while (0);
           if ($150) {
            $$10 = $$9;
            $$5310 = $$4309;
            $310 = $312;
           } else {
            $272 = ($$5299 | 0) == (0 | 0);
            if (!$272) {
             $273 = $$5299 + ($$4282 << 2) | 0;
             HEAP32[$273 >> 2] = 0;
            }
            $274 = ($$4309 | 0) == (0 | 0);
            if ($274) {
             $$10 = $$9;
             $$5310 = 0;
             $310 = $312;
             break L55;
            }
            $275 = $$4309 + $$4282 | 0;
            HEAP8[$275 >> 0] = 0;
            $$10 = $$9;
            $$5310 = $$4309;
            $310 = $312;
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16;
           label = 125;
           break;
          }
         case 111:
          {
           $$0272 = 8;
           label = 125;
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10;
           label = 125;
           break;
          }
         case 105:
          {
           $$0272 = 0;
           label = 125;
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $285 = +___floatscan($0, $$$0268, 0);
           $286 = HEAP32[$15 >> 2] | 0;
           $287 = HEAP32[$13 >> 2] | 0;
           $288 = HEAP32[$16 >> 2] | 0;
           $289 = $288 - $287 | 0;
           $290 = ($286 | 0) == ($289 | 0);
           if ($290) {
            $$9314$ph = $$$0305;
            $$ph353 = $$327;
            label = 139;
            break L6;
           }
           $291 = ($$0293 | 0) == (0 | 0);
           if ($291) {
            $$10 = $$5;
            $$5310 = $$$0305;
            $310 = $$327;
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              $292 = $285;
              HEAPF32[$$0293 >> 2] = $292;
              $$10 = $$5;
              $$5310 = $$$0305;
              $310 = $$327;
              break L55;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $285;
              $$10 = $$5;
              $$5310 = $$$0305;
              $310 = $$327;
              break L55;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $285;
              $$10 = $$5;
              $$5310 = $$$0305;
              $310 = $$327;
              break L55;
              break;
             }
            default:
             {
              $$10 = $$5;
              $$5310 = $$$0305;
              $310 = $$327;
              break L55;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5;
           $$5310 = $$$0305;
           $310 = $$327;
          }
         }
        } while (0);
        do {
         if ((label | 0) == 125) {
          label = 0;
          $276 = ___intscan($0, $$0272, 0, -1, -1) | 0;
          $277 = tempRet0;
          $278 = HEAP32[$15 >> 2] | 0;
          $279 = HEAP32[$13 >> 2] | 0;
          $280 = HEAP32[$16 >> 2] | 0;
          $281 = $280 - $279 | 0;
          $282 = ($278 | 0) == ($281 | 0);
          if ($282) {
           $$9314$ph = $$$0305;
           $$ph353 = $$327;
           label = 139;
           break L6;
          }
          $283 = ($$ | 0) == 112;
          $or$cond3 = $100 & $283;
          if ($or$cond3) {
           $284 = $276;
           HEAP32[$$0293 >> 2] = $284;
           $$10 = $$5;
           $$5310 = $$$0305;
           $310 = $$327;
           break;
          } else {
           _store_int_729($$0293, $$$0268, $276, $277);
           $$10 = $$5;
           $$5310 = $$$0305;
           $310 = $$327;
           break;
          }
         }
        } while (0);
        $293 = HEAP32[$15 >> 2] | 0;
        $294 = HEAP32[$13 >> 2] | 0;
        $295 = HEAP32[$16 >> 2] | 0;
        $296 = $293 + $$1284 | 0;
        $297 = $296 + $294 | 0;
        $298 = $297 - $295 | 0;
        $299 = $100 & 1;
        $$0288$ = $299 + $$0288425 | 0;
        $$11 = $$10;
        $$1289 = $$0288$;
        $$2285 = $298;
        $$6311 = $$5310;
        $307 = $310;
        break L8;
       }
      } while (0);
      $56 = $53 & 1;
      $57 = $$0273429 + $56 | 0;
      ___shlim($0, 0);
      $58 = HEAP32[$13 >> 2] | 0;
      $59 = HEAP32[$14 >> 2] | 0;
      $60 = $58 >>> 0 < $59 >>> 0;
      if ($60) {
       $61 = $58 + 1 | 0;
       HEAP32[$13 >> 2] = $61;
       $62 = HEAP8[$58 >> 0] | 0;
       $63 = $62 & 255;
       $68 = $63;
      } else {
       $64 = ___shgetc($0) | 0;
       $68 = $64;
      }
      $65 = HEAP8[$57 >> 0] | 0;
      $66 = $65 & 255;
      $67 = ($68 | 0) == ($66 | 0);
      if (!$67) {
       label = 22;
       break L6;
      }
      $75 = $$0283428 + 1 | 0;
      $$11 = $57;
      $$1289 = $$0288425;
      $$2285 = $75;
      $$6311 = $$0305423;
      $307 = $102;
     } else {
      $$1274 = $$0273429;
      while (1) {
       $27 = $$1274 + 1 | 0;
       $28 = HEAP8[$27 >> 0] | 0;
       $29 = $28 & 255;
       $30 = _isspace($29) | 0;
       $31 = ($30 | 0) == 0;
       if ($31) {
        break;
       } else {
        $$1274 = $27;
       }
      }
      ___shlim($0, 0);
      while (1) {
       $32 = HEAP32[$13 >> 2] | 0;
       $33 = HEAP32[$14 >> 2] | 0;
       $34 = $32 >>> 0 < $33 >>> 0;
       if ($34) {
        $35 = $32 + 1 | 0;
        HEAP32[$13 >> 2] = $35;
        $36 = HEAP8[$32 >> 0] | 0;
        $37 = $36 & 255;
        $39 = $37;
       } else {
        $38 = ___shgetc($0) | 0;
        $39 = $38;
       }
       $40 = _isspace($39) | 0;
       $41 = ($40 | 0) == 0;
       if ($41) {
        break;
       }
      }
      $42 = HEAP32[$14 >> 2] | 0;
      $43 = ($42 | 0) == (0 | 0);
      if ($43) {
       $$pre = HEAP32[$13 >> 2] | 0;
       $51 = $$pre;
      } else {
       $44 = HEAP32[$13 >> 2] | 0;
       $45 = $44 + -1 | 0;
       HEAP32[$13 >> 2] = $45;
       $46 = $45;
       $51 = $46;
      }
      $47 = HEAP32[$15 >> 2] | 0;
      $48 = HEAP32[$16 >> 2] | 0;
      $49 = $47 + $$0283428 | 0;
      $50 = $49 + $51 | 0;
      $52 = $50 - $48 | 0;
      $$11 = $$1274;
      $$1289 = $$0288425;
      $$2285 = $52;
      $$6311 = $$0305423;
      $307 = $102;
     }
    } while (0);
    $300 = $$11 + 1 | 0;
    $301 = HEAP8[$300 >> 0] | 0;
    $302 = $301 << 24 >> 24 == 0;
    if ($302) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273429 = $300;
     $$0283428 = $$2285;
     $$0288425 = $$1289;
     $$0305423 = $$6311;
     $102 = $307;
     $24 = $301;
    }
   }
   if ((label | 0) == 22) {
    $69 = HEAP32[$14 >> 2] | 0;
    $70 = ($69 | 0) == (0 | 0);
    if (!$70) {
     $71 = HEAP32[$13 >> 2] | 0;
     $72 = $71 + -1 | 0;
     HEAP32[$13 >> 2] = $72;
    }
    $73 = ($68 | 0) > -1;
    $74 = ($$0288425 | 0) != 0;
    $or$cond5 = $74 | $73;
    if ($or$cond5) {
     $$3291 = $$0288425;
     break;
    } else {
     $$1271 = 0;
     $$8313 = $$0305423;
     $308 = $102;
     label = 138;
    }
   } else if ((label | 0) == 137) {
    $$328$le441 = $narrow469 & 1;
    $$old4 = ($$0288425 | 0) == 0;
    if ($$old4) {
     $$1271 = $$328$le441;
     $$8313 = $$7312;
     $308 = $309;
     label = 138;
    } else {
     $$2 = $$328$le441;
     $$2290 = $$0288425;
     $$9314 = $$7312;
     $304 = $309;
    }
   } else if ((label | 0) == 139) {
    $$328$le439 = $narrow & 1;
    $$2 = $$328$le439;
    $$2290 = $$0288425;
    $$9314 = $$9314$ph;
    $304 = $$ph353;
   }
   if ((label | 0) == 138) {
    $$2 = $$1271;
    $$2290 = -1;
    $$9314 = $$8313;
    $304 = $308;
   }
   $303 = ($$2 | 0) == 0;
   if ($303) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($304);
    $$3291 = $$2290;
   }
  }
 } while (0);
 $305 = ($306 | 0) == 0;
 if (!$305) {
  ___unlockfile($0);
 }
 STACKTOP = sp;
 return $$3291 | 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0, $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0, $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $8 = sp + 524 | 0;
 $9 = $8;
 $10 = sp + 512 | 0;
 HEAP32[$7 >> 2] = 0;
 $11 = $10 + 12 | 0;
 ___DOUBLE_BITS_678($1) | 0;
 $12 = tempRet0;
 $13 = ($12 | 0) < 0;
 if ($13) {
  $14 = -$1;
  $$0471 = $14;
  $$0520 = 1;
  $$0521 = 175213;
 } else {
  $15 = $4 & 2048;
  $16 = ($15 | 0) == 0;
  $17 = $4 & 1;
  $18 = ($17 | 0) == 0;
  $$ = $18 ? 175214 : 175219;
  $$$ = $16 ? $$ : 175216;
  $19 = $4 & 2049;
  $narrow = ($19 | 0) != 0;
  $$534$ = $narrow & 1;
  $$0471 = $1;
  $$0520 = $$534$;
  $$0521 = $$$;
 }
 ___DOUBLE_BITS_678($$0471) | 0;
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = $21 >>> 0 < 2146435072;
 $23 = 0 < 0;
 $24 = ($21 | 0) == 2146435072;
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = +_frexpl($$0471, $7);
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7 >> 2] | 0;
    $39 = $38 + -1 | 0;
    HEAP32[$7 >> 2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40 | 0) == 97;
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42 | 0) == 0;
    $44 = $$0521 + 9 | 0;
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = $3 >>> 0 > 11;
    $47 = 12 - $3 | 0;
    $48 = ($47 | 0) == 0;
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;
      $$1508583 = $47;
      while (1) {
       $50 = $$1508583 + -1 | 0;
       $51 = $$0509582 * 16.0;
       $52 = ($50 | 0) == 0;
       if ($52) {
        break;
       } else {
        $$0509582 = $51;
        $$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$ >> 0] | 0;
      $54 = $53 << 24 >> 24 == 45;
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while (0);
    $61 = HEAP32[$7 >> 2] | 0;
    $62 = ($61 | 0) < 0;
    $63 = 0 - $61 | 0;
    $64 = $62 ? $63 : $61;
    $65 = ($64 | 0) < 0;
    $66 = $65 << 31 >> 31;
    $67 = _fmt_u($64, $66, $11) | 0;
    $68 = ($67 | 0) == ($11 | 0);
    if ($68) {
     $69 = $10 + 11 | 0;
     HEAP8[$69 >> 0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = $71 + 43 | 0;
    $73 = $72 & 255;
    $74 = $$0511 + -1 | 0;
    HEAP8[$74 >> 0] = $73;
    $75 = $5 + 15 | 0;
    $76 = $75 & 255;
    $77 = $$0511 + -2 | 0;
    HEAP8[$77 >> 0] = $76;
    $notrhs = ($3 | 0) < 1;
    $78 = $4 & 8;
    $79 = ($78 | 0) == 0;
    $$0523 = $8;
    $$2473 = $$1472;
    while (1) {
     $80 = ~~$$2473;
     $81 = 175248 + $80 | 0;
     $82 = HEAP8[$81 >> 0] | 0;
     $83 = $82 & 255;
     $84 = $83 | $42;
     $85 = $84 & 255;
     $86 = $$0523 + 1 | 0;
     HEAP8[$$0523 >> 0] = $85;
     $87 = +($80 | 0);
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = $90 - $9 | 0;
     $92 = ($91 | 0) == 1;
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = $$0523 + 2 | 0;
       HEAP8[$86 >> 0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;
      $$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3 | 0) != 0;
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = $98 - $9 | 0;
    $100 = $97 - $96 | 0;
    $101 = $99 + -2 | 0;
    $102 = ($101 | 0) < ($3 | 0);
    $or$cond537 = $95 & $102;
    $103 = $3 + 2 | 0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = $100 + $45 | 0;
    $104 = $$0525 + $$pn | 0;
    _pad_677($0, 32, $2, $104, $4);
    _out_671($0, $$0521$, $45);
    $105 = $4 ^ 65536;
    _pad_677($0, 48, $2, $104, $105);
    _out_671($0, $8, $99);
    $106 = $$pn - $99 | 0;
    _pad_677($0, 48, $106, 0, 0);
    _out_671($0, $77, $100);
    $107 = $4 ^ 8192;
    _pad_677($0, 32, $2, $104, $107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3 | 0) < 0;
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7 >> 2] | 0;
    $111 = $110 + -28 | 0;
    HEAP32[$7 >> 2] = $111;
    $$3 = $109;
    $$pr = $111;
   } else {
    $$pre = HEAP32[$7 >> 2] | 0;
    $$3 = $36;
    $$pr = $$pre;
   }
   $112 = ($$pr | 0) < 0;
   $113 = $6 + 288 | 0;
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;
   $$4 = $$3;
   while (1) {
    $114 = ~~$$4 >>> 0;
    HEAP32[$$0498 >> 2] = $114;
    $115 = $$0498 + 4 | 0;
    $116 = +($114 >>> 0);
    $117 = $$4 - $116;
    $118 = $117 * 1.0e9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;
     $$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr | 0) > 0;
   if ($120) {
    $$1482661 = $$556;
    $$1499660 = $115;
    $122 = $$pr;
    while (1) {
     $121 = ($122 | 0) < 29;
     $123 = $121 ? $122 : 29;
     $$0488653 = $$1499660 + -4 | 0;
     $124 = $$0488653 >>> 0 < $$1482661 >>> 0;
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;
      $$0497654 = 0;
      while (1) {
       $125 = HEAP32[$$0488655 >> 2] | 0;
       $126 = _bitshift64Shl($125 | 0, 0, $123 | 0) | 0;
       $127 = tempRet0;
       $128 = _i64Add($126 | 0, $127 | 0, $$0497654 | 0, 0) | 0;
       $129 = tempRet0;
       $130 = ___uremdi3($128 | 0, $129 | 0, 1e9, 0) | 0;
       $131 = tempRet0;
       HEAP32[$$0488655 >> 2] = $130;
       $132 = ___udivdi3($128 | 0, $129 | 0, 1e9, 0) | 0;
       $133 = tempRet0;
       $$0488 = $$0488655 + -4 | 0;
       $134 = $$0488 >>> 0 < $$1482661 >>> 0;
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;
        $$0497654 = $132;
       }
      }
      $135 = ($132 | 0) == 0;
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = $$1482661 + -4 | 0;
       HEAP32[$136 >> 2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while (1) {
      $137 = $$2500 >>> 0 > $$2483$ph >>> 0;
      if (!$137) {
       break;
      }
      $138 = $$2500 + -4 | 0;
      $139 = HEAP32[$138 >> 2] | 0;
      $140 = ($139 | 0) == 0;
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7 >> 2] | 0;
     $142 = $141 - $123 | 0;
     HEAP32[$7 >> 2] = $142;
     $143 = ($142 | 0) > 0;
     if ($143) {
      $$1482661 = $$2483$ph;
      $$1499660 = $$2500;
      $122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;
      $$1499$lcssa = $$2500;
      $$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;
    $$1499$lcssa = $115;
    $$pr564 = $$pr;
   }
   $144 = ($$pr564 | 0) < 0;
   if ($144) {
    $145 = $$539 + 25 | 0;
    $146 = ($145 | 0) / 9 & -1;
    $147 = $146 + 1 | 0;
    $148 = ($40 | 0) == 102;
    $$3484648 = $$1482$lcssa;
    $$3501647 = $$1499$lcssa;
    $150 = $$pr564;
    while (1) {
     $149 = 0 - $150 | 0;
     $151 = ($149 | 0) < 9;
     $152 = $151 ? $149 : 9;
     $153 = $$3484648 >>> 0 < $$3501647 >>> 0;
     if ($153) {
      $157 = 1 << $152;
      $158 = $157 + -1 | 0;
      $159 = 1e9 >>> $152;
      $$0487642 = 0;
      $$1489641 = $$3484648;
      while (1) {
       $160 = HEAP32[$$1489641 >> 2] | 0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = $162 + $$0487642 | 0;
       HEAP32[$$1489641 >> 2] = $163;
       $164 = Math_imul($161, $159) | 0;
       $165 = $$1489641 + 4 | 0;
       $166 = $165 >>> 0 < $$3501647 >>> 0;
       if ($166) {
        $$0487642 = $164;
        $$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648 >> 2] | 0;
      $168 = ($167 | 0) == 0;
      $169 = $$3484648 + 4 | 0;
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164 | 0) == 0;
      if ($170) {
       $$$3484692 = $$$3484;
       $$4502 = $$3501647;
      } else {
       $171 = $$3501647 + 4 | 0;
       HEAP32[$$3501647 >> 2] = $164;
       $$$3484692 = $$$3484;
       $$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648 >> 2] | 0;
      $155 = ($154 | 0) == 0;
      $156 = $$3484648 + 4 | 0;
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;
      $$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = $173 - $174 | 0;
     $176 = $175 >> 2;
     $177 = ($176 | 0) > ($147 | 0);
     $178 = $172 + ($147 << 2) | 0;
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7 >> 2] | 0;
     $180 = $179 + $152 | 0;
     HEAP32[$7 >> 2] = $180;
     $181 = ($180 | 0) < 0;
     if ($181) {
      $$3484648 = $$$3484692;
      $$3501647 = $$$4502;
      $150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;
      $$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;
    $$3501$lcssa = $$1499$lcssa;
   }
   $182 = $$3484$lcssa >>> 0 < $$3501$lcssa >>> 0;
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = $183 - $184 | 0;
    $186 = $185 >> 2;
    $187 = $186 * 9 | 0;
    $188 = HEAP32[$$3484$lcssa >> 2] | 0;
    $189 = $188 >>> 0 < 10;
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;
     $$0530636 = 10;
     while (1) {
      $190 = $$0530636 * 10 | 0;
      $191 = $$0514637 + 1 | 0;
      $192 = $188 >>> 0 < $190 >>> 0;
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;
       $$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40 | 0) != 102;
   $194 = $193 ? $$1515 : 0;
   $195 = $$539 - $194 | 0;
   $196 = ($40 | 0) == 103;
   $197 = ($$539 | 0) != 0;
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = $195 + $$neg | 0;
   $200 = $$3501$lcssa;
   $201 = $200 - $183 | 0;
   $202 = $201 >> 2;
   $203 = $202 * 9 | 0;
   $204 = $203 + -9 | 0;
   $205 = ($199 | 0) < ($204 | 0);
   if ($205) {
    $206 = $$556 + 4 | 0;
    $207 = $199 + 9216 | 0;
    $208 = ($207 | 0) / 9 & -1;
    $209 = $208 + -1024 | 0;
    $210 = $206 + ($209 << 2) | 0;
    $211 = ($207 | 0) % 9 & -1;
    $$0527629 = $211 + 1 | 0;
    $212 = ($$0527629 | 0) < 9;
    if ($212) {
     $$0527631 = $$0527629;
     $$1531630 = 10;
     while (1) {
      $213 = $$1531630 * 10 | 0;
      $$0527 = $$0527631 + 1 | 0;
      $exitcond = ($$0527 | 0) == 9;
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;
       $$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210 >> 2] | 0;
    $215 = ($214 >>> 0) % ($$1531$lcssa >>> 0) & -1;
    $216 = ($215 | 0) == 0;
    $217 = $210 + 4 | 0;
    $218 = ($217 | 0) == ($$3501$lcssa | 0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;
     $$4518 = $$1515;
     $$8 = $$3484$lcssa;
    } else {
     $219 = ($214 >>> 0) / ($$1531$lcssa >>> 0) & -1;
     $220 = $219 & 1;
     $221 = ($220 | 0) == 0;
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = ($$1531$lcssa | 0) / 2 & -1;
     $223 = $215 >>> 0 < $222 >>> 0;
     $224 = ($215 | 0) == ($222 | 0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? .5 : $$559;
     $225 = ($$0520 | 0) == 0;
     if ($225) {
      $$1467 = $$$559;
      $$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521 >> 0] | 0;
      $227 = $226 << 24 >> 24 == 45;
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;
      $$1469 = $$$542;
     }
     $230 = $214 - $215 | 0;
     HEAP32[$210 >> 2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = $230 + $$1531$lcssa | 0;
      HEAP32[$210 >> 2] = $233;
      $234 = $233 >>> 0 > 999999999;
      if ($234) {
       $$5486623 = $$3484$lcssa;
       $$sink545622 = $210;
       while (1) {
        $235 = $$sink545622 + -4 | 0;
        HEAP32[$$sink545622 >> 2] = 0;
        $236 = $235 >>> 0 < $$5486623 >>> 0;
        if ($236) {
         $237 = $$5486623 + -4 | 0;
         HEAP32[$237 >> 2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235 >> 2] | 0;
        $239 = $238 + 1 | 0;
        HEAP32[$235 >> 2] = $239;
        $240 = $239 >>> 0 > 999999999;
        if ($240) {
         $$5486623 = $$6;
         $$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;
         $$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;
       $$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = $183 - $241 | 0;
      $243 = $242 >> 2;
      $244 = $243 * 9 | 0;
      $245 = HEAP32[$$5486$lcssa >> 2] | 0;
      $246 = $245 >>> 0 < 10;
      if ($246) {
       $$4492 = $$sink545$lcssa;
       $$4518 = $244;
       $$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;
       $$2532617 = 10;
       while (1) {
        $247 = $$2532617 * 10 | 0;
        $248 = $$2516618 + 1 | 0;
        $249 = $245 >>> 0 < $247 >>> 0;
        if ($249) {
         $$4492 = $$sink545$lcssa;
         $$4518 = $248;
         $$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;
         $$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;
      $$4518 = $$1515;
      $$8 = $$3484$lcssa;
     }
    }
    $250 = $$4492 + 4 | 0;
    $251 = $$3501$lcssa >>> 0 > $250 >>> 0;
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;
    $$7505$ph = $$$3501;
    $$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;
    $$7505$ph = $$3501$lcssa;
    $$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while (1) {
    $252 = $$7505 >>> 0 > $$9$ph >>> 0;
    if (!$252) {
     $$lcssa673 = 0;
     break;
    }
    $253 = $$7505 + -4 | 0;
    $254 = HEAP32[$253 >> 2] | 0;
    $255 = ($254 | 0) == 0;
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = 0 - $$5519$ph | 0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$ & 1;
     $$539$ = $257 + $$539 | 0;
     $258 = ($$539$ | 0) > ($$5519$ph | 0);
     $259 = ($$5519$ph | 0) > -5;
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = $5 + -1 | 0;
      $$neg567 = $$539$ + -1 | 0;
      $261 = $$neg567 - $$5519$ph | 0;
      $$0479 = $260;
      $$2476 = $261;
     } else {
      $262 = $5 + -2 | 0;
      $263 = $$539$ + -1 | 0;
      $$0479 = $262;
      $$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264 | 0) == 0;
     if ($265) {
      if ($$lcssa673) {
       $266 = $$7505 + -4 | 0;
       $267 = HEAP32[$266 >> 2] | 0;
       $268 = ($267 | 0) == 0;
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = ($267 >>> 0) % 10 & -1;
        $270 = ($269 | 0) == 0;
        if ($270) {
         $$1528614 = 0;
         $$3533613 = 10;
         while (1) {
          $271 = $$3533613 * 10 | 0;
          $272 = $$1528614 + 1 | 0;
          $273 = ($267 >>> 0) % ($271 >>> 0) & -1;
          $274 = ($273 | 0) == 0;
          if ($274) {
           $$1528614 = $272;
           $$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275 | 0) == 102;
      $277 = $$7505;
      $278 = $277 - $183 | 0;
      $279 = $278 >> 2;
      $280 = $279 * 9 | 0;
      $281 = $280 + -9 | 0;
      if ($276) {
       $282 = $281 - $$2529 | 0;
       $283 = ($282 | 0) > 0;
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476 | 0) < ($$546 | 0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;
       $$3477 = $$2476$$547;
       $$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = $281 + $$5519$ph | 0;
       $286 = $285 - $$2529 | 0;
       $287 = ($286 | 0) > 0;
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476 | 0) < ($$548 | 0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;
       $$3477 = $$2476$$549;
       $$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;
      $$3477 = $$2476;
      $$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;
     $$3477 = $$539;
     $$pre$phi690Z2D = $$pre689;
    }
   } while (0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289 | 0) != 0;
   $291 = $290 & 1;
   $292 = $$1480 | 32;
   $293 = ($292 | 0) == 102;
   if ($293) {
    $294 = ($$5519$ph | 0) > 0;
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;
    $$pn566 = $295;
   } else {
    $296 = ($$5519$ph | 0) < 0;
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297 | 0) < 0;
    $299 = $298 << 31 >> 31;
    $300 = _fmt_u($297, $299, $11) | 0;
    $301 = $11;
    $302 = $300;
    $303 = $301 - $302 | 0;
    $304 = ($303 | 0) < 2;
    if ($304) {
     $$1512607 = $300;
     while (1) {
      $305 = $$1512607 + -1 | 0;
      HEAP8[$305 >> 0] = 48;
      $306 = $305;
      $307 = $301 - $306 | 0;
      $308 = ($307 | 0) < 2;
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = $310 + 43 | 0;
    $312 = $311 & 255;
    $313 = $$1512$lcssa + -1 | 0;
    HEAP8[$313 >> 0] = $312;
    $314 = $$1480 & 255;
    $315 = $$1512$lcssa + -2 | 0;
    HEAP8[$315 >> 0] = $314;
    $316 = $315;
    $317 = $301 - $316 | 0;
    $$2513 = $315;
    $$pn566 = $317;
   }
   $318 = $$0520 + 1 | 0;
   $319 = $318 + $$3477 | 0;
   $$1526 = $319 + $291 | 0;
   $320 = $$1526 + $$pn566 | 0;
   _pad_677($0, 32, $2, $320, $4);
   _out_671($0, $$0521, $$0520);
   $321 = $4 ^ 65536;
   _pad_677($0, 48, $2, $320, $321);
   if ($293) {
    $322 = $$9$ph >>> 0 > $$556 >>> 0;
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = $8 + 9 | 0;
    $324 = $323;
    $325 = $8 + 8 | 0;
    $$5493597 = $$0496$$9;
    while (1) {
     $326 = HEAP32[$$5493597 >> 2] | 0;
     $327 = _fmt_u($326, 0, $323) | 0;
     $328 = ($$5493597 | 0) == ($$0496$$9 | 0);
     if ($328) {
      $334 = ($327 | 0) == ($323 | 0);
      if ($334) {
       HEAP8[$325 >> 0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = $327 >>> 0 > $8 >>> 0;
      if ($329) {
       $330 = $327;
       $331 = $330 - $9 | 0;
       _memset($8 | 0, 48, $331 | 0) | 0;
       $$0464594 = $327;
       while (1) {
        $332 = $$0464594 + -1 | 0;
        $333 = $332 >>> 0 > $8 >>> 0;
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = $324 - $335 | 0;
     _out_671($0, $$1465, $336);
     $337 = $$5493597 + 4 | 0;
     $338 = $337 >>> 0 > $$556 >>> 0;
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289 | 0) == 0;
    if (!$339) {
     _out_671($0, 175264, 1);
    }
    $340 = $337 >>> 0 < $$7505 >>> 0;
    $341 = ($$3477 | 0) > 0;
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;
     $$6494589 = $337;
     while (1) {
      $343 = HEAP32[$$6494589 >> 2] | 0;
      $344 = _fmt_u($343, 0, $323) | 0;
      $345 = $344 >>> 0 > $8 >>> 0;
      if ($345) {
       $346 = $344;
       $347 = $346 - $9 | 0;
       _memset($8 | 0, 48, $347 | 0) | 0;
       $$0463584 = $344;
       while (1) {
        $348 = $$0463584 + -1 | 0;
        $349 = $348 >>> 0 > $8 >>> 0;
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590 | 0) < 9;
      $351 = $350 ? $$4478590 : 9;
      _out_671($0, $$0463$lcssa, $351);
      $352 = $$6494589 + 4 | 0;
      $353 = $$4478590 + -9 | 0;
      $354 = $352 >>> 0 < $$7505 >>> 0;
      $355 = ($$4478590 | 0) > 9;
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;
       $$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = $$4478$lcssa + 9 | 0;
    _pad_677($0, 48, $357, 9, 0);
   } else {
    $358 = $$9$ph + 4 | 0;
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477 | 0) > -1;
    if ($359) {
     $360 = $8 + 9 | 0;
     $361 = ($$pre$phi690Z2D | 0) == 0;
     $362 = $360;
     $363 = 0 - $9 | 0;
     $364 = $8 + 8 | 0;
     $$5602 = $$3477;
     $$7495601 = $$9$ph;
     while (1) {
      $365 = HEAP32[$$7495601 >> 2] | 0;
      $366 = _fmt_u($365, 0, $360) | 0;
      $367 = ($366 | 0) == ($360 | 0);
      if ($367) {
       HEAP8[$364 >> 0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601 | 0) == ($$9$ph | 0);
      do {
       if ($368) {
        $372 = $$0 + 1 | 0;
        _out_671($0, $$0, 1);
        $373 = ($$5602 | 0) < 1;
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out_671($0, 175264, 1);
        $$2 = $372;
       } else {
        $369 = $$0 >>> 0 > $8 >>> 0;
        if (!$369) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = $$0 + $363 | 0;
        $scevgep684685 = $scevgep684;
        _memset($8 | 0, 48, $scevgep684685 | 0) | 0;
        $$1598 = $$0;
        while (1) {
         $370 = $$1598 + -1 | 0;
         $371 = $370 >>> 0 > $8 >>> 0;
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while (0);
      $374 = $$2;
      $375 = $362 - $374 | 0;
      $376 = ($$5602 | 0) > ($375 | 0);
      $377 = $376 ? $375 : $$5602;
      _out_671($0, $$2, $377);
      $378 = $$5602 - $375 | 0;
      $379 = $$7495601 + 4 | 0;
      $380 = $379 >>> 0 < $$7505$ >>> 0;
      $381 = ($378 | 0) > -1;
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;
       $$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = $$5$lcssa + 18 | 0;
    _pad_677($0, 48, $383, 18, 0);
    $384 = $11;
    $385 = $$2513;
    $386 = $384 - $385 | 0;
    _out_671($0, $$2513, $386);
   }
   $387 = $4 ^ 8192;
   _pad_677($0, 32, $2, $320, $387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27 | 0) != 0;
   $29 = $28 ? 175232 : 175236;
   $30 = $$0471 != $$0471 | 0.0 != 0.0;
   $31 = $28 ? 175240 : 175244;
   $$0510 = $30 ? $31 : $29;
   $32 = $$0520 + 3 | 0;
   $33 = $4 & -65537;
   _pad_677($0, 32, $2, $32, $33);
   _out_671($0, $$0521, $$0520);
   _out_671($0, $$0510, 3);
   $34 = $4 ^ 8192;
   _pad_677($0, 32, $2, $32, $34);
   $$sink562 = $32;
  }
 } while (0);
 $388 = ($$sink562 | 0) < ($2 | 0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;
 return $$555 | 0;
}

function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0, $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0, $$2371$v = 0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$413 = 0, $$425 = 0, $$4349495 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$neg442 = 0, $$neg443 = 0, $$pre = 0, $$promoted = 0, $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond551 = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond419 = 0, $or$cond420 = 0, $or$cond422 = 0, $or$cond422$not = 0, $or$cond423 = 0, $or$cond426 = 0, $or$cond5 = 0, $sum = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $6 = sp;
 $sum = $3 + $2 | 0;
 $7 = 0 - $sum | 0;
 $8 = $0 + 4 | 0;
 $9 = $0 + 100 | 0;
 $$0329 = $1;
 $$0396 = 0;
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6;
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0;
    $$2 = $$0329;
    $$2398 = $$0396;
    $366 = 0;
    $367 = 0;
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0;
  $11 = HEAP32[$9 >> 2] | 0;
  $12 = $10 >>> 0 < $11 >>> 0;
  if ($12) {
   $13 = $10 + 1 | 0;
   HEAP32[$8 >> 2] = $13;
   $14 = HEAP8[$10 >> 0] | 0;
   $15 = $14 & 255;
   $$0329 = $15;
   $$0396 = 1;
   continue;
  } else {
   $16 = ___shgetc($0) | 0;
   $$0329 = $16;
   $$0396 = 1;
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0;
  $18 = HEAP32[$9 >> 2] | 0;
  $19 = $17 >>> 0 < $18 >>> 0;
  if ($19) {
   $20 = $17 + 1 | 0;
   HEAP32[$8 >> 2] = $20;
   $21 = HEAP8[$17 >> 0] | 0;
   $22 = $21 & 255;
   $$1330$ph = $22;
  } else {
   $23 = ___shgetc($0) | 0;
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph | 0) == 48;
  if ($24) {
   $25 = 0;
   $26 = 0;
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0;
    $28 = tempRet0;
    $29 = HEAP32[$8 >> 2] | 0;
    $30 = HEAP32[$9 >> 2] | 0;
    $31 = $29 >>> 0 < $30 >>> 0;
    if ($31) {
     $32 = $29 + 1 | 0;
     HEAP32[$8 >> 2] = $32;
     $33 = HEAP8[$29 >> 0] | 0;
     $34 = $33 & 255;
     $$1330$be = $34;
    } else {
     $35 = ___shgetc($0) | 0;
     $$1330$be = $35;
    }
    $36 = ($$1330$be | 0) == 48;
    if ($36) {
     $25 = $27;
     $26 = $28;
    } else {
     $$0393 = 1;
     $$2 = $$1330$be;
     $$2398 = 1;
     $366 = $27;
     $367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;
   $$2 = $$1330$ph;
   $$2398 = $$0396;
   $366 = 0;
   $367 = 0;
  }
 }
 HEAP32[$6 >> 2] = 0;
 $37 = $$2 + -48 | 0;
 $38 = $37 >>> 0 < 10;
 $39 = ($$2 | 0) == 46;
 $40 = $39 | $38;
 L20 : do {
  if ($40) {
   $41 = $6 + 496 | 0;
   $$0341513 = 0;
   $$0345512 = 0;
   $$0401509 = 0;
   $$1394511 = $$0393;
   $$3399510 = $$2398;
   $$3514 = $$2;
   $368 = $39;
   $369 = $37;
   $370 = $366;
   $371 = $367;
   $44 = 0;
   $45 = 0;
   L22 : while (1) {
    do {
     if ($368) {
      $cond = ($$1394511 | 0) == 0;
      if ($cond) {
       $$2343 = $$0341513;
       $$2347 = $$0345512;
       $$2395 = 1;
       $$2403 = $$0401509;
       $$4400 = $$3399510;
       $372 = $44;
       $373 = $45;
       $374 = $44;
       $375 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345512 | 0) < 125;
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0;
      $47 = tempRet0;
      $48 = ($$3514 | 0) != 48;
      if (!$43) {
       if (!$48) {
        $$2343 = $$0341513;
        $$2347 = $$0345512;
        $$2395 = $$1394511;
        $$2403 = $$0401509;
        $$4400 = $$3399510;
        $372 = $370;
        $373 = $371;
        $374 = $46;
        $375 = $47;
        break;
       }
       $57 = HEAP32[$41 >> 2] | 0;
       $58 = $57 | 1;
       HEAP32[$41 >> 2] = $58;
       $$2343 = $$0341513;
       $$2347 = $$0345512;
       $$2395 = $$1394511;
       $$2403 = $$0401509;
       $$4400 = $$3399510;
       $372 = $370;
       $373 = $371;
       $374 = $46;
       $375 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401509;
      $49 = ($$0341513 | 0) == 0;
      $$pre = $6 + ($$0345512 << 2) | 0;
      if ($49) {
       $$sink = $369;
      } else {
       $50 = HEAP32[$$pre >> 2] | 0;
       $51 = $50 * 10 | 0;
       $52 = $$3514 + -48 | 0;
       $53 = $52 + $51 | 0;
       $$sink = $53;
      }
      HEAP32[$$pre >> 2] = $$sink;
      $54 = $$0341513 + 1 | 0;
      $55 = ($54 | 0) == 9;
      $56 = $55 & 1;
      $$$0345 = $56 + $$0345512 | 0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;
      $$2347 = $$$0345;
      $$2395 = $$1394511;
      $$2403 = $$$0401;
      $$4400 = 1;
      $372 = $370;
      $373 = $371;
      $374 = $46;
      $375 = $47;
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0;
    $60 = HEAP32[$9 >> 2] | 0;
    $61 = $59 >>> 0 < $60 >>> 0;
    if ($61) {
     $62 = $59 + 1 | 0;
     HEAP32[$8 >> 2] = $62;
     $63 = HEAP8[$59 >> 0] | 0;
     $64 = $63 & 255;
     $$3$be = $64;
    } else {
     $65 = ___shgetc($0) | 0;
     $$3$be = $65;
    }
    $66 = $$3$be + -48 | 0;
    $67 = $66 >>> 0 < 10;
    $68 = ($$3$be | 0) == 46;
    $69 = $68 | $67;
    if ($69) {
     $$0341513 = $$2343;
     $$0345512 = $$2347;
     $$0401509 = $$2403;
     $$1394511 = $$2395;
     $$3399510 = $$4400;
     $$3514 = $$3$be;
     $368 = $68;
     $369 = $66;
     $370 = $372;
     $371 = $373;
     $44 = $374;
     $45 = $375;
    } else {
     $$0341$lcssa = $$2343;
     $$0345$lcssa = $$2347;
     $$0401$lcssa = $$2403;
     $$1394$lcssa = $$2395;
     $$3$lcssa = $$3$be;
     $$3399$lcssa = $$4400;
     $72 = $374;
     $73 = $372;
     $75 = $375;
     $76 = $373;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399510 | 0) != 0;
   $$0341465 = $$0341513;
   $$0345469 = $$0345512;
   $$0401475 = $$0401509;
   $376 = $44;
   $377 = $45;
   $378 = $370;
   $379 = $371;
   $380 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;
   $$0345$lcssa = 0;
   $$0401$lcssa = 0;
   $$1394$lcssa = $$0393;
   $$3$lcssa = $$2;
   $$3399$lcssa = $$2398;
   $72 = 0;
   $73 = $366;
   $75 = 0;
   $76 = $367;
   label = 29;
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0;
   $71 = $70 ? $72 : $73;
   $74 = $70 ? $75 : $76;
   $77 = ($$3399$lcssa | 0) != 0;
   $78 = $$3$lcssa | 32;
   $79 = ($78 | 0) == 101;
   $or$cond415 = $77 & $79;
   if (!$or$cond415) {
    $94 = ($$3$lcssa | 0) > -1;
    if ($94) {
     $$0341465 = $$0341$lcssa;
     $$0345469 = $$0345$lcssa;
     $$0401475 = $$0401$lcssa;
     $376 = $72;
     $377 = $75;
     $378 = $71;
     $379 = $74;
     $380 = $77;
     label = 37;
     break;
    } else {
     $$0341464 = $$0341$lcssa;
     $$0345468 = $$0345$lcssa;
     $$0401474 = $$0401$lcssa;
     $381 = $72;
     $382 = $75;
     $383 = $77;
     $384 = $71;
     $385 = $74;
     label = 39;
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0;
   $81 = tempRet0;
   $82 = ($80 | 0) == 0;
   $83 = ($81 | 0) == -2147483648;
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5 | 0) == 0;
    if ($85) {
     ___shlim($0, 0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9 >> 2] | 0;
    $87 = ($86 | 0) == (0 | 0);
    if ($87) {
     $90 = 0;
     $91 = 0;
    } else {
     $88 = HEAP32[$8 >> 2] | 0;
     $89 = $88 + -1 | 0;
     HEAP32[$8 >> 2] = $89;
     $90 = 0;
     $91 = 0;
    }
   } else {
    $90 = $80;
    $91 = $81;
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0;
   $93 = tempRet0;
   $$0341463 = $$0341$lcssa;
   $$0345467 = $$0345$lcssa;
   $$0401473 = $$0401$lcssa;
   $105 = $92;
   $106 = $72;
   $108 = $93;
   $109 = $75;
   label = 41;
  }
 } while (0);
 if ((label | 0) == 37) {
  $95 = HEAP32[$9 >> 2] | 0;
  $96 = ($95 | 0) == (0 | 0);
  if ($96) {
   $$0341464 = $$0341465;
   $$0345468 = $$0345469;
   $$0401474 = $$0401475;
   $381 = $376;
   $382 = $377;
   $383 = $380;
   $384 = $378;
   $385 = $379;
   label = 39;
  } else {
   $97 = HEAP32[$8 >> 2] | 0;
   $98 = $97 + -1 | 0;
   HEAP32[$8 >> 2] = $98;
   if ($380) {
    $$0341463 = $$0341465;
    $$0345467 = $$0345469;
    $$0401473 = $$0401475;
    $105 = $378;
    $106 = $376;
    $108 = $379;
    $109 = $377;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label | 0) == 39) {
  if ($383) {
   $$0341463 = $$0341464;
   $$0345467 = $$0345468;
   $$0401473 = $$0401474;
   $105 = $384;
   $106 = $381;
   $108 = $385;
   $109 = $382;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label | 0) == 40) {
   $99 = ___errno_location() | 0;
   HEAP32[$99 >> 2] = 22;
   ___shlim($0, 0);
   $$1 = 0.0;
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0;
   $101 = ($100 | 0) == 0;
   if ($101) {
    $102 = +($4 | 0);
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $104 = ($105 | 0) == ($106 | 0);
   $107 = ($108 | 0) == ($109 | 0);
   $110 = $104 & $107;
   $111 = ($109 | 0) < 0;
   $112 = $106 >>> 0 < 10;
   $113 = ($109 | 0) == 0;
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2 | 0) > 30;
    $117 = $100 >>> $2;
    $118 = ($117 | 0) == 0;
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = +($4 | 0);
     $120 = +($100 >>> 0);
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = ($3 | 0) / -2 & -1;
   $123 = ($122 | 0) < 0;
   $124 = $123 << 31 >> 31;
   $125 = ($108 | 0) > ($124 | 0);
   $126 = $105 >>> 0 > $122 >>> 0;
   $127 = ($108 | 0) == ($124 | 0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = ___errno_location() | 0;
    HEAP32[$130 >> 2] = 34;
    $131 = +($4 | 0);
    $132 = $131 * 1797693134862315708145274.0e284;
    $133 = $132 * 1797693134862315708145274.0e284;
    $$1 = $133;
    break;
   }
   $134 = $3 + -106 | 0;
   $135 = ($134 | 0) < 0;
   $136 = $135 << 31 >> 31;
   $137 = ($108 | 0) < ($136 | 0);
   $138 = $105 >>> 0 < $134 >>> 0;
   $139 = ($108 | 0) == ($136 | 0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = ___errno_location() | 0;
    HEAP32[$142 >> 2] = 34;
    $143 = +($4 | 0);
    $144 = $143 * 2.2250738585072014e-308;
    $145 = $144 * 2.2250738585072014e-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341463 | 0) == 0;
   if ($146) {
    $$3348 = $$0345467;
   } else {
    $147 = ($$0341463 | 0) < 9;
    if ($147) {
     $148 = $6 + ($$0345467 << 2) | 0;
     $$promoted = HEAP32[$148 >> 2] | 0;
     $$3344503 = $$0341463;
     $150 = $$promoted;
     while (1) {
      $149 = $150 * 10 | 0;
      $151 = $$3344503 + 1 | 0;
      $exitcond551 = ($151 | 0) == 9;
      if ($exitcond551) {
       break;
      } else {
       $$3344503 = $151;
       $150 = $149;
      }
     }
     HEAP32[$148 >> 2] = $149;
    }
    $152 = $$0345467 + 1 | 0;
    $$3348 = $152;
   }
   $153 = ($$0401473 | 0) < 9;
   if ($153) {
    $154 = ($$0401473 | 0) <= ($105 | 0);
    $155 = ($105 | 0) < 18;
    $or$cond5 = $154 & $155;
    if ($or$cond5) {
     $156 = ($105 | 0) == 9;
     $157 = HEAP32[$6 >> 2] | 0;
     if ($156) {
      $158 = +($4 | 0);
      $159 = +($157 >>> 0);
      $160 = $158 * $159;
      $$1 = $160;
      break;
     }
     $161 = ($105 | 0) < 9;
     if ($161) {
      $162 = +($4 | 0);
      $163 = +($157 >>> 0);
      $164 = $162 * $163;
      $165 = 8 - $105 | 0;
      $166 = 3348 + ($165 << 2) | 0;
      $167 = HEAP32[$166 >> 2] | 0;
      $168 = +($167 | 0);
      $169 = $164 / $168;
      $$1 = $169;
      break;
     }
     $$neg442 = Math_imul($105, -3) | 0;
     $$neg443 = $2 + 27 | 0;
     $170 = $$neg443 + $$neg442 | 0;
     $171 = ($170 | 0) > 30;
     $172 = $157 >>> $170;
     $173 = ($172 | 0) == 0;
     $or$cond419 = $171 | $173;
     if ($or$cond419) {
      $174 = $105 + -10 | 0;
      $175 = 3348 + ($174 << 2) | 0;
      $176 = +($4 | 0);
      $177 = +($157 >>> 0);
      $178 = $176 * $177;
      $179 = HEAP32[$175 >> 2] | 0;
      $180 = +($179 | 0);
      $181 = $178 * $180;
      $$1 = $181;
      break;
     }
    }
   }
   $182 = ($105 | 0) % 9 & -1;
   $183 = ($182 | 0) == 0;
   if ($183) {
    $$0380$ph = 0;
    $$1373$ph448 = $$3348;
    $$2352$ph449 = 0;
    $$2387$ph447 = $105;
   } else {
    $184 = ($105 | 0) > -1;
    $185 = $182 + 9 | 0;
    $186 = $184 ? $182 : $185;
    $187 = 8 - $186 | 0;
    $188 = 3348 + ($187 << 2) | 0;
    $189 = HEAP32[$188 >> 2] | 0;
    $190 = ($$3348 | 0) == 0;
    if ($190) {
     $$0350$lcssa554 = 0;
     $$0372 = 0;
     $$0385$lcssa553 = $105;
    } else {
     $191 = 1e9 / ($189 | 0) & -1;
     $$0340496 = 0;
     $$0350494 = 0;
     $$0385493 = $105;
     $$4349495 = 0;
     while (1) {
      $192 = $6 + ($$4349495 << 2) | 0;
      $193 = HEAP32[$192 >> 2] | 0;
      $194 = ($193 >>> 0) % ($189 >>> 0) & -1;
      $195 = ($193 >>> 0) / ($189 >>> 0) & -1;
      $196 = $195 + $$0340496 | 0;
      HEAP32[$192 >> 2] = $196;
      $197 = Math_imul($191, $194) | 0;
      $198 = ($$4349495 | 0) == ($$0350494 | 0);
      $199 = ($196 | 0) == 0;
      $or$cond420 = $198 & $199;
      $200 = $$0350494 + 1 | 0;
      $201 = $200 & 127;
      $202 = $$0385493 + -9 | 0;
      $$$0385 = $or$cond420 ? $202 : $$0385493;
      $$$0350 = $or$cond420 ? $201 : $$0350494;
      $203 = $$4349495 + 1 | 0;
      $204 = ($203 | 0) == ($$3348 | 0);
      if ($204) {
       break;
      } else {
       $$0340496 = $197;
       $$0350494 = $$$0350;
       $$0385493 = $$$0385;
       $$4349495 = $203;
      }
     }
     $205 = ($197 | 0) == 0;
     if ($205) {
      $$0350$lcssa554 = $$$0350;
      $$0372 = $$3348;
      $$0385$lcssa553 = $$$0385;
     } else {
      $206 = $6 + ($$3348 << 2) | 0;
      $207 = $$3348 + 1 | 0;
      HEAP32[$206 >> 2] = $197;
      $$0350$lcssa554 = $$$0350;
      $$0372 = $207;
      $$0385$lcssa553 = $$$0385;
     }
    }
    $208 = 9 - $186 | 0;
    $209 = $208 + $$0385$lcssa553 | 0;
    $$0380$ph = 0;
    $$1373$ph448 = $$0372;
    $$2352$ph449 = $$0350$lcssa554;
    $$2387$ph447 = $209;
   }
   L101 : while (1) {
    $210 = ($$2387$ph447 | 0) < 18;
    $211 = ($$2387$ph447 | 0) == 18;
    $212 = $6 + ($$2352$ph449 << 2) | 0;
    $$0380 = $$0380$ph;
    $$1373 = $$1373$ph448;
    while (1) {
     if (!$210) {
      if (!$211) {
       $$1381$ph = $$0380;
       $$4354$ph = $$2352$ph449;
       $$4389$ph445 = $$2387$ph447;
       $$6378$ph = $$1373;
       break L101;
      }
      $213 = HEAP32[$212 >> 2] | 0;
      $214 = $213 >>> 0 < 9007199;
      if (!$214) {
       $$1381$ph = $$0380;
       $$4354$ph = $$2352$ph449;
       $$4389$ph445 = 18;
       $$6378$ph = $$1373;
       break L101;
      }
     }
     $215 = $$1373 + 127 | 0;
     $$0334 = 0;
     $$2374 = $$1373;
     $$5$in = $215;
     while (1) {
      $$5 = $$5$in & 127;
      $216 = $6 + ($$5 << 2) | 0;
      $217 = HEAP32[$216 >> 2] | 0;
      $218 = _bitshift64Shl($217 | 0, 0, 29) | 0;
      $219 = tempRet0;
      $220 = _i64Add($218 | 0, $219 | 0, $$0334 | 0, 0) | 0;
      $221 = tempRet0;
      $222 = $221 >>> 0 > 0;
      $223 = $220 >>> 0 > 1e9;
      $224 = ($221 | 0) == 0;
      $225 = $224 & $223;
      $226 = $222 | $225;
      if ($226) {
       $227 = ___udivdi3($220 | 0, $221 | 0, 1e9, 0) | 0;
       $228 = tempRet0;
       $229 = ___uremdi3($220 | 0, $221 | 0, 1e9, 0) | 0;
       $230 = tempRet0;
       $$1335 = $227;
       $$sink421$off0 = $229;
      } else {
       $$1335 = 0;
       $$sink421$off0 = $220;
      }
      HEAP32[$216 >> 2] = $$sink421$off0;
      $231 = $$2374 + 127 | 0;
      $232 = $231 & 127;
      $233 = ($$5 | 0) != ($232 | 0);
      $234 = ($$5 | 0) == ($$2352$ph449 | 0);
      $or$cond422 = $233 | $234;
      $or$cond422$not = $or$cond422 ^ 1;
      $235 = ($$sink421$off0 | 0) == 0;
      $or$cond423 = $235 & $or$cond422$not;
      $$3375 = $or$cond423 ? $$5 : $$2374;
      $236 = $$5 + -1 | 0;
      if ($234) {
       break;
      } else {
       $$0334 = $$1335;
       $$2374 = $$3375;
       $$5$in = $236;
      }
     }
     $237 = $$0380 + -29 | 0;
     $238 = ($$1335 | 0) == 0;
     if ($238) {
      $$0380 = $237;
      $$1373 = $$3375;
     } else {
      break;
     }
    }
    $239 = $$2387$ph447 + 9 | 0;
    $240 = $$2352$ph449 + 127 | 0;
    $241 = $240 & 127;
    $242 = ($241 | 0) == ($$3375 | 0);
    $243 = $$3375 + 127 | 0;
    $244 = $243 & 127;
    $245 = $$3375 + 126 | 0;
    $246 = $245 & 127;
    $247 = $6 + ($246 << 2) | 0;
    if ($242) {
     $248 = $6 + ($244 << 2) | 0;
     $249 = HEAP32[$248 >> 2] | 0;
     $250 = HEAP32[$247 >> 2] | 0;
     $251 = $250 | $249;
     HEAP32[$247 >> 2] = $251;
     $$4376 = $244;
    } else {
     $$4376 = $$3375;
    }
    $252 = $6 + ($241 << 2) | 0;
    HEAP32[$252 >> 2] = $$1335;
    $$0380$ph = $237;
    $$1373$ph448 = $$4376;
    $$2352$ph449 = $241;
    $$2387$ph447 = $239;
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 | 0;
    $287 = $289 & 127;
    $290 = $$6378$ph + 127 | 0;
    $291 = $290 & 127;
    $292 = $6 + ($291 << 2) | 0;
    $$1381$ph558 = $$1381$ph;
    $$4354$ph559 = $$4354$ph;
    $$4389$ph = $$4389$ph445;
    while (1) {
     $265 = ($$4389$ph | 0) == 18;
     $293 = ($$4389$ph | 0) > 27;
     $$425 = $293 ? 9 : 1;
     $$1381 = $$1381$ph558;
     $$4354 = $$4354$ph559;
     while (1) {
      $$0336486 = 0;
      while (1) {
       $253 = $$0336486 + $$4354 | 0;
       $254 = $253 & 127;
       $255 = ($254 | 0) == ($$6378$ph | 0);
       if ($255) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $256 = $6 + ($254 << 2) | 0;
       $257 = HEAP32[$256 >> 2] | 0;
       $258 = 3380 + ($$0336486 << 2) | 0;
       $259 = HEAP32[$258 >> 2] | 0;
       $260 = $257 >>> 0 < $259 >>> 0;
       if ($260) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $261 = $257 >>> 0 > $259 >>> 0;
       if ($261) {
        break;
       }
       $262 = $$0336486 + 1 | 0;
       $263 = ($262 | 0) < 2;
       if ($263) {
        $$0336486 = $262;
       } else {
        $$1337 = $262;
        label = 88;
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0;
       $264 = ($$1337 | 0) == 2;
       $or$cond11 = $265 & $264;
       if ($or$cond11) {
        $$0365484 = 0.0;
        $$4485 = 0;
        $$9483 = $$6378$ph;
        break L119;
       }
      }
      $266 = $$425 + $$1381 | 0;
      $267 = ($$4354 | 0) == ($$6378$ph | 0);
      if ($267) {
       $$1381 = $266;
       $$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $268 = 1 << $$425;
     $269 = $268 + -1 | 0;
     $270 = 1e9 >>> $$425;
     $$0332490 = 0;
     $$5355488 = $$4354;
     $$5390487 = $$4389$ph;
     $$6489 = $$4354;
     while (1) {
      $271 = $6 + ($$6489 << 2) | 0;
      $272 = HEAP32[$271 >> 2] | 0;
      $273 = $272 & $269;
      $274 = $272 >>> $$425;
      $275 = $274 + $$0332490 | 0;
      HEAP32[$271 >> 2] = $275;
      $276 = Math_imul($273, $270) | 0;
      $277 = ($$6489 | 0) == ($$5355488 | 0);
      $278 = ($275 | 0) == 0;
      $or$cond426 = $277 & $278;
      $279 = $$5355488 + 1 | 0;
      $280 = $279 & 127;
      $281 = $$5390487 + -9 | 0;
      $$$5390 = $or$cond426 ? $281 : $$5390487;
      $$$5355 = $or$cond426 ? $280 : $$5355488;
      $282 = $$6489 + 1 | 0;
      $283 = $282 & 127;
      $284 = ($283 | 0) == ($$6378$ph | 0);
      if ($284) {
       break;
      } else {
       $$0332490 = $276;
       $$5355488 = $$$5355;
       $$5390487 = $$$5390;
       $$6489 = $283;
      }
     }
     $285 = ($276 | 0) == 0;
     if ($285) {
      $$1381$ph558 = $266;
      $$4354$ph559 = $$$5355;
      $$4389$ph = $$$5390;
      continue;
     }
     $286 = ($287 | 0) == ($$$5355 | 0);
     if (!$286) {
      break;
     }
     $294 = HEAP32[$292 >> 2] | 0;
     $295 = $294 | 1;
     HEAP32[$292 >> 2] = $295;
     $$1381$ph558 = $266;
     $$4354$ph559 = $$$5355;
     $$4389$ph = $$$5390;
    }
    $288 = $6 + ($$6378$ph << 2) | 0;
    HEAP32[$288 >> 2] = $276;
    $$1381$ph = $266;
    $$4354$ph = $$$5355;
    $$4389$ph445 = $$$5390;
    $$6378$ph = $287;
   }
   while (1) {
    $296 = $$4485 + $$4354 | 0;
    $297 = $296 & 127;
    $298 = ($297 | 0) == ($$9483 | 0);
    $299 = $$9483 + 1 | 0;
    $300 = $299 & 127;
    if ($298) {
     $301 = $300 + -1 | 0;
     $302 = $6 + ($301 << 2) | 0;
     HEAP32[$302 >> 2] = 0;
     $$10 = $300;
    } else {
     $$10 = $$9483;
    }
    $303 = $$0365484 * 1.0e9;
    $304 = $6 + ($297 << 2) | 0;
    $305 = HEAP32[$304 >> 2] | 0;
    $306 = +($305 >>> 0);
    $307 = $303 + $306;
    $308 = $$4485 + 1 | 0;
    $exitcond = ($308 | 0) == 2;
    if ($exitcond) {
     break;
    } else {
     $$0365484 = $307;
     $$4485 = $308;
     $$9483 = $$10;
    }
   }
   $309 = +($4 | 0);
   $310 = $309 * $307;
   $311 = $$1381 + 53 | 0;
   $312 = $311 - $3 | 0;
   $313 = ($312 | 0) < ($2 | 0);
   $314 = ($312 | 0) > 0;
   $$ = $314 ? $312 : 0;
   $$0333 = $313 ? $$ : $2;
   $315 = ($$0333 | 0) < 53;
   if ($315) {
    $316 = 105 - $$0333 | 0;
    $317 = +_scalbn(1.0, $316);
    $318 = +_copysignl($317, $310);
    $319 = 53 - $$0333 | 0;
    $320 = +_scalbn(1.0, $319);
    $321 = +_fmodl($310, $320);
    $322 = $310 - $321;
    $323 = $318 + $322;
    $$0360 = $318;
    $$0361 = $321;
    $$1366 = $323;
   } else {
    $$0360 = 0.0;
    $$0361 = 0.0;
    $$1366 = $310;
   }
   $324 = $$4354 + 2 | 0;
   $325 = $324 & 127;
   $326 = ($325 | 0) == ($$10 | 0);
   if ($326) {
    $$3364 = $$0361;
   } else {
    $327 = $6 + ($325 << 2) | 0;
    $328 = HEAP32[$327 >> 2] | 0;
    $329 = $328 >>> 0 < 5e8;
    do {
     if ($329) {
      $330 = ($328 | 0) == 0;
      if ($330) {
       $331 = $$4354 + 3 | 0;
       $332 = $331 & 127;
       $333 = ($332 | 0) == ($$10 | 0);
       if ($333) {
        $$1362 = $$0361;
        break;
       }
      }
      $334 = $309 * .25;
      $335 = $334 + $$0361;
      $$1362 = $335;
     } else {
      $336 = ($328 | 0) == 5e8;
      if (!$336) {
       $337 = $309 * .75;
       $338 = $337 + $$0361;
       $$1362 = $338;
       break;
      }
      $339 = $$4354 + 3 | 0;
      $340 = $339 & 127;
      $341 = ($340 | 0) == ($$10 | 0);
      if ($341) {
       $342 = $309 * .5;
       $343 = $342 + $$0361;
       $$1362 = $343;
       break;
      } else {
       $344 = $309 * .75;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      }
     }
    } while (0);
    $346 = 53 - $$0333 | 0;
    $347 = ($346 | 0) > 1;
    if ($347) {
     $348 = +_fmodl($$1362, 1.0);
     $349 = $348 != 0.0;
     if ($349) {
      $$3364 = $$1362;
     } else {
      $350 = $$1362 + 1.0;
      $$3364 = $350;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $351 = $$1366 + $$3364;
   $352 = $351 - $$0360;
   $353 = $311 & 2147483647;
   $354 = -2 - $sum | 0;
   $355 = ($353 | 0) > ($354 | 0);
   do {
    if ($355) {
     $356 = +Math_abs(+$352);
     $357 = !($356 >= 9007199254740992.0);
     $358 = $352 * .5;
     $not$ = $357 ^ 1;
     $359 = $not$ & 1;
     $$3383 = $359 + $$1381 | 0;
     $$2367 = $357 ? $352 : $358;
     $360 = $$3383 + 50 | 0;
     $361 = ($360 | 0) > ($7 | 0);
     if (!$361) {
      $362 = ($$0333 | 0) != ($312 | 0);
      $narrow = $362 | $357;
      $$2371$v = $313 & $narrow;
      $363 = $$3364 != 0.0;
      $or$cond14 = $363 & $$2371$v;
      if (!$or$cond14) {
       $$3368 = $$2367;
       $$4384 = $$3383;
       break;
      }
     }
     $364 = ___errno_location() | 0;
     HEAP32[$364 >> 2] = 34;
     $$3368 = $$2367;
     $$4384 = $$3383;
    } else {
     $$3368 = $352;
     $$4384 = $$1381;
    }
   } while (0);
   $365 = +_scalbnl($$3368, $$4384);
   $$1 = $365;
  }
 } while (0);
 STACKTOP = sp;
 return +$$1;
}

function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $5 = sp + 16 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 20 | 0;
 HEAP32[$5 >> 2] = $1;
 $10 = ($0 | 0) != (0 | 0);
 $11 = $7 + 40 | 0;
 $12 = $11;
 $13 = $7 + 39 | 0;
 $14 = $8 + 4 | 0;
 $$0243 = 0;
 $$0247 = 0;
 $$0269 = 0;
 $21 = $1;
 L1 : while (1) {
  $15 = ($$0247 | 0) > -1;
  do {
   if ($15) {
    $16 = 2147483647 - $$0247 | 0;
    $17 = ($$0243 | 0) > ($16 | 0);
    if ($17) {
     $18 = ___errno_location() | 0;
     HEAP32[$18 >> 2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = $$0243 + $$0247 | 0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while (0);
  $20 = HEAP8[$21 >> 0] | 0;
  $22 = $20 << 24 >> 24 == 0;
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;
   $25 = $21;
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249306 = $25;
     $27 = $25;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25;
     $39 = $25;
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0;
   HEAP32[$5 >> 2] = $24;
   $$pre = HEAP8[$24 >> 0] | 0;
   $23 = $$pre;
   $25 = $24;
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0;
     $26 = $27 + 1 | 0;
     $28 = HEAP8[$26 >> 0] | 0;
     $29 = $28 << 24 >> 24 == 37;
     if (!$29) {
      $$0249$lcssa = $$0249306;
      $39 = $27;
      break L12;
     }
     $30 = $$0249306 + 1 | 0;
     $31 = $27 + 2 | 0;
     HEAP32[$5 >> 2] = $31;
     $32 = HEAP8[$31 >> 0] | 0;
     $33 = $32 << 24 >> 24 == 37;
     if ($33) {
      $$0249306 = $30;
      $27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      $39 = $31;
      break;
     }
    }
   }
  } while (0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = $34 - $35 | 0;
  if ($10) {
   _out_671($0, $21, $36);
  }
  $37 = ($36 | 0) == 0;
  if (!$37) {
   $$0269$phi = $$0269;
   $$0243 = $36;
   $$0247 = $$1248;
   $21 = $39;
   $$0269 = $$0269$phi;
   continue;
  }
  $38 = $39 + 1 | 0;
  $40 = HEAP8[$38 >> 0] | 0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = $41 + -48 | 0;
  $isdigit = $isdigittmp >>> 0 < 10;
  if ($isdigit) {
   $42 = $39 + 2 | 0;
   $43 = HEAP8[$42 >> 0] | 0;
   $44 = $43 << 24 >> 24 == 36;
   $45 = $39 + 3 | 0;
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;
   $$1270 = $$$0269;
   $storemerge = $$377;
  } else {
   $$0253 = -1;
   $$1270 = $$0269;
   $storemerge = $38;
  }
  HEAP32[$5 >> 2] = $storemerge;
  $46 = HEAP8[$storemerge >> 0] | 0;
  $47 = $46 << 24 >> 24;
  $48 = $47 + -32 | 0;
  $49 = $48 >>> 0 < 32;
  L24 : do {
   if ($49) {
    $$0262311 = 0;
    $329 = $46;
    $51 = $48;
    $storemerge273310 = $storemerge;
    while (1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52 | 0) == 0;
     if ($53) {
      $$0262$lcssa = $$0262311;
      $$lcssa295 = $329;
      $62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = $storemerge273310 + 1 | 0;
     HEAP32[$5 >> 2] = $55;
     $56 = HEAP8[$55 >> 0] | 0;
     $57 = $56 << 24 >> 24;
     $58 = $57 + -32 | 0;
     $59 = $58 >>> 0 < 32;
     if ($59) {
      $$0262311 = $54;
      $329 = $56;
      $51 = $58;
      $storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;
      $$lcssa295 = $56;
      $62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;
    $$lcssa295 = $46;
    $62 = $storemerge;
   }
  } while (0);
  $60 = $$lcssa295 << 24 >> 24 == 42;
  if ($60) {
   $61 = $62 + 1 | 0;
   $63 = HEAP8[$61 >> 0] | 0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = $64 + -48 | 0;
   $isdigit277 = $isdigittmp276 >>> 0 < 10;
   if ($isdigit277) {
    $65 = $62 + 2 | 0;
    $66 = HEAP8[$65 >> 0] | 0;
    $67 = $66 << 24 >> 24 == 36;
    if ($67) {
     $68 = $4 + ($isdigittmp276 << 2) | 0;
     HEAP32[$68 >> 2] = 10;
     $69 = HEAP8[$61 >> 0] | 0;
     $70 = $69 << 24 >> 24;
     $71 = $70 + -48 | 0;
     $72 = $3 + ($71 << 3) | 0;
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74 >> 2] | 0;
     $76 = $73 + 4 | 0;
     $77 = $76;
     $78 = HEAP32[$77 >> 2] | 0;
     $79 = $62 + 3 | 0;
     $$0259 = $75;
     $$2271 = 1;
     $storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label | 0) == 23) {
    label = 0;
    $80 = ($$1270 | 0) == 0;
    if (!$80) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2 >> 2] | 0;
     $81 = $arglist_current;
     $82 = 0 + 4 | 0;
     $expanded4 = $82;
     $expanded = $expanded4 - 1 | 0;
     $83 = $81 + $expanded | 0;
     $84 = 0 + 4 | 0;
     $expanded8 = $84;
     $expanded7 = $expanded8 - 1 | 0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86 >> 2] | 0;
     $arglist_next = $86 + 4 | 0;
     HEAP32[$2 >> 2] = $arglist_next;
     $$0259 = $87;
     $$2271 = 0;
     $storemerge278 = $61;
    } else {
     $$0259 = 0;
     $$2271 = 0;
     $storemerge278 = $61;
    }
   }
   HEAP32[$5 >> 2] = $storemerge278;
   $88 = ($$0259 | 0) < 0;
   $89 = $$0262$lcssa | 8192;
   $90 = 0 - $$0259 | 0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;
   $$1263 = $$$0262;
   $$3272 = $$2271;
   $94 = $storemerge278;
  } else {
   $91 = _getint_672($5) | 0;
   $92 = ($91 | 0) < 0;
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5 >> 2] | 0;
   $$1260 = $91;
   $$1263 = $$0262$lcssa;
   $$3272 = $$1270;
   $94 = $$pre346;
  }
  $93 = HEAP8[$94 >> 0] | 0;
  $95 = $93 << 24 >> 24 == 46;
  do {
   if ($95) {
    $96 = $94 + 1 | 0;
    $97 = HEAP8[$96 >> 0] | 0;
    $98 = $97 << 24 >> 24 == 42;
    if (!$98) {
     $125 = $94 + 1 | 0;
     HEAP32[$5 >> 2] = $125;
     $126 = _getint_672($5) | 0;
     $$pre347$pre = HEAP32[$5 >> 2] | 0;
     $$0254 = $126;
     $$pre347 = $$pre347$pre;
     break;
    }
    $99 = $94 + 2 | 0;
    $100 = HEAP8[$99 >> 0] | 0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = $101 + -48 | 0;
    $isdigit275 = $isdigittmp274 >>> 0 < 10;
    if ($isdigit275) {
     $102 = $94 + 3 | 0;
     $103 = HEAP8[$102 >> 0] | 0;
     $104 = $103 << 24 >> 24 == 36;
     if ($104) {
      $105 = $4 + ($isdigittmp274 << 2) | 0;
      HEAP32[$105 >> 2] = 10;
      $106 = HEAP8[$99 >> 0] | 0;
      $107 = $106 << 24 >> 24;
      $108 = $107 + -48 | 0;
      $109 = $3 + ($108 << 3) | 0;
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111 >> 2] | 0;
      $113 = $110 + 4 | 0;
      $114 = $113;
      $115 = HEAP32[$114 >> 2] | 0;
      $116 = $94 + 4 | 0;
      HEAP32[$5 >> 2] = $116;
      $$0254 = $112;
      $$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272 | 0) == 0;
    if (!$117) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2 >> 2] | 0;
     $118 = $arglist_current2;
     $119 = 0 + 4 | 0;
     $expanded11 = $119;
     $expanded10 = $expanded11 - 1 | 0;
     $120 = $118 + $expanded10 | 0;
     $121 = 0 + 4 | 0;
     $expanded15 = $121;
     $expanded14 = $expanded15 - 1 | 0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123 >> 2] | 0;
     $arglist_next3 = $123 + 4 | 0;
     HEAP32[$2 >> 2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5 >> 2] = $99;
    $$0254 = $330;
    $$pre347 = $99;
   } else {
    $$0254 = -1;
    $$pre347 = $94;
   }
  } while (0);
  $$0252 = 0;
  $128 = $$pre347;
  while (1) {
   $127 = HEAP8[$128 >> 0] | 0;
   $129 = $127 << 24 >> 24;
   $130 = $129 + -65 | 0;
   $131 = $130 >>> 0 > 57;
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = $128 + 1 | 0;
   HEAP32[$5 >> 2] = $132;
   $133 = HEAP8[$128 >> 0] | 0;
   $134 = $133 << 24 >> 24;
   $135 = $134 + -65 | 0;
   $136 = (174732 + ($$0252 * 58 | 0) | 0) + $135 | 0;
   $137 = HEAP8[$136 >> 0] | 0;
   $138 = $137 & 255;
   $139 = $138 + -1 | 0;
   $140 = $139 >>> 0 < 8;
   if ($140) {
    $$0252 = $138;
    $128 = $132;
   } else {
    break;
   }
  }
  $141 = $137 << 24 >> 24 == 0;
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = $137 << 24 >> 24 == 19;
  $143 = ($$0253 | 0) > -1;
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = $4 + ($$0253 << 2) | 0;
     HEAP32[$144 >> 2] = $138;
     $145 = $3 + ($$0253 << 3) | 0;
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147 >> 2] | 0;
     $149 = $146 + 4 | 0;
     $150 = $149;
     $151 = HEAP32[$150 >> 2] | 0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153 >> 2] = $148;
     $154 = $152 + 4 | 0;
     $155 = $154;
     HEAP32[$155 >> 2] = $151;
     label = 49;
     break;
    }
    if (!$10) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_674($6, $138, $2);
   }
  } while (0);
  if ((label | 0) == 49) {
   label = 0;
   if (!$10) {
    $$0243 = 0;
    $$0247 = $$1248;
    $$0269 = $$3272;
    $21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128 >> 0] | 0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252 | 0) != 0;
  $159 = $157 & 15;
  $160 = ($159 | 0) == 3;
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162 | 0) == 0;
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     $trunc = $$0252 & 255;
     switch ($trunc << 24 >> 24) {
     case 0:
      {
       $171 = HEAP32[$6 >> 2] | 0;
       HEAP32[$171 >> 2] = $$1248;
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 1:
      {
       $172 = HEAP32[$6 >> 2] | 0;
       HEAP32[$172 >> 2] = $$1248;
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 2:
      {
       $173 = ($$1248 | 0) < 0;
       $174 = $173 << 31 >> 31;
       $175 = HEAP32[$6 >> 2] | 0;
       $176 = $175;
       $177 = $176;
       HEAP32[$177 >> 2] = $$1248;
       $178 = $176 + 4 | 0;
       $179 = $178;
       HEAP32[$179 >> 2] = $174;
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 3:
      {
       $180 = $$1248 & 65535;
       $181 = HEAP32[$6 >> 2] | 0;
       HEAP16[$181 >> 1] = $180;
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 4:
      {
       $182 = $$1248 & 255;
       $183 = HEAP32[$6 >> 2] | 0;
       HEAP8[$183 >> 0] = $182;
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 6:
      {
       $184 = HEAP32[$6 >> 2] | 0;
       HEAP32[$184 >> 2] = $$1248;
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     case 7:
      {
       $185 = ($$1248 | 0) < 0;
       $186 = $185 << 31 >> 31;
       $187 = HEAP32[$6 >> 2] | 0;
       $188 = $187;
       $189 = $188;
       HEAP32[$189 >> 2] = $$1248;
       $190 = $188 + 4 | 0;
       $191 = $190;
       HEAP32[$191 >> 2] = $186;
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0;
       $$0247 = $$1248;
       $$0269 = $$3272;
       $21 = $132;
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $192 = $$0254 >>> 0 > 8;
     $193 = $192 ? $$0254 : 8;
     $194 = $$1263$ | 8;
     $$1236 = 120;
     $$1255 = $193;
     $$3265 = $194;
     label = 61;
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235;
     $$1255 = $$0254;
     $$3265 = $$1263$;
     label = 61;
     break;
    }
   case 111:
    {
     $210 = $6;
     $211 = $210;
     $212 = HEAP32[$211 >> 2] | 0;
     $213 = $210 + 4 | 0;
     $214 = $213;
     $215 = HEAP32[$214 >> 2] | 0;
     $216 = _fmt_o($212, $215, $11) | 0;
     $217 = $$1263$ & 8;
     $218 = ($217 | 0) == 0;
     $219 = $216;
     $220 = $12 - $219 | 0;
     $221 = ($$0254 | 0) > ($220 | 0);
     $222 = $220 + 1 | 0;
     $223 = $218 | $221;
     $$0254$$0254$ = $223 ? $$0254 : $222;
     $$0228 = $216;
     $$1233 = 0;
     $$1238 = 175196;
     $$2256 = $$0254$$0254$;
     $$4266 = $$1263$;
     $248 = $212;
     $250 = $215;
     label = 67;
     break;
    }
   case 105:
   case 100:
    {
     $224 = $6;
     $225 = $224;
     $226 = HEAP32[$225 >> 2] | 0;
     $227 = $224 + 4 | 0;
     $228 = $227;
     $229 = HEAP32[$228 >> 2] | 0;
     $230 = ($229 | 0) < 0;
     if ($230) {
      $231 = _i64Subtract(0, 0, $226 | 0, $229 | 0) | 0;
      $232 = tempRet0;
      $233 = $6;
      $234 = $233;
      HEAP32[$234 >> 2] = $231;
      $235 = $233 + 4 | 0;
      $236 = $235;
      HEAP32[$236 >> 2] = $232;
      $$0232 = 1;
      $$0237 = 175196;
      $242 = $231;
      $243 = $232;
      label = 66;
      break L71;
     } else {
      $237 = $$1263$ & 2048;
      $238 = ($237 | 0) == 0;
      $239 = $$1263$ & 1;
      $240 = ($239 | 0) == 0;
      $$ = $240 ? 175196 : 175198;
      $$$ = $238 ? $$ : 175197;
      $241 = $$1263$ & 2049;
      $narrow = ($241 | 0) != 0;
      $$284$ = $narrow & 1;
      $$0232 = $$284$;
      $$0237 = $$$;
      $242 = $226;
      $243 = $229;
      label = 66;
      break L71;
     }
     break;
    }
   case 117:
    {
     $165 = $6;
     $166 = $165;
     $167 = HEAP32[$166 >> 2] | 0;
     $168 = $165 + 4 | 0;
     $169 = $168;
     $170 = HEAP32[$169 >> 2] | 0;
     $$0232 = 0;
     $$0237 = 175196;
     $242 = $167;
     $243 = $170;
     label = 66;
     break;
    }
   case 99:
    {
     $259 = $6;
     $260 = $259;
     $261 = HEAP32[$260 >> 2] | 0;
     $262 = $259 + 4 | 0;
     $263 = $262;
     $264 = HEAP32[$263 >> 2] | 0;
     $265 = $261 & 255;
     HEAP8[$13 >> 0] = $265;
     $$2 = $13;
     $$2234 = 0;
     $$2239 = 175196;
     $$2251 = $11;
     $$5 = 1;
     $$6268 = $164;
     break;
    }
   case 109:
    {
     $266 = ___errno_location() | 0;
     $267 = HEAP32[$266 >> 2] | 0;
     $268 = _strerror($267) | 0;
     $$1 = $268;
     label = 71;
     break;
    }
   case 115:
    {
     $269 = HEAP32[$6 >> 2] | 0;
     $270 = ($269 | 0) != (0 | 0);
     $271 = $270 ? $269 : 175206;
     $$1 = $271;
     label = 71;
     break;
    }
   case 67:
    {
     $278 = $6;
     $279 = $278;
     $280 = HEAP32[$279 >> 2] | 0;
     $281 = $278 + 4 | 0;
     $282 = $281;
     $283 = HEAP32[$282 >> 2] | 0;
     HEAP32[$8 >> 2] = $280;
     HEAP32[$14 >> 2] = 0;
     HEAP32[$6 >> 2] = $8;
     $$4258355 = -1;
     $331 = $8;
     label = 75;
     break;
    }
   case 83:
    {
     $$pre349 = HEAP32[$6 >> 2] | 0;
     $284 = ($$0254 | 0) == 0;
     if ($284) {
      _pad_677($0, 32, $$1260, 0, $$1263$);
      $$0240$lcssa357 = 0;
      label = 84;
     } else {
      $$4258355 = $$0254;
      $331 = $$pre349;
      label = 75;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $306 = +HEAPF64[$6 >> 3];
     $307 = _fmt_fp($0, $306, $$1260, $$0254, $$1263$, $$0235) | 0;
     $$0243 = $307;
     $$0247 = $$1248;
     $$0269 = $$3272;
     $21 = $132;
     continue L1;
     break;
    }
   default:
    {
     $$2 = $21;
     $$2234 = 0;
     $$2239 = 175196;
     $$2251 = $11;
     $$5 = $$0254;
     $$6268 = $$1263$;
    }
   }
  } while (0);
  L95 : do {
   if ((label | 0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196 >> 2] | 0;
    $198 = $195 + 4 | 0;
    $199 = $198;
    $200 = HEAP32[$199 >> 2] | 0;
    $201 = $$1236 & 32;
    $202 = _fmt_x($197, $200, $11, $201) | 0;
    $203 = ($197 | 0) == 0;
    $204 = ($200 | 0) == 0;
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206 | 0) == 0;
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = 175196 + $208 | 0;
    $$289 = $or$cond283 ? 175196 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;
    $$1233 = $$290;
    $$1238 = $$289;
    $$2256 = $$1255;
    $$4266 = $$3265;
    $248 = $197;
    $250 = $200;
    label = 67;
   } else if ((label | 0) == 66) {
    label = 0;
    $244 = _fmt_u($242, $243, $11) | 0;
    $$0228 = $244;
    $$1233 = $$0232;
    $$1238 = $$0237;
    $$2256 = $$0254;
    $$4266 = $$1263$;
    $248 = $242;
    $250 = $243;
    label = 67;
   } else if ((label | 0) == 71) {
    label = 0;
    $272 = _memchr($$1, 0, $$0254) | 0;
    $273 = ($272 | 0) == (0 | 0);
    $274 = $272;
    $275 = $$1;
    $276 = $274 - $275 | 0;
    $277 = $$1 + $$0254 | 0;
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;
    $$2234 = 0;
    $$2239 = 175196;
    $$2251 = $$1250;
    $$5 = $$3257;
    $$6268 = $164;
   } else if ((label | 0) == 75) {
    label = 0;
    $$0229322 = $331;
    $$0240321 = 0;
    $$1244320 = 0;
    while (1) {
     $285 = HEAP32[$$0229322 >> 2] | 0;
     $286 = ($285 | 0) == 0;
     if ($286) {
      $$0240$lcssa = $$0240321;
      $$2245 = $$1244320;
      break;
     }
     $287 = _wctomb($9, $285) | 0;
     $288 = ($287 | 0) < 0;
     $289 = $$4258355 - $$0240321 | 0;
     $290 = $287 >>> 0 > $289 >>> 0;
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;
      $$2245 = $287;
      break;
     }
     $291 = $$0229322 + 4 | 0;
     $292 = $287 + $$0240321 | 0;
     $293 = $$4258355 >>> 0 > $292 >>> 0;
     if ($293) {
      $$0229322 = $291;
      $$0240321 = $292;
      $$1244320 = $287;
     } else {
      $$0240$lcssa = $292;
      $$2245 = $287;
      break;
     }
    }
    $294 = ($$2245 | 0) < 0;
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_677($0, 32, $$1260, $$0240$lcssa, $$1263$);
    $295 = ($$0240$lcssa | 0) == 0;
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;
     $$1241332 = 0;
     while (1) {
      $296 = HEAP32[$$1230333 >> 2] | 0;
      $297 = ($296 | 0) == 0;
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = _wctomb($9, $296) | 0;
      $299 = $298 + $$1241332 | 0;
      $300 = ($299 | 0) > ($$0240$lcssa | 0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = $$1230333 + 4 | 0;
      _out_671($0, $9, $298);
      $302 = $299 >>> 0 < $$0240$lcssa >>> 0;
      if ($302) {
       $$1230333 = $301;
       $$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 67) {
   label = 0;
   $245 = ($$2256 | 0) > -1;
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248 | 0) != 0;
   $249 = ($250 | 0) != 0;
   $251 = $247 | $249;
   $252 = ($$2256 | 0) != 0;
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = $12 - $253 | 0;
   $255 = $251 ^ 1;
   $256 = $255 & 1;
   $257 = $256 + $254 | 0;
   $258 = ($$2256 | 0) > ($257 | 0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;
   $$2234 = $$1233;
   $$2239 = $$1238;
   $$2251 = $11;
   $$5 = $$2256$$$2256;
   $$6268 = $$$4266;
  } else if ((label | 0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_677($0, 32, $$1260, $$0240$lcssa357, $303);
   $304 = ($$1260 | 0) > ($$0240$lcssa357 | 0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;
   $$0247 = $$1248;
   $$0269 = $$3272;
   $21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = $308 - $309 | 0;
  $311 = ($$5 | 0) < ($310 | 0);
  $$$5 = $311 ? $310 : $$5;
  $312 = $$$5 + $$2234 | 0;
  $313 = ($$1260 | 0) < ($312 | 0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_677($0, 32, $$2261, $312, $$6268);
  _out_671($0, $$2239, $$2234);
  $314 = $$6268 ^ 65536;
  _pad_677($0, 48, $$2261, $312, $314);
  _pad_677($0, 48, $$$5, $310, 0);
  _out_671($0, $$2, $310);
  $315 = $$6268 ^ 8192;
  _pad_677($0, 32, $$2261, $312, $315);
  $$0243 = $$2261;
  $$0247 = $$1248;
  $$0269 = $$3272;
  $21 = $132;
 }
 L114 : do {
  if ((label | 0) == 87) {
   $316 = ($0 | 0) == (0 | 0);
   if ($316) {
    $317 = ($$0269 | 0) == 0;
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while (1) {
      $318 = $4 + ($$2242305 << 2) | 0;
      $319 = HEAP32[$318 >> 2] | 0;
      $320 = ($319 | 0) == 0;
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = $3 + ($$2242305 << 3) | 0;
      _pop_arg_674($321, $319, $2);
      $322 = $$2242305 + 1 | 0;
      $323 = ($322 | 0) < 10;
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while (1) {
      $326 = $4 + ($$3303 << 2) | 0;
      $327 = HEAP32[$326 >> 2] | 0;
      $328 = ($327 | 0) == 0;
      $325 = $$3303 + 1 | 0;
      if (!$328) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325 | 0) < 10;
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0, $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = ($0 | 0) == (0 | 0);
 if ($1) {
  return;
 }
 $2 = $0 + -8 | 0;
 $3 = HEAP32[179424 >> 2] | 0;
 $4 = $2 >>> 0 < $3 >>> 0;
 if ($4) {
  _abort();
 }
 $5 = $0 + -4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6 & 3;
 $8 = ($7 | 0) == 1;
 if ($8) {
  _abort();
 }
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 $11 = $6 & 1;
 $12 = ($11 | 0) == 0;
 L10 : do {
  if ($12) {
   $13 = HEAP32[$2 >> 2] | 0;
   $14 = ($7 | 0) == 0;
   if ($14) {
    return;
   }
   $15 = 0 - $13 | 0;
   $16 = $2 + $15 | 0;
   $17 = $13 + $9 | 0;
   $18 = $16 >>> 0 < $3 >>> 0;
   if ($18) {
    _abort();
   }
   $19 = HEAP32[179428 >> 2] | 0;
   $20 = ($16 | 0) == ($19 | 0);
   if ($20) {
    $104 = $10 + 4 | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    $106 = $105 & 3;
    $107 = ($106 | 0) == 3;
    if (!$107) {
     $$1 = $16;
     $$1382 = $17;
     $113 = $16;
     break;
    }
    $108 = $16 + $17 | 0;
    $109 = $16 + 4 | 0;
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[179416 >> 2] = $17;
    HEAP32[$104 >> 2] = $111;
    HEAP32[$109 >> 2] = $110;
    HEAP32[$108 >> 2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = $13 >>> 0 < 256;
   if ($22) {
    $23 = $16 + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $16 + 12 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $21 << 1;
    $28 = 179448 + ($27 << 2) | 0;
    $29 = ($24 | 0) == ($28 | 0);
    if (!$29) {
     $30 = $24 >>> 0 < $3 >>> 0;
     if ($30) {
      _abort();
     }
     $31 = $24 + 12 | 0;
     $32 = HEAP32[$31 >> 2] | 0;
     $33 = ($32 | 0) == ($16 | 0);
     if (!$33) {
      _abort();
     }
    }
    $34 = ($26 | 0) == ($24 | 0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[44852] | 0;
     $38 = $37 & $36;
     HEAP32[44852] = $38;
     $$1 = $16;
     $$1382 = $17;
     $113 = $16;
     break;
    }
    $39 = ($26 | 0) == ($28 | 0);
    if ($39) {
     $$pre444 = $26 + 8 | 0;
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = $26 >>> 0 < $3 >>> 0;
     if ($40) {
      _abort();
     }
     $41 = $26 + 8 | 0;
     $42 = HEAP32[$41 >> 2] | 0;
     $43 = ($42 | 0) == ($16 | 0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
     }
    }
    $44 = $24 + 12 | 0;
    HEAP32[$44 >> 2] = $26;
    HEAP32[$$pre$phi445Z2D >> 2] = $24;
    $$1 = $16;
    $$1382 = $17;
    $113 = $16;
    break;
   }
   $45 = $16 + 24 | 0;
   $46 = HEAP32[$45 >> 2] | 0;
   $47 = $16 + 12 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   $49 = ($48 | 0) == ($16 | 0);
   do {
    if ($49) {
     $59 = $16 + 16 | 0;
     $60 = $59 + 4 | 0;
     $61 = HEAP32[$60 >> 2] | 0;
     $62 = ($61 | 0) == (0 | 0);
     if ($62) {
      $63 = HEAP32[$59 >> 2] | 0;
      $64 = ($63 | 0) == (0 | 0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;
       $$1390 = $59;
      }
     } else {
      $$1387 = $61;
      $$1390 = $60;
     }
     while (1) {
      $65 = $$1387 + 20 | 0;
      $66 = HEAP32[$65 >> 2] | 0;
      $67 = ($66 | 0) == (0 | 0);
      if (!$67) {
       $$1387 = $66;
       $$1390 = $65;
       continue;
      }
      $68 = $$1387 + 16 | 0;
      $69 = HEAP32[$68 >> 2] | 0;
      $70 = ($69 | 0) == (0 | 0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;
       $$1390 = $68;
      }
     }
     $71 = $$1390 >>> 0 < $3 >>> 0;
     if ($71) {
      _abort();
     } else {
      HEAP32[$$1390 >> 2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = $16 + 8 | 0;
     $51 = HEAP32[$50 >> 2] | 0;
     $52 = $51 >>> 0 < $3 >>> 0;
     if ($52) {
      _abort();
     }
     $53 = $51 + 12 | 0;
     $54 = HEAP32[$53 >> 2] | 0;
     $55 = ($54 | 0) == ($16 | 0);
     if (!$55) {
      _abort();
     }
     $56 = $48 + 8 | 0;
     $57 = HEAP32[$56 >> 2] | 0;
     $58 = ($57 | 0) == ($16 | 0);
     if ($58) {
      HEAP32[$53 >> 2] = $48;
      HEAP32[$56 >> 2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $72 = ($46 | 0) == (0 | 0);
   if ($72) {
    $$1 = $16;
    $$1382 = $17;
    $113 = $16;
   } else {
    $73 = $16 + 28 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = 179712 + ($74 << 2) | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = ($16 | 0) == ($76 | 0);
    do {
     if ($77) {
      HEAP32[$75 >> 2] = $$3;
      $cond421 = ($$3 | 0) == (0 | 0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[179412 >> 2] | 0;
       $81 = $80 & $79;
       HEAP32[179412 >> 2] = $81;
       $$1 = $16;
       $$1382 = $17;
       $113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[179424 >> 2] | 0;
      $83 = $46 >>> 0 < $82 >>> 0;
      if ($83) {
       _abort();
      } else {
       $84 = $46 + 16 | 0;
       $85 = HEAP32[$84 >> 2] | 0;
       $not$405 = ($85 | 0) != ($16 | 0);
       $$sink3 = $not$405 & 1;
       $86 = ($46 + 16 | 0) + ($$sink3 << 2) | 0;
       HEAP32[$86 >> 2] = $$3;
       $87 = ($$3 | 0) == (0 | 0);
       if ($87) {
        $$1 = $16;
        $$1382 = $17;
        $113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $88 = HEAP32[179424 >> 2] | 0;
    $89 = $$3 >>> 0 < $88 >>> 0;
    if ($89) {
     _abort();
    }
    $90 = $$3 + 24 | 0;
    HEAP32[$90 >> 2] = $46;
    $91 = $16 + 16 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = ($92 | 0) == (0 | 0);
    do {
     if (!$93) {
      $94 = $92 >>> 0 < $88 >>> 0;
      if ($94) {
       _abort();
      } else {
       $95 = $$3 + 16 | 0;
       HEAP32[$95 >> 2] = $92;
       $96 = $92 + 24 | 0;
       HEAP32[$96 >> 2] = $$3;
       break;
      }
     }
    } while (0);
    $97 = $91 + 4 | 0;
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = ($98 | 0) == (0 | 0);
    if ($99) {
     $$1 = $16;
     $$1382 = $17;
     $113 = $16;
    } else {
     $100 = HEAP32[179424 >> 2] | 0;
     $101 = $98 >>> 0 < $100 >>> 0;
     if ($101) {
      _abort();
     } else {
      $102 = $$3 + 20 | 0;
      HEAP32[$102 >> 2] = $98;
      $103 = $98 + 24 | 0;
      HEAP32[$103 >> 2] = $$3;
      $$1 = $16;
      $$1382 = $17;
      $113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;
   $$1382 = $9;
   $113 = $2;
  }
 } while (0);
 $112 = $113 >>> 0 < $10 >>> 0;
 if (!$112) {
  _abort();
 }
 $114 = $10 + 4 | 0;
 $115 = HEAP32[$114 >> 2] | 0;
 $116 = $115 & 1;
 $117 = ($116 | 0) == 0;
 if ($117) {
  _abort();
 }
 $118 = $115 & 2;
 $119 = ($118 | 0) == 0;
 if ($119) {
  $120 = HEAP32[179432 >> 2] | 0;
  $121 = ($10 | 0) == ($120 | 0);
  $122 = HEAP32[179428 >> 2] | 0;
  if ($121) {
   $123 = HEAP32[179420 >> 2] | 0;
   $124 = $123 + $$1382 | 0;
   HEAP32[179420 >> 2] = $124;
   HEAP32[179432 >> 2] = $$1;
   $125 = $124 | 1;
   $126 = $$1 + 4 | 0;
   HEAP32[$126 >> 2] = $125;
   $127 = ($$1 | 0) == ($122 | 0);
   if (!$127) {
    return;
   }
   HEAP32[179428 >> 2] = 0;
   HEAP32[179416 >> 2] = 0;
   return;
  }
  $128 = ($10 | 0) == ($122 | 0);
  if ($128) {
   $129 = HEAP32[179416 >> 2] | 0;
   $130 = $129 + $$1382 | 0;
   HEAP32[179416 >> 2] = $130;
   HEAP32[179428 >> 2] = $113;
   $131 = $130 | 1;
   $132 = $$1 + 4 | 0;
   HEAP32[$132 >> 2] = $131;
   $133 = $113 + $130 | 0;
   HEAP32[$133 >> 2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = $134 + $$1382 | 0;
  $136 = $115 >>> 3;
  $137 = $115 >>> 0 < 256;
  L108 : do {
   if ($137) {
    $138 = $10 + 8 | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = $10 + 12 | 0;
    $141 = HEAP32[$140 >> 2] | 0;
    $142 = $136 << 1;
    $143 = 179448 + ($142 << 2) | 0;
    $144 = ($139 | 0) == ($143 | 0);
    if (!$144) {
     $145 = HEAP32[179424 >> 2] | 0;
     $146 = $139 >>> 0 < $145 >>> 0;
     if ($146) {
      _abort();
     }
     $147 = $139 + 12 | 0;
     $148 = HEAP32[$147 >> 2] | 0;
     $149 = ($148 | 0) == ($10 | 0);
     if (!$149) {
      _abort();
     }
    }
    $150 = ($141 | 0) == ($139 | 0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[44852] | 0;
     $154 = $153 & $152;
     HEAP32[44852] = $154;
     break;
    }
    $155 = ($141 | 0) == ($143 | 0);
    if ($155) {
     $$pre442 = $141 + 8 | 0;
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[179424 >> 2] | 0;
     $157 = $141 >>> 0 < $156 >>> 0;
     if ($157) {
      _abort();
     }
     $158 = $141 + 8 | 0;
     $159 = HEAP32[$158 >> 2] | 0;
     $160 = ($159 | 0) == ($10 | 0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
     }
    }
    $161 = $139 + 12 | 0;
    HEAP32[$161 >> 2] = $141;
    HEAP32[$$pre$phi443Z2D >> 2] = $139;
   } else {
    $162 = $10 + 24 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    $164 = $10 + 12 | 0;
    $165 = HEAP32[$164 >> 2] | 0;
    $166 = ($165 | 0) == ($10 | 0);
    do {
     if ($166) {
      $177 = $10 + 16 | 0;
      $178 = $177 + 4 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      $180 = ($179 | 0) == (0 | 0);
      if ($180) {
       $181 = HEAP32[$177 >> 2] | 0;
       $182 = ($181 | 0) == (0 | 0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;
        $$1402 = $177;
       }
      } else {
       $$1398 = $179;
       $$1402 = $178;
      }
      while (1) {
       $183 = $$1398 + 20 | 0;
       $184 = HEAP32[$183 >> 2] | 0;
       $185 = ($184 | 0) == (0 | 0);
       if (!$185) {
        $$1398 = $184;
        $$1402 = $183;
        continue;
       }
       $186 = $$1398 + 16 | 0;
       $187 = HEAP32[$186 >> 2] | 0;
       $188 = ($187 | 0) == (0 | 0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;
        $$1402 = $186;
       }
      }
      $189 = HEAP32[179424 >> 2] | 0;
      $190 = $$1402 >>> 0 < $189 >>> 0;
      if ($190) {
       _abort();
      } else {
       HEAP32[$$1402 >> 2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = $10 + 8 | 0;
      $168 = HEAP32[$167 >> 2] | 0;
      $169 = HEAP32[179424 >> 2] | 0;
      $170 = $168 >>> 0 < $169 >>> 0;
      if ($170) {
       _abort();
      }
      $171 = $168 + 12 | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      $173 = ($172 | 0) == ($10 | 0);
      if (!$173) {
       _abort();
      }
      $174 = $165 + 8 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      $176 = ($175 | 0) == ($10 | 0);
      if ($176) {
       HEAP32[$171 >> 2] = $165;
       HEAP32[$174 >> 2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $191 = ($163 | 0) == (0 | 0);
    if (!$191) {
     $192 = $10 + 28 | 0;
     $193 = HEAP32[$192 >> 2] | 0;
     $194 = 179712 + ($193 << 2) | 0;
     $195 = HEAP32[$194 >> 2] | 0;
     $196 = ($10 | 0) == ($195 | 0);
     do {
      if ($196) {
       HEAP32[$194 >> 2] = $$3400;
       $cond422 = ($$3400 | 0) == (0 | 0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[179412 >> 2] | 0;
        $200 = $199 & $198;
        HEAP32[179412 >> 2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[179424 >> 2] | 0;
       $202 = $163 >>> 0 < $201 >>> 0;
       if ($202) {
        _abort();
       } else {
        $203 = $163 + 16 | 0;
        $204 = HEAP32[$203 >> 2] | 0;
        $not$ = ($204 | 0) != ($10 | 0);
        $$sink5 = $not$ & 1;
        $205 = ($163 + 16 | 0) + ($$sink5 << 2) | 0;
        HEAP32[$205 >> 2] = $$3400;
        $206 = ($$3400 | 0) == (0 | 0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $207 = HEAP32[179424 >> 2] | 0;
     $208 = $$3400 >>> 0 < $207 >>> 0;
     if ($208) {
      _abort();
     }
     $209 = $$3400 + 24 | 0;
     HEAP32[$209 >> 2] = $163;
     $210 = $10 + 16 | 0;
     $211 = HEAP32[$210 >> 2] | 0;
     $212 = ($211 | 0) == (0 | 0);
     do {
      if (!$212) {
       $213 = $211 >>> 0 < $207 >>> 0;
       if ($213) {
        _abort();
       } else {
        $214 = $$3400 + 16 | 0;
        HEAP32[$214 >> 2] = $211;
        $215 = $211 + 24 | 0;
        HEAP32[$215 >> 2] = $$3400;
        break;
       }
      }
     } while (0);
     $216 = $210 + 4 | 0;
     $217 = HEAP32[$216 >> 2] | 0;
     $218 = ($217 | 0) == (0 | 0);
     if (!$218) {
      $219 = HEAP32[179424 >> 2] | 0;
      $220 = $217 >>> 0 < $219 >>> 0;
      if ($220) {
       _abort();
      } else {
       $221 = $$3400 + 20 | 0;
       HEAP32[$221 >> 2] = $217;
       $222 = $217 + 24 | 0;
       HEAP32[$222 >> 2] = $$3400;
       break;
      }
     }
    }
   }
  } while (0);
  $223 = $135 | 1;
  $224 = $$1 + 4 | 0;
  HEAP32[$224 >> 2] = $223;
  $225 = $113 + $135 | 0;
  HEAP32[$225 >> 2] = $135;
  $226 = HEAP32[179428 >> 2] | 0;
  $227 = ($$1 | 0) == ($226 | 0);
  if ($227) {
   HEAP32[179416 >> 2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114 >> 2] = $228;
  $229 = $$1382 | 1;
  $230 = $$1 + 4 | 0;
  HEAP32[$230 >> 2] = $229;
  $231 = $113 + $$1382 | 0;
  HEAP32[$231 >> 2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = $$2 >>> 0 < 256;
 if ($233) {
  $234 = $232 << 1;
  $235 = 179448 + ($234 << 2) | 0;
  $236 = HEAP32[44852] | 0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238 | 0) == 0;
  if ($239) {
   $240 = $236 | $237;
   HEAP32[44852] = $240;
   $$pre = $235 + 8 | 0;
   $$0403 = $235;
   $$pre$phiZ2D = $$pre;
  } else {
   $241 = $235 + 8 | 0;
   $242 = HEAP32[$241 >> 2] | 0;
   $243 = HEAP32[179424 >> 2] | 0;
   $244 = $242 >>> 0 < $243 >>> 0;
   if ($244) {
    _abort();
   } else {
    $$0403 = $242;
    $$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  $245 = $$0403 + 12 | 0;
  HEAP32[$245 >> 2] = $$1;
  $246 = $$1 + 8 | 0;
  HEAP32[$246 >> 2] = $$0403;
  $247 = $$1 + 12 | 0;
  HEAP32[$247 >> 2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248 | 0) == 0;
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = $$2 >>> 0 > 16777215;
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = $248 + 1048320 | 0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = $254 + 520192 | 0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = $259 + 245760 | 0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = 14 - $263 | 0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = $264 + $266 | 0;
   $268 = $267 << 1;
   $269 = $267 + 7 | 0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = 179712 + ($$0396 << 2) | 0;
 $274 = $$1 + 28 | 0;
 HEAP32[$274 >> 2] = $$0396;
 $275 = $$1 + 16 | 0;
 $276 = $$1 + 20 | 0;
 HEAP32[$276 >> 2] = 0;
 HEAP32[$275 >> 2] = 0;
 $277 = HEAP32[179412 >> 2] | 0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279 | 0) == 0;
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[179412 >> 2] = $281;
   HEAP32[$273 >> 2] = $$1;
   $282 = $$1 + 24 | 0;
   HEAP32[$282 >> 2] = $273;
   $283 = $$1 + 12 | 0;
   HEAP32[$283 >> 2] = $$1;
   $284 = $$1 + 8 | 0;
   HEAP32[$284 >> 2] = $$1;
  } else {
   $285 = HEAP32[$273 >> 2] | 0;
   $286 = ($$0396 | 0) == 31;
   $287 = $$0396 >>> 1;
   $288 = 25 - $287 | 0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;
   $$0384 = $285;
   while (1) {
    $291 = $$0384 + 4 | 0;
    $292 = HEAP32[$291 >> 2] | 0;
    $293 = $292 & -8;
    $294 = ($293 | 0) == ($$2 | 0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = ($$0384 + 16 | 0) + ($295 << 2) | 0;
    $297 = $$0383 << 1;
    $298 = HEAP32[$296 >> 2] | 0;
    $299 = ($298 | 0) == (0 | 0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;
     $$0384 = $298;
    }
   }
   if ((label | 0) == 121) {
    $300 = HEAP32[179424 >> 2] | 0;
    $301 = $296 >>> 0 < $300 >>> 0;
    if ($301) {
     _abort();
    } else {
     HEAP32[$296 >> 2] = $$1;
     $302 = $$1 + 24 | 0;
     HEAP32[$302 >> 2] = $$0384;
     $303 = $$1 + 12 | 0;
     HEAP32[$303 >> 2] = $$1;
     $304 = $$1 + 8 | 0;
     HEAP32[$304 >> 2] = $$1;
     break;
    }
   } else if ((label | 0) == 124) {
    $305 = $$0384 + 8 | 0;
    $306 = HEAP32[$305 >> 2] | 0;
    $307 = HEAP32[179424 >> 2] | 0;
    $308 = $306 >>> 0 >= $307 >>> 0;
    $not$437 = $$0384 >>> 0 >= $307 >>> 0;
    $309 = $308 & $not$437;
    if ($309) {
     $310 = $306 + 12 | 0;
     HEAP32[$310 >> 2] = $$1;
     HEAP32[$305 >> 2] = $$1;
     $311 = $$1 + 8 | 0;
     HEAP32[$311 >> 2] = $306;
     $312 = $$1 + 12 | 0;
     HEAP32[$312 >> 2] = $$0384;
     $313 = $$1 + 24 | 0;
     HEAP32[$313 >> 2] = 0;
     break;
    } else {
     _abort();
    }
   }
  }
 } while (0);
 $314 = HEAP32[179440 >> 2] | 0;
 $315 = $314 + -1 | 0;
 HEAP32[179440 >> 2] = $315;
 $316 = ($315 | 0) == 0;
 if ($316) {
  $$0212$in$i = 179864;
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0;
  $317 = ($$0212$i | 0) == (0 | 0);
  $318 = $$0212$i + 8 | 0;
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[179440 >> 2] = -1;
 return;
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $0 + $1 | 0;
 $3 = $0 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4 & 1;
 $6 = ($5 | 0) == 0;
 L1 : do {
  if ($6) {
   $7 = HEAP32[$0 >> 2] | 0;
   $8 = $4 & 3;
   $9 = ($8 | 0) == 0;
   if ($9) {
    return;
   }
   $10 = 0 - $7 | 0;
   $11 = $0 + $10 | 0;
   $12 = $7 + $1 | 0;
   $13 = HEAP32[179424 >> 2] | 0;
   $14 = $11 >>> 0 < $13 >>> 0;
   if ($14) {
    _abort();
   }
   $15 = HEAP32[179428 >> 2] | 0;
   $16 = ($11 | 0) == ($15 | 0);
   if ($16) {
    $100 = $2 + 4 | 0;
    $101 = HEAP32[$100 >> 2] | 0;
    $102 = $101 & 3;
    $103 = ($102 | 0) == 3;
    if (!$103) {
     $$1 = $11;
     $$1418 = $12;
     break;
    }
    $104 = $11 + $12 | 0;
    $105 = $11 + 4 | 0;
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[179416 >> 2] = $12;
    HEAP32[$100 >> 2] = $107;
    HEAP32[$105 >> 2] = $106;
    HEAP32[$104 >> 2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = $7 >>> 0 < 256;
   if ($18) {
    $19 = $11 + 8 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $11 + 12 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $17 << 1;
    $24 = 179448 + ($23 << 2) | 0;
    $25 = ($20 | 0) == ($24 | 0);
    if (!$25) {
     $26 = $20 >>> 0 < $13 >>> 0;
     if ($26) {
      _abort();
     }
     $27 = $20 + 12 | 0;
     $28 = HEAP32[$27 >> 2] | 0;
     $29 = ($28 | 0) == ($11 | 0);
     if (!$29) {
      _abort();
     }
    }
    $30 = ($22 | 0) == ($20 | 0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[44852] | 0;
     $34 = $33 & $32;
     HEAP32[44852] = $34;
     $$1 = $11;
     $$1418 = $12;
     break;
    }
    $35 = ($22 | 0) == ($24 | 0);
    if ($35) {
     $$pre25 = $22 + 8 | 0;
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = $22 >>> 0 < $13 >>> 0;
     if ($36) {
      _abort();
     }
     $37 = $22 + 8 | 0;
     $38 = HEAP32[$37 >> 2] | 0;
     $39 = ($38 | 0) == ($11 | 0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
     }
    }
    $40 = $20 + 12 | 0;
    HEAP32[$40 >> 2] = $22;
    HEAP32[$$pre$phi26Z2D >> 2] = $20;
    $$1 = $11;
    $$1418 = $12;
    break;
   }
   $41 = $11 + 24 | 0;
   $42 = HEAP32[$41 >> 2] | 0;
   $43 = $11 + 12 | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   $45 = ($44 | 0) == ($11 | 0);
   do {
    if ($45) {
     $55 = $11 + 16 | 0;
     $56 = $55 + 4 | 0;
     $57 = HEAP32[$56 >> 2] | 0;
     $58 = ($57 | 0) == (0 | 0);
     if ($58) {
      $59 = HEAP32[$55 >> 2] | 0;
      $60 = ($59 | 0) == (0 | 0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;
       $$1429 = $55;
      }
     } else {
      $$1426 = $57;
      $$1429 = $56;
     }
     while (1) {
      $61 = $$1426 + 20 | 0;
      $62 = HEAP32[$61 >> 2] | 0;
      $63 = ($62 | 0) == (0 | 0);
      if (!$63) {
       $$1426 = $62;
       $$1429 = $61;
       continue;
      }
      $64 = $$1426 + 16 | 0;
      $65 = HEAP32[$64 >> 2] | 0;
      $66 = ($65 | 0) == (0 | 0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;
       $$1429 = $64;
      }
     }
     $67 = $$1429 >>> 0 < $13 >>> 0;
     if ($67) {
      _abort();
     } else {
      HEAP32[$$1429 >> 2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = $11 + 8 | 0;
     $47 = HEAP32[$46 >> 2] | 0;
     $48 = $47 >>> 0 < $13 >>> 0;
     if ($48) {
      _abort();
     }
     $49 = $47 + 12 | 0;
     $50 = HEAP32[$49 >> 2] | 0;
     $51 = ($50 | 0) == ($11 | 0);
     if (!$51) {
      _abort();
     }
     $52 = $44 + 8 | 0;
     $53 = HEAP32[$52 >> 2] | 0;
     $54 = ($53 | 0) == ($11 | 0);
     if ($54) {
      HEAP32[$49 >> 2] = $44;
      HEAP32[$52 >> 2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $68 = ($42 | 0) == (0 | 0);
   if ($68) {
    $$1 = $11;
    $$1418 = $12;
   } else {
    $69 = $11 + 28 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = 179712 + ($70 << 2) | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = ($11 | 0) == ($72 | 0);
    do {
     if ($73) {
      HEAP32[$71 >> 2] = $$3;
      $cond = ($$3 | 0) == (0 | 0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[179412 >> 2] | 0;
       $77 = $76 & $75;
       HEAP32[179412 >> 2] = $77;
       $$1 = $11;
       $$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[179424 >> 2] | 0;
      $79 = $42 >>> 0 < $78 >>> 0;
      if ($79) {
       _abort();
      } else {
       $80 = $42 + 16 | 0;
       $81 = HEAP32[$80 >> 2] | 0;
       $not$1 = ($81 | 0) != ($11 | 0);
       $$sink2 = $not$1 & 1;
       $82 = ($42 + 16 | 0) + ($$sink2 << 2) | 0;
       HEAP32[$82 >> 2] = $$3;
       $83 = ($$3 | 0) == (0 | 0);
       if ($83) {
        $$1 = $11;
        $$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $84 = HEAP32[179424 >> 2] | 0;
    $85 = $$3 >>> 0 < $84 >>> 0;
    if ($85) {
     _abort();
    }
    $86 = $$3 + 24 | 0;
    HEAP32[$86 >> 2] = $42;
    $87 = $11 + 16 | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    $89 = ($88 | 0) == (0 | 0);
    do {
     if (!$89) {
      $90 = $88 >>> 0 < $84 >>> 0;
      if ($90) {
       _abort();
      } else {
       $91 = $$3 + 16 | 0;
       HEAP32[$91 >> 2] = $88;
       $92 = $88 + 24 | 0;
       HEAP32[$92 >> 2] = $$3;
       break;
      }
     }
    } while (0);
    $93 = $87 + 4 | 0;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = ($94 | 0) == (0 | 0);
    if ($95) {
     $$1 = $11;
     $$1418 = $12;
    } else {
     $96 = HEAP32[179424 >> 2] | 0;
     $97 = $94 >>> 0 < $96 >>> 0;
     if ($97) {
      _abort();
     } else {
      $98 = $$3 + 20 | 0;
      HEAP32[$98 >> 2] = $94;
      $99 = $94 + 24 | 0;
      HEAP32[$99 >> 2] = $$3;
      $$1 = $11;
      $$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;
   $$1418 = $1;
  }
 } while (0);
 $108 = HEAP32[179424 >> 2] | 0;
 $109 = $2 >>> 0 < $108 >>> 0;
 if ($109) {
  _abort();
 }
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 $112 = $111 & 2;
 $113 = ($112 | 0) == 0;
 if ($113) {
  $114 = HEAP32[179432 >> 2] | 0;
  $115 = ($2 | 0) == ($114 | 0);
  $116 = HEAP32[179428 >> 2] | 0;
  if ($115) {
   $117 = HEAP32[179420 >> 2] | 0;
   $118 = $117 + $$1418 | 0;
   HEAP32[179420 >> 2] = $118;
   HEAP32[179432 >> 2] = $$1;
   $119 = $118 | 1;
   $120 = $$1 + 4 | 0;
   HEAP32[$120 >> 2] = $119;
   $121 = ($$1 | 0) == ($116 | 0);
   if (!$121) {
    return;
   }
   HEAP32[179428 >> 2] = 0;
   HEAP32[179416 >> 2] = 0;
   return;
  }
  $122 = ($2 | 0) == ($116 | 0);
  if ($122) {
   $123 = HEAP32[179416 >> 2] | 0;
   $124 = $123 + $$1418 | 0;
   HEAP32[179416 >> 2] = $124;
   HEAP32[179428 >> 2] = $$1;
   $125 = $124 | 1;
   $126 = $$1 + 4 | 0;
   HEAP32[$126 >> 2] = $125;
   $127 = $$1 + $124 | 0;
   HEAP32[$127 >> 2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = $128 + $$1418 | 0;
  $130 = $111 >>> 3;
  $131 = $111 >>> 0 < 256;
  L96 : do {
   if ($131) {
    $132 = $2 + 8 | 0;
    $133 = HEAP32[$132 >> 2] | 0;
    $134 = $2 + 12 | 0;
    $135 = HEAP32[$134 >> 2] | 0;
    $136 = $130 << 1;
    $137 = 179448 + ($136 << 2) | 0;
    $138 = ($133 | 0) == ($137 | 0);
    if (!$138) {
     $139 = $133 >>> 0 < $108 >>> 0;
     if ($139) {
      _abort();
     }
     $140 = $133 + 12 | 0;
     $141 = HEAP32[$140 >> 2] | 0;
     $142 = ($141 | 0) == ($2 | 0);
     if (!$142) {
      _abort();
     }
    }
    $143 = ($135 | 0) == ($133 | 0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[44852] | 0;
     $147 = $146 & $145;
     HEAP32[44852] = $147;
     break;
    }
    $148 = ($135 | 0) == ($137 | 0);
    if ($148) {
     $$pre23 = $135 + 8 | 0;
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = $135 >>> 0 < $108 >>> 0;
     if ($149) {
      _abort();
     }
     $150 = $135 + 8 | 0;
     $151 = HEAP32[$150 >> 2] | 0;
     $152 = ($151 | 0) == ($2 | 0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
     }
    }
    $153 = $133 + 12 | 0;
    HEAP32[$153 >> 2] = $135;
    HEAP32[$$pre$phi24Z2D >> 2] = $133;
   } else {
    $154 = $2 + 24 | 0;
    $155 = HEAP32[$154 >> 2] | 0;
    $156 = $2 + 12 | 0;
    $157 = HEAP32[$156 >> 2] | 0;
    $158 = ($157 | 0) == ($2 | 0);
    do {
     if ($158) {
      $168 = $2 + 16 | 0;
      $169 = $168 + 4 | 0;
      $170 = HEAP32[$169 >> 2] | 0;
      $171 = ($170 | 0) == (0 | 0);
      if ($171) {
       $172 = HEAP32[$168 >> 2] | 0;
       $173 = ($172 | 0) == (0 | 0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;
        $$1437 = $168;
       }
      } else {
       $$1433 = $170;
       $$1437 = $169;
      }
      while (1) {
       $174 = $$1433 + 20 | 0;
       $175 = HEAP32[$174 >> 2] | 0;
       $176 = ($175 | 0) == (0 | 0);
       if (!$176) {
        $$1433 = $175;
        $$1437 = $174;
        continue;
       }
       $177 = $$1433 + 16 | 0;
       $178 = HEAP32[$177 >> 2] | 0;
       $179 = ($178 | 0) == (0 | 0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;
        $$1437 = $177;
       }
      }
      $180 = $$1437 >>> 0 < $108 >>> 0;
      if ($180) {
       _abort();
      } else {
       HEAP32[$$1437 >> 2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = $2 + 8 | 0;
      $160 = HEAP32[$159 >> 2] | 0;
      $161 = $160 >>> 0 < $108 >>> 0;
      if ($161) {
       _abort();
      }
      $162 = $160 + 12 | 0;
      $163 = HEAP32[$162 >> 2] | 0;
      $164 = ($163 | 0) == ($2 | 0);
      if (!$164) {
       _abort();
      }
      $165 = $157 + 8 | 0;
      $166 = HEAP32[$165 >> 2] | 0;
      $167 = ($166 | 0) == ($2 | 0);
      if ($167) {
       HEAP32[$162 >> 2] = $157;
       HEAP32[$165 >> 2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $181 = ($155 | 0) == (0 | 0);
    if (!$181) {
     $182 = $2 + 28 | 0;
     $183 = HEAP32[$182 >> 2] | 0;
     $184 = 179712 + ($183 << 2) | 0;
     $185 = HEAP32[$184 >> 2] | 0;
     $186 = ($2 | 0) == ($185 | 0);
     do {
      if ($186) {
       HEAP32[$184 >> 2] = $$3435;
       $cond17 = ($$3435 | 0) == (0 | 0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[179412 >> 2] | 0;
        $190 = $189 & $188;
        HEAP32[179412 >> 2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[179424 >> 2] | 0;
       $192 = $155 >>> 0 < $191 >>> 0;
       if ($192) {
        _abort();
       } else {
        $193 = $155 + 16 | 0;
        $194 = HEAP32[$193 >> 2] | 0;
        $not$ = ($194 | 0) != ($2 | 0);
        $$sink4 = $not$ & 1;
        $195 = ($155 + 16 | 0) + ($$sink4 << 2) | 0;
        HEAP32[$195 >> 2] = $$3435;
        $196 = ($$3435 | 0) == (0 | 0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $197 = HEAP32[179424 >> 2] | 0;
     $198 = $$3435 >>> 0 < $197 >>> 0;
     if ($198) {
      _abort();
     }
     $199 = $$3435 + 24 | 0;
     HEAP32[$199 >> 2] = $155;
     $200 = $2 + 16 | 0;
     $201 = HEAP32[$200 >> 2] | 0;
     $202 = ($201 | 0) == (0 | 0);
     do {
      if (!$202) {
       $203 = $201 >>> 0 < $197 >>> 0;
       if ($203) {
        _abort();
       } else {
        $204 = $$3435 + 16 | 0;
        HEAP32[$204 >> 2] = $201;
        $205 = $201 + 24 | 0;
        HEAP32[$205 >> 2] = $$3435;
        break;
       }
      }
     } while (0);
     $206 = $200 + 4 | 0;
     $207 = HEAP32[$206 >> 2] | 0;
     $208 = ($207 | 0) == (0 | 0);
     if (!$208) {
      $209 = HEAP32[179424 >> 2] | 0;
      $210 = $207 >>> 0 < $209 >>> 0;
      if ($210) {
       _abort();
      } else {
       $211 = $$3435 + 20 | 0;
       HEAP32[$211 >> 2] = $207;
       $212 = $207 + 24 | 0;
       HEAP32[$212 >> 2] = $$3435;
       break;
      }
     }
    }
   }
  } while (0);
  $213 = $129 | 1;
  $214 = $$1 + 4 | 0;
  HEAP32[$214 >> 2] = $213;
  $215 = $$1 + $129 | 0;
  HEAP32[$215 >> 2] = $129;
  $216 = HEAP32[179428 >> 2] | 0;
  $217 = ($$1 | 0) == ($216 | 0);
  if ($217) {
   HEAP32[179416 >> 2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110 >> 2] = $218;
  $219 = $$1418 | 1;
  $220 = $$1 + 4 | 0;
  HEAP32[$220 >> 2] = $219;
  $221 = $$1 + $$1418 | 0;
  HEAP32[$221 >> 2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = $$2 >>> 0 < 256;
 if ($223) {
  $224 = $222 << 1;
  $225 = 179448 + ($224 << 2) | 0;
  $226 = HEAP32[44852] | 0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228 | 0) == 0;
  if ($229) {
   $230 = $226 | $227;
   HEAP32[44852] = $230;
   $$pre = $225 + 8 | 0;
   $$0438 = $225;
   $$pre$phiZ2D = $$pre;
  } else {
   $231 = $225 + 8 | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   $233 = HEAP32[179424 >> 2] | 0;
   $234 = $232 >>> 0 < $233 >>> 0;
   if ($234) {
    _abort();
   } else {
    $$0438 = $232;
    $$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  $235 = $$0438 + 12 | 0;
  HEAP32[$235 >> 2] = $$1;
  $236 = $$1 + 8 | 0;
  HEAP32[$236 >> 2] = $$0438;
  $237 = $$1 + 12 | 0;
  HEAP32[$237 >> 2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238 | 0) == 0;
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = $$2 >>> 0 > 16777215;
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = $238 + 1048320 | 0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = $244 + 520192 | 0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = $249 + 245760 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = 14 - $253 | 0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = $254 + $256 | 0;
   $258 = $257 << 1;
   $259 = $257 + 7 | 0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = 179712 + ($$0431 << 2) | 0;
 $264 = $$1 + 28 | 0;
 HEAP32[$264 >> 2] = $$0431;
 $265 = $$1 + 16 | 0;
 $266 = $$1 + 20 | 0;
 HEAP32[$266 >> 2] = 0;
 HEAP32[$265 >> 2] = 0;
 $267 = HEAP32[179412 >> 2] | 0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269 | 0) == 0;
 if ($270) {
  $271 = $267 | $268;
  HEAP32[179412 >> 2] = $271;
  HEAP32[$263 >> 2] = $$1;
  $272 = $$1 + 24 | 0;
  HEAP32[$272 >> 2] = $263;
  $273 = $$1 + 12 | 0;
  HEAP32[$273 >> 2] = $$1;
  $274 = $$1 + 8 | 0;
  HEAP32[$274 >> 2] = $$1;
  return;
 }
 $275 = HEAP32[$263 >> 2] | 0;
 $276 = ($$0431 | 0) == 31;
 $277 = $$0431 >>> 1;
 $278 = 25 - $277 | 0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;
 $$0420 = $275;
 while (1) {
  $281 = $$0420 + 4 | 0;
  $282 = HEAP32[$281 >> 2] | 0;
  $283 = $282 & -8;
  $284 = ($283 | 0) == ($$2 | 0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = ($$0420 + 16 | 0) + ($285 << 2) | 0;
  $287 = $$0419 << 1;
  $288 = HEAP32[$286 >> 2] | 0;
  $289 = ($288 | 0) == (0 | 0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;
   $$0420 = $288;
  }
 }
 if ((label | 0) == 118) {
  $290 = HEAP32[179424 >> 2] | 0;
  $291 = $286 >>> 0 < $290 >>> 0;
  if ($291) {
   _abort();
  }
  HEAP32[$286 >> 2] = $$1;
  $292 = $$1 + 24 | 0;
  HEAP32[$292 >> 2] = $$0420;
  $293 = $$1 + 12 | 0;
  HEAP32[$293 >> 2] = $$1;
  $294 = $$1 + 8 | 0;
  HEAP32[$294 >> 2] = $$1;
  return;
 } else if ((label | 0) == 121) {
  $295 = $$0420 + 8 | 0;
  $296 = HEAP32[$295 >> 2] | 0;
  $297 = HEAP32[179424 >> 2] | 0;
  $298 = $296 >>> 0 >= $297 >>> 0;
  $not$19 = $$0420 >>> 0 >= $297 >>> 0;
  $299 = $298 & $not$19;
  if (!$299) {
   _abort();
  }
  $300 = $296 + 12 | 0;
  HEAP32[$300 >> 2] = $$1;
  HEAP32[$295 >> 2] = $$1;
  $301 = $$1 + 8 | 0;
  HEAP32[$301 >> 2] = $296;
  $302 = $$1 + 12 | 0;
  HEAP32[$302 >> 2] = $$0420;
  $303 = $$1 + 24 | 0;
  HEAP32[$303 >> 2] = 0;
  return;
 }
}

function _ShowCityMap($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112 | 0;
 $$byval_copy = sp + 40 | 0;
 $2 = sp + 1088 | 0;
 $3 = sp + 64 | 0;
 $12 = sp + 56 | 0;
 $1 = $0;
 $14 = HEAP32[44294] | 0;
 $15 = _ResLoadToCon(2, 14, $14) | 0;
 $8 = $15;
 $16 = HEAP8[5257 >> 0] | 0;
 $17 = $16 & 255;
 $10 = $17;
 $18 = $1;
 $19 = $18 + 1 | 0;
 $20 = HEAP8[$19 >> 0] | 0;
 $21 = $20 & 255;
 $22 = $10;
 $23 = $22 & 65535;
 $24 = Math_imul($23, $21) | 0;
 $25 = $24 & 65535;
 $10 = $25;
 $26 = $1;
 $27 = HEAP8[$26 >> 0] | 0;
 $28 = $27 & 255;
 $29 = $10;
 $30 = $29 & 65535;
 $31 = $30 + $28 | 0;
 $32 = $31 & 65535;
 $10 = $32;
 $4 = 0;
 while (1) {
  $33 = $4;
  $34 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $35 = $34 & 65535;
  $36 = $35 - 1 | 0;
  $37 = $36 - 0 | 0;
  $38 = $37 + 1 | 0;
  $39 = ($38 | 0) / 16 & -1;
  $40 = $33 >>> 0 < $39 >>> 0;
  if (!$40) {
   break;
  }
  $41 = $4;
  $42 = 241752 + ($41 * 30 | 0) | 0;
  $43 = $8;
  $44 = $10;
  $45 = $44 & 65535;
  $46 = $43 + $45 | 0;
  $47 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $48 = $47 & 65535;
  $49 = $48 - 1 | 0;
  $50 = $49 - 0 | 0;
  $51 = $50 + 1 | 0;
  $52 = $51 + 1 | 0;
  $53 = ($52 | 0) / 16 & -1;
  $54 = $53 - 2 | 0;
  _memcpy($42 | 0, $46 | 0, $54 | 0) | 0;
  $55 = HEAP8[5257 >> 0] | 0;
  $56 = $55 & 255;
  $57 = $10;
  $58 = $57 & 65535;
  $59 = $58 + $56 | 0;
  $60 = $59 & 65535;
  $10 = $60;
  $61 = $4;
  $62 = $61 + 1 | 0;
  $4 = $62;
 }
 $63 = $1;
 $64 = $63 + 3 | 0;
 $65 = HEAP8[$64 >> 0] | 0;
 $66 = $65 & 255;
 $67 = $1;
 $68 = $67 + 1 | 0;
 $69 = HEAP8[$68 >> 0] | 0;
 $70 = $69 & 255;
 $71 = $66 - $70 | 0;
 $7 = $71;
 $72 = $1;
 $73 = $72 + 2 | 0;
 $74 = HEAP8[$73 >> 0] | 0;
 $75 = $74 & 255;
 $76 = $1;
 $77 = HEAP8[$76 >> 0] | 0;
 $78 = $77 & 255;
 $79 = $75 - $78 | 0;
 $6 = $79;
 $80 = HEAP32[44294] | 0;
 $81 = _ResLoadToCon(54, 1, $80) | 0;
 $9 = $81;
 $82 = $9;
 $83 = $82 + 7 | 0;
 $9 = $83;
 $4 = 0;
 while (1) {
  $84 = $4;
  $85 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $86 = $85 & 65535;
  $87 = $86 - 1 | 0;
  $88 = $87 - 0 | 0;
  $89 = $88 + 1 | 0;
  $90 = ($89 | 0) / 16 & -1;
  $91 = $84 >>> 0 < $90 >>> 0;
  if (!$91) {
   break;
  }
  $92 = $1;
  $93 = $92 + 1 | 0;
  $94 = HEAP8[$93 >> 0] | 0;
  $95 = $94 & 255;
  $96 = $4;
  $97 = $95 + $96 | 0;
  $98 = HEAP8[5258 >> 0] | 0;
  $99 = $98 & 255;
  $100 = $97 >>> 0 >= $99 >>> 0;
  if ($100) {
   break;
  }
  $101 = $1;
  $102 = $101 + 1 | 0;
  $103 = HEAP8[$102 >> 0] | 0;
  $104 = $103 & 255;
  $105 = $4;
  $106 = $104 + $105 | 0;
  $107 = $106 & 65535;
  $108 = $107 & 65535;
  $109 = HEAP8[5257 >> 0] | 0;
  $110 = $109 & 255;
  $111 = Math_imul($108, $110) | 0;
  $112 = $1;
  $113 = HEAP8[$112 >> 0] | 0;
  $114 = $113 & 255;
  $115 = $111 + $114 | 0;
  $116 = $115 & 65535;
  $10 = $116;
  $5 = 0;
  while (1) {
   $117 = $5;
   $118 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
   $119 = $118 & 65535;
   $120 = $119 - 1 | 0;
   $121 = $120 - 0 | 0;
   $122 = $121 + 1 | 0;
   $123 = $122 + 1 | 0;
   $124 = ($123 | 0) / 16 & -1;
   $125 = $124 - 2 | 0;
   $126 = $117 >>> 0 < $125 >>> 0;
   if (!$126) {
    break;
   }
   $127 = $1;
   $128 = HEAP8[$127 >> 0] | 0;
   $129 = $128 & 255;
   $130 = $5;
   $131 = $129 + $130 | 0;
   $132 = HEAP8[5257 >> 0] | 0;
   $133 = $132 & 255;
   $134 = $131 >>> 0 >= $133 >>> 0;
   if ($134) {
    break;
   }
   $135 = $10;
   $136 = $135 & 65535;
   $137 = $136 + 1 | 0;
   $138 = $137 & 65535;
   $139 = $5;
   $140 = $139 << 4;
   $141 = 0 + $140 | 0;
   $142 = $141 & 65535;
   $143 = $4;
   $144 = $143 << 4;
   $145 = 0 + $144 | 0;
   $146 = $145 & 65535;
   _PlcRPicShowEx(54, 0, $138, $142, $146, 0);
   $147 = $10;
   $148 = $147 & 65535;
   $149 = $148 + 1 | 0;
   $150 = $149 & 65535;
   $10 = $150;
   $151 = $5;
   $152 = $151 + 1 | 0;
   $5 = $152;
  }
  $153 = $4;
  $154 = $153 + 1 | 0;
  $4 = $154;
 }
 $4 = 0;
 while (1) {
  $155 = $4;
  $156 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $157 = $156 & 65535;
  $158 = $157 - 1 | 0;
  $159 = $158 - 0 | 0;
  $160 = $159 + 1 | 0;
  $161 = ($160 | 0) / 16 & -1;
  $162 = $155 >>> 0 < $161 >>> 0;
  if (!$162) {
   break;
  }
  $163 = $1;
  $164 = $163 + 1 | 0;
  $165 = HEAP8[$164 >> 0] | 0;
  $166 = $165 & 255;
  $167 = $4;
  $168 = $166 + $167 | 0;
  $169 = HEAP8[5258 >> 0] | 0;
  $170 = $169 & 255;
  $171 = $168 >>> 0 >= $170 >>> 0;
  if ($171) {
   break;
  }
  $5 = 0;
  while (1) {
   $172 = $5;
   $173 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
   $174 = $173 & 65535;
   $175 = $174 - 1 | 0;
   $176 = $175 - 0 | 0;
   $177 = $176 + 1 | 0;
   $178 = $177 + 1 | 0;
   $179 = ($178 | 0) / 16 & -1;
   $180 = $179 - 2 | 0;
   $181 = $172 >>> 0 < $180 >>> 0;
   if (!$181) {
    break;
   }
   $182 = $1;
   $183 = HEAP8[$182 >> 0] | 0;
   $184 = $183 & 255;
   $185 = $5;
   $186 = $184 + $185 | 0;
   $187 = HEAP8[5257 >> 0] | 0;
   $188 = $187 & 255;
   $189 = $186 >>> 0 >= $188 >>> 0;
   if ($189) {
    break;
   }
   $190 = $4;
   $191 = 241752 + ($190 * 30 | 0) | 0;
   $192 = $5;
   $193 = $191 + $192 | 0;
   $194 = HEAP8[$193 >> 0] | 0;
   $195 = $194 << 24 >> 24 != 0;
   if ($195) {
    $196 = $4;
    $197 = 241752 + ($196 * 30 | 0) | 0;
    $198 = $5;
    $199 = $197 + $198 | 0;
    $200 = HEAP8[$199 >> 0] | 0;
    $201 = $200 & 255;
    $202 = $201 - 1 | 0;
    $203 = 224276 + ($202 * 37 | 0) | 0;
    $204 = $203 + 1 | 0;
    $205 = HEAPU8[$204 >> 0] | HEAPU8[$204 + 1 >> 0] << 8;
    $206 = $205 & 65535;
    $207 = HEAPU8[186270 >> 0] | HEAPU8[186270 + 1 >> 0] << 8;
    $208 = $207 & 65535;
    $209 = $208 + 1 | 0;
    $210 = ($206 | 0) == ($209 | 0);
    do {
     if ($210) {
      $11 = 8;
     } else {
      $211 = $4;
      $212 = 241752 + ($211 * 30 | 0) | 0;
      $213 = $5;
      $214 = $212 + $213 | 0;
      $215 = HEAP8[$214 >> 0] | 0;
      $216 = $215 & 255;
      $217 = $216 - 1 | 0;
      $218 = 224276 + ($217 * 37 | 0) | 0;
      $219 = $218 + 1 | 0;
      $220 = HEAPU8[$219 >> 0] | HEAPU8[$219 + 1 >> 0] << 8;
      $221 = $220 << 16 >> 16 != 0;
      if ($221) {
       $11 = 7;
       break;
      } else {
       $11 = 0;
       break;
      }
     }
    } while (0);
    $222 = $11;
    $223 = $222 + 1 | 0;
    $224 = $223 & 65535;
    $225 = $5;
    $226 = $225 << 4;
    $227 = 0 + $226 | 0;
    $228 = $227 + 4 | 0;
    $229 = $228 & 65535;
    $230 = $4;
    $231 = $230 << 4;
    $232 = 0 + $231 | 0;
    $233 = $232 + 4 | 0;
    $234 = $233 & 65535;
    _PlcRPicShowEx(55, 0, $224, $229, $234, 0);
   }
   $235 = $5;
   $236 = $235 + 1 | 0;
   $5 = $236;
  }
  $237 = $4;
  $238 = $237 + 1 | 0;
  $4 = $238;
 }
 $239 = $1;
 $240 = HEAP8[$239 >> 0] | 0;
 $241 = $240 & 255;
 $242 = $1;
 $243 = $242 + 1 | 0;
 $244 = HEAP8[$243 >> 0] | 0;
 $245 = $244 & 255;
 $246 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $247 = $246 & 65535;
 $248 = $247 - 1 | 0;
 $249 = $248 - 0 | 0;
 $250 = $249 + 1 | 0;
 $251 = $250 + 1 | 0;
 $252 = ($251 | 0) / 16 & -1;
 $253 = $252 - 2 | 0;
 $254 = $253 & 65535;
 $255 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $256 = $255 & 65535;
 $257 = $256 - 1 | 0;
 $258 = $257 - 0 | 0;
 $259 = $258 + 1 | 0;
 $260 = ($259 | 0) / 16 & -1;
 $261 = $260 & 65535;
 _MakeRect($12, $241, $245, $254, $261);
 $262 = $1;
 $263 = $262 + 2 | 0;
 $264 = HEAP8[$263 >> 0] | 0;
 $265 = $264 & 255;
 $266 = $1;
 $267 = $266 + 3 | 0;
 $268 = HEAP8[$267 >> 0] | 0;
 $269 = $268 & 255;
 HEAP16[$$byval_copy >> 1] = HEAP16[$12 >> 1] | 0;
 HEAP16[$$byval_copy + 2 >> 1] = HEAP16[$12 + 2 >> 1] | 0;
 HEAP16[$$byval_copy + 4 >> 1] = HEAP16[$12 + 4 >> 1] | 0;
 HEAP16[$$byval_copy + 6 >> 1] = HEAP16[$12 + 6 >> 1] | 0;
 $270 = _touchIsPointInRect($265, $269, $$byval_copy) | 0;
 $13 = $270;
 $271 = $13;
 $272 = $271 << 24 >> 24 != 0;
 if ($272) {
  $273 = $6;
  $274 = $273 << 4;
  $275 = 0 + $274 | 0;
  $276 = $275 + 4 | 0;
  $277 = $276 & 65535;
  $278 = $7;
  $279 = $278 << 4;
  $280 = 0 + $279 | 0;
  $281 = $280 + 8 | 0;
  $282 = $281 & 65535;
  _PlcRPicShowEx(56, 0, 1, $277, $282, 0);
 }
 $283 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $284 = $283 & 65535;
 $285 = $284 - 1 | 0;
 $286 = $285 - 0 | 0;
 $287 = $286 + 1 | 0;
 $288 = $287 + 1 | 0;
 $289 = ($288 | 0) / 16 & -1;
 $290 = $289 - 2 | 0;
 $291 = $290 << 4;
 $292 = 0 + $291 | 0;
 $293 = $292 & 65535;
 $294 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $295 = $294 & 65535;
 $296 = $295 - 1 | 0;
 $297 = $296 & 65535;
 $298 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $299 = $298 & 65535;
 $300 = $299 - 1 | 0;
 $301 = $300 & 65535;
 $302 = HEAP32[44297] | 0;
 _GamClearScreenV($293, 0, $297, $301, $302);
 $303 = HEAP8[186275] | 0;
 $304 = $303 & 255;
 $305 = 47 + $304 | 0;
 $306 = $305 & 65535;
 $307 = HEAPU8[186270 >> 0] | HEAPU8[186270 + 1 >> 0] << 8;
 $308 = $307 & 65535;
 $309 = $308 + 1 | 0;
 $310 = $309 & 65535;
 $311 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $312 = $311 & 65535;
 $313 = $312 - 1 | 0;
 $314 = $313 - 0 | 0;
 $315 = $314 + 1 | 0;
 $316 = $315 + 1 | 0;
 $317 = ($316 | 0) / 16 & -1;
 $318 = $317 - 2 | 0;
 $319 = $318 << 4;
 $320 = 0 + $319 | 0;
 $321 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $322 = $321 & 65535;
 $323 = $322 - 1 | 0;
 $324 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $325 = $324 & 65535;
 $326 = $325 - 1 | 0;
 $327 = $326 - 0 | 0;
 $328 = $327 + 1 | 0;
 $329 = $328 + 1 | 0;
 $330 = ($329 | 0) / 16 & -1;
 $331 = $330 - 2 | 0;
 $332 = $331 << 4;
 $333 = 0 + $332 | 0;
 $334 = $323 - $333 | 0;
 $335 = $334 - 24 | 0;
 $336 = ($335 | 0) / 2 & -1;
 $337 = $320 + $336 | 0;
 $338 = $337 & 65535;
 _PlcRPicShowEx($306, 0, $310, $338, 4, 0);
 $339 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $340 = $339 & 65535;
 $341 = $340 - 1 | 0;
 $342 = $341 - 0 | 0;
 $343 = $342 + 1 | 0;
 $344 = $343 + 1 | 0;
 $345 = ($344 | 0) / 16 & -1;
 $346 = $345 - 2 | 0;
 $347 = $346 << 4;
 $348 = 0 + $347 | 0;
 $349 = $348 + 2 | 0;
 $350 = $349 & 65535;
 _PlcRPicShowEx(69, 0, 2, $350, 33, 0);
 $351 = HEAPU8[186270 >> 0] | HEAPU8[186270 + 1 >> 0] << 8;
 $352 = _GetKingCitys($351, $2) | 0;
 $353 = $352 & 255;
 $11 = $353;
 $354 = $11;
 _itoa($354, $2, 10) | 0;
 $355 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $356 = $355 & 65535;
 $357 = $356 - 1 | 0;
 $358 = $357 - 0 | 0;
 $359 = $358 + 1 | 0;
 $360 = $359 + 1 | 0;
 $361 = ($360 | 0) / 16 & -1;
 $362 = $361 - 2 | 0;
 $363 = $362 << 4;
 $364 = 0 + $363 | 0;
 $365 = $364 + 2 | 0;
 $366 = $365 + 10 | 0;
 $367 = $366 & 65535;
 $368 = HEAP32[44297] | 0;
 _GamStrShowV($367, 33, $2, $368) | 0;
 $369 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $370 = $369 & 65535;
 $371 = $370 - 1 | 0;
 $372 = $371 - 0 | 0;
 $373 = $372 + 1 | 0;
 $374 = $373 + 1 | 0;
 $375 = ($374 | 0) / 16 & -1;
 $376 = $375 - 2 | 0;
 $377 = $376 << 4;
 $378 = 0 + $377 | 0;
 $379 = $378 + 2 | 0;
 $380 = $379 & 65535;
 _PlcRPicShowEx(69, 0, 1, $380, 47, 0);
 $381 = HEAPU8[186270 >> 0] | HEAPU8[186270 + 1 >> 0] << 8;
 $382 = _GetPersonsCount($381) | 0;
 $11 = $382;
 $383 = $11;
 _itoa($383, $2, 10) | 0;
 $384 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $385 = $384 & 65535;
 $386 = $385 - 1 | 0;
 $387 = $386 - 0 | 0;
 $388 = $387 + 1 | 0;
 $389 = $388 + 1 | 0;
 $390 = ($389 | 0) / 16 & -1;
 $391 = $390 - 2 | 0;
 $392 = $391 << 4;
 $393 = 0 + $392 | 0;
 $394 = $393 + 2 | 0;
 $395 = $394 + 10 | 0;
 $396 = $395 & 65535;
 $397 = HEAP32[44297] | 0;
 _GamStrShowV($396, 45, $2, $397) | 0;
 $398 = HEAPU8[186272 >> 0] | HEAPU8[186272 + 1 >> 0] << 8;
 $399 = $398 & 65535;
 _itoa($399, $2, 10) | 0;
 _ResLoadToMem(64, 63, $3) | 0;
 _strcat($2, $3) | 0;
 $400 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $401 = $400 & 65535;
 $402 = $401 - 1 | 0;
 $403 = $402 - 0 | 0;
 $404 = $403 + 1 | 0;
 $405 = $404 + 1 | 0;
 $406 = ($405 | 0) / 16 & -1;
 $407 = $406 - 2 | 0;
 $408 = $407 << 4;
 $409 = 0 + $408 | 0;
 $410 = $409 + 1 | 0;
 $411 = $410 & 65535;
 $412 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $413 = $412 & 65535;
 $414 = $413 - 1 | 0;
 $415 = $414 - 12 | 0;
 $416 = $415 - 12 | 0;
 $417 = $416 - 12 | 0;
 $418 = $417 - 1 | 0;
 $419 = $418 & 65535;
 $420 = HEAP32[44297] | 0;
 _GamStrShowV($411, $419, $2, $420) | 0;
 $421 = HEAP8[186274] | 0;
 $422 = $421 & 255;
 _itoa($422, $2, 10) | 0;
 _ResLoadToMem(64, 64, $3) | 0;
 _strcat($2, $3) | 0;
 $423 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $424 = $423 & 65535;
 $425 = $424 - 1 | 0;
 $426 = $425 - 0 | 0;
 $427 = $426 + 1 | 0;
 $428 = $427 + 1 | 0;
 $429 = ($428 | 0) / 16 & -1;
 $430 = $429 - 2 | 0;
 $431 = $430 << 4;
 $432 = 0 + $431 | 0;
 $433 = $432 + 1 | 0;
 $434 = $433 & 65535;
 $435 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $436 = $435 & 65535;
 $437 = $436 - 1 | 0;
 $438 = $437 - 12 | 0;
 $439 = $438 - 12 | 0;
 $440 = $439 - 1 | 0;
 $441 = $440 & 65535;
 $442 = HEAP32[44297] | 0;
 _GamStrShowV($434, $441, $2, $442) | 0;
 $443 = $13;
 $444 = $443 & 255;
 $445 = ($444 | 0) != 0;
 if ($445) {
  $446 = $7;
  $447 = 241752 + ($446 * 30 | 0) | 0;
  $448 = $6;
  $449 = $447 + $448 | 0;
  $450 = HEAP8[$449 >> 0] | 0;
  $451 = $450 & 255;
  $452 = ($451 | 0) != 0;
  if ($452) {
   $453 = $7;
   $454 = 241752 + ($453 * 30 | 0) | 0;
   $455 = $6;
   $456 = $454 + $455 | 0;
   $457 = HEAP8[$456 >> 0] | 0;
   $458 = $457 & 255;
   $459 = $458 - 1 | 0;
   $460 = $459 & 255;
   _GetCityName($460, $3);
   $461 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
   $462 = $461 & 65535;
   $463 = $462 - 1 | 0;
   $464 = $463 - 0 | 0;
   $465 = $464 + 1 | 0;
   $466 = $465 + 1 | 0;
   $467 = ($466 | 0) / 16 & -1;
   $468 = $467 - 2 | 0;
   $469 = $468 << 4;
   $470 = 0 + $469 | 0;
   $471 = $470 + 2 | 0;
   $472 = $471 & 65535;
   $473 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
   $474 = $473 & 65535;
   $475 = $474 - 1 | 0;
   $476 = $475 - 12 | 0;
   $477 = $476 - 1 | 0;
   $478 = $477 & 65535;
   $479 = HEAP32[44297] | 0;
   _GamStrShowV($472, $478, $3, $479) | 0;
  }
 }
 _ShowMapClear();
 $480 = $13;
 $481 = $480 & 255;
 $482 = ($481 | 0) != 0;
 if (!$482) {
  $490 = 0;
  $489 = $490 & 255;
  STACKTOP = sp;
  return $489 | 0;
 }
 $483 = $7;
 $484 = 241752 + ($483 * 30 | 0) | 0;
 $485 = $6;
 $486 = $484 + $485 | 0;
 $487 = HEAP8[$486 >> 0] | 0;
 $488 = $487 & 255;
 $490 = $488;
 $489 = $490 & 255;
 STACKTOP = sp;
 return $489 | 0;
}

function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $5 = $1 >>> 0 > 36;
 L1 : do {
  if ($5) {
   $8 = ___errno_location() | 0;
   HEAP32[$8 >> 2] = 22;
   $289 = 0;
   $290 = 0;
  } else {
   $6 = $0 + 4 | 0;
   $7 = $0 + 100 | 0;
   while (1) {
    $9 = HEAP32[$6 >> 2] | 0;
    $10 = HEAP32[$7 >> 2] | 0;
    $11 = $9 >>> 0 < $10 >>> 0;
    if ($11) {
     $12 = $9 + 1 | 0;
     HEAP32[$6 >> 2] = $12;
     $13 = HEAP8[$9 >> 0] | 0;
     $14 = $13 & 255;
     $16 = $14;
    } else {
     $15 = ___shgetc($0) | 0;
     $16 = $15;
    }
    $17 = _isspace($16) | 0;
    $18 = ($17 | 0) == 0;
    if ($18) {
     break;
    }
   }
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $19 = ($16 | 0) == 45;
      $20 = $19 << 31 >> 31;
      $21 = HEAP32[$6 >> 2] | 0;
      $22 = HEAP32[$7 >> 2] | 0;
      $23 = $21 >>> 0 < $22 >>> 0;
      if ($23) {
       $24 = $21 + 1 | 0;
       HEAP32[$6 >> 2] = $24;
       $25 = HEAP8[$21 >> 0] | 0;
       $26 = $25 & 255;
       $$0157 = $20;
       $$0159 = $26;
       break L11;
      } else {
       $27 = ___shgetc($0) | 0;
       $$0157 = $20;
       $$0159 = $27;
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0;
      $$0159 = $16;
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0;
   $29 = $1 | 16;
   $30 = ($29 | 0) == 16;
   $31 = ($$0159 | 0) == 48;
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6 >> 2] | 0;
     $33 = HEAP32[$7 >> 2] | 0;
     $34 = $32 >>> 0 < $33 >>> 0;
     if ($34) {
      $35 = $32 + 1 | 0;
      HEAP32[$6 >> 2] = $35;
      $36 = HEAP8[$32 >> 0] | 0;
      $37 = $36 & 255;
      $40 = $37;
     } else {
      $38 = ___shgetc($0) | 0;
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39 | 0) == 120;
     if (!$41) {
      if ($28) {
       $$1160169 = $40;
       $$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;
       $$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0;
     $43 = HEAP32[$7 >> 2] | 0;
     $44 = $42 >>> 0 < $43 >>> 0;
     if ($44) {
      $45 = $42 + 1 | 0;
      HEAP32[$6 >> 2] = $45;
      $46 = HEAP8[$42 >> 0] | 0;
      $47 = $46 & 255;
      $50 = $47;
     } else {
      $48 = ___shgetc($0) | 0;
      $50 = $48;
     }
     $49 = 174467 + $50 | 0;
     $51 = HEAP8[$49 >> 0] | 0;
     $52 = ($51 & 255) > 15;
     if ($52) {
      $53 = HEAP32[$7 >> 2] | 0;
      $54 = ($53 | 0) != (0 | 0);
      if ($54) {
       $55 = HEAP32[$6 >> 2] | 0;
       $56 = $55 + -1 | 0;
       HEAP32[$6 >> 2] = $56;
      }
      $57 = ($2 | 0) == 0;
      if ($57) {
       ___shlim($0, 0);
       $289 = 0;
       $290 = 0;
       break L1;
      }
      if (!$54) {
       $289 = 0;
       $290 = 0;
       break L1;
      }
      $58 = HEAP32[$6 >> 2] | 0;
      $59 = $58 + -1 | 0;
      HEAP32[$6 >> 2] = $59;
      $289 = 0;
      $290 = 0;
      break L1;
     } else {
      $$1160169 = $50;
      $$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = 174467 + $$0159 | 0;
     $61 = HEAP8[$60 >> 0] | 0;
     $62 = $61 & 255;
     $63 = $62 >>> 0 < $$166 >>> 0;
     if ($63) {
      $$1160 = $$0159;
      $$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7 >> 2] | 0;
      $65 = ($64 | 0) == (0 | 0);
      if (!$65) {
       $66 = HEAP32[$6 >> 2] | 0;
       $67 = $66 + -1 | 0;
       HEAP32[$6 >> 2] = $67;
      }
      ___shlim($0, 0);
      $68 = ___errno_location() | 0;
      HEAP32[$68 >> 2] = 22;
      $289 = 0;
      $290 = 0;
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     $69 = ($$1165 | 0) == 10;
     if ($69) {
      $70 = $$1160 + -48 | 0;
      $71 = $70 >>> 0 < 10;
      if ($71) {
       $$0154222 = 0;
       $74 = $70;
       while (1) {
        $72 = $$0154222 * 10 | 0;
        $73 = $72 + $74 | 0;
        $75 = HEAP32[$6 >> 2] | 0;
        $76 = HEAP32[$7 >> 2] | 0;
        $77 = $75 >>> 0 < $76 >>> 0;
        if ($77) {
         $78 = $75 + 1 | 0;
         HEAP32[$6 >> 2] = $78;
         $79 = HEAP8[$75 >> 0] | 0;
         $80 = $79 & 255;
         $$2161$be = $80;
        } else {
         $81 = ___shgetc($0) | 0;
         $$2161$be = $81;
        }
        $82 = $$2161$be + -48 | 0;
        $83 = $82 >>> 0 < 10;
        $84 = $73 >>> 0 < 429496729;
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;
         $74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;
       $291 = $73;
       $292 = 0;
      } else {
       $$2161$lcssa = $$1160;
       $291 = 0;
       $292 = 0;
      }
      $86 = $$2161$lcssa + -48 | 0;
      $87 = $86 >>> 0 < 10;
      if ($87) {
       $$3162215 = $$2161$lcssa;
       $88 = $291;
       $89 = $292;
       $93 = $86;
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0;
        $91 = tempRet0;
        $92 = ($93 | 0) < 0;
        $94 = $92 << 31 >> 31;
        $95 = $93 ^ -1;
        $96 = $94 ^ -1;
        $97 = $91 >>> 0 > $96 >>> 0;
        $98 = $90 >>> 0 > $95 >>> 0;
        $99 = ($91 | 0) == ($96 | 0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165167 = 10;
         $$8 = $$3162215;
         $293 = $88;
         $294 = $89;
         label = 72;
         break L43;
        }
        $102 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0;
        $103 = tempRet0;
        $104 = HEAP32[$6 >> 2] | 0;
        $105 = HEAP32[$7 >> 2] | 0;
        $106 = $104 >>> 0 < $105 >>> 0;
        if ($106) {
         $107 = $104 + 1 | 0;
         HEAP32[$6 >> 2] = $107;
         $108 = HEAP8[$104 >> 0] | 0;
         $109 = $108 & 255;
         $$3162$be = $109;
        } else {
         $110 = ___shgetc($0) | 0;
         $$3162$be = $110;
        }
        $111 = $$3162$be + -48 | 0;
        $112 = $111 >>> 0 < 10;
        $113 = $103 >>> 0 < 429496729;
        $114 = $102 >>> 0 < 2576980378;
        $115 = ($103 | 0) == 429496729;
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;
         $88 = $102;
         $89 = $103;
         $93 = $111;
        } else {
         break;
        }
       }
       $118 = $111 >>> 0 > 9;
       if ($118) {
        $$1158 = $$0157;
        $263 = $103;
        $265 = $102;
       } else {
        $$1165167 = 10;
        $$8 = $$3162$be;
        $293 = $102;
        $294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;
       $263 = $292;
       $265 = $291;
      }
     } else {
      $$1160169 = $$1160;
      $$1165168 = $$1165;
      label = 46;
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     $119 = $$1165168 + -1 | 0;
     $120 = $119 & $$1165168;
     $121 = ($120 | 0) == 0;
     if ($121) {
      $126 = $$1165168 * 23 | 0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = 174723 + $128 | 0;
      $130 = HEAP8[$129 >> 0] | 0;
      $131 = $130 << 24 >> 24;
      $132 = 174467 + $$1160169 | 0;
      $133 = HEAP8[$132 >> 0] | 0;
      $134 = $133 & 255;
      $135 = $134 >>> 0 < $$1165168 >>> 0;
      if ($135) {
       $$1155192 = 0;
       $138 = $134;
       while (1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6 >> 2] | 0;
        $140 = HEAP32[$7 >> 2] | 0;
        $141 = $139 >>> 0 < $140 >>> 0;
        if ($141) {
         $142 = $139 + 1 | 0;
         HEAP32[$6 >> 2] = $142;
         $143 = HEAP8[$139 >> 0] | 0;
         $144 = $143 & 255;
         $$4163$be = $144;
        } else {
         $145 = ___shgetc($0) | 0;
         $$4163$be = $145;
        }
        $146 = 174467 + $$4163$be | 0;
        $147 = HEAP8[$146 >> 0] | 0;
        $148 = $147 & 255;
        $149 = $148 >>> 0 < $$1165168 >>> 0;
        $150 = $137 >>> 0 < 134217728;
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;
         $138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;
       $155 = $147;
       $158 = 0;
       $160 = $137;
      } else {
       $$4163$lcssa = $$1160169;
       $155 = $133;
       $158 = 0;
       $160 = 0;
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0;
      $153 = tempRet0;
      $154 = $155 & 255;
      $156 = $154 >>> 0 >= $$1165168 >>> 0;
      $157 = $158 >>> 0 > $153 >>> 0;
      $159 = $160 >>> 0 > $152 >>> 0;
      $161 = ($158 | 0) == ($153 | 0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165167 = $$1165168;
       $$8 = $$4163$lcssa;
       $293 = $160;
       $294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;
       $165 = $158;
       $169 = $155;
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0;
       $167 = tempRet0;
       $168 = $169 & 255;
       $170 = $168 | $166;
       $171 = HEAP32[$6 >> 2] | 0;
       $172 = HEAP32[$7 >> 2] | 0;
       $173 = $171 >>> 0 < $172 >>> 0;
       if ($173) {
        $174 = $171 + 1 | 0;
        HEAP32[$6 >> 2] = $174;
        $175 = HEAP8[$171 >> 0] | 0;
        $176 = $175 & 255;
        $$5$be = $176;
       } else {
        $177 = ___shgetc($0) | 0;
        $$5$be = $177;
       }
       $178 = 174467 + $$5$be | 0;
       $179 = HEAP8[$178 >> 0] | 0;
       $180 = $179 & 255;
       $181 = $180 >>> 0 >= $$1165168 >>> 0;
       $182 = $167 >>> 0 > $153 >>> 0;
       $183 = $170 >>> 0 > $152 >>> 0;
       $184 = ($167 | 0) == ($153 | 0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;
        $$8 = $$5$be;
        $293 = $170;
        $294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;
        $165 = $167;
        $169 = $179;
       }
      }
     }
     $122 = 174467 + $$1160169 | 0;
     $123 = HEAP8[$122 >> 0] | 0;
     $124 = $123 & 255;
     $125 = $124 >>> 0 < $$1165168 >>> 0;
     if ($125) {
      $$2156210 = 0;
      $189 = $124;
      while (1) {
       $187 = Math_imul($$2156210, $$1165168) | 0;
       $188 = $189 + $187 | 0;
       $190 = HEAP32[$6 >> 2] | 0;
       $191 = HEAP32[$7 >> 2] | 0;
       $192 = $190 >>> 0 < $191 >>> 0;
       if ($192) {
        $193 = $190 + 1 | 0;
        HEAP32[$6 >> 2] = $193;
        $194 = HEAP8[$190 >> 0] | 0;
        $195 = $194 & 255;
        $$6$be = $195;
       } else {
        $196 = ___shgetc($0) | 0;
        $$6$be = $196;
       }
       $197 = 174467 + $$6$be | 0;
       $198 = HEAP8[$197 >> 0] | 0;
       $199 = $198 & 255;
       $200 = $199 >>> 0 < $$1165168 >>> 0;
       $201 = $188 >>> 0 < 119304647;
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;
        $189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;
      $204 = $198;
      $295 = $188;
      $296 = 0;
     } else {
      $$6$lcssa = $$1160169;
      $204 = $123;
      $295 = 0;
      $296 = 0;
     }
     $203 = $204 & 255;
     $205 = $203 >>> 0 < $$1165168 >>> 0;
     if ($205) {
      $206 = ___udivdi3(-1, -1, $$1165168 | 0, 0) | 0;
      $207 = tempRet0;
      $$7198 = $$6$lcssa;
      $209 = $296;
      $211 = $295;
      $218 = $204;
      while (1) {
       $208 = $209 >>> 0 > $207 >>> 0;
       $210 = $211 >>> 0 > $206 >>> 0;
       $212 = ($209 | 0) == ($207 | 0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165167 = $$1165168;
        $$8 = $$7198;
        $293 = $211;
        $294 = $209;
        label = 72;
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165168 | 0, 0) | 0;
       $216 = tempRet0;
       $217 = $218 & 255;
       $219 = $217 ^ -1;
       $220 = $216 >>> 0 > 4294967295;
       $221 = $215 >>> 0 > $219 >>> 0;
       $222 = ($216 | 0) == -1;
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;
        $$8 = $$7198;
        $293 = $211;
        $294 = $209;
        label = 72;
        break L63;
       }
       $225 = _i64Add($217 | 0, 0, $215 | 0, $216 | 0) | 0;
       $226 = tempRet0;
       $227 = HEAP32[$6 >> 2] | 0;
       $228 = HEAP32[$7 >> 2] | 0;
       $229 = $227 >>> 0 < $228 >>> 0;
       if ($229) {
        $230 = $227 + 1 | 0;
        HEAP32[$6 >> 2] = $230;
        $231 = HEAP8[$227 >> 0] | 0;
        $232 = $231 & 255;
        $$7$be = $232;
       } else {
        $233 = ___shgetc($0) | 0;
        $$7$be = $233;
       }
       $234 = 174467 + $$7$be | 0;
       $235 = HEAP8[$234 >> 0] | 0;
       $236 = $235 & 255;
       $237 = $236 >>> 0 < $$1165168 >>> 0;
       if ($237) {
        $$7198 = $$7$be;
        $209 = $226;
        $211 = $225;
        $218 = $235;
       } else {
        $$1165167 = $$1165168;
        $$8 = $$7$be;
        $293 = $225;
        $294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;
      $$8 = $$6$lcssa;
      $293 = $295;
      $294 = $296;
      label = 72;
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    $238 = 174467 + $$8 | 0;
    $239 = HEAP8[$238 >> 0] | 0;
    $240 = $239 & 255;
    $241 = $240 >>> 0 < $$1165167 >>> 0;
    if ($241) {
     while (1) {
      $242 = HEAP32[$6 >> 2] | 0;
      $243 = HEAP32[$7 >> 2] | 0;
      $244 = $242 >>> 0 < $243 >>> 0;
      if ($244) {
       $245 = $242 + 1 | 0;
       HEAP32[$6 >> 2] = $245;
       $246 = HEAP8[$242 >> 0] | 0;
       $247 = $246 & 255;
       $$9$be = $247;
      } else {
       $248 = ___shgetc($0) | 0;
       $$9$be = $248;
      }
      $249 = 174467 + $$9$be | 0;
      $250 = HEAP8[$249 >> 0] | 0;
      $251 = $250 & 255;
      $252 = $251 >>> 0 < $$1165167 >>> 0;
      if (!$252) {
       break;
      }
     }
     $253 = ___errno_location() | 0;
     HEAP32[$253 >> 2] = 34;
     $254 = $3 & 1;
     $255 = ($254 | 0) == 0;
     $256 = 0 == 0;
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;
     $263 = $4;
     $265 = $3;
    } else {
     $$1158 = $$0157;
     $263 = $294;
     $265 = $293;
    }
   }
   $258 = HEAP32[$7 >> 2] | 0;
   $259 = ($258 | 0) == (0 | 0);
   if (!$259) {
    $260 = HEAP32[$6 >> 2] | 0;
    $261 = $260 + -1 | 0;
    HEAP32[$6 >> 2] = $261;
   }
   $262 = $263 >>> 0 < $4 >>> 0;
   $264 = $265 >>> 0 < $3 >>> 0;
   $266 = ($263 | 0) == ($4 | 0);
   $267 = $266 & $264;
   $268 = $262 | $267;
   if (!$268) {
    $269 = $3 & 1;
    $270 = ($269 | 0) != 0;
    $271 = 0 != 0;
    $272 = $270 | $271;
    $273 = ($$1158 | 0) != 0;
    $or$cond12 = $272 | $273;
    if (!$or$cond12) {
     $274 = ___errno_location() | 0;
     HEAP32[$274 >> 2] = 34;
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0;
     $276 = tempRet0;
     $289 = $276;
     $290 = $275;
     break;
    }
    $277 = $263 >>> 0 > $4 >>> 0;
    $278 = $265 >>> 0 > $3 >>> 0;
    $279 = ($263 | 0) == ($4 | 0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = ___errno_location() | 0;
     HEAP32[$282 >> 2] = 34;
     $289 = $4;
     $290 = $3;
     break;
    }
   }
   $283 = ($$1158 | 0) < 0;
   $284 = $283 << 31 >> 31;
   $285 = $265 ^ $$1158;
   $286 = $263 ^ $284;
   $287 = _i64Subtract($285 | 0, $286 | 0, $$1158 | 0, $284 | 0) | 0;
   $288 = tempRet0;
   $289 = $288;
   $290 = $287;
  }
 } while (0);
 tempRet0 = $289;
 return $290 | 0;
}

function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond206 = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0 + 100 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $6 >>> 0 < $8 >>> 0;
 if ($9) {
  $10 = $6 + 1 | 0;
  HEAP32[$5 >> 2] = $10;
  $11 = HEAP8[$6 >> 0] | 0;
  $12 = $11 & 255;
  $$0 = $12;
  $$0142 = 0;
 } else {
  $13 = ___shgetc($0) | 0;
  $$0 = $13;
  $$0142 = 0;
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8;
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0;
    $$0148 = 0;
    $$0152 = 1.0;
    $$0155 = 0.0;
    $$0159 = 0;
    $$2 = $$0;
    $$2144 = $$0142;
    $101 = 0;
    $53 = 0;
    $55 = 0;
    $99 = 0;
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0;
  $15 = HEAP32[$7 >> 2] | 0;
  $16 = $14 >>> 0 < $15 >>> 0;
  if ($16) {
   $17 = $14 + 1 | 0;
   HEAP32[$5 >> 2] = $17;
   $18 = HEAP8[$14 >> 0] | 0;
   $19 = $18 & 255;
   $$0 = $19;
   $$0142 = 1;
   continue;
  } else {
   $20 = ___shgetc($0) | 0;
   $$0 = $20;
   $$0142 = 1;
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0;
  $22 = HEAP32[$7 >> 2] | 0;
  $23 = $21 >>> 0 < $22 >>> 0;
  if ($23) {
   $24 = $21 + 1 | 0;
   HEAP32[$5 >> 2] = $24;
   $25 = HEAP8[$21 >> 0] | 0;
   $26 = $25 & 255;
   $$1$ph = $26;
  } else {
   $27 = ___shgetc($0) | 0;
   $$1$ph = $27;
  }
  $28 = ($$1$ph | 0) == 48;
  if ($28) {
   $36 = 0;
   $37 = 0;
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0;
    $30 = HEAP32[$7 >> 2] | 0;
    $31 = $29 >>> 0 < $30 >>> 0;
    if ($31) {
     $32 = $29 + 1 | 0;
     HEAP32[$5 >> 2] = $32;
     $33 = HEAP8[$29 >> 0] | 0;
     $34 = $33 & 255;
     $41 = $34;
    } else {
     $35 = ___shgetc($0) | 0;
     $41 = $35;
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0;
    $39 = tempRet0;
    $40 = ($41 | 0) == 48;
    if ($40) {
     $36 = $38;
     $37 = $39;
    } else {
     $$0146 = 1;
     $$0148 = 0;
     $$0152 = 1.0;
     $$0155 = 0.0;
     $$0159 = 0;
     $$2 = $41;
     $$2144 = 1;
     $101 = $39;
     $53 = 0;
     $55 = 0;
     $99 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;
   $$0148 = 0;
   $$0152 = 1.0;
   $$0155 = 0.0;
   $$0159 = 0;
   $$2 = $$1$ph;
   $$2144 = $$0142;
   $101 = 0;
   $53 = 0;
   $55 = 0;
   $99 = 0;
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0;
  $43 = $42 >>> 0 < 10;
  $44 = ($$2 | 0) == 46;
  if (!$43) {
   $45 = $$2 | 32;
   $46 = $45 + -97 | 0;
   $47 = $46 >>> 0 < 6;
   $or$cond6 = $44 | $47;
   if (!$or$cond6) {
    $$2$lcssa = $$2;
    break;
   }
  }
  if ($44) {
   $48 = ($$0146 | 0) == 0;
   if ($48) {
    $$1147 = 1;
    $$2150 = $$0148;
    $$2154 = $$0152;
    $$2157 = $$0155;
    $$2161 = $$0159;
    $$3145 = $$2144;
    $214 = $55;
    $215 = $53;
    $216 = $55;
    $217 = $53;
   } else {
    $$2$lcssa = 46;
    break;
   }
  } else {
   $49 = ($$2 | 0) > 57;
   $50 = $$2 | 32;
   $51 = $50 + -87 | 0;
   $$0133 = $49 ? $51 : $42;
   $52 = ($53 | 0) < 0;
   $54 = $55 >>> 0 < 8;
   $56 = ($53 | 0) == 0;
   $57 = $56 & $54;
   $58 = $52 | $57;
   do {
    if ($58) {
     $59 = $$0159 << 4;
     $60 = $$0133 + $59 | 0;
     $$1149 = $$0148;
     $$1153 = $$0152;
     $$1156 = $$0155;
     $$1160 = $60;
    } else {
     $61 = ($53 | 0) < 0;
     $62 = $55 >>> 0 < 14;
     $63 = ($53 | 0) == 0;
     $64 = $63 & $62;
     $65 = $61 | $64;
     if ($65) {
      $66 = +($$0133 | 0);
      $67 = $$0152 * .0625;
      $68 = $67 * $66;
      $69 = $$0155 + $68;
      $$1149 = $$0148;
      $$1153 = $67;
      $$1156 = $69;
      $$1160 = $$0159;
      break;
     } else {
      $70 = ($$0133 | 0) == 0;
      $71 = ($$0148 | 0) != 0;
      $or$cond = $71 | $70;
      $72 = $$0152 * .5;
      $73 = $$0155 + $72;
      $$0155$ = $or$cond ? $$0155 : $73;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;
      $$1153 = $$0152;
      $$1156 = $$0155$;
      $$1160 = $$0159;
      break;
     }
    }
   } while (0);
   $74 = _i64Add($55 | 0, $53 | 0, 1, 0) | 0;
   $75 = tempRet0;
   $$1147 = $$0146;
   $$2150 = $$1149;
   $$2154 = $$1153;
   $$2157 = $$1156;
   $$2161 = $$1160;
   $$3145 = 1;
   $214 = $99;
   $215 = $101;
   $216 = $74;
   $217 = $75;
  }
  $76 = HEAP32[$5 >> 2] | 0;
  $77 = HEAP32[$7 >> 2] | 0;
  $78 = $76 >>> 0 < $77 >>> 0;
  if ($78) {
   $79 = $76 + 1 | 0;
   HEAP32[$5 >> 2] = $79;
   $80 = HEAP8[$76 >> 0] | 0;
   $81 = $80 & 255;
   $$0146 = $$1147;
   $$0148 = $$2150;
   $$0152 = $$2154;
   $$0155 = $$2157;
   $$0159 = $$2161;
   $$2 = $81;
   $$2144 = $$3145;
   $101 = $215;
   $53 = $217;
   $55 = $216;
   $99 = $214;
   continue;
  } else {
   $82 = ___shgetc($0) | 0;
   $$0146 = $$1147;
   $$0148 = $$2150;
   $$0152 = $$2154;
   $$0155 = $$2157;
   $$0159 = $$2161;
   $$2 = $82;
   $$2144 = $$3145;
   $101 = $215;
   $53 = $217;
   $55 = $216;
   $99 = $214;
   continue;
  }
 }
 $83 = ($$2144 | 0) == 0;
 do {
  if ($83) {
   $84 = HEAP32[$7 >> 2] | 0;
   $85 = ($84 | 0) != (0 | 0);
   if ($85) {
    $86 = HEAP32[$5 >> 2] | 0;
    $87 = $86 + -1 | 0;
    HEAP32[$5 >> 2] = $87;
   }
   $88 = ($4 | 0) == 0;
   if ($88) {
    ___shlim($0, 0);
   } else {
    if ($85) {
     $89 = HEAP32[$5 >> 2] | 0;
     $90 = $89 + -1 | 0;
     HEAP32[$5 >> 2] = $90;
    }
    $91 = ($$0146 | 0) == 0;
    $92 = ($84 | 0) == (0 | 0);
    $or$cond206 = $91 | $92;
    if (!$or$cond206) {
     $93 = HEAP32[$5 >> 2] | 0;
     $94 = $93 + -1 | 0;
     HEAP32[$5 >> 2] = $94;
    }
   }
   $95 = +($3 | 0);
   $96 = $95 * 0.0;
   $$0165 = $96;
  } else {
   $97 = ($$0146 | 0) == 0;
   $98 = $97 ? $55 : $99;
   $100 = $97 ? $53 : $101;
   $102 = ($53 | 0) < 0;
   $103 = $55 >>> 0 < 8;
   $104 = ($53 | 0) == 0;
   $105 = $104 & $103;
   $106 = $102 | $105;
   if ($106) {
    $$3162183 = $$0159;
    $108 = $55;
    $109 = $53;
    while (1) {
     $107 = $$3162183 << 4;
     $110 = _i64Add($108 | 0, $109 | 0, 1, 0) | 0;
     $111 = tempRet0;
     $112 = ($111 | 0) < 0;
     $113 = $110 >>> 0 < 8;
     $114 = ($111 | 0) == 0;
     $115 = $114 & $113;
     $116 = $112 | $115;
     if ($116) {
      $$3162183 = $107;
      $108 = $110;
      $109 = $111;
     } else {
      $$3162$lcssa = $107;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $117 = $$2$lcssa | 32;
   $118 = ($117 | 0) == 112;
   if ($118) {
    $119 = _scanexp($0, $4) | 0;
    $120 = tempRet0;
    $121 = ($119 | 0) == 0;
    $122 = ($120 | 0) == -2147483648;
    $123 = $121 & $122;
    if ($123) {
     $124 = ($4 | 0) == 0;
     if ($124) {
      ___shlim($0, 0);
      $$0165 = 0.0;
      break;
     }
     $125 = HEAP32[$7 >> 2] | 0;
     $126 = ($125 | 0) == (0 | 0);
     if ($126) {
      $137 = 0;
      $138 = 0;
     } else {
      $127 = HEAP32[$5 >> 2] | 0;
      $128 = $127 + -1 | 0;
      HEAP32[$5 >> 2] = $128;
      $137 = 0;
      $138 = 0;
     }
    } else {
     $137 = $119;
     $138 = $120;
    }
   } else {
    $129 = HEAP32[$7 >> 2] | 0;
    $130 = ($129 | 0) == (0 | 0);
    if ($130) {
     $137 = 0;
     $138 = 0;
    } else {
     $131 = HEAP32[$5 >> 2] | 0;
     $132 = $131 + -1 | 0;
     HEAP32[$5 >> 2] = $132;
     $137 = 0;
     $138 = 0;
    }
   }
   $133 = _bitshift64Shl($98 | 0, $100 | 0, 2) | 0;
   $134 = tempRet0;
   $135 = _i64Add($133 | 0, $134 | 0, -32, -1) | 0;
   $136 = tempRet0;
   $139 = _i64Add($135 | 0, $136 | 0, $137 | 0, $138 | 0) | 0;
   $140 = tempRet0;
   $141 = ($$3162$lcssa | 0) == 0;
   if ($141) {
    $142 = +($3 | 0);
    $143 = $142 * 0.0;
    $$0165 = $143;
    break;
   }
   $144 = 0 - $2 | 0;
   $145 = ($144 | 0) < 0;
   $146 = $145 << 31 >> 31;
   $147 = ($140 | 0) > ($146 | 0);
   $148 = $139 >>> 0 > $144 >>> 0;
   $149 = ($140 | 0) == ($146 | 0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    $152 = ___errno_location() | 0;
    HEAP32[$152 >> 2] = 34;
    $153 = +($3 | 0);
    $154 = $153 * 1797693134862315708145274.0e284;
    $155 = $154 * 1797693134862315708145274.0e284;
    $$0165 = $155;
    break;
   }
   $156 = $2 + -106 | 0;
   $157 = ($156 | 0) < 0;
   $158 = $157 << 31 >> 31;
   $159 = ($140 | 0) < ($158 | 0);
   $160 = $139 >>> 0 < $156 >>> 0;
   $161 = ($140 | 0) == ($158 | 0);
   $162 = $161 & $160;
   $163 = $159 | $162;
   if ($163) {
    $165 = ___errno_location() | 0;
    HEAP32[$165 >> 2] = 34;
    $166 = +($3 | 0);
    $167 = $166 * 2.2250738585072014e-308;
    $168 = $167 * 2.2250738585072014e-308;
    $$0165 = $168;
    break;
   }
   $164 = ($$3162$lcssa | 0) > -1;
   if ($164) {
    $$3158179 = $$0155;
    $$4163178 = $$3162$lcssa;
    $173 = $139;
    $174 = $140;
    while (1) {
     $169 = !($$3158179 >= .5);
     $170 = $$4163178 << 1;
     $171 = $$3158179 + -1.0;
     $not$ = $169 ^ 1;
     $172 = $not$ & 1;
     $$5164 = $170 | $172;
     $$pn = $169 ? $$3158179 : $171;
     $$4 = $$3158179 + $$pn;
     $175 = _i64Add($173 | 0, $174 | 0, -1, -1) | 0;
     $176 = tempRet0;
     $177 = ($$5164 | 0) > -1;
     if ($177) {
      $$3158179 = $$4;
      $$4163178 = $$5164;
      $173 = $175;
      $174 = $176;
     } else {
      $$3158$lcssa = $$4;
      $$4163$lcssa = $$5164;
      $184 = $175;
      $185 = $176;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;
    $$4163$lcssa = $$3162$lcssa;
    $184 = $139;
    $185 = $140;
   }
   $178 = ($1 | 0) < 0;
   $179 = $178 << 31 >> 31;
   $180 = ($2 | 0) < 0;
   $181 = $180 << 31 >> 31;
   $182 = _i64Subtract(32, 0, $2 | 0, $181 | 0) | 0;
   $183 = tempRet0;
   $186 = _i64Add($182 | 0, $183 | 0, $184 | 0, $185 | 0) | 0;
   $187 = tempRet0;
   $188 = ($179 | 0) > ($187 | 0);
   $189 = $1 >>> 0 > $186 >>> 0;
   $190 = ($179 | 0) == ($187 | 0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    $193 = ($186 | 0) > 0;
    if ($193) {
     $$0166 = $186;
     label = 59;
    } else {
     $$0166170 = 0;
     $197 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label | 0) == 59) {
    $194 = ($$0166 | 0) < 53;
    $195 = 84 - $$0166 | 0;
    if ($194) {
     $$0166170 = $$0166;
     $197 = $195;
     label = 61;
    } else {
     $$pre = +($3 | 0);
     $$0151 = 0.0;
     $$0166169 = $$0166;
     $$pre$phiZ2D = $$pre;
    }
   }
   if ((label | 0) == 61) {
    $196 = +($3 | 0);
    $198 = +_scalbn(1.0, $197);
    $199 = +_copysignl($198, $196);
    $$0151 = $199;
    $$0166169 = $$0166170;
    $$pre$phiZ2D = $196;
   }
   $200 = ($$0166169 | 0) < 32;
   $201 = $$3158$lcssa != 0.0;
   $or$cond4 = $201 & $200;
   $202 = $$4163$lcssa & 1;
   $203 = ($202 | 0) == 0;
   $or$cond168 = $203 & $or$cond4;
   $204 = $or$cond168 & 1;
   $$6 = $204 + $$4163$lcssa | 0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $205 = +($$6 >>> 0);
   $206 = $$pre$phiZ2D * $205;
   $207 = $$0151 + $206;
   $208 = $$pre$phiZ2D * $$5;
   $209 = $208 + $207;
   $210 = $209 - $$0151;
   $211 = $210 != 0.0;
   if (!$211) {
    $212 = ___errno_location() | 0;
    HEAP32[$212 >> 2] = 34;
   }
   $213 = +_scalbnl($210, $184);
   $$0165 = $213;
  }
 } while (0);
 return +$$0165;
}

function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149;
   $$0106$ph = 24;
   label = 4;
   break;
  }
 case 1:
  {
   $$0105$ph = -1074;
   $$0106$ph = 53;
   label = 4;
   break;
  }
 case 2:
  {
   $$0105$ph = -1074;
   $$0106$ph = 53;
   label = 4;
   break;
  }
 default:
  {
   $$0114 = 0.0;
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0;
   $4 = $0 + 100 | 0;
   while (1) {
    $5 = HEAP32[$3 >> 2] | 0;
    $6 = HEAP32[$4 >> 2] | 0;
    $7 = $5 >>> 0 < $6 >>> 0;
    if ($7) {
     $8 = $5 + 1 | 0;
     HEAP32[$3 >> 2] = $8;
     $9 = HEAP8[$5 >> 0] | 0;
     $10 = $9 & 255;
     $12 = $10;
    } else {
     $11 = ___shgetc($0) | 0;
     $12 = $11;
    }
    $13 = _isspace($12) | 0;
    $14 = ($13 | 0) == 0;
    if ($14) {
     break;
    }
   }
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $15 = ($12 | 0) == 45;
      $16 = $15 & 1;
      $17 = $16 << 1;
      $18 = 1 - $17 | 0;
      $19 = HEAP32[$3 >> 2] | 0;
      $20 = HEAP32[$4 >> 2] | 0;
      $21 = $19 >>> 0 < $20 >>> 0;
      if ($21) {
       $22 = $19 + 1 | 0;
       HEAP32[$3 >> 2] = $22;
       $23 = HEAP8[$19 >> 0] | 0;
       $24 = $23 & 255;
       $$0 = $24;
       $$0113 = $18;
       break L13;
      } else {
       $25 = ___shgetc($0) | 0;
       $$0 = $25;
       $$0113 = $18;
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12;
      $$0113 = 1;
     }
    }
   } while (0);
   $$0107127 = 0;
   $$1128 = $$0;
   while (1) {
    $26 = $$1128 | 32;
    $27 = 174457 + $$0107127 | 0;
    $28 = HEAP8[$27 >> 0] | 0;
    $29 = $28 << 24 >> 24;
    $30 = ($26 | 0) == ($29 | 0);
    if (!$30) {
     $$0107$lcssa = $$0107127;
     $$1$lcssa = $$1128;
     break;
    }
    $31 = $$0107127 >>> 0 < 7;
    do {
     if ($31) {
      $32 = HEAP32[$3 >> 2] | 0;
      $33 = HEAP32[$4 >> 2] | 0;
      $34 = $32 >>> 0 < $33 >>> 0;
      if ($34) {
       $35 = $32 + 1 | 0;
       HEAP32[$3 >> 2] = $35;
       $36 = HEAP8[$32 >> 0] | 0;
       $37 = $36 & 255;
       $$2 = $37;
       break;
      } else {
       $38 = ___shgetc($0) | 0;
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while (0);
    $39 = $$0107127 + 1 | 0;
    $40 = $39 >>> 0 < 8;
    if ($40) {
     $$0107127 = $39;
     $$1128 = $$2;
    } else {
     $$0107$lcssa = $39;
     $$1$lcssa = $$2;
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23;
      break;
     }
    default:
     {
      $41 = $$0107$lcssa >>> 0 > 3;
      $42 = ($2 | 0) != 0;
      $or$cond5 = $42 & $41;
      if ($or$cond5) {
       $43 = ($$0107$lcssa | 0) == 8;
       if ($43) {
        break L29;
       } else {
        label = 23;
        break L29;
       }
      }
      $56 = ($$0107$lcssa | 0) == 0;
      L34 : do {
       if ($56) {
        $$2109125 = 0;
        $$3126 = $$1$lcssa;
        while (1) {
         $57 = $$3126 | 32;
         $58 = 175240 + $$2109125 | 0;
         $59 = HEAP8[$58 >> 0] | 0;
         $60 = $59 << 24 >> 24;
         $61 = ($57 | 0) == ($60 | 0);
         if (!$61) {
          $$3110 = $$2109125;
          $$5 = $$3126;
          break L34;
         }
         $62 = $$2109125 >>> 0 < 2;
         do {
          if ($62) {
           $63 = HEAP32[$3 >> 2] | 0;
           $64 = HEAP32[$4 >> 2] | 0;
           $65 = $63 >>> 0 < $64 >>> 0;
           if ($65) {
            $66 = $63 + 1 | 0;
            HEAP32[$3 >> 2] = $66;
            $67 = HEAP8[$63 >> 0] | 0;
            $68 = $67 & 255;
            $$4 = $68;
            break;
           } else {
            $69 = ___shgetc($0) | 0;
            $$4 = $69;
            break;
           }
          } else {
           $$4 = $$3126;
          }
         } while (0);
         $70 = $$2109125 + 1 | 0;
         $71 = $70 >>> 0 < 3;
         if ($71) {
          $$2109125 = $70;
          $$3126 = $$4;
         } else {
          $$3110 = $70;
          $$5 = $$4;
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa;
        $$5 = $$1$lcssa;
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0;
        $73 = HEAP32[$4 >> 2] | 0;
        $74 = $72 >>> 0 < $73 >>> 0;
        if ($74) {
         $75 = $72 + 1 | 0;
         HEAP32[$3 >> 2] = $75;
         $76 = HEAP8[$72 >> 0] | 0;
         $77 = $76 & 255;
         $80 = $77;
        } else {
         $78 = ___shgetc($0) | 0;
         $80 = $78;
        }
        $79 = ($80 | 0) == 40;
        if ($79) {
         $$4111 = 1;
        } else {
         $81 = HEAP32[$4 >> 2] | 0;
         $82 = ($81 | 0) == (0 | 0);
         if ($82) {
          $$0114 = nan;
          break L4;
         }
         $83 = HEAP32[$3 >> 2] | 0;
         $84 = $83 + -1 | 0;
         HEAP32[$3 >> 2] = $84;
         $$0114 = nan;
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0;
         $86 = HEAP32[$4 >> 2] | 0;
         $87 = $85 >>> 0 < $86 >>> 0;
         if ($87) {
          $88 = $85 + 1 | 0;
          HEAP32[$3 >> 2] = $88;
          $89 = HEAP8[$85 >> 0] | 0;
          $90 = $89 & 255;
          $93 = $90;
         } else {
          $91 = ___shgetc($0) | 0;
          $93 = $91;
         }
         $92 = $93 + -48 | 0;
         $94 = $92 >>> 0 < 10;
         $95 = $93 + -65 | 0;
         $96 = $95 >>> 0 < 26;
         $or$cond = $94 | $96;
         if (!$or$cond) {
          $97 = $93 + -97 | 0;
          $98 = $97 >>> 0 < 26;
          $99 = ($93 | 0) == 95;
          $or$cond7 = $99 | $98;
          if (!$or$cond7) {
           break;
          }
         }
         $111 = $$4111 + 1 | 0;
         $$4111 = $111;
        }
        $100 = ($93 | 0) == 41;
        if ($100) {
         $$0114 = nan;
         break L4;
        }
        $101 = HEAP32[$4 >> 2] | 0;
        $102 = ($101 | 0) == (0 | 0);
        if (!$102) {
         $103 = HEAP32[$3 >> 2] | 0;
         $104 = $103 + -1 | 0;
         HEAP32[$3 >> 2] = $104;
        }
        if (!$42) {
         $106 = ___errno_location() | 0;
         HEAP32[$106 >> 2] = 22;
         ___shlim($0, 0);
         $$0114 = 0.0;
         break L4;
        }
        $105 = ($$4111 | 0) == 0;
        if ($105) {
         $$0114 = nan;
         break L4;
        } else {
         $$in = $$4111;
        }
        while (1) {
         $107 = $$in + -1 | 0;
         if (!$102) {
          $108 = HEAP32[$3 >> 2] | 0;
          $109 = $108 + -1 | 0;
          HEAP32[$3 >> 2] = $109;
         }
         $110 = ($107 | 0) == 0;
         if ($110) {
          $$0114 = nan;
          break L4;
         } else {
          $$in = $107;
         }
        }
        break;
       }
      case 0:
       {
        $117 = ($$5 | 0) == 48;
        if ($117) {
         $118 = HEAP32[$3 >> 2] | 0;
         $119 = HEAP32[$4 >> 2] | 0;
         $120 = $118 >>> 0 < $119 >>> 0;
         if ($120) {
          $121 = $118 + 1 | 0;
          HEAP32[$3 >> 2] = $121;
          $122 = HEAP8[$118 >> 0] | 0;
          $123 = $122 & 255;
          $126 = $123;
         } else {
          $124 = ___shgetc($0) | 0;
          $126 = $124;
         }
         $125 = $126 | 32;
         $127 = ($125 | 0) == 120;
         if ($127) {
          $128 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2);
          $$0114 = $128;
          break L4;
         }
         $129 = HEAP32[$4 >> 2] | 0;
         $130 = ($129 | 0) == (0 | 0);
         if ($130) {
          $$6 = 48;
         } else {
          $131 = HEAP32[$3 >> 2] | 0;
          $132 = $131 + -1 | 0;
          HEAP32[$3 >> 2] = $132;
          $$6 = 48;
         }
        } else {
         $$6 = $$5;
        }
        $133 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2);
        $$0114 = $133;
        break L4;
        break;
       }
      default:
       {
        $112 = HEAP32[$4 >> 2] | 0;
        $113 = ($112 | 0) == (0 | 0);
        if (!$113) {
         $114 = HEAP32[$3 >> 2] | 0;
         $115 = $114 + -1 | 0;
         HEAP32[$3 >> 2] = $115;
        }
        $116 = ___errno_location() | 0;
        HEAP32[$116 >> 2] = 22;
        ___shlim($0, 0);
        $$0114 = 0.0;
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $44 = HEAP32[$4 >> 2] | 0;
    $45 = ($44 | 0) == (0 | 0);
    if (!$45) {
     $46 = HEAP32[$3 >> 2] | 0;
     $47 = $46 + -1 | 0;
     HEAP32[$3 >> 2] = $47;
    }
    $48 = ($2 | 0) != 0;
    $49 = $$0107$lcssa >>> 0 > 3;
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while (1) {
      if (!$45) {
       $50 = HEAP32[$3 >> 2] | 0;
       $51 = $50 + -1 | 0;
       HEAP32[$3 >> 2] = $51;
      }
      $52 = $$1108 + -1 | 0;
      $$old8 = $52 >>> 0 > 3;
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = +($$0113 | 0);
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while (0);
 return +$$0114;
}

function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & -8;
 $5 = $0 + $4 | 0;
 $6 = HEAP32[179424 >> 2] | 0;
 $7 = $3 & 3;
 $notlhs = $0 >>> 0 >= $6 >>> 0;
 $notrhs = ($7 | 0) != 1;
 $or$cond$not = $notrhs & $notlhs;
 $8 = $0 >>> 0 < $5 >>> 0;
 $or$cond3 = $or$cond$not & $8;
 if (!$or$cond3) {
  _abort();
 }
 $9 = $5 + 4 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $10 & 1;
 $12 = ($11 | 0) == 0;
 if ($12) {
  _abort();
 }
 $13 = ($7 | 0) == 0;
 if ($13) {
  $14 = $1 >>> 0 < 256;
  if ($14) {
   $$2 = 0;
   return $$2 | 0;
  }
  $15 = $1 + 4 | 0;
  $16 = $4 >>> 0 < $15 >>> 0;
  if (!$16) {
   $17 = $4 - $1 | 0;
   $18 = HEAP32[179888 >> 2] | 0;
   $19 = $18 << 1;
   $20 = $17 >>> 0 > $19 >>> 0;
   if (!$20) {
    $$2 = $0;
    return $$2 | 0;
   }
  }
  $$2 = 0;
  return $$2 | 0;
 }
 $21 = $4 >>> 0 < $1 >>> 0;
 if (!$21) {
  $22 = $4 - $1 | 0;
  $23 = $22 >>> 0 > 15;
  if (!$23) {
   $$2 = $0;
   return $$2 | 0;
  }
  $24 = $0 + $1 | 0;
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2 >> 2] = $27;
  $28 = $24 + 4 | 0;
  $29 = $22 | 3;
  HEAP32[$28 >> 2] = $29;
  $30 = $24 + $22 | 0;
  $31 = $30 + 4 | 0;
  $32 = HEAP32[$31 >> 2] | 0;
  $33 = $32 | 1;
  HEAP32[$31 >> 2] = $33;
  _dispose_chunk($24, $22);
  $$2 = $0;
  return $$2 | 0;
 }
 $34 = HEAP32[179432 >> 2] | 0;
 $35 = ($5 | 0) == ($34 | 0);
 if ($35) {
  $36 = HEAP32[179420 >> 2] | 0;
  $37 = $36 + $4 | 0;
  $38 = $37 >>> 0 > $1 >>> 0;
  $39 = $37 - $1 | 0;
  $40 = $0 + $1 | 0;
  if (!$38) {
   $$2 = 0;
   return $$2 | 0;
  }
  $41 = $39 | 1;
  $42 = $40 + 4 | 0;
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2 >> 2] = $45;
  HEAP32[$42 >> 2] = $41;
  HEAP32[179432 >> 2] = $40;
  HEAP32[179420 >> 2] = $39;
  $$2 = $0;
  return $$2 | 0;
 }
 $46 = HEAP32[179428 >> 2] | 0;
 $47 = ($5 | 0) == ($46 | 0);
 if ($47) {
  $48 = HEAP32[179416 >> 2] | 0;
  $49 = $48 + $4 | 0;
  $50 = $49 >>> 0 < $1 >>> 0;
  if ($50) {
   $$2 = 0;
   return $$2 | 0;
  }
  $51 = $49 - $1 | 0;
  $52 = $51 >>> 0 > 15;
  $53 = $3 & 1;
  if ($52) {
   $54 = $0 + $1 | 0;
   $55 = $54 + $51 | 0;
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2 >> 2] = $57;
   $58 = $54 + 4 | 0;
   $59 = $51 | 1;
   HEAP32[$58 >> 2] = $59;
   HEAP32[$55 >> 2] = $51;
   $60 = $55 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   $62 = $61 & -2;
   HEAP32[$60 >> 2] = $62;
   $storemerge = $54;
   $storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2 >> 2] = $64;
   $65 = $0 + $49 | 0;
   $66 = $65 + 4 | 0;
   $67 = HEAP32[$66 >> 2] | 0;
   $68 = $67 | 1;
   HEAP32[$66 >> 2] = $68;
   $storemerge = 0;
   $storemerge1 = 0;
  }
  HEAP32[179416 >> 2] = $storemerge1;
  HEAP32[179428 >> 2] = $storemerge;
  $$2 = $0;
  return $$2 | 0;
 }
 $69 = $10 & 2;
 $70 = ($69 | 0) == 0;
 if (!$70) {
  $$2 = 0;
  return $$2 | 0;
 }
 $71 = $10 & -8;
 $72 = $71 + $4 | 0;
 $73 = $72 >>> 0 < $1 >>> 0;
 if ($73) {
  $$2 = 0;
  return $$2 | 0;
 }
 $74 = $72 - $1 | 0;
 $75 = $10 >>> 3;
 $76 = $10 >>> 0 < 256;
 L49 : do {
  if ($76) {
   $77 = $5 + 8 | 0;
   $78 = HEAP32[$77 >> 2] | 0;
   $79 = $5 + 12 | 0;
   $80 = HEAP32[$79 >> 2] | 0;
   $81 = $75 << 1;
   $82 = 179448 + ($81 << 2) | 0;
   $83 = ($78 | 0) == ($82 | 0);
   if (!$83) {
    $84 = $78 >>> 0 < $6 >>> 0;
    if ($84) {
     _abort();
    }
    $85 = $78 + 12 | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = ($86 | 0) == ($5 | 0);
    if (!$87) {
     _abort();
    }
   }
   $88 = ($80 | 0) == ($78 | 0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[44852] | 0;
    $92 = $91 & $90;
    HEAP32[44852] = $92;
    break;
   }
   $93 = ($80 | 0) == ($82 | 0);
   if ($93) {
    $$pre = $80 + 8 | 0;
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = $80 >>> 0 < $6 >>> 0;
    if ($94) {
     _abort();
    }
    $95 = $80 + 8 | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    $97 = ($96 | 0) == ($5 | 0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
    }
   }
   $98 = $78 + 12 | 0;
   HEAP32[$98 >> 2] = $80;
   HEAP32[$$pre$phiZ2D >> 2] = $78;
  } else {
   $99 = $5 + 24 | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   $101 = $5 + 12 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   $103 = ($102 | 0) == ($5 | 0);
   do {
    if ($103) {
     $113 = $5 + 16 | 0;
     $114 = $113 + 4 | 0;
     $115 = HEAP32[$114 >> 2] | 0;
     $116 = ($115 | 0) == (0 | 0);
     if ($116) {
      $117 = HEAP32[$113 >> 2] | 0;
      $118 = ($117 | 0) == (0 | 0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;
       $$1275 = $113;
      }
     } else {
      $$1272 = $115;
      $$1275 = $114;
     }
     while (1) {
      $119 = $$1272 + 20 | 0;
      $120 = HEAP32[$119 >> 2] | 0;
      $121 = ($120 | 0) == (0 | 0);
      if (!$121) {
       $$1272 = $120;
       $$1275 = $119;
       continue;
      }
      $122 = $$1272 + 16 | 0;
      $123 = HEAP32[$122 >> 2] | 0;
      $124 = ($123 | 0) == (0 | 0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;
       $$1275 = $122;
      }
     }
     $125 = $$1275 >>> 0 < $6 >>> 0;
     if ($125) {
      _abort();
     } else {
      HEAP32[$$1275 >> 2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = $5 + 8 | 0;
     $105 = HEAP32[$104 >> 2] | 0;
     $106 = $105 >>> 0 < $6 >>> 0;
     if ($106) {
      _abort();
     }
     $107 = $105 + 12 | 0;
     $108 = HEAP32[$107 >> 2] | 0;
     $109 = ($108 | 0) == ($5 | 0);
     if (!$109) {
      _abort();
     }
     $110 = $102 + 8 | 0;
     $111 = HEAP32[$110 >> 2] | 0;
     $112 = ($111 | 0) == ($5 | 0);
     if ($112) {
      HEAP32[$107 >> 2] = $102;
      HEAP32[$110 >> 2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $126 = ($100 | 0) == (0 | 0);
   if (!$126) {
    $127 = $5 + 28 | 0;
    $128 = HEAP32[$127 >> 2] | 0;
    $129 = 179712 + ($128 << 2) | 0;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = ($5 | 0) == ($130 | 0);
    do {
     if ($131) {
      HEAP32[$129 >> 2] = $$3;
      $cond = ($$3 | 0) == (0 | 0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[179412 >> 2] | 0;
       $135 = $134 & $133;
       HEAP32[179412 >> 2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[179424 >> 2] | 0;
      $137 = $100 >>> 0 < $136 >>> 0;
      if ($137) {
       _abort();
      } else {
       $138 = $100 + 16 | 0;
       $139 = HEAP32[$138 >> 2] | 0;
       $not$ = ($139 | 0) != ($5 | 0);
       $$sink1 = $not$ & 1;
       $140 = ($100 + 16 | 0) + ($$sink1 << 2) | 0;
       HEAP32[$140 >> 2] = $$3;
       $141 = ($$3 | 0) == (0 | 0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $142 = HEAP32[179424 >> 2] | 0;
    $143 = $$3 >>> 0 < $142 >>> 0;
    if ($143) {
     _abort();
    }
    $144 = $$3 + 24 | 0;
    HEAP32[$144 >> 2] = $100;
    $145 = $5 + 16 | 0;
    $146 = HEAP32[$145 >> 2] | 0;
    $147 = ($146 | 0) == (0 | 0);
    do {
     if (!$147) {
      $148 = $146 >>> 0 < $142 >>> 0;
      if ($148) {
       _abort();
      } else {
       $149 = $$3 + 16 | 0;
       HEAP32[$149 >> 2] = $146;
       $150 = $146 + 24 | 0;
       HEAP32[$150 >> 2] = $$3;
       break;
      }
     }
    } while (0);
    $151 = $145 + 4 | 0;
    $152 = HEAP32[$151 >> 2] | 0;
    $153 = ($152 | 0) == (0 | 0);
    if (!$153) {
     $154 = HEAP32[179424 >> 2] | 0;
     $155 = $152 >>> 0 < $154 >>> 0;
     if ($155) {
      _abort();
     } else {
      $156 = $$3 + 20 | 0;
      HEAP32[$156 >> 2] = $152;
      $157 = $152 + 24 | 0;
      HEAP32[$157 >> 2] = $$3;
      break;
     }
    }
   }
  }
 } while (0);
 $158 = $74 >>> 0 < 16;
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2 >> 2] = $161;
  $162 = $0 + $72 | 0;
  $163 = $162 + 4 | 0;
  $164 = HEAP32[$163 >> 2] | 0;
  $165 = $164 | 1;
  HEAP32[$163 >> 2] = $165;
  $$2 = $0;
  return $$2 | 0;
 } else {
  $166 = $0 + $1 | 0;
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2 >> 2] = $168;
  $169 = $166 + 4 | 0;
  $170 = $74 | 3;
  HEAP32[$169 >> 2] = $170;
  $171 = $166 + $74 | 0;
  $172 = $171 + 4 | 0;
  $173 = HEAP32[$172 >> 2] | 0;
  $174 = $173 | 1;
  HEAP32[$172 >> 2] = $174;
  _dispose_chunk($166, $74);
  $$2 = $0;
  return $$2 | 0;
 }
 return 0 | 0;
}

function _EventStateDeal() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = 0;
 while (1) {
  $8 = $0;
  $9 = $8 & 255;
  $10 = HEAP8[5256 >> 0] | 0;
  $11 = $10 & 255;
  $12 = ($9 | 0) < ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = $13 & 255;
  $15 = 224276 + ($14 * 37 | 0) | 0;
  $16 = $15 + 13 | 0;
  $1 = $16;
  $17 = $0;
  $18 = $17 & 255;
  $19 = 224276 + ($18 * 37 | 0) | 0;
  $20 = $19 + 7 | 0;
  $2 = $20;
  $21 = $0;
  $22 = $21 & 255;
  $23 = 224276 + ($22 * 37 | 0) | 0;
  $24 = $23 + 11 | 0;
  $3 = $24;
  $25 = $0;
  $26 = $25 & 255;
  $27 = 224276 + ($26 * 37 | 0) | 0;
  $28 = $27 + 27 | 0;
  $4 = $28;
  $29 = $0;
  $30 = $29 & 255;
  $31 = 224276 + ($30 * 37 | 0) | 0;
  $32 = $31 + 25 | 0;
  $5 = $32;
  $33 = $0;
  $34 = $33 & 255;
  $35 = 224276 + ($34 * 37 | 0) | 0;
  $36 = $35 + 23 | 0;
  $6 = $36;
  $37 = $0;
  $38 = $37 & 255;
  $39 = 224276 + ($38 * 37 | 0) | 0;
  $40 = $39 + 19 | 0;
  $7 = $40;
  $41 = $0;
  $42 = $41 & 255;
  $43 = 224276 + ($42 * 37 | 0) | 0;
  $44 = HEAP8[$43 >> 0] | 0;
  $45 = $44 & 255;
  switch ($45 | 0) {
  case 0:
   {
    break;
   }
  case 1:
   {
    $46 = $3;
    $47 = HEAPU8[$46 >> 0] | HEAPU8[$46 + 1 >> 0] << 8;
    $48 = $47 & 65535;
    $49 = $3;
    $50 = HEAPU8[$49 >> 0] | HEAPU8[$49 + 1 >> 0] << 8;
    $51 = $50 & 65535;
    $52 = ($51 | 0) / 20 & -1;
    $53 = $48 - $52 | 0;
    $54 = $53 & 65535;
    $55 = $3;
    HEAP8[$55 >> 0] = $54 & 255;
    HEAP8[$55 + 1 >> 0] = $54 >> 8;
    $56 = $1;
    $57 = HEAP8[$56 >> 0] | 0;
    $58 = $57 & 255;
    $59 = $1;
    $60 = HEAP8[$59 >> 0] | 0;
    $61 = $60 & 255;
    $62 = ($61 | 0) / 20 & -1;
    $63 = $58 - $62 | 0;
    $64 = $63 & 255;
    $65 = $1;
    HEAP8[$65 >> 0] = $64;
    $66 = $4;
    $67 = HEAPU8[$66 >> 0] | HEAPU8[$66 + 1 >> 0] << 8;
    $68 = $67 & 65535;
    $69 = ($68 | 0) / 2 & -1;
    $70 = $69 & 65535;
    HEAP8[$66 >> 0] = $70 & 255;
    HEAP8[$66 + 1 >> 0] = $70 >> 8;
    $71 = $7;
    $72 = HEAPU8[$71 >> 0] | HEAPU8[$71 + 1 >> 0] << 8 | HEAPU8[$71 + 2 >> 0] << 16 | HEAPU8[$71 + 3 >> 0] << 24;
    $73 = $7;
    $74 = HEAPU8[$73 >> 0] | HEAPU8[$73 + 1 >> 0] << 8 | HEAPU8[$73 + 2 >> 0] << 16 | HEAPU8[$73 + 3 >> 0] << 24;
    $75 = ($74 >>> 0) / 4 & -1;
    $76 = $72 - $75 | 0;
    $77 = $7;
    HEAP8[$77 >> 0] = $76 & 255;
    HEAP8[$77 + 1 >> 0] = $76 >> 8 & 255;
    HEAP8[$77 + 2 >> 0] = $76 >> 16 & 255;
    HEAP8[$77 + 3 >> 0] = $76 >> 24;
    label = 8;
    break;
   }
  case 2:
   {
    $78 = $5;
    $79 = HEAPU8[$78 >> 0] | HEAPU8[$78 + 1 >> 0] << 8;
    $80 = $79 & 65535;
    $81 = $5;
    $82 = HEAPU8[$81 >> 0] | HEAPU8[$81 + 1 >> 0] << 8;
    $83 = $82 & 65535;
    $84 = ($83 | 0) / 20 & -1;
    $85 = $80 - $84 | 0;
    $86 = $85 & 65535;
    $87 = $5;
    HEAP8[$87 >> 0] = $86 & 255;
    HEAP8[$87 + 1 >> 0] = $86 >> 8;
    $88 = $4;
    $89 = HEAPU8[$88 >> 0] | HEAPU8[$88 + 1 >> 0] << 8;
    $90 = $89 & 65535;
    $91 = $4;
    $92 = HEAPU8[$91 >> 0] | HEAPU8[$91 + 1 >> 0] << 8;
    $93 = $92 & 65535;
    $94 = ($93 | 0) / 4 & -1;
    $95 = $90 - $94 | 0;
    $96 = $95 & 65535;
    $97 = $4;
    HEAP8[$97 >> 0] = $96 & 255;
    HEAP8[$97 + 1 >> 0] = $96 >> 8;
    $98 = $7;
    $99 = HEAPU8[$98 >> 0] | HEAPU8[$98 + 1 >> 0] << 8 | HEAPU8[$98 + 2 >> 0] << 16 | HEAPU8[$98 + 3 >> 0] << 24;
    $100 = $7;
    $101 = HEAPU8[$100 >> 0] | HEAPU8[$100 + 1 >> 0] << 8 | HEAPU8[$100 + 2 >> 0] << 16 | HEAPU8[$100 + 3 >> 0] << 24;
    $102 = ($101 >>> 0) / 4 & -1;
    $103 = $99 - $102 | 0;
    $104 = $7;
    HEAP8[$104 >> 0] = $103 & 255;
    HEAP8[$104 + 1 >> 0] = $103 >> 8 & 255;
    HEAP8[$104 + 2 >> 0] = $103 >> 16 & 255;
    HEAP8[$104 + 3 >> 0] = $103 >> 24;
    label = 8;
    break;
   }
  case 3:
   {
    $105 = $5;
    $106 = HEAPU8[$105 >> 0] | HEAPU8[$105 + 1 >> 0] << 8;
    $107 = $106 & 65535;
    $108 = $5;
    $109 = HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8;
    $110 = $109 & 65535;
    $111 = ($110 | 0) / 20 & -1;
    $112 = $107 - $111 | 0;
    $113 = $112 & 65535;
    $114 = $5;
    HEAP8[$114 >> 0] = $113 & 255;
    HEAP8[$114 + 1 >> 0] = $113 >> 8;
    $115 = $3;
    $116 = HEAPU8[$115 >> 0] | HEAPU8[$115 + 1 >> 0] << 8;
    $117 = $116 & 65535;
    $118 = $3;
    $119 = HEAPU8[$118 >> 0] | HEAPU8[$118 + 1 >> 0] << 8;
    $120 = $119 & 65535;
    $121 = ($120 | 0) / 10 & -1;
    $122 = $117 - $121 | 0;
    $123 = $122 & 65535;
    $124 = $3;
    HEAP8[$124 >> 0] = $123 & 255;
    HEAP8[$124 + 1 >> 0] = $123 >> 8;
    $125 = $6;
    $126 = HEAPU8[$125 >> 0] | HEAPU8[$125 + 1 >> 0] << 8;
    $127 = $126 & 65535;
    $128 = $6;
    $129 = HEAPU8[$128 >> 0] | HEAPU8[$128 + 1 >> 0] << 8;
    $130 = $129 & 65535;
    $131 = ($130 | 0) / 10 & -1;
    $132 = $127 - $131 | 0;
    $133 = $132 & 65535;
    $134 = $6;
    HEAP8[$134 >> 0] = $133 & 255;
    HEAP8[$134 + 1 >> 0] = $133 >> 8;
    $135 = $4;
    $136 = HEAPU8[$135 >> 0] | HEAPU8[$135 + 1 >> 0] << 8;
    $137 = $136 & 65535;
    $138 = $4;
    $139 = HEAPU8[$138 >> 0] | HEAPU8[$138 + 1 >> 0] << 8;
    $140 = $139 & 65535;
    $141 = ($140 | 0) / 4 & -1;
    $142 = $137 - $141 | 0;
    $143 = $142 & 65535;
    $144 = $4;
    HEAP8[$144 >> 0] = $143 & 255;
    HEAP8[$144 + 1 >> 0] = $143 >> 8;
    $145 = $7;
    $146 = HEAPU8[$145 >> 0] | HEAPU8[$145 + 1 >> 0] << 8 | HEAPU8[$145 + 2 >> 0] << 16 | HEAPU8[$145 + 3 >> 0] << 24;
    $147 = $7;
    $148 = HEAPU8[$147 >> 0] | HEAPU8[$147 + 1 >> 0] << 8 | HEAPU8[$147 + 2 >> 0] << 16 | HEAPU8[$147 + 3 >> 0] << 24;
    $149 = ($148 >>> 0) / 4 & -1;
    $150 = $146 - $149 | 0;
    $151 = $7;
    HEAP8[$151 >> 0] = $150 & 255;
    HEAP8[$151 + 1 >> 0] = $150 >> 8 & 255;
    HEAP8[$151 + 2 >> 0] = $150 >> 16 & 255;
    HEAP8[$151 + 3 >> 0] = $150 >> 24;
    label = 8;
    break;
   }
  case 4:
   {
    $152 = $5;
    $153 = HEAPU8[$152 >> 0] | HEAPU8[$152 + 1 >> 0] << 8;
    $154 = $153 & 65535;
    $155 = $5;
    $156 = HEAPU8[$155 >> 0] | HEAPU8[$155 + 1 >> 0] << 8;
    $157 = $156 & 65535;
    $158 = ($157 | 0) / 20 & -1;
    $159 = $154 - $158 | 0;
    $160 = $159 & 65535;
    $161 = $5;
    HEAP8[$161 >> 0] = $160 & 255;
    HEAP8[$161 + 1 >> 0] = $160 >> 8;
    $162 = $3;
    $163 = HEAPU8[$162 >> 0] | HEAPU8[$162 + 1 >> 0] << 8;
    $164 = $163 & 65535;
    $165 = $3;
    $166 = HEAPU8[$165 >> 0] | HEAPU8[$165 + 1 >> 0] << 8;
    $167 = $166 & 65535;
    $168 = ($167 | 0) / 20 & -1;
    $169 = $164 - $168 | 0;
    $170 = $169 & 65535;
    $171 = $3;
    HEAP8[$171 >> 0] = $170 & 255;
    HEAP8[$171 + 1 >> 0] = $170 >> 8;
    $172 = $6;
    $173 = HEAPU8[$172 >> 0] | HEAPU8[$172 + 1 >> 0] << 8;
    $174 = $173 & 65535;
    $175 = $6;
    $176 = HEAPU8[$175 >> 0] | HEAPU8[$175 + 1 >> 0] << 8;
    $177 = $176 & 65535;
    $178 = ($177 | 0) / 20 & -1;
    $179 = $174 - $178 | 0;
    $180 = $179 & 65535;
    $181 = $6;
    HEAP8[$181 >> 0] = $180 & 255;
    HEAP8[$181 + 1 >> 0] = $180 >> 8;
    $182 = $1;
    $183 = HEAP8[$182 >> 0] | 0;
    $184 = $183 & 255;
    $185 = $1;
    $186 = HEAP8[$185 >> 0] | 0;
    $187 = $186 & 255;
    $188 = ($187 | 0) / 10 & -1;
    $189 = $184 - $188 | 0;
    $190 = $189 & 255;
    $191 = $1;
    HEAP8[$191 >> 0] = $190;
    $192 = $4;
    $193 = HEAPU8[$192 >> 0] | HEAPU8[$192 + 1 >> 0] << 8;
    $194 = $193 & 65535;
    $195 = ($194 | 0) / 2 & -1;
    $196 = $195 & 65535;
    HEAP8[$192 >> 0] = $196 & 255;
    HEAP8[$192 + 1 >> 0] = $196 >> 8;
    label = 8;
    break;
   }
  default:
   {
    label = 8;
   }
  }
  if ((label | 0) == 8) {
   label = 0;
   $197 = $2;
   $198 = HEAPU8[$197 >> 0] | HEAPU8[$197 + 1 >> 0] << 8;
   $199 = $198 & 65535;
   $200 = $2;
   $201 = HEAPU8[$200 >> 0] | HEAPU8[$200 + 1 >> 0] << 8;
   $202 = $201 & 65535;
   $203 = ($202 | 0) / 20 & -1;
   $204 = $199 - $203 | 0;
   $205 = $204 & 65535;
   $206 = $2;
   HEAP8[$206 >> 0] = $205 & 255;
   HEAP8[$206 + 1 >> 0] = $205 >> 8;
  }
  $207 = $0;
  $208 = $207 + 1 << 24 >> 24;
  $0 = $208;
 }
 STACKTOP = sp;
 return 1;
}

function _pop_arg_674($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = $1 >>> 0 > 20;
 L1 : do {
  if (!$3) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $arglist_current = HEAP32[$2 >> 2] | 0;
      $4 = $arglist_current;
      $5 = 0 + 4 | 0;
      $expanded28 = $5;
      $expanded = $expanded28 - 1 | 0;
      $6 = $4 + $expanded | 0;
      $7 = 0 + 4 | 0;
      $expanded32 = $7;
      $expanded31 = $expanded32 - 1 | 0;
      $expanded30 = $expanded31 ^ -1;
      $8 = $6 & $expanded30;
      $9 = $8;
      $10 = HEAP32[$9 >> 2] | 0;
      $arglist_next = $9 + 4 | 0;
      HEAP32[$2 >> 2] = $arglist_next;
      HEAP32[$0 >> 2] = $10;
      break L1;
      break;
     }
    case 10:
     {
      $arglist_current2 = HEAP32[$2 >> 2] | 0;
      $11 = $arglist_current2;
      $12 = 0 + 4 | 0;
      $expanded35 = $12;
      $expanded34 = $expanded35 - 1 | 0;
      $13 = $11 + $expanded34 | 0;
      $14 = 0 + 4 | 0;
      $expanded39 = $14;
      $expanded38 = $expanded39 - 1 | 0;
      $expanded37 = $expanded38 ^ -1;
      $15 = $13 & $expanded37;
      $16 = $15;
      $17 = HEAP32[$16 >> 2] | 0;
      $arglist_next3 = $16 + 4 | 0;
      HEAP32[$2 >> 2] = $arglist_next3;
      $18 = ($17 | 0) < 0;
      $19 = $18 << 31 >> 31;
      $20 = $0;
      $21 = $20;
      HEAP32[$21 >> 2] = $17;
      $22 = $20 + 4 | 0;
      $23 = $22;
      HEAP32[$23 >> 2] = $19;
      break L1;
      break;
     }
    case 11:
     {
      $arglist_current5 = HEAP32[$2 >> 2] | 0;
      $24 = $arglist_current5;
      $25 = 0 + 4 | 0;
      $expanded42 = $25;
      $expanded41 = $expanded42 - 1 | 0;
      $26 = $24 + $expanded41 | 0;
      $27 = 0 + 4 | 0;
      $expanded46 = $27;
      $expanded45 = $expanded46 - 1 | 0;
      $expanded44 = $expanded45 ^ -1;
      $28 = $26 & $expanded44;
      $29 = $28;
      $30 = HEAP32[$29 >> 2] | 0;
      $arglist_next6 = $29 + 4 | 0;
      HEAP32[$2 >> 2] = $arglist_next6;
      $31 = $0;
      $32 = $31;
      HEAP32[$32 >> 2] = $30;
      $33 = $31 + 4 | 0;
      $34 = $33;
      HEAP32[$34 >> 2] = 0;
      break L1;
      break;
     }
    case 12:
     {
      $arglist_current8 = HEAP32[$2 >> 2] | 0;
      $35 = $arglist_current8;
      $36 = 0 + 8 | 0;
      $expanded49 = $36;
      $expanded48 = $expanded49 - 1 | 0;
      $37 = $35 + $expanded48 | 0;
      $38 = 0 + 8 | 0;
      $expanded53 = $38;
      $expanded52 = $expanded53 - 1 | 0;
      $expanded51 = $expanded52 ^ -1;
      $39 = $37 & $expanded51;
      $40 = $39;
      $41 = $40;
      $42 = $41;
      $43 = HEAP32[$42 >> 2] | 0;
      $44 = $41 + 4 | 0;
      $45 = $44;
      $46 = HEAP32[$45 >> 2] | 0;
      $arglist_next9 = $40 + 8 | 0;
      HEAP32[$2 >> 2] = $arglist_next9;
      $47 = $0;
      $48 = $47;
      HEAP32[$48 >> 2] = $43;
      $49 = $47 + 4 | 0;
      $50 = $49;
      HEAP32[$50 >> 2] = $46;
      break L1;
      break;
     }
    case 13:
     {
      $arglist_current11 = HEAP32[$2 >> 2] | 0;
      $51 = $arglist_current11;
      $52 = 0 + 4 | 0;
      $expanded56 = $52;
      $expanded55 = $expanded56 - 1 | 0;
      $53 = $51 + $expanded55 | 0;
      $54 = 0 + 4 | 0;
      $expanded60 = $54;
      $expanded59 = $expanded60 - 1 | 0;
      $expanded58 = $expanded59 ^ -1;
      $55 = $53 & $expanded58;
      $56 = $55;
      $57 = HEAP32[$56 >> 2] | 0;
      $arglist_next12 = $56 + 4 | 0;
      HEAP32[$2 >> 2] = $arglist_next12;
      $58 = $57 & 65535;
      $59 = $58 << 16 >> 16;
      $60 = ($59 | 0) < 0;
      $61 = $60 << 31 >> 31;
      $62 = $0;
      $63 = $62;
      HEAP32[$63 >> 2] = $59;
      $64 = $62 + 4 | 0;
      $65 = $64;
      HEAP32[$65 >> 2] = $61;
      break L1;
      break;
     }
    case 14:
     {
      $arglist_current14 = HEAP32[$2 >> 2] | 0;
      $66 = $arglist_current14;
      $67 = 0 + 4 | 0;
      $expanded63 = $67;
      $expanded62 = $expanded63 - 1 | 0;
      $68 = $66 + $expanded62 | 0;
      $69 = 0 + 4 | 0;
      $expanded67 = $69;
      $expanded66 = $expanded67 - 1 | 0;
      $expanded65 = $expanded66 ^ -1;
      $70 = $68 & $expanded65;
      $71 = $70;
      $72 = HEAP32[$71 >> 2] | 0;
      $arglist_next15 = $71 + 4 | 0;
      HEAP32[$2 >> 2] = $arglist_next15;
      $$mask31 = $72 & 65535;
      $73 = $0;
      $74 = $73;
      HEAP32[$74 >> 2] = $$mask31;
      $75 = $73 + 4 | 0;
      $76 = $75;
      HEAP32[$76 >> 2] = 0;
      break L1;
      break;
     }
    case 15:
     {
      $arglist_current17 = HEAP32[$2 >> 2] | 0;
      $77 = $arglist_current17;
      $78 = 0 + 4 | 0;
      $expanded70 = $78;
      $expanded69 = $expanded70 - 1 | 0;
      $79 = $77 + $expanded69 | 0;
      $80 = 0 + 4 | 0;
      $expanded74 = $80;
      $expanded73 = $expanded74 - 1 | 0;
      $expanded72 = $expanded73 ^ -1;
      $81 = $79 & $expanded72;
      $82 = $81;
      $83 = HEAP32[$82 >> 2] | 0;
      $arglist_next18 = $82 + 4 | 0;
      HEAP32[$2 >> 2] = $arglist_next18;
      $84 = $83 & 255;
      $85 = $84 << 24 >> 24;
      $86 = ($85 | 0) < 0;
      $87 = $86 << 31 >> 31;
      $88 = $0;
      $89 = $88;
      HEAP32[$89 >> 2] = $85;
      $90 = $88 + 4 | 0;
      $91 = $90;
      HEAP32[$91 >> 2] = $87;
      break L1;
      break;
     }
    case 16:
     {
      $arglist_current20 = HEAP32[$2 >> 2] | 0;
      $92 = $arglist_current20;
      $93 = 0 + 4 | 0;
      $expanded77 = $93;
      $expanded76 = $expanded77 - 1 | 0;
      $94 = $92 + $expanded76 | 0;
      $95 = 0 + 4 | 0;
      $expanded81 = $95;
      $expanded80 = $expanded81 - 1 | 0;
      $expanded79 = $expanded80 ^ -1;
      $96 = $94 & $expanded79;
      $97 = $96;
      $98 = HEAP32[$97 >> 2] | 0;
      $arglist_next21 = $97 + 4 | 0;
      HEAP32[$2 >> 2] = $arglist_next21;
      $$mask = $98 & 255;
      $99 = $0;
      $100 = $99;
      HEAP32[$100 >> 2] = $$mask;
      $101 = $99 + 4 | 0;
      $102 = $101;
      HEAP32[$102 >> 2] = 0;
      break L1;
      break;
     }
    case 17:
     {
      $arglist_current23 = HEAP32[$2 >> 2] | 0;
      $103 = $arglist_current23;
      $104 = 0 + 8 | 0;
      $expanded84 = $104;
      $expanded83 = $expanded84 - 1 | 0;
      $105 = $103 + $expanded83 | 0;
      $106 = 0 + 8 | 0;
      $expanded88 = $106;
      $expanded87 = $expanded88 - 1 | 0;
      $expanded86 = $expanded87 ^ -1;
      $107 = $105 & $expanded86;
      $108 = $107;
      $109 = +HEAPF64[$108 >> 3];
      $arglist_next24 = $108 + 8 | 0;
      HEAP32[$2 >> 2] = $arglist_next24;
      HEAPF64[$0 >> 3] = $109;
      break L1;
      break;
     }
    case 18:
     {
      $arglist_current26 = HEAP32[$2 >> 2] | 0;
      $110 = $arglist_current26;
      $111 = 0 + 8 | 0;
      $expanded91 = $111;
      $expanded90 = $expanded91 - 1 | 0;
      $112 = $110 + $expanded90 | 0;
      $113 = 0 + 8 | 0;
      $expanded95 = $113;
      $expanded94 = $expanded95 - 1 | 0;
      $expanded93 = $expanded94 ^ -1;
      $114 = $112 & $expanded93;
      $115 = $114;
      $116 = +HEAPF64[$115 >> 3];
      $arglist_next27 = $115 + 8 | 0;
      HEAP32[$2 >> 2] = $arglist_next27;
      HEAPF64[$0 >> 3] = $116;
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
     HEAP32[$rem + 4 >> 2] = 0;
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0;
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0 | $a$0 & -1;
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
   $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = 0 | $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
    $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    HEAP32[$rem >> 2] = 0 | $a$0 & -1;
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
    $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
    HEAP32[$rem + 4 >> 2] = 0;
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = 0 | $a$0 & -1;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_0_0_extract_trunc = $154$0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
 }
 $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $4 = HEAP32[tempDoublePtr >> 2] | 0;
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0;
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0;
 $14 = tempRet0;
 $15 = ($13 | 0) == 0;
 $16 = ($14 | 0) == 0;
 $17 = $15 & $16;
 L1 : do {
  if ($17) {
   label = 3;
  } else {
   $18 = ___DOUBLE_BITS_564($1) | 0;
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = $20 >>> 0 > 2146435072;
   $22 = $18 >>> 0 > 0;
   $23 = ($20 | 0) == 2146435072;
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8 | 0) == 2047;
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
    $30 = tempRet0;
    $31 = $30 >>> 0 > $14 >>> 0;
    $32 = $29 >>> 0 > $13 >>> 0;
    $33 = ($30 | 0) == ($14 | 0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!$35) {
     $36 = ($29 | 0) == ($13 | 0);
     $37 = ($30 | 0) == ($14 | 0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return +$$;
    }
    $40 = ($8 | 0) == 0;
    if ($40) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
     $42 = tempRet0;
     $43 = ($42 | 0) > -1;
     $44 = $41 >>> 0 > 4294967295;
     $45 = ($42 | 0) == -1;
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;
      $49 = $41;
      $50 = $42;
      while (1) {
       $48 = $$073100 + -1 | 0;
       $51 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0;
       $52 = tempRet0;
       $53 = ($52 | 0) > -1;
       $54 = $51 >>> 0 > 4294967295;
       $55 = ($52 | 0) == -1;
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;
        $49 = $51;
        $50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = 1 - $$073$lcssa | 0;
     $59 = _bitshift64Shl($2 | 0, $3 | 0, $58 | 0) | 0;
     $60 = tempRet0;
     $$174 = $$073$lcssa;
     $87 = $59;
     $88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;
     $87 = $2;
     $88 = $62;
    }
    $63 = ($11 | 0) == 0;
    if ($63) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0;
     $65 = tempRet0;
     $66 = ($65 | 0) > -1;
     $67 = $64 >>> 0 > 4294967295;
     $68 = ($65 | 0) == -1;
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;
      $72 = $64;
      $73 = $65;
      while (1) {
       $71 = $$07194 + -1 | 0;
       $74 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0;
       $75 = tempRet0;
       $76 = ($75 | 0) > -1;
       $77 = $74 >>> 0 > 4294967295;
       $78 = ($75 | 0) == -1;
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;
        $72 = $74;
        $73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = 1 - $$071$lcssa | 0;
     $82 = _bitshift64Shl($4 | 0, $5 | 0, $81 | 0) | 0;
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;
     $89 = $82;
     $90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;
     $89 = $4;
     $90 = $85;
    }
    $86 = ($$174 | 0) > ($$172$ph | 0);
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0;
    $92 = tempRet0;
    $93 = ($92 | 0) > -1;
    $94 = $91 >>> 0 > 4294967295;
    $95 = ($92 | 0) == -1;
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23 : do {
     if ($86) {
      $$27586 = $$174;
      $101 = $92;
      $156 = $97;
      $157 = $87;
      $158 = $88;
      $99 = $91;
      while (1) {
       if ($156) {
        $98 = ($99 | 0) == 0;
        $100 = ($101 | 0) == 0;
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;
         $105 = $101;
        }
       } else {
        $104 = $157;
        $105 = $158;
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0;
       $107 = tempRet0;
       $108 = $$27586 + -1 | 0;
       $109 = ($108 | 0) > ($$172$ph | 0);
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0;
       $111 = tempRet0;
       $112 = ($111 | 0) > -1;
       $113 = $110 >>> 0 > 4294967295;
       $114 = ($111 | 0) == -1;
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;
        $101 = $111;
        $156 = $116;
        $157 = $106;
        $158 = $107;
        $99 = $110;
       } else {
        $$275$lcssa = $108;
        $$lcssa = $116;
        $118 = $110;
        $120 = $111;
        $159 = $106;
        $160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;
      $$lcssa = $97;
      $118 = $91;
      $120 = $92;
      $159 = $87;
      $160 = $88;
     }
    } while (0);
    if ($$lcssa) {
     $117 = ($118 | 0) == 0;
     $119 = ($120 | 0) == 0;
     $121 = $117 & $119;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $123 = $120;
      $125 = $118;
     }
    } else {
     $123 = $160;
     $125 = $159;
    }
    $122 = $123 >>> 0 < 1048576;
    $124 = $125 >>> 0 < 0;
    $126 = ($123 | 0) == 1048576;
    $127 = $126 & $124;
    $128 = $122 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;
     $130 = $125;
     $131 = $123;
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0;
      $133 = tempRet0;
      $134 = $$37683 + -1 | 0;
      $135 = $133 >>> 0 < 1048576;
      $136 = $132 >>> 0 < 0;
      $137 = ($133 | 0) == 1048576;
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;
       $130 = $132;
       $131 = $133;
      } else {
       $$376$lcssa = $134;
       $141 = $132;
       $142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;
     $141 = $125;
     $142 = $123;
    }
    $140 = ($$376$lcssa | 0) > 0;
    if ($140) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0;
     $144 = tempRet0;
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0;
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;
     $154 = $147;
    } else {
     $149 = 1 - $$376$lcssa | 0;
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, $149 | 0) | 0;
     $151 = tempRet0;
     $153 = $151;
     $154 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr >> 2] = $154;
    HEAP32[tempDoublePtr + 4 >> 2] = $152;
    $155 = +HEAPF64[tempDoublePtr >> 3];
    $$070 = $155;
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return +$$070;
}

function _bind_init() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = HEAP32[44316] | 0;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  $4 = _ObjectDef_new() | 0;
  HEAP32[44316] = $4;
 }
 HEAP32[177272 >> 2] = 0;
 $5 = HEAP32[44316] | 0;
 HEAP32[177276 >> 2] = $5;
 HEAP32[44317] = 4;
 HEAP32[44320] = 177268;
 HEAP32[177284 >> 2] = 0;
 $6 = HEAP32[44316] | 0;
 _bind_skill_var($6);
 $7 = HEAP32[44316] | 0;
 _bind_show_face($7);
 $8 = HEAP32[44316] | 0;
 _ObjectDef_addFieldGBKArray($8, 6497, 3678, 32);
 $9 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($9, 6513, 0, 186047, 0, 0);
 $10 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($10, 6522, 0, 186048, 0, 0);
 $11 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($11, 6527, 0, 186049, 0, 0);
 $12 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($12, 6532, 0, 186050, 0, 0);
 $13 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($13, 6537, 0, 186051, 0, 0);
 $14 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($14, 6542, 1, 8353, 0, 0);
 $15 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($15, 6556, 1, 8355, 0, 0);
 $16 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($16, 6571, 0, 253157, 0, 0);
 $17 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($17, 6585, 0, 186043, 0, 0);
 $18 = HEAP32[44316] | 0;
 _ObjectDef_addFieldGBKArray($18, 6604, 253029, 128);
 $19 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($19, 6618, 0, 242659, 0, 0);
 $20 = HEAP32[44316] | 0;
 _ObjectDef_addFieldArray($20, 6635, 2, 242661, 32);
 $21 = HEAP32[44316] | 0;
 _ObjectDef_addFieldGBKArray($21, 6655, 242789, 10240);
 $0 = 242789;
 $22 = HEAP32[44316] | 0;
 $23 = $0;
 _ObjectDef_addFieldArray($22, 6680, 0, $23, 10240);
 $1 = 242789;
 $24 = HEAP32[44316] | 0;
 $25 = $1;
 _ObjectDef_addFieldArray($24, 6710, 0, $25, 5120);
 $26 = HEAP32[44316] | 0;
 _ObjectDef_addFieldGBKArray($26, 6604, 253029, 128);
 $27 = HEAP32[44316] | 0;
 $28 = HEAP32[44297] | 0;
 $29 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $30 = $29 & 65535;
 $31 = $30 + 7 | 0;
 $32 = ($31 | 0) / 8 & -1;
 $33 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $34 = $33 & 65535;
 $35 = Math_imul($32, $34) | 0;
 _ObjectDef_addFieldArray($27, 6737, 0, $28, $35);
 $36 = HEAP32[44316] | 0;
 $37 = HEAP32[44298] | 0;
 _ObjectDef_addFieldArray($36, 6746, 0, $37, 65536);
 $38 = HEAP32[44316] | 0;
 $39 = HEAP32[44299] | 0;
 _ObjectDef_addFieldArray($38, 6761, 0, $39, 256);
 $40 = HEAP32[44316] | 0;
 $41 = HEAP32[44300] | 0;
 _ObjectDef_addFieldArray($40, 6772, 0, $41, 250);
 $42 = HEAP32[44316] | 0;
 $43 = HEAP32[44301] | 0;
 _ObjectDef_addFieldArray($42, 6784, 0, $43, 230);
 $44 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($44, 6796, 1, 186055, 0, 0);
 $45 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($45, 6805, 1, 186057, 0, 0);
 $46 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($46, 6818, 0, 186059, 0, 0);
 $47 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($47, 6827, 0, 186060, 0, 0);
 $48 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($48, 6836, 0, 186061, 0, 0);
 $49 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($49, 6845, 0, 186062, 0, 0);
 $50 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($50, 6854, 0, 186063, 0, 0);
 $51 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($51, 6862, 0, 186064, 0, 0);
 $52 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($52, 6870, 0, 186065, 0, 0);
 $53 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($53, 6879, 0, 186066, 0, 0);
 $54 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($54, 6888, 0, 186067, 0, 0);
 $55 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($55, 6897, 0, 186068, 0, 0);
 $56 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($56, 6906, 0, 186069, 0, 0);
 $57 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($57, 6915, 0, 186070, 0, 0);
 $58 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($58, 6924, 0, 186071, 0, 0);
 $59 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($59, 6932, 0, 186072, 0, 0);
 $60 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($60, 6940, 0, 186073, 0, 0);
 $61 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($61, 6950, 0, 186074, 0, 0);
 $62 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($62, 6963, 0, 186075, 0, 0);
 $63 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($63, 6976, 0, 186076, 0, 0);
 $64 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($64, 6989, 0, 186077, 0, 0);
 $65 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($65, 7001, 0, 186078, 0, 0);
 $66 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($66, 7013, 0, 186079, 0, 0);
 $67 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($67, 7025, 1, 186270, 0, 0);
 $68 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($68, 7038, 1, 186272, 0, 0);
 $69 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($69, 7049, 0, 186274, 0, 0);
 $70 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($70, 7061, 0, 186275, 0, 0);
 $71 = HEAP32[44316] | 0;
 _ObjectDef_addFieldF($71, 7068, 0, 186269, 0, 0);
 $72 = HEAP32[44316] | 0;
 _ObjectDef_addFieldArray($72, 7086, 1, 233748, 2e3);
 $73 = HEAP32[44316] | 0;
 _ObjectDef_addFieldArray($73, 7101, 0, 237748, 2e3);
 $74 = HEAP32[68 >> 2] | 0;
 $75 = $74 * 2e3 | 0;
 HEAP32[80 >> 2] = $75;
 HEAP32[96 >> 2] = 186276;
 $76 = HEAP32[44316] | 0;
 _ObjectDef_addField($76, 88);
 $77 = HEAP32[104 >> 2] | 0;
 $78 = HEAP8[5256 >> 0] | 0;
 $79 = $78 & 255;
 $80 = Math_imul($77, $79) | 0;
 HEAP32[116 >> 2] = $80;
 HEAP32[132 >> 2] = 224276;
 $81 = HEAP32[44316] | 0;
 _ObjectDef_addField($81, 124);
 $82 = HEAP32[140 >> 2] | 0;
 $83 = $82 * 2e3 | 0;
 HEAP32[152 >> 2] = $83;
 $84 = HEAP32[44294] | 0;
 $85 = _ResLoadToCon(66, 1, $84) | 0;
 $86 = $85;
 HEAP32[168 >> 2] = $86;
 $87 = HEAP32[44316] | 0;
 _ObjectDef_addField($87, 160);
 $88 = HEAP32[176 >> 2] | 0;
 $89 = $88 * 2e3 | 0;
 HEAP32[188 >> 2] = $89;
 $90 = HEAP32[44294] | 0;
 $91 = _ResLoadToCon(10, 1, $90) | 0;
 $92 = $91;
 HEAP32[204 >> 2] = $92;
 $93 = HEAP32[44316] | 0;
 _ObjectDef_addField($93, 196);
 $94 = HEAP32[212 >> 2] | 0;
 $95 = $94 << 1;
 HEAP32[224 >> 2] = $95;
 HEAP32[240 >> 2] = 177208;
 $96 = HEAP32[44316] | 0;
 _ObjectDef_addField($96, 232);
 $97 = HEAP32[248 >> 2] | 0;
 $98 = $97 * 10 | 0;
 $99 = $98 << 1;
 HEAP32[260 >> 2] = $99;
 HEAP32[276 >> 2] = 186129;
 $100 = HEAP32[44316] | 0;
 _ObjectDef_addField($100, 268);
 HEAP32[288 >> 2] = 186080;
 $101 = HEAP32[44316] | 0;
 _ObjectDef_addField($101, 280);
 HEAP32[300 >> 2] = 5152;
 $102 = HEAP32[44316] | 0;
 _ObjectDef_addField($102, 292);
 $103 = HEAP32[308 >> 2] | 0;
 $104 = $103 * 200 | 0;
 HEAP32[320 >> 2] = $104;
 $105 = HEAP32[44326] | 0;
 $106 = $105;
 HEAP32[336 >> 2] = $106;
 $107 = HEAP32[44316] | 0;
 _ObjectDef_addField($107, 328);
 HEAP32[348 >> 2] = 241748;
 $108 = HEAP32[44316] | 0;
 _ObjectDef_addField($108, 340);
 $109 = HEAP32[44316] | 0;
 $110 = HEAP32[44324] | 0;
 _ObjectDef_addFieldArray($109, 7115, 0, $110, 30);
 $111 = HEAP32[44316] | 0;
 $112 = HEAP32[44325] | 0;
 _ObjectDef_addFieldArray($111, 7128, 0, $112, 600);
 STACKTOP = sp;
 return;
}

function _GetExcHZMCode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 44 | 0;
 $9 = sp + 36 | 0;
 $13 = sp + 34 | 0;
 $2 = $0;
 $3 = $1;
 $17 = $2;
 $18 = $17 & 65535;
 $19 = $18 >> 8;
 $20 = $19 & 255;
 $21 = $20 & 255;
 $22 = ($21 | 0) < 161;
 if (!$22) {
  $72 = $2;
  $73 = _CountHZMAddrOff($72) | 0;
  $8 = $73;
  HEAP8[$4 >> 0] = 18 | 0;
  HEAP8[$4 + 1 >> 0] = 18 | 0;
  $74 = HEAP32[44296] | 0;
  $75 = $8;
  _gam_fseek($74, $75, 0) | 0;
  $76 = HEAP32[44296] | 0;
  _gam_fread($4, 1, 18, $76) | 0;
  $5 = 0;
  while (1) {
   $77 = $5;
   $78 = $77 & 255;
   $79 = ($78 | 0) < 6;
   if (!$79) {
    break;
   }
   $80 = $5;
   $81 = $80 & 255;
   $82 = $81 << 2;
   $83 = $82 & 255;
   $6 = $83;
   $84 = $5;
   $85 = $84 & 255;
   $86 = $85 * 3 | 0;
   $87 = $86 & 255;
   $7 = $87;
   $88 = $7;
   $89 = $88 & 255;
   $90 = $4 + $89 | 0;
   $91 = HEAP8[$90 >> 0] | 0;
   $92 = $3;
   $93 = $6;
   $94 = $93 & 255;
   $95 = $92 + $94 | 0;
   HEAP8[$95 >> 0] = $91;
   $96 = $7;
   $97 = $96 & 255;
   $98 = $97 + 1 | 0;
   $99 = $4 + $98 | 0;
   $100 = HEAP8[$99 >> 0] | 0;
   $101 = $100 & 255;
   $102 = $101 & 240;
   $103 = $102 & 255;
   $104 = $3;
   $105 = $6;
   $106 = $105 & 255;
   $107 = $106 + 1 | 0;
   $108 = $104 + $107 | 0;
   HEAP8[$108 >> 0] = $103;
   $109 = $7;
   $110 = $109 & 255;
   $111 = $110 + 1 | 0;
   $112 = $4 + $111 | 0;
   $113 = HEAP8[$112 >> 0] | 0;
   $114 = $113 & 255;
   $115 = $114 & 15;
   $116 = $115 << 4;
   $117 = $116 & 255;
   $118 = $3;
   $119 = $6;
   $120 = $119 & 255;
   $121 = $120 + 2 | 0;
   $122 = $118 + $121 | 0;
   HEAP8[$122 >> 0] = $117;
   $123 = $7;
   $124 = $123 & 255;
   $125 = $124 + 2 | 0;
   $126 = $4 + $125 | 0;
   $127 = HEAP8[$126 >> 0] | 0;
   $128 = $127 & 255;
   $129 = $128 & 240;
   $130 = $129 >> 4;
   $131 = $3;
   $132 = $6;
   $133 = $132 & 255;
   $134 = $133 + 2 | 0;
   $135 = $131 + $134 | 0;
   $136 = HEAP8[$135 >> 0] | 0;
   $137 = $136 & 255;
   $138 = $137 + $130 | 0;
   $139 = $138 & 255;
   HEAP8[$135 >> 0] = $139;
   $140 = $7;
   $141 = $140 & 255;
   $142 = $141 + 2 | 0;
   $143 = $4 + $142 | 0;
   $144 = HEAP8[$143 >> 0] | 0;
   $145 = $144 & 255;
   $146 = $145 & 15;
   $147 = $146 << 4;
   $148 = $147 & 255;
   $149 = $3;
   $150 = $6;
   $151 = $150 & 255;
   $152 = $151 + 3 | 0;
   $153 = $149 + $152 | 0;
   HEAP8[$153 >> 0] = $148;
   $154 = $5;
   $155 = $154 + 1 << 24 >> 24;
   $5 = $155;
  }
  STACKTOP = sp;
  return;
 }
 HEAP8[$9 >> 0] = -1 & 255;
 HEAP8[$9 + 1 >> 0] = -1 >> 8 & 255;
 HEAP8[$9 + 2 >> 0] = -1 >> 16 & 255;
 HEAP8[$9 + 3 >> 0] = -1 >> 24;
 $23 = _has_hook(5108) | 0;
 $24 = ($23 | 0) != 0;
 L8 : do {
  if ($24) {
   $10 = 5108;
   while (1) {
    $25 = $10;
    $26 = ($25 | 0) != (0 | 0);
    if (!$26) {
     break L8;
    }
    $27 = _Value_ObjectValue_new() | 0;
    $11 = $27;
    while (1) {
     $28 = $11;
     $29 = ($28 | 0) != (0 | 0);
     if (!$29) {
      break;
     }
     $30 = $11;
     $31 = HEAP32[$30 >> 2] | 0;
     $32 = $31 + 8 | 0;
     $33 = HEAP32[$32 >> 2] | 0;
     $12 = $33;
     while (1) {
      $34 = $12;
      $35 = ($34 | 0) != (0 | 0);
      if (!$35) {
       break;
      }
      $36 = $2;
      HEAP8[$13 >> 0] = $36 & 255;
      HEAP8[$13 + 1 >> 0] = $36 >> 8;
      $37 = $12;
      _ObjectDef_addFieldF($37, 5125, 1, $13, 0, 0);
      $38 = $12;
      _ObjectDef_addFieldF($38, 5131, 2, $9, 0, 0);
      $39 = $10;
      $40 = $11;
      _call_hook_s($39, $40) | 0;
      $12 = 0;
     }
     $41 = $11;
     _Value_ObjectValue_free($41);
     $11 = 0;
    }
    $10 = 0;
   }
  }
 } while (0);
 $42 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8 | HEAPU8[$9 + 2 >> 0] << 16 | HEAPU8[$9 + 3 >> 0] << 24;
 $43 = ($42 | 0) >= 0;
 if ($43) {
  $44 = HEAP32[44294] | 0;
  $45 = _ResLoadToCon(3, 2, $44) | 0;
  $14 = $45;
  $46 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8 | HEAPU8[$9 + 2 >> 0] << 16 | HEAPU8[$9 + 3 >> 0] << 24;
  $47 = $14;
  $48 = $47 + 4 | 0;
  $49 = HEAPU8[$48 >> 0] | HEAPU8[$48 + 1 >> 0] << 8;
  $50 = $49 & 65535;
  $51 = ($46 | 0) < ($50 | 0);
  if ($51) {
   $52 = $14;
   $53 = HEAPU8[$52 >> 0] | HEAPU8[$52 + 1 >> 0] << 8;
   $54 = $53 & 65535;
   $55 = $54 + 7 | 0;
   $56 = ($55 | 0) / 8 & -1;
   $57 = $14;
   $58 = $57 + 2 | 0;
   $59 = HEAPU8[$58 >> 0] | HEAPU8[$58 + 1 >> 0] << 8;
   $60 = $59 & 65535;
   $61 = Math_imul($56, $60) | 0;
   $15 = $61;
   $62 = $14;
   $63 = $62 + 7 | 0;
   $16 = $63;
   $64 = $3;
   $65 = $16;
   $66 = $15;
   $67 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8 | HEAPU8[$9 + 2 >> 0] << 16 | HEAPU8[$9 + 3 >> 0] << 24;
   $68 = Math_imul($66, $67) | 0;
   $69 = $65 + $68 | 0;
   $70 = $15;
   _memcpy($64 | 0, $69 | 0, $70 | 0) | 0;
   STACKTOP = sp;
   return;
  }
 }
 $71 = $3;
 dest = $71;
 stop = dest + 24 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _SysPicture($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $28 = $9;
 $29 = $28 << 16 >> 16;
 $30 = $7;
 $31 = $30 << 16 >> 16;
 $32 = $29 - $31 | 0;
 $33 = $32 + 1 | 0;
 $14 = $33;
 $34 = $10;
 $35 = $34 << 16 >> 16;
 $36 = $8;
 $37 = $36 << 16 >> 16;
 $38 = $35 - $37 | 0;
 $39 = $38 + 1 | 0;
 $15 = $39;
 $40 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $41 = $40 & 65535;
 $42 = $41 + 7 | 0;
 $43 = ($42 | 0) / 8 & -1;
 $44 = $43 << 3;
 $45 = $44 << 1;
 $20 = $45;
 $21 = 0;
 $46 = $11;
 $47 = ($46 | 0) != (0 | 0);
 if ($47) {
  $48 = $11;
  $49 = $14;
  $50 = $49 & 65535;
  $51 = $15;
  $52 = $51 & 65535;
  $53 = $13;
  __decodePic(515303, $48, $50, $52, $53);
  $11 = 515303;
 }
 $54 = $13;
 $55 = $54 & 255;
 $56 = $14;
 $57 = Math_imul($56, $55) | 0;
 $14 = $57;
 $58 = $13;
 $59 = $58 & 255;
 $60 = $15;
 $61 = Math_imul($60, $59) | 0;
 $15 = $61;
 $62 = $14;
 $22 = $62;
 $17 = 0;
 while (1) {
  $63 = $17;
  $64 = $15;
  $65 = ($63 | 0) < ($64 | 0);
  if (!$65) {
   break;
  }
  $66 = $8;
  $67 = $66 << 16 >> 16;
  $68 = $67 << 1;
  $69 = $17;
  $70 = $68 + $69 | 0;
  $19 = $70;
  $16 = 0;
  while (1) {
   $71 = $16;
   $72 = $14;
   $73 = ($71 | 0) < ($72 | 0);
   if (!$73) {
    break;
   }
   $74 = $7;
   $75 = $74 << 16 >> 16;
   $76 = $75 << 1;
   $77 = $16;
   $78 = $76 + $77 | 0;
   $18 = $78;
   $79 = $20;
   $80 = $19;
   $81 = Math_imul($79, $80) | 0;
   $82 = $18;
   $83 = $81 + $82 | 0;
   $25 = $83;
   $84 = $18;
   $85 = ($84 | 0) / 2 & -1;
   $86 = $85 & 65535;
   $87 = $19;
   $88 = ($87 | 0) / 2 & -1;
   $89 = $88 & 65535;
   $90 = __insideScreen($86, $89) | 0;
   $91 = $90 << 24 >> 24 != 0;
   if ($91) {
    $92 = $12;
    $93 = $92 & 255;
    $94 = ($93 | 0) == 4;
    L12 : do {
     if ($94) {
      $24 = 0;
     } else {
      $95 = $11;
      $96 = ($95 | 0) != (0 | 0);
      if ($96) {
       $97 = HEAP8[253157] | 0;
       $98 = $97 & 255;
       $99 = $98 & 1;
       $100 = ($99 | 0) != 0;
       if ($100) {
        $101 = $14;
        $102 = $16;
        $103 = $101 - $102 | 0;
        $104 = $103 - 1 | 0;
        $107 = $104;
       } else {
        $105 = $16;
        $107 = $105;
       }
       $106 = $107 & 65535;
       $26 = $106;
       $108 = HEAP8[253157] | 0;
       $109 = $108 & 255;
       $110 = $109 & 2;
       $111 = ($110 | 0) != 0;
       if ($111) {
        $112 = $15;
        $113 = $17;
        $114 = $112 - $113 | 0;
        $115 = $114 - 1 | 0;
        $118 = $115;
       } else {
        $116 = $17;
        $118 = $116;
       }
       $117 = $118 & 65535;
       $27 = $117;
       $119 = $11;
       $120 = $22;
       $121 = $27;
       $122 = $121 << 16 >> 16;
       $123 = Math_imul($120, $122) | 0;
       $124 = $26;
       $125 = $124 << 16 >> 16;
       $126 = $123 + $125 | 0;
       $127 = $119 + $126 | 0;
       $128 = HEAP8[$127 >> 0] | 0;
       $23 = $128;
      } else {
       $23 = 0;
      }
      $129 = HEAP32[503] | 0;
      $130 = $25;
      $131 = $129 + $130 | 0;
      $132 = HEAP8[$131 >> 0] | 0;
      $24 = $132;
      $133 = $12;
      $134 = $133 & 255;
      switch ($134 | 0) {
      case 0:
       {
        $135 = $23;
        $24 = $135;
        break L12;
        break;
       }
      case 1:
       {
        $136 = $23;
        $137 = $136 & 255;
        $138 = ($137 | 0) != 0;
        if ($138) {
         $139 = $24;
         $140 = $139 & 255;
         $141 = ($140 | 0) != 0;
         $143 = $141;
        } else {
         $143 = 0;
        }
        $142 = $143 & 1;
        $144 = $142 & 255;
        $24 = $144;
        break L12;
        break;
       }
      case 2:
       {
        $145 = $23;
        $146 = $145 & 255;
        $147 = ($146 | 0) != 0;
        if ($147) {
         $152 = 1;
        } else {
         $148 = $24;
         $149 = $148 & 255;
         $150 = ($149 | 0) != 0;
         $152 = $150;
        }
        $151 = $152 & 1;
        $153 = $151 & 255;
        $24 = $153;
        break L12;
        break;
       }
      default:
       {
        break L12;
       }
      }
     }
    } while (0);
    $154 = $24;
    $155 = $154 << 24 >> 24 != 0;
    $156 = $155 ^ 1;
    $157 = $156 ^ 1;
    $158 = $157 & 1;
    $159 = $158 & 255;
    $160 = HEAP32[503] | 0;
    $161 = $25;
    $162 = $160 + $161 | 0;
    HEAP8[$162 >> 0] = $159;
    $163 = $21;
    $164 = $163 + 1 | 0;
    $21 = $164;
   }
   $165 = $16;
   $166 = $165 + 1 | 0;
   $16 = $166;
  }
  $167 = $17;
  $168 = $167 + 1 | 0;
  $17 = $168;
 }
 _flushLcd();
 STACKTOP = sp;
 return;
}

function _FgtGetRelief($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $0;
 $14 = HEAP32[44300] | 0;
 _memset($14 | 0, -1, 225) | 0;
 $15 = $1;
 $16 = $15 & 255;
 $17 = 186129 + ($16 * 7 | 0) | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $19 = $18 & 255;
 $20 = $19 + 1 | 0;
 $21 = $20 & 255;
 $3 = $21;
 $22 = $1;
 $23 = $22 & 255;
 $24 = 186129 + ($23 * 7 | 0) | 0;
 $25 = $24 + 1 | 0;
 $26 = HEAP8[$25 >> 0] | 0;
 $27 = $26 & 255;
 $28 = $27 + 1 | 0;
 $29 = $28 & 255;
 $4 = $29;
 $30 = $1;
 $31 = $30 & 255;
 $32 = 186129 + ($31 * 7 | 0) | 0;
 $33 = $32 + 4 | 0;
 $34 = HEAP8[$33 >> 0] | 0;
 $11 = $34;
 $35 = $3;
 $36 = $35 & 255;
 $37 = $11;
 $38 = $37 & 255;
 $39 = ($36 | 0) >= ($38 | 0);
 if ($39) {
  $40 = $3;
  $41 = $40 & 255;
  $42 = $11;
  $43 = $42 & 255;
  $44 = $41 - $43 | 0;
  $45 = $44 & 255;
  $5 = $45;
  $7 = 0;
 } else {
  $5 = 0;
  $46 = $11;
  $47 = $46 & 255;
  $48 = $3;
  $49 = $48 & 255;
  $50 = $47 - $49 | 0;
  $51 = $50 & 255;
  $7 = $51;
 }
 $52 = $4;
 $53 = $52 & 255;
 $54 = $11;
 $55 = $54 & 255;
 $56 = ($53 | 0) >= ($55 | 0);
 if ($56) {
  $57 = $4;
  $58 = $57 & 255;
  $59 = $11;
  $60 = $59 & 255;
  $61 = $58 - $60 | 0;
  $62 = $61 & 255;
  $6 = $62;
  $8 = 0;
 } else {
  $6 = 0;
  $63 = $11;
  $64 = $63 & 255;
  $65 = $4;
  $66 = $65 & 255;
  $67 = $64 - $66 | 0;
  $68 = $67 & 255;
  $8 = $68;
 }
 $69 = $11;
 $70 = $69 & 255;
 $71 = $7;
 $72 = $71 & 255;
 $73 = $70 - $72 | 0;
 $74 = $73 & 255;
 $9 = $74;
 $75 = HEAP8[186059] | 0;
 $76 = $75 & 255;
 $77 = $3;
 $78 = $77 & 255;
 $79 = $76 - $78 | 0;
 $80 = $11;
 $81 = $80 & 255;
 $82 = ($79 | 0) > ($81 | 0);
 if ($82) {
  $83 = $11;
  $84 = $83 & 255;
  $85 = $84 - 1 | 0;
  $86 = $9;
  $87 = $86 & 255;
  $88 = $87 + $85 | 0;
  $89 = $88 & 255;
  $9 = $89;
 } else {
  $90 = HEAP8[186059] | 0;
  $91 = $90 & 255;
  $92 = $3;
  $93 = $92 & 255;
  $94 = $91 - $93 | 0;
  $95 = $9;
  $96 = $95 & 255;
  $97 = $96 + $94 | 0;
  $98 = $97 & 255;
  $9 = $98;
 }
 $99 = $11;
 $100 = $99 & 255;
 $101 = $8;
 $102 = $101 & 255;
 $103 = $100 - $102 | 0;
 $104 = $103 & 255;
 $10 = $104;
 $105 = HEAP8[186060] | 0;
 $106 = $105 & 255;
 $107 = $4;
 $108 = $107 & 255;
 $109 = $106 - $108 | 0;
 $110 = $11;
 $111 = $110 & 255;
 $112 = ($109 | 0) > ($111 | 0);
 if ($112) {
  $113 = $11;
  $114 = $113 & 255;
  $115 = $114 - 1 | 0;
  $116 = $10;
  $117 = $116 & 255;
  $118 = $117 + $115 | 0;
  $119 = $118 & 255;
  $10 = $119;
 } else {
  $120 = HEAP8[186060] | 0;
  $121 = $120 & 255;
  $122 = $4;
  $123 = $122 & 255;
  $124 = $121 - $123 | 0;
  $125 = $10;
  $126 = $125 & 255;
  $127 = $126 + $124 | 0;
  $128 = $127 & 255;
  $10 = $128;
 }
 $129 = HEAP32[44298] | 0;
 $2 = $129;
 $130 = $6;
 $131 = $130 & 255;
 $12 = $131;
 $132 = HEAP8[186059] | 0;
 $133 = $132 & 255;
 $134 = $12;
 $135 = $134 & 65535;
 $136 = Math_imul($135, $133) | 0;
 $137 = $136 & 65535;
 $12 = $137;
 $138 = $5;
 $139 = $138 & 255;
 $140 = $12;
 $141 = $140 & 65535;
 $142 = $141 + $139 | 0;
 $143 = $142 & 65535;
 $12 = $143;
 $144 = $8;
 $145 = $144 & 255;
 $13 = $145;
 $146 = $13;
 $147 = $146 & 65535;
 $148 = $147 * 15 | 0;
 $149 = $148 & 65535;
 $13 = $149;
 $150 = $7;
 $151 = $150 & 255;
 $152 = $13;
 $153 = $152 & 65535;
 $154 = $153 + $151 | 0;
 $155 = $154 & 65535;
 $13 = $155;
 $4 = 0;
 while (1) {
  $156 = $4;
  $157 = $156 & 255;
  $158 = $10;
  $159 = $158 & 255;
  $160 = ($157 | 0) < ($159 | 0);
  if (!$160) {
   break;
  }
  $161 = HEAP32[44300] | 0;
  $162 = $13;
  $163 = $162 & 65535;
  $164 = $161 + $163 | 0;
  $165 = $2;
  $166 = $12;
  $167 = $166 & 65535;
  $168 = $165 + $167 | 0;
  $169 = $9;
  $170 = $169 & 255;
  _memcpy($164 | 0, $168 | 0, $170 | 0) | 0;
  $171 = HEAP8[186059] | 0;
  $172 = $171 & 255;
  $173 = $12;
  $174 = $173 & 65535;
  $175 = $174 + $172 | 0;
  $176 = $175 & 65535;
  $12 = $176;
  $177 = $13;
  $178 = $177 & 65535;
  $179 = $178 + 15 | 0;
  $180 = $179 & 65535;
  $13 = $180;
  $181 = $4;
  $182 = $181 & 255;
  $183 = $182 + 1 | 0;
  $184 = $183 & 255;
  $4 = $184;
 }
 $185 = $5;
 HEAP8[186065] = $185;
 $186 = $6;
 HEAP8[186066] = $186;
 $187 = $7;
 HEAP8[186067] = $187;
 $188 = $8;
 HEAP8[186068] = $188;
 STACKTOP = sp;
 return;
}

function _FgtShowGen($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 HEAP8[$1 >> 0] = $0;
 $14 = _has_hook(3976) | 0;
 $15 = ($14 | 0) != 0;
 L1 : do {
  if ($15) {
   $11 = 3976;
   L3 : while (1) {
    $16 = $11;
    $17 = ($16 | 0) != (0 | 0);
    if (!$17) {
     break L1;
    }
    $18 = _Value_ObjectValue_new() | 0;
    $12 = $18;
    while (1) {
     $19 = $12;
     $20 = ($19 | 0) != (0 | 0);
     if (!$20) {
      break;
     }
     $21 = $12;
     $22 = HEAP32[$21 >> 2] | 0;
     $23 = $22 + 8 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $13 = $24;
     while (1) {
      $25 = $13;
      $26 = ($25 | 0) != (0 | 0);
      if (!$26) {
       break;
      }
      $27 = $13;
      _ObjectDef_addFieldF($27, 3989, 0, $1, 0, 0);
      $28 = $11;
      $29 = $12;
      $30 = _call_hook_a($28, $29) | 0;
      $31 = ($30 | 0) == 0;
      if ($31) {
       break L3;
      }
      $13 = 0;
     }
     $33 = $12;
     _Value_ObjectValue_free($33);
     $12 = 0;
    }
    $11 = 0;
   }
   $32 = $12;
   _Value_ObjectValue_free($32);
   STACKTOP = sp;
   return;
  }
 } while (0);
 $2 = 0;
 while (1) {
  $34 = $2;
  $35 = $34 & 255;
  $36 = ($35 | 0) < 20;
  if (!$36) {
   break;
  }
  $37 = $2;
  $38 = $37 & 255;
  $39 = 186129 + ($38 * 7 | 0) | 0;
  $10 = $39;
  $40 = $10;
  $41 = $40 + 6 | 0;
  $42 = HEAP8[$41 >> 0] | 0;
  $9 = $42;
  $43 = $9;
  $44 = $43 & 255;
  $45 = 8 == ($44 | 0);
  if (!$45) {
   $46 = $10;
   $47 = HEAP8[$46 >> 0] | 0;
   $7 = $47;
   $48 = $10;
   $49 = $48 + 1 | 0;
   $50 = HEAP8[$49 >> 0] | 0;
   $8 = $50;
   $51 = $7;
   $52 = $51 & 255;
   $53 = HEAP8[186063] | 0;
   $54 = $53 & 255;
   $55 = ($52 | 0) >= ($54 | 0);
   if ($55) {
    $56 = $7;
    $57 = $56 & 255;
    $58 = HEAP8[186063] | 0;
    $59 = $58 & 255;
    $60 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
    $61 = $60 & 65535;
    $62 = ($61 | 0) / 16 & -1;
    $63 = $59 + $62 | 0;
    $64 = ($57 | 0) < ($63 | 0);
    if ($64) {
     $65 = $8;
     $66 = $65 & 255;
     $67 = HEAP8[186064] | 0;
     $68 = $67 & 255;
     $69 = ($66 | 0) >= ($68 | 0);
     if ($69) {
      $70 = $8;
      $71 = $70 & 255;
      $72 = HEAP8[186064] | 0;
      $73 = $72 & 255;
      $74 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
      $75 = $74 & 65535;
      $76 = ($75 | 0) / 16 & -1;
      $77 = $76 - 1 | 0;
      $78 = $73 + $77 | 0;
      $79 = ($71 | 0) < ($78 | 0);
      if ($79) {
       $80 = $2;
       $81 = _FgtGenPIdx($80) | 0;
       $3 = $81;
       $82 = $10;
       $83 = $82 + 5 | 0;
       $84 = HEAP8[$83 >> 0] | 0;
       $85 = $84 & 255;
       $86 = 0 == ($85 | 0);
       if ($86) {
        $87 = HEAP8[$1 >> 0] | 0;
        $88 = $87 & 255;
        $89 = $3;
        $90 = $89 & 255;
        $91 = $90 + $88 | 0;
        $92 = $91 & 255;
        $3 = $92;
       }
       $93 = $7;
       $94 = $93 & 255;
       $95 = HEAP8[186063] | 0;
       $96 = $95 & 255;
       $97 = $94 - $96 | 0;
       $98 = $97 << 4;
       $99 = $98 + 0 | 0;
       $100 = $99 & 255;
       $5 = $100;
       $101 = $8;
       $102 = $101 & 255;
       $103 = HEAP8[186064] | 0;
       $104 = $103 & 255;
       $105 = $102 - $104 | 0;
       $106 = $105 << 4;
       $107 = $106 + 0 | 0;
       $108 = $107 & 255;
       $6 = $108;
       $109 = $7;
       $110 = $8;
       _FgtMapUnitShow($109, $110, 0);
       $111 = $3;
       $112 = $111 & 255;
       $113 = $112 + 1 | 0;
       $114 = $113 & 255;
       $115 = $5;
       $116 = $6;
       _FgtRPicShowV(5, $114, $115, $116);
       $117 = $9;
       $118 = $117 & 255;
       $119 = ($118 | 0) == 2;
       do {
        if ($119) {
         $4 = 2;
        } else {
         $120 = $9;
         $121 = $120 & 255;
         $122 = ($121 | 0) == 3;
         if ($122) {
          $4 = 4;
          break;
         } else {
          $4 = 0;
          break;
         }
        }
       } while (0);
       $123 = $4;
       $124 = $123 << 24 >> 24 != 0;
       if ($124) {
        $125 = HEAP8[$1 >> 0] | 0;
        $126 = $125 & 255;
        $127 = $4;
        $128 = $127 & 255;
        $129 = $128 + $126 | 0;
        $130 = $129 & 255;
        $4 = $130;
        $131 = $4;
        $132 = $131 & 255;
        $133 = $132 + 1 | 0;
        $134 = $133 & 255;
        $135 = $5;
        $136 = $6;
        _FgtRPicShowV(34, $134, $135, $136);
       }
      }
     }
    }
   }
  }
  $137 = $2;
  $138 = $137 & 255;
  $139 = $138 + 1 | 0;
  $140 = $139 & 255;
  $2 = $140;
 }
 STACKTOP = sp;
 return;
}

function _FgtSetDifPot($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $10 = $1;
 $11 = $10 & 255;
 $12 = ($11 | 0) < 10;
 if ($12) {
  $7 = 10;
 } else {
  $7 = 0;
 }
 $13 = HEAP8[186065] | 0;
 $14 = $13 & 255;
 $15 = HEAP8[186067] | 0;
 $16 = $15 & 255;
 $17 = $14 - $16 | 0;
 $18 = $17 & 255;
 $5 = $18;
 $19 = HEAP8[186066] | 0;
 $20 = $19 & 255;
 $21 = HEAP8[186068] | 0;
 $22 = $21 & 255;
 $23 = $20 - $22 | 0;
 $24 = $23 & 255;
 $6 = $24;
 $25 = $7;
 $2 = $25;
 while (1) {
  $26 = $2;
  $27 = $26 & 255;
  $28 = $7;
  $29 = $28 & 255;
  $30 = $29 + 10 | 0;
  $31 = ($27 | 0) < ($30 | 0);
  if (!$31) {
   break;
  }
  $32 = $2;
  $33 = $32 & 255;
  $34 = 186129 + ($33 * 7 | 0) | 0;
  $9 = $34;
  $35 = $9;
  $36 = $35 + 6 | 0;
  $37 = HEAP8[$36 >> 0] | 0;
  $38 = $37 & 255;
  $39 = 8 == ($38 | 0);
  if (!$39) {
   $40 = $9;
   $41 = HEAP8[$40 >> 0] | 0;
   $42 = $41 & 255;
   $43 = $5;
   $44 = $43 & 255;
   $45 = $42 - $44 | 0;
   $46 = $45 & 255;
   $3 = $46;
   $47 = $9;
   $48 = $47 + 1 | 0;
   $49 = HEAP8[$48 >> 0] | 0;
   $50 = $49 & 255;
   $51 = $6;
   $52 = $51 & 255;
   $53 = $50 - $52 | 0;
   $54 = $53 & 255;
   $4 = $54;
   $55 = $3;
   $56 = $55 & 255;
   $57 = ($56 | 0) > 15;
   if (!$57) {
    $58 = $4;
    $59 = $58 & 255;
    $60 = ($59 | 0) > 15;
    if (!$60) {
     $61 = $4;
     $8 = $61;
     $62 = $8;
     $63 = $62 & 255;
     $64 = $63 * 15 | 0;
     $65 = $3;
     $66 = $65 & 255;
     $67 = $64 + $66 | 0;
     $68 = $67 & 255;
     $8 = $68;
     $69 = $8;
     $70 = $69 & 255;
     $71 = ($70 | 0) > 224;
     if (!$71) {
      $72 = HEAP32[44300] | 0;
      $73 = $8;
      $74 = $73 & 255;
      $75 = $72 + $74 | 0;
      HEAP8[$75 >> 0] = -2;
      $76 = $1;
      $77 = $76 & 255;
      $78 = 186129 + ($77 * 7 | 0) | 0;
      $79 = $78 + 6 | 0;
      $80 = HEAP8[$79 >> 0] | 0;
      $81 = $80 & 255;
      $82 = ($81 | 0) == 4;
      if (!$82) {
       $83 = $3;
       $84 = $83 & 255;
       $85 = ($84 | 0) != 0;
       if ($85) {
        $86 = $8;
        $87 = $86 & 255;
        $88 = ($87 | 0) > 1;
        if ($88) {
         $89 = HEAP32[44300] | 0;
         $90 = $8;
         $91 = $90 & 255;
         $92 = $91 - 1 | 0;
         $93 = $89 + $92 | 0;
         $94 = HEAP8[$93 >> 0] | 0;
         $95 = $94 & 255;
         $96 = $95 | 160;
         $97 = $96 & 255;
         HEAP8[$93 >> 0] = $97;
        }
       }
       $98 = $3;
       $99 = $98 & 255;
       $100 = ($99 | 0) < 14;
       if ($100) {
        $101 = $8;
        $102 = $101 & 255;
        $103 = ($102 | 0) < 224;
        if ($103) {
         $104 = HEAP32[44300] | 0;
         $105 = $8;
         $106 = $105 & 255;
         $107 = $106 + 1 | 0;
         $108 = $104 + $107 | 0;
         $109 = HEAP8[$108 >> 0] | 0;
         $110 = $109 & 255;
         $111 = $110 | 160;
         $112 = $111 & 255;
         HEAP8[$108 >> 0] = $112;
        }
       }
       $113 = $4;
       $114 = $113 & 255;
       $115 = ($114 | 0) != 0;
       if ($115) {
        $116 = $8;
        $117 = $116 & 255;
        $118 = ($117 | 0) > 14;
        if ($118) {
         $119 = HEAP32[44300] | 0;
         $120 = $8;
         $121 = $120 & 255;
         $122 = $121 - 15 | 0;
         $123 = $119 + $122 | 0;
         $124 = HEAP8[$123 >> 0] | 0;
         $125 = $124 & 255;
         $126 = $125 | 160;
         $127 = $126 & 255;
         HEAP8[$123 >> 0] = $127;
        }
       }
       $128 = $4;
       $129 = $128 & 255;
       $130 = ($129 | 0) < 14;
       if ($130) {
        $131 = $8;
        $132 = $131 & 255;
        $133 = ($132 | 0) < 209;
        if ($133) {
         $134 = HEAP32[44300] | 0;
         $135 = $8;
         $136 = $135 & 255;
         $137 = $136 + 15 | 0;
         $138 = $134 + $137 | 0;
         $139 = HEAP8[$138 >> 0] | 0;
         $140 = $139 & 255;
         $141 = $140 | 160;
         $142 = $141 & 255;
         HEAP8[$138 >> 0] = $142;
        }
       }
      }
     }
    }
   }
  }
  $143 = $2;
  $144 = $143 & 255;
  $145 = $144 + 1 | 0;
  $146 = $145 & 255;
  $2 = $146;
 }
 STACKTOP = sp;
 return;
}

function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 100 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $3 >>> 0 < $5 >>> 0;
 if ($6) {
  $7 = $3 + 1 | 0;
  HEAP32[$2 >> 2] = $7;
  $8 = HEAP8[$3 >> 0] | 0;
  $9 = $8 & 255;
  $11 = $9;
 } else {
  $10 = ___shgetc($0) | 0;
  $11 = $10;
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $12 = ($11 | 0) == 45;
   $13 = $12 & 1;
   $14 = HEAP32[$2 >> 2] | 0;
   $15 = HEAP32[$4 >> 2] | 0;
   $16 = $14 >>> 0 < $15 >>> 0;
   if ($16) {
    $17 = $14 + 1 | 0;
    HEAP32[$2 >> 2] = $17;
    $18 = HEAP8[$14 >> 0] | 0;
    $19 = $18 & 255;
    $22 = $19;
   } else {
    $20 = ___shgetc($0) | 0;
    $22 = $20;
   }
   $21 = $22 + -48 | 0;
   $23 = $21 >>> 0 > 9;
   $24 = ($1 | 0) != 0;
   $or$cond3 = $24 & $23;
   if ($or$cond3) {
    $25 = HEAP32[$4 >> 2] | 0;
    $26 = ($25 | 0) == (0 | 0);
    if ($26) {
     $$0 = $13;
     $$049 = $22;
    } else {
     $27 = HEAP32[$2 >> 2] | 0;
     $28 = $27 + -1 | 0;
     HEAP32[$2 >> 2] = $28;
     $$0 = $13;
     $$049 = $22;
    }
   } else {
    $$0 = $13;
    $$049 = $22;
   }
   break;
  }
 default:
  {
   $$0 = 0;
   $$049 = $11;
  }
 }
 $29 = $$049 + -48 | 0;
 $30 = $29 >>> 0 > 9;
 if ($30) {
  $31 = HEAP32[$4 >> 2] | 0;
  $32 = ($31 | 0) == (0 | 0);
  if ($32) {
   $100 = -2147483648;
   $101 = 0;
  } else {
   $33 = HEAP32[$2 >> 2] | 0;
   $34 = $33 + -1 | 0;
   HEAP32[$2 >> 2] = $34;
   $100 = -2147483648;
   $101 = 0;
  }
 } else {
  $$04861 = 0;
  $$160 = $$049;
  while (1) {
   $35 = $$04861 * 10 | 0;
   $36 = $$160 + -48 | 0;
   $37 = $36 + $35 | 0;
   $38 = HEAP32[$2 >> 2] | 0;
   $39 = HEAP32[$4 >> 2] | 0;
   $40 = $38 >>> 0 < $39 >>> 0;
   if ($40) {
    $41 = $38 + 1 | 0;
    HEAP32[$2 >> 2] = $41;
    $42 = HEAP8[$38 >> 0] | 0;
    $43 = $42 & 255;
    $$1$be = $43;
   } else {
    $44 = ___shgetc($0) | 0;
    $$1$be = $44;
   }
   $45 = $$1$be + -48 | 0;
   $46 = $45 >>> 0 < 10;
   $47 = ($37 | 0) < 214748364;
   $48 = $46 & $47;
   if ($48) {
    $$04861 = $37;
    $$160 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37 | 0) < 0;
  $50 = $49 << 31 >> 31;
  $51 = $$1$be + -48 | 0;
  $52 = $51 >>> 0 < 10;
  if ($52) {
   $$254 = $$1$be;
   $56 = $37;
   $57 = $50;
   while (1) {
    $58 = ___muldi3($56 | 0, $57 | 0, 10, 0) | 0;
    $59 = tempRet0;
    $60 = ($$254 | 0) < 0;
    $61 = $60 << 31 >> 31;
    $62 = _i64Add($$254 | 0, $61 | 0, -48, -1) | 0;
    $63 = tempRet0;
    $64 = _i64Add($62 | 0, $63 | 0, $58 | 0, $59 | 0) | 0;
    $65 = tempRet0;
    $66 = HEAP32[$2 >> 2] | 0;
    $67 = HEAP32[$4 >> 2] | 0;
    $68 = $66 >>> 0 < $67 >>> 0;
    if ($68) {
     $69 = $66 + 1 | 0;
     HEAP32[$2 >> 2] = $69;
     $70 = HEAP8[$66 >> 0] | 0;
     $71 = $70 & 255;
     $$2$be = $71;
    } else {
     $72 = ___shgetc($0) | 0;
     $$2$be = $72;
    }
    $73 = $$2$be + -48 | 0;
    $74 = $73 >>> 0 < 10;
    $75 = ($65 | 0) < 21474836;
    $76 = $64 >>> 0 < 2061584302;
    $77 = ($65 | 0) == 21474836;
    $78 = $77 & $76;
    $79 = $75 | $78;
    $80 = $74 & $79;
    if ($80) {
     $$254 = $$2$be;
     $56 = $64;
     $57 = $65;
    } else {
     $$2$lcssa = $$2$be;
     $94 = $64;
     $95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;
   $94 = $37;
   $95 = $50;
  }
  $53 = $$2$lcssa + -48 | 0;
  $54 = $53 >>> 0 < 10;
  $55 = HEAP32[$4 >> 2] | 0;
  if ($54) {
   $83 = $55;
   while (1) {
    $81 = HEAP32[$2 >> 2] | 0;
    $82 = $81 >>> 0 < $83 >>> 0;
    if ($82) {
     $84 = $81 + 1 | 0;
     HEAP32[$2 >> 2] = $84;
     $85 = HEAP8[$81 >> 0] | 0;
     $86 = $85 & 255;
     $$3$be = $86;
     $102 = $83;
    } else {
     $87 = ___shgetc($0) | 0;
     $$pre = HEAP32[$4 >> 2] | 0;
     $$3$be = $87;
     $102 = $$pre;
    }
    $88 = $$3$be + -48 | 0;
    $89 = $88 >>> 0 < 10;
    if ($89) {
     $83 = $102;
    } else {
     $$lcssa = $102;
     break;
    }
   }
  } else {
   $$lcssa = $55;
  }
  $90 = ($$lcssa | 0) == (0 | 0);
  if (!$90) {
   $91 = HEAP32[$2 >> 2] | 0;
   $92 = $91 + -1 | 0;
   HEAP32[$2 >> 2] = $92;
  }
  $93 = ($$0 | 0) != 0;
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0;
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;
  $101 = $98;
 }
 tempRet0 = $100;
 return $101 | 0;
}

function _FgtGetMPos($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $9 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $10 = $9 & 65535;
 $11 = $10 - 1 | 0;
 $12 = $11 - 0 | 0;
 $13 = $12 - 24 | 0;
 $14 = ($13 | 0) / 12 & -1;
 $15 = $14 & 255;
 $6 = $15;
 $16 = $6;
 $17 = $16 & 255;
 $18 = ($17 | 0) < 4;
 if ($18) {
  $6 = 6;
 } else {
  $6 = 0;
 }
 $19 = $2;
 $20 = $19 & 255;
 $21 = 186129 + ($20 * 7 | 0) | 0;
 $22 = HEAP8[$21 >> 0] | 0;
 $23 = $22 & 255;
 $24 = HEAP8[186063] | 0;
 $25 = $24 & 255;
 $26 = $23 - $25 | 0;
 $27 = $26 << 4;
 $28 = $27 + 0 | 0;
 $29 = $28 + 16 | 0;
 $30 = $29 + 2 | 0;
 $31 = $30 & 255;
 $4 = $31;
 $32 = $4;
 $33 = $32 & 255;
 $34 = $33 + 24 | 0;
 $35 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $36 = $35 & 65535;
 $37 = $36 - 1 | 0;
 $38 = $6;
 $39 = $38 & 255;
 $40 = $37 - $39 | 0;
 $41 = ($34 | 0) > ($40 | 0);
 if ($41) {
  $42 = $4;
  $43 = $42 & 255;
  $44 = $43 - 16 | 0;
  $45 = $6;
  $46 = $45 & 255;
  $47 = $44 - $46 | 0;
  $48 = $47 - 24 | 0;
  $49 = $48 & 255;
  $4 = $49;
 }
 $50 = $4;
 $51 = $50 & 255;
 $52 = $3;
 HEAP8[$52 >> 0] = $51 & 255;
 HEAP8[$52 + 1 >> 0] = $51 >> 8;
 $53 = $4;
 $54 = $53 & 255;
 $55 = $54 + 24 | 0;
 $56 = $55 & 65535;
 $57 = $3;
 $58 = $57 + 4 | 0;
 HEAP8[$58 >> 0] = $56 & 255;
 HEAP8[$58 + 1 >> 0] = $56 >> 8;
 $59 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $60 = $59 & 65535;
 $61 = $60 - 1 | 0;
 $62 = $61 - 0 | 0;
 $63 = $62 - 24 | 0;
 $64 = ($63 | 0) / 12 & -1;
 $65 = ($64 | 0) < 4;
 if ($65) {
  $7 = 4;
  $66 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $67 = $66 & 65535;
  $68 = $67 - 1 | 0;
  $69 = $68 - 18 | 0;
  $70 = $69 & 255;
  $8 = $70;
  $115 = $7;
  $116 = $115 & 255;
  $117 = $3;
  $118 = $117 + 2 | 0;
  HEAP8[$118 >> 0] = $116 & 255;
  HEAP8[$118 + 1 >> 0] = $116 >> 8;
  $119 = $8;
  $120 = $119 & 255;
  $121 = $3;
  $122 = $121 + 6 | 0;
  HEAP8[$122 >> 0] = $120 & 255;
  HEAP8[$122 + 1 >> 0] = $120 >> 8;
  STACKTOP = sp;
  return;
 }
 $71 = $2;
 $72 = $71 & 255;
 $73 = 186129 + ($72 * 7 | 0) | 0;
 $74 = $73 + 1 | 0;
 $75 = HEAP8[$74 >> 0] | 0;
 $76 = $75 & 255;
 $77 = HEAP8[186064] | 0;
 $78 = $77 & 255;
 $79 = $76 - $78 | 0;
 $80 = $79 << 4;
 $81 = $80 + 0 | 0;
 $82 = $81 & 255;
 $5 = $82;
 $83 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $84 = $83 & 65535;
 $85 = $84 - 1 | 0;
 $86 = $5;
 $87 = $86 & 255;
 $88 = $85 - $87 | 0;
 $89 = $88 - 24 | 0;
 $90 = ($89 | 0) / 12 & -1;
 $91 = ($90 | 0) < 4;
 if ($91) {
  $92 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $93 = $92 & 65535;
  $94 = $93 - 1 | 0;
  $95 = $94 - 18 | 0;
  $96 = $95 & 255;
  $5 = $96;
  $97 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $98 = $97 & 65535;
  $99 = $98 - 1 | 0;
  $100 = $99 - 18 | 0;
  $101 = $100 & 255;
  $8 = $101;
  $102 = $5;
  $103 = $102 & 255;
  $104 = $103 - 48 | 0;
  $105 = $104 & 255;
  $7 = $105;
  $115 = $7;
  $116 = $115 & 255;
  $117 = $3;
  $118 = $117 + 2 | 0;
  HEAP8[$118 >> 0] = $116 & 255;
  HEAP8[$118 + 1 >> 0] = $116 >> 8;
  $119 = $8;
  $120 = $119 & 255;
  $121 = $3;
  $122 = $121 + 6 | 0;
  HEAP8[$122 >> 0] = $120 & 255;
  HEAP8[$122 + 1 >> 0] = $120 >> 8;
  STACKTOP = sp;
  return;
 } else {
  $106 = $5;
  $107 = $106 & 255;
  $108 = $107 + 4 | 0;
  $109 = $108 & 255;
  $5 = $109;
  $110 = $5;
  $7 = $110;
  $111 = $5;
  $112 = $111 & 255;
  $113 = $112 + 48 | 0;
  $114 = $113 & 255;
  $8 = $114;
  $115 = $7;
  $116 = $115 & 255;
  $117 = $3;
  $118 = $117 + 2 | 0;
  HEAP8[$118 >> 0] = $116 & 255;
  HEAP8[$118 + 1 >> 0] = $116 >> 8;
  $119 = $8;
  $120 = $119 & 255;
  $121 = $3;
  $122 = $121 + 6 | 0;
  HEAP8[$122 >> 0] = $120 & 255;
  HEAP8[$122 + 1 >> 0] = $120 >> 8;
  STACKTOP = sp;
  return;
 }
}

function _FgtCountPath($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $1 = sp + 80 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 29 | 0;
 $5 = sp + 28 | 0;
 HEAP8[$1 >> 0] = $0;
 $16 = _has_hook(173747) | 0;
 $17 = ($16 | 0) != 0;
 L1 : do {
  if ($17) {
   $13 = 173747;
   L3 : while (1) {
    $18 = $13;
    $19 = ($18 | 0) != (0 | 0);
    if (!$19) {
     break L1;
    }
    $20 = _Value_ObjectValue_new() | 0;
    $14 = $20;
    while (1) {
     $21 = $14;
     $22 = ($21 | 0) != (0 | 0);
     if (!$22) {
      break;
     }
     $23 = $14;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = $24 + 8 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     $15 = $26;
     while (1) {
      $27 = $15;
      $28 = ($27 | 0) != (0 | 0);
      if (!$28) {
       break;
      }
      $29 = $15;
      _ObjectDef_addFieldF($29, 173627, 0, $1, 0, 0);
      HEAP8[186067] = 0;
      HEAP8[186068] = 0;
      $30 = HEAP8[$1 >> 0] | 0;
      $31 = $30 & 255;
      $32 = 186129 + ($31 * 7 | 0) | 0;
      $33 = HEAP8[$32 >> 0] | 0;
      $34 = $33 & 255;
      $35 = $34 - 7 | 0;
      $36 = $35 & 255;
      HEAP8[186065] = $36;
      $37 = HEAP8[$1 >> 0] | 0;
      $38 = $37 & 255;
      $39 = 186129 + ($38 * 7 | 0) | 0;
      $40 = $39 + 1 | 0;
      $41 = HEAP8[$40 >> 0] | 0;
      $42 = $41 & 255;
      $43 = $42 - 7 | 0;
      $44 = $43 & 255;
      HEAP8[186066] = $44;
      $45 = $13;
      $46 = $14;
      $47 = _call_hook_a($45, $46) | 0;
      $48 = ($47 | 0) == 0;
      if ($48) {
       break L3;
      }
      $15 = 0;
     }
     $50 = $14;
     _Value_ObjectValue_free($50);
     $14 = 0;
    }
    $13 = 0;
   }
   $49 = $14;
   _Value_ObjectValue_free($49);
   STACKTOP = sp;
   return;
  }
 } while (0);
 $51 = HEAP8[$1 >> 0] | 0;
 _CountMoveP($51);
 $52 = HEAP8[$1 >> 0] | 0;
 _FgtGetRelief($52);
 $53 = HEAP8[$1 >> 0] | 0;
 _FgtTransMove($53);
 $54 = HEAP8[$1 >> 0] | 0;
 $55 = $54 & 255;
 $56 = 186129 + ($55 * 7 | 0) | 0;
 $57 = $56 + 4 | 0;
 $58 = HEAP8[$57 >> 0] | 0;
 $59 = $58 & 255;
 $60 = $59 - 1 | 0;
 $61 = $60 << 4;
 $62 = $61 & 255;
 $9 = $62;
 $63 = $9;
 HEAP8[$2 >> 0] = $63;
 HEAP8[$4 >> 0] = 1;
 HEAP8[$5 >> 0] = 0;
 $64 = HEAP8[$4 >> 0] | 0;
 $7 = $64;
 $10 = $5;
 $11 = $2;
 $12 = $3;
 while (1) {
  $65 = $7;
  $66 = $65 << 24 >> 24 != 0;
  if (!$66) {
   break;
  }
  $6 = 0;
  while (1) {
   $67 = $6;
   $68 = $67 & 255;
   $69 = $7;
   $70 = $69 & 255;
   $71 = ($68 | 0) < ($70 | 0);
   $72 = $11;
   if (!$71) {
    break;
   }
   $73 = $6;
   $74 = $73 & 255;
   $75 = $72 + $74 | 0;
   $76 = HEAP8[$75 >> 0] | 0;
   $8 = $76;
   $77 = HEAP32[44300] | 0;
   $78 = $8;
   $79 = $78 & 255;
   $80 = $77 + $79 | 0;
   $81 = HEAP8[$80 >> 0] | 0;
   $82 = $81 & 255;
   $83 = ($82 | 0) < 2;
   if (!$83) {
    $84 = $8;
    $85 = $12;
    $86 = $10;
    _FgtUnfurlTree($84, $85, $86);
   }
   $87 = $6;
   $88 = $87 & 255;
   $89 = $88 + 1 | 0;
   $90 = $89 & 255;
   $6 = $90;
  }
  $91 = ($72 | 0) == ($2 | 0);
  if ($91) {
   HEAP8[$4 >> 0] = 0;
   $11 = $3;
   $12 = $2;
   $92 = HEAP8[$5 >> 0] | 0;
   $7 = $92;
   $10 = $4;
   continue;
  } else {
   HEAP8[$5 >> 0] = 0;
   $11 = $2;
   $12 = $3;
   $93 = HEAP8[$4 >> 0] | 0;
   $7 = $93;
   $10 = $5;
   continue;
  }
 }
 $94 = HEAP32[44300] | 0;
 $95 = $9;
 $96 = $95 & 255;
 $97 = $94 + $96 | 0;
 HEAP8[$97 >> 0] = 0;
 $98 = HEAP8[$1 >> 0] | 0;
 _FgtSetSamPot($98);
 $99 = HEAP8[$1 >> 0] | 0;
 $100 = $99 & 255;
 $101 = 186129 + ($100 * 7 | 0) | 0;
 $102 = $101 + 6 | 0;
 $103 = HEAP8[$102 >> 0] | 0;
 $104 = $103 & 255;
 $105 = ($104 | 0) == 4;
 if (!$105) {
  STACKTOP = sp;
  return;
 }
 $106 = HEAP8[$1 >> 0] | 0;
 _FgtSetDifPot($106);
 STACKTOP = sp;
 return;
}

function _GamStrShow($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = $10 << 16 >> 16;
 $12 = $11 + 12 | 0;
 $13 = HEAP8[186051] | 0;
 $14 = $13 & 255;
 $15 = ($12 | 0) > ($14 | 0);
 if ($15) {
  $3 = 0;
  $125 = $3;
  STACKTOP = sp;
  return $125 | 0;
 }
 $7 = 0;
 L5 : while (1) {
  $16 = $6;
  $17 = $7;
  $18 = $17 & 65535;
  $19 = $16 + $18 | 0;
  $20 = HEAP8[$19 >> 0] | 0;
  $21 = $20 & 255;
  $22 = ($21 | 0) != 0;
  if (!$22) {
   break;
  }
  $23 = $6;
  $24 = $7;
  $25 = $24 & 65535;
  $26 = $23 + $25 | 0;
  $27 = HEAP8[$26 >> 0] | 0;
  $28 = $27 & 255;
  $9 = $28;
  $29 = $9;
  $30 = $29 & 65535;
  $31 = ($30 | 0) == 10;
  do {
   if ($31) {
    $32 = HEAP8[186048] | 0;
    $33 = $32 & 255;
    $4 = $33;
    $34 = $5;
    $35 = $34 << 16 >> 16;
    $36 = $35 + 12 | 0;
    $37 = $36 & 65535;
    $5 = $37;
    $38 = $5;
    $39 = $38 << 16 >> 16;
    $40 = HEAP8[186051] | 0;
    $41 = $40 & 255;
    $42 = ($39 | 0) > ($41 | 0);
    if ($42) {
     break L5;
    }
   } else {
    $43 = $9;
    $44 = $43 & 65535;
    $45 = ($44 | 0) < 128;
    if ($45) {
     $8 = 5;
    } else {
     $8 = 11;
    }
    $46 = $4;
    $47 = $46 << 16 >> 16;
    $48 = $8;
    $49 = $48 & 65535;
    $50 = $47 + $49 | 0;
    $51 = HEAP8[186050] | 0;
    $52 = $51 & 255;
    $53 = ($50 | 0) > ($52 | 0);
    if ($53) {
     $54 = $8;
     $55 = $54 & 65535;
     $56 = $4;
     $57 = $56 << 16 >> 16;
     $58 = $57 + $55 | 0;
     $59 = $58 & 65535;
     $4 = $59;
    }
    $60 = $4;
    $61 = $60 << 16 >> 16;
    $62 = HEAP8[186050] | 0;
    $63 = $62 & 255;
    $64 = ($61 | 0) > ($63 | 0);
    if ($64) {
     $65 = HEAP8[186048] | 0;
     $66 = $65 & 255;
     $4 = $66;
     $67 = $4;
     $68 = $67 << 16 >> 16;
     $69 = $8;
     $70 = $69 & 65535;
     $71 = $68 + $70 | 0;
     $72 = HEAP8[186050] | 0;
     $73 = $72 & 255;
     $74 = ($71 | 0) > ($73 | 0);
     if ($74) {
      break L5;
     }
     $75 = $5;
     $76 = $75 << 16 >> 16;
     $77 = $76 + 12 | 0;
     $78 = $77 & 65535;
     $5 = $78;
     $79 = $5;
     $80 = $79 << 16 >> 16;
     $81 = $80 + 12 | 0;
     $82 = HEAP8[186051] | 0;
     $83 = $82 & 255;
     $84 = ($81 | 0) > ($83 | 0);
     if ($84) {
      break L5;
     }
    }
    $85 = $9;
    $86 = $85 & 65535;
    $87 = ($86 | 0) < 128;
    if ($87) {
     $88 = $4;
     $89 = $5;
     $90 = $9;
     $91 = $90 & 255;
     _GamAscii($88, $89, $91);
     $92 = $4;
     $93 = $92 << 16 >> 16;
     $94 = $93 + 6 | 0;
     $95 = $94 & 65535;
     $4 = $95;
     break;
    } else {
     $96 = $7;
     $97 = $96 & 65535;
     $98 = $97 + 1 | 0;
     $99 = $98 & 65535;
     $7 = $99;
     $100 = $9;
     $101 = $100 & 65535;
     $102 = $101 << 8;
     $103 = $102 & 65535;
     $9 = $103;
     $104 = $6;
     $105 = $7;
     $106 = $105 & 65535;
     $107 = $104 + $106 | 0;
     $108 = HEAP8[$107 >> 0] | 0;
     $109 = $108 & 255;
     $110 = $9;
     $111 = $110 & 65535;
     $112 = $111 + $109 | 0;
     $113 = $112 & 65535;
     $9 = $113;
     $114 = $4;
     $115 = $5;
     $116 = $9;
     _GamChinese($114, $115, $116);
     $117 = $4;
     $118 = $117 << 16 >> 16;
     $119 = $118 + 12 | 0;
     $120 = $119 & 65535;
     $4 = $120;
     break;
    }
   }
  } while (0);
  $121 = $7;
  $122 = $121 + 1 << 16 >> 16;
  $7 = $122;
 }
 _GamResumeSet();
 $123 = $7;
 $124 = $123 & 65535;
 $3 = $124;
 $125 = $3;
 STACKTOP = sp;
 return $125 | 0;
}

function _GetWeekCity($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $13 = HEAP32[44326] | 0;
 $12 = $13;
 $10 = -1;
 $4 = 0;
 while (1) {
  $14 = $4;
  $15 = $14 & 255;
  $16 = $2;
  $17 = $16 & 255;
  $18 = ($15 | 0) < ($17 | 0);
  $19 = $3;
  if (!$18) {
   break;
  }
  $20 = $4;
  $21 = $20 & 255;
  $22 = $19 + $21 | 0;
  $23 = HEAP8[$22 >> 0] | 0;
  $24 = $23 & 255;
  $25 = 224276 + ($24 * 37 | 0) | 0;
  $11 = $25;
  $9 = 0;
  $5 = 0;
  while (1) {
   $26 = $5;
   $27 = $26 & 255;
   $28 = $11;
   $29 = $28 + 31 | 0;
   $30 = HEAPU8[$29 >> 0] | HEAPU8[$29 + 1 >> 0] << 8;
   $31 = $30 & 65535;
   $32 = ($27 | 0) < ($31 | 0);
   if (!$32) {
    break;
   }
   $33 = $11;
   $34 = $33 + 29 | 0;
   $35 = HEAPU8[$34 >> 0] | HEAPU8[$34 + 1 >> 0] << 8;
   $36 = $35 & 65535;
   $37 = $5;
   $38 = $37 & 255;
   $39 = $36 + $38 | 0;
   $40 = 233748 + ($39 << 1) | 0;
   $41 = HEAPU8[$40 >> 0] | HEAPU8[$40 + 1 >> 0] << 8;
   $7 = $41;
   $42 = $7;
   $43 = $42 & 65535;
   $44 = 186276 + ($43 * 19 | 0) | 0;
   $45 = $44 + 2 | 0;
   $46 = HEAPU8[$45 >> 0] | HEAPU8[$45 + 1 >> 0] << 8;
   $47 = $46 & 65535;
   $48 = $11;
   $49 = $48 + 1 | 0;
   $50 = HEAPU8[$49 >> 0] | HEAPU8[$49 + 1 >> 0] << 8;
   $51 = $50 & 65535;
   $52 = ($47 | 0) == ($51 | 0);
   if ($52) {
    $53 = $7;
    $54 = $53 & 65535;
    $55 = 186276 + ($54 * 19 | 0) | 0;
    $56 = $55 + 12 | 0;
    $57 = HEAPU8[$56 >> 0] | HEAPU8[$56 + 1 >> 0] << 8;
    $58 = $57 & 65535;
    $59 = $9;
    $60 = $59 & 65535;
    $61 = $60 + $58 | 0;
    $62 = $61 & 65535;
    $9 = $62;
   }
   $63 = $5;
   $64 = $63 + 1 << 24 >> 24;
   $5 = $64;
  }
  $5 = 0;
  while (1) {
   $65 = $5;
   $66 = $65 & 255;
   $67 = ($66 | 0) < 200;
   if (!$67) {
    break;
   }
   $68 = $12;
   $69 = $5;
   $70 = $69 & 255;
   $71 = $68 + ($70 * 14 | 0) | 0;
   $72 = HEAP8[$71 >> 0] | 0;
   $8 = $72;
   $73 = $8;
   $74 = $73 & 255;
   $75 = 255 == ($74 | 0);
   if (!$75) {
    $76 = $8;
    $77 = $76 & 255;
    $78 = ($77 | 0) != 14;
    if ($78) {
     $79 = $8;
     $80 = $79 & 255;
     $81 = ($80 | 0) != 27;
     if ($81) {
      $82 = $12;
      $83 = $5;
      $84 = $83 & 255;
      $85 = $82 + ($84 * 14 | 0) | 0;
      $86 = $85 + 3 | 0;
      $87 = HEAP8[$86 >> 0] | 0;
      $88 = $87 & 255;
      $89 = $3;
      $90 = $4;
      $91 = $90 & 255;
      $92 = $89 + $91 | 0;
      $93 = HEAP8[$92 >> 0] | 0;
      $94 = $93 & 255;
      $95 = ($88 | 0) == ($94 | 0);
      if ($95) {
       $96 = $12;
       $97 = $5;
       $98 = $97 & 255;
       $99 = $96 + ($98 * 14 | 0) | 0;
       $100 = $99 + 1 | 0;
       $101 = HEAPU8[$100 >> 0] | HEAPU8[$100 + 1 >> 0] << 8;
       $102 = $101 & 65535;
       $103 = 186276 + ($102 * 19 | 0) | 0;
       $104 = $103 + 12 | 0;
       $105 = HEAPU8[$104 >> 0] | HEAPU8[$104 + 1 >> 0] << 8;
       $106 = $105 & 65535;
       $107 = $9;
       $108 = $107 & 65535;
       $109 = $108 + $106 | 0;
       $110 = $109 & 65535;
       $9 = $110;
      }
     }
    }
   }
   $111 = $5;
   $112 = $111 + 1 << 24 >> 24;
   $5 = $112;
  }
  $113 = $10;
  $114 = $113 & 65535;
  $115 = $9;
  $116 = $115 & 65535;
  $117 = ($114 | 0) > ($116 | 0);
  if ($117) {
   $118 = $9;
   $10 = $118;
   $119 = $4;
   $6 = $119;
  }
  $120 = $4;
  $121 = $120 + 1 << 24 >> 24;
  $4 = $121;
 }
 $122 = $6;
 $123 = $122 & 255;
 $124 = $19 + $123 | 0;
 $125 = HEAP8[$124 >> 0] | 0;
 STACKTOP = sp;
 return $125 | 0;
}

function _SearchRoad($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544 | 0;
 $13 = sp + 24 | 0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $19 = $7;
 $20 = _GetRoundSelfCity($19, $13) | 0;
 $21 = $20 & 255;
 $14 = $21;
 $22 = $14;
 $23 = ($22 | 0) != 0;
 if (!$23) {
  $6 = -1;
  $117 = $6;
  STACKTOP = sp;
  return $117 | 0;
 }
 $24 = $14;
 $15 = $24;
 while (1) {
  $16 = 0;
  while (1) {
   $25 = $16;
   $26 = $14;
   $27 = $25 >>> 0 < $26 >>> 0;
   if (!$27) {
    break;
   }
   $28 = $16;
   $29 = $13 + $28 | 0;
   $30 = HEAP8[$29 >> 0] | 0;
   $31 = $15;
   $32 = $13 + $31 | 0;
   $33 = _GetRoundSelfCity($30, $32) | 0;
   $34 = $33 & 255;
   $35 = $15;
   $36 = $35 + $34 | 0;
   $15 = $36;
   $37 = $16;
   $38 = $37 + 1 | 0;
   $16 = $38;
  }
  $16 = 0;
  while (1) {
   $39 = $16;
   $40 = $15;
   $41 = $39 >>> 0 < $40 >>> 0;
   if (!$41) {
    break;
   }
   $42 = $16;
   $43 = $42 + 1 | 0;
   $17 = $43;
   while (1) {
    $44 = $17;
    $45 = $15;
    $46 = $44 >>> 0 < $45 >>> 0;
    $47 = $16;
    if (!$46) {
     break;
    }
    $48 = $13 + $47 | 0;
    $49 = HEAP8[$48 >> 0] | 0;
    $50 = $49 & 255;
    $51 = $17;
    $52 = $13 + $51 | 0;
    $53 = HEAP8[$52 >> 0] | 0;
    $54 = $53 & 255;
    $55 = ($50 | 0) == ($54 | 0);
    if ($55) {
     $56 = $15;
     $57 = $56 - 1 | 0;
     $15 = $57;
     $58 = $15;
     $59 = $13 + $58 | 0;
     $60 = HEAP8[$59 >> 0] | 0;
     $61 = $17;
     $62 = $13 + $61 | 0;
     HEAP8[$62 >> 0] = $60;
     continue;
    } else {
     $63 = $17;
     $64 = $63 + 1 | 0;
     $17 = $64;
     continue;
    }
   }
   $65 = $47 + 1 | 0;
   $16 = $65;
  }
  $66 = $15;
  $67 = $14;
  $68 = ($66 | 0) == ($67 | 0);
  if ($68) {
   break;
  }
  $69 = $15;
  $14 = $69;
 }
 $16 = 0;
 while (1) {
  $70 = $16;
  $71 = $14;
  $72 = $70 >>> 0 < $71 >>> 0;
  if (!$72) {
   label = 28;
   break;
  }
  $73 = $16;
  $74 = $13 + $73 | 0;
  $75 = HEAP8[$74 >> 0] | 0;
  $76 = $75 & 255;
  $77 = $10;
  $78 = $77 & 255;
  $79 = ($76 | 0) == ($78 | 0);
  if ($79) {
   break;
  }
  $115 = $16;
  $116 = $115 + 1 | 0;
  $16 = $116;
 }
 if ((label | 0) == 28) {
  $6 = -1;
  $117 = $6;
  STACKTOP = sp;
  return $117 | 0;
 }
 $80 = $12;
 $81 = $80 & 255;
 $82 = $9;
 $83 = $82 & 255;
 $84 = ($81 | 0) > ($83 | 0);
 if ($84) {
  $85 = $12;
  $86 = $85 & 255;
  $87 = $9;
  $88 = $87 & 255;
  $89 = $86 - $88 | 0;
  $18 = $89;
 } else {
  $90 = $9;
  $91 = $90 & 255;
  $92 = $12;
  $93 = $92 & 255;
  $94 = $91 - $93 | 0;
  $18 = $94;
 }
 $95 = $11;
 $96 = $95 & 255;
 $97 = $8;
 $98 = $97 & 255;
 $99 = ($96 | 0) > ($98 | 0);
 $100 = $18;
 if ($99) {
  $101 = $11;
  $102 = $101 & 255;
  $103 = $100 + $102 | 0;
  $104 = $8;
  $105 = $104 & 255;
  $106 = $103 - $105 | 0;
  $18 = $106;
 } else {
  $107 = $8;
  $108 = $107 & 255;
  $109 = $100 + $108 | 0;
  $110 = $11;
  $111 = $110 & 255;
  $112 = $109 - $111 | 0;
  $18 = $112;
 }
 $113 = $18;
 $114 = $113 & 255;
 $6 = $114;
 $117 = $6;
 STACKTOP = sp;
 return $117 | 0;
}

function _loadCity($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 HEAP8[$4 >> 0] = HEAP8[$5 >> 0] | 0;
 $6 = $3;
 $7 = $6 + 1 | 0;
 $3 = $7;
 $8 = $2;
 $9 = $8 + 1 | 0;
 $10 = $3;
 HEAP8[$9 >> 0] = HEAP8[$10 >> 0] | 0;
 HEAP8[$9 + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
 $11 = $3;
 $12 = $11 + 2 | 0;
 $3 = $12;
 $13 = $2;
 $14 = $13 + 3 | 0;
 $15 = $3;
 HEAP8[$14 >> 0] = HEAP8[$15 >> 0] | 0;
 HEAP8[$14 + 1 >> 0] = HEAP8[$15 + 1 >> 0] | 0;
 $16 = $3;
 $17 = $16 + 2 | 0;
 $3 = $17;
 $18 = $2;
 $19 = $18 + 5 | 0;
 $20 = $3;
 HEAP8[$19 >> 0] = HEAP8[$20 >> 0] | 0;
 HEAP8[$19 + 1 >> 0] = HEAP8[$20 + 1 >> 0] | 0;
 $21 = $3;
 $22 = $21 + 2 | 0;
 $3 = $22;
 $23 = $2;
 $24 = $23 + 7 | 0;
 $25 = $3;
 HEAP8[$24 >> 0] = HEAP8[$25 >> 0] | 0;
 HEAP8[$24 + 1 >> 0] = HEAP8[$25 + 1 >> 0] | 0;
 $26 = $3;
 $27 = $26 + 2 | 0;
 $3 = $27;
 $28 = $2;
 $29 = $28 + 9 | 0;
 $30 = $3;
 HEAP8[$29 >> 0] = HEAP8[$30 >> 0] | 0;
 HEAP8[$29 + 1 >> 0] = HEAP8[$30 + 1 >> 0] | 0;
 $31 = $3;
 $32 = $31 + 2 | 0;
 $3 = $32;
 $33 = $2;
 $34 = $33 + 11 | 0;
 $35 = $3;
 HEAP8[$34 >> 0] = HEAP8[$35 >> 0] | 0;
 HEAP8[$34 + 1 >> 0] = HEAP8[$35 + 1 >> 0] | 0;
 $36 = $3;
 $37 = $36 + 2 | 0;
 $3 = $37;
 $38 = $2;
 $39 = $38 + 13 | 0;
 $40 = $3;
 HEAP8[$39 >> 0] = HEAP8[$40 >> 0] | 0;
 $41 = $3;
 $42 = $41 + 1 | 0;
 $3 = $42;
 $43 = $2;
 $44 = $43 + 14 | 0;
 $45 = $3;
 HEAP8[$44 >> 0] = HEAP8[$45 >> 0] | 0;
 $46 = $3;
 $47 = $46 + 1 | 0;
 $3 = $47;
 $48 = $2;
 $49 = $48 + 15 | 0;
 $50 = $3;
 HEAP8[$49 >> 0] = HEAP8[$50 >> 0] | 0;
 HEAP8[$49 + 1 >> 0] = HEAP8[$50 + 1 >> 0] | 0;
 HEAP8[$49 + 2 >> 0] = HEAP8[$50 + 2 >> 0] | 0;
 HEAP8[$49 + 3 >> 0] = HEAP8[$50 + 3 >> 0] | 0;
 $51 = $3;
 $52 = $51 + 4 | 0;
 $3 = $52;
 $53 = $2;
 $54 = $53 + 19 | 0;
 $55 = $3;
 HEAP8[$54 >> 0] = HEAP8[$55 >> 0] | 0;
 HEAP8[$54 + 1 >> 0] = HEAP8[$55 + 1 >> 0] | 0;
 HEAP8[$54 + 2 >> 0] = HEAP8[$55 + 2 >> 0] | 0;
 HEAP8[$54 + 3 >> 0] = HEAP8[$55 + 3 >> 0] | 0;
 $56 = $3;
 $57 = $56 + 4 | 0;
 $3 = $57;
 $58 = $2;
 $59 = $58 + 23 | 0;
 $60 = $3;
 HEAP8[$59 >> 0] = HEAP8[$60 >> 0] | 0;
 HEAP8[$59 + 1 >> 0] = HEAP8[$60 + 1 >> 0] | 0;
 $61 = $3;
 $62 = $61 + 2 | 0;
 $3 = $62;
 $63 = $2;
 $64 = $63 + 25 | 0;
 $65 = $3;
 HEAP8[$64 >> 0] = HEAP8[$65 >> 0] | 0;
 HEAP8[$64 + 1 >> 0] = HEAP8[$65 + 1 >> 0] | 0;
 $66 = $3;
 $67 = $66 + 2 | 0;
 $3 = $67;
 $68 = $2;
 $69 = $68 + 27 | 0;
 $70 = $3;
 HEAP8[$69 >> 0] = HEAP8[$70 >> 0] | 0;
 HEAP8[$69 + 1 >> 0] = HEAP8[$70 + 1 >> 0] | 0;
 $71 = $3;
 $72 = $71 + 2 | 0;
 $3 = $72;
 $73 = $2;
 $74 = $73 + 29 | 0;
 $75 = $3;
 HEAP8[$74 >> 0] = HEAP8[$75 >> 0] | 0;
 HEAP8[$74 + 1 >> 0] = HEAP8[$75 + 1 >> 0] | 0;
 $76 = $3;
 $77 = $76 + 2 | 0;
 $3 = $77;
 $78 = $2;
 $79 = $78 + 31 | 0;
 $80 = $3;
 HEAP8[$79 >> 0] = HEAP8[$80 >> 0] | 0;
 HEAP8[$79 + 1 >> 0] = HEAP8[$80 + 1 >> 0] | 0;
 $81 = $3;
 $82 = $81 + 2 | 0;
 $3 = $82;
 $83 = $2;
 $84 = $83 + 33 | 0;
 $85 = $3;
 HEAP8[$84 >> 0] = HEAP8[$85 >> 0] | 0;
 HEAP8[$84 + 1 >> 0] = HEAP8[$85 + 1 >> 0] | 0;
 $86 = $3;
 $87 = $86 + 2 | 0;
 $3 = $87;
 $88 = $2;
 $89 = $88 + 35 | 0;
 $90 = $3;
 HEAP8[$89 >> 0] = HEAP8[$90 >> 0] | 0;
 HEAP8[$89 + 1 >> 0] = HEAP8[$90 + 1 >> 0] | 0;
 $91 = $3;
 $92 = $91 + 2 | 0;
 $3 = $92;
 $93 = $3;
 STACKTOP = sp;
 return $93 | 0;
}

function _CountMoveP($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 30 | 0;
 HEAP8[$1 >> 0] = $0;
 $12 = HEAP8[$1 >> 0] | 0;
 $13 = $12 & 255;
 $14 = 186129 + ($13 * 7 | 0) | 0;
 $5 = $14;
 $15 = _has_hook(173617) | 0;
 $16 = ($15 | 0) != 0;
 L1 : do {
  if ($16) {
   $8 = 173617;
   L3 : while (1) {
    $17 = $8;
    $18 = ($17 | 0) != (0 | 0);
    if (!$18) {
     break L1;
    }
    $19 = _Value_ObjectValue_new() | 0;
    $9 = $19;
    while (1) {
     $20 = $9;
     $21 = ($20 | 0) != (0 | 0);
     if (!$21) {
      break;
     }
     $22 = $9;
     $23 = HEAP32[$22 >> 2] | 0;
     $24 = $23 + 8 | 0;
     $25 = HEAP32[$24 >> 2] | 0;
     $10 = $25;
     while (1) {
      $26 = $10;
      $27 = ($26 | 0) != (0 | 0);
      if (!$27) {
       break;
      }
      $28 = $10;
      _ObjectDef_addFieldF($28, 173627, 0, $1, 0, 0);
      $29 = $8;
      $30 = $9;
      $31 = _call_hook_a($29, $30) | 0;
      $32 = ($31 | 0) == 0;
      if ($32) {
       break L3;
      }
      $10 = 0;
     }
     $34 = $9;
     _Value_ObjectValue_free($34);
     $9 = 0;
    }
    $8 = 0;
   }
   $33 = $9;
   _Value_ObjectValue_free($33);
   STACKTOP = sp;
   return;
  }
 } while (0);
 $35 = $5;
 $36 = $35 + 6 | 0;
 $37 = HEAP8[$36 >> 0] | 0;
 $38 = $37 & 255;
 $39 = ($38 | 0) == 3;
 if ($39) {
  $40 = $5;
  $41 = $40 + 4 | 0;
  HEAP8[$41 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $42 = HEAP8[$1 >> 0] | 0;
 $43 = _TransIdxToGen($42) | 0;
 $7 = $43;
 $44 = $7;
 $45 = $44 & 65535;
 $46 = 186276 + ($45 * 19 | 0) | 0;
 $6 = $46;
 $47 = $6;
 $48 = _GetArmType($47) | 0;
 $3 = $48;
 $49 = $3;
 $50 = $49 & 255;
 $51 = 173640 + $50 | 0;
 $52 = HEAP8[$51 >> 0] | 0;
 $53 = $5;
 $54 = $53 + 4 | 0;
 HEAP8[$54 >> 0] = $52;
 $2 = 0;
 while (1) {
  $55 = $2;
  $56 = $55 & 255;
  $57 = ($56 | 0) < 2;
  if (!$57) {
   break;
  }
  $58 = $6;
  $59 = $58 + 14 | 0;
  $60 = $2;
  $61 = $60 & 255;
  $62 = $59 + ($61 << 1) | 0;
  $63 = HEAPU8[$62 >> 0] | HEAPU8[$62 + 1 >> 0] << 8;
  $11 = $63;
  $64 = $11;
  $65 = $64 << 16 >> 16 != 0;
  if ($65) {
   $66 = HEAP32[44294] | 0;
   $67 = _ResLoadToCon(66, 1, $66) | 0;
   $68 = $11;
   $69 = $68 & 65535;
   $70 = $69 - 1 | 0;
   $71 = $70 & 65535;
   $72 = $71 & 65535;
   $73 = $72 * 66 | 0;
   $74 = $67 + $73 | 0;
   $4 = $74;
   $75 = $4;
   $76 = (0 | 0) == ($75 | 0);
   if (!$76) {
    $77 = $4;
    $78 = $77 + 64 | 0;
    $79 = HEAP8[$78 >> 0] | 0;
    $80 = $79 & 255;
    $81 = ($80 | 0) != 0;
    if ($81) {
     $82 = $4;
     $83 = $82 + 64 | 0;
     $84 = HEAP8[$83 >> 0] | 0;
     $85 = $84 & 255;
     $86 = $5;
     $87 = $86 + 4 | 0;
     $88 = HEAP8[$87 >> 0] | 0;
     $89 = $88 & 255;
     $90 = $89 + $85 | 0;
     $91 = $90 & 255;
     HEAP8[$87 >> 0] = $91;
    }
   }
  }
  $92 = $2;
  $93 = $92 & 255;
  $94 = $93 + 1 | 0;
  $95 = $94 & 255;
  $2 = $95;
 }
 $96 = $5;
 $97 = $96 + 4 | 0;
 $98 = HEAP8[$97 >> 0] | 0;
 $99 = $98 & 255;
 $100 = ($99 | 0) > 8;
 if (!$100) {
  STACKTOP = sp;
  return;
 }
 $101 = $5;
 $102 = $101 + 4 | 0;
 HEAP8[$102 >> 0] = 8;
 STACKTOP = sp;
 return;
}

function _PlcStrShowS($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $3;
 $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
 $16 = $15 & 255;
 $8 = $16;
 $17 = $8;
 HEAP8[$9 >> 0] = $17;
 $18 = $8;
 $19 = $9 + 1 | 0;
 HEAP8[$19 >> 0] = $18;
 $20 = $8;
 $21 = $9 + 3 | 0;
 HEAP8[$21 >> 0] = $20;
 $22 = $4;
 $23 = $22 + 4 | 0;
 $24 = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8;
 $25 = $24 & 255;
 $26 = $9 + 2 | 0;
 HEAP8[$26 >> 0] = $25;
 $27 = $3;
 $28 = $27 + 2 | 0;
 $29 = HEAPU8[$28 >> 0] | HEAPU8[$28 + 1 >> 0] << 8;
 $30 = $29 & 255;
 HEAP8[$10 >> 0] = $30;
 $31 = $4;
 $32 = $31 + 2 | 0;
 $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8;
 $34 = $33 & 255;
 $8 = $34;
 $35 = $8;
 $36 = $10 + 1 | 0;
 HEAP8[$36 >> 0] = $35;
 $37 = $8;
 $38 = $10 + 2 | 0;
 HEAP8[$38 >> 0] = $37;
 $39 = $4;
 $40 = $39 + 6 | 0;
 $41 = HEAPU8[$40 >> 0] | HEAPU8[$40 + 1 >> 0] << 8;
 $42 = $41 & 255;
 $43 = $10 + 3 | 0;
 HEAP8[$43 >> 0] = $42;
 $44 = $3;
 $45 = $44 + 4 | 0;
 $46 = HEAPU8[$45 >> 0] | HEAPU8[$45 + 1 >> 0] << 8;
 $47 = $46 & 255;
 $8 = $47;
 $48 = $8;
 HEAP8[$11 >> 0] = $48;
 $49 = $8;
 $50 = $11 + 2 | 0;
 HEAP8[$50 >> 0] = $49;
 $51 = $8;
 $52 = $11 + 3 | 0;
 HEAP8[$52 >> 0] = $51;
 $53 = $4;
 $54 = HEAPU8[$53 >> 0] | HEAPU8[$53 + 1 >> 0] << 8;
 $55 = $54 & 255;
 $56 = $11 + 1 | 0;
 HEAP8[$56 >> 0] = $55;
 $57 = $4;
 $58 = $57 + 2 | 0;
 $59 = HEAPU8[$58 >> 0] | HEAPU8[$58 + 1 >> 0] << 8;
 $60 = $59 & 255;
 HEAP8[$12 >> 0] = $60;
 $61 = $4;
 $62 = $61 + 6 | 0;
 $63 = HEAPU8[$62 >> 0] | HEAPU8[$62 + 1 >> 0] << 8;
 $64 = $63 & 255;
 $8 = $64;
 $65 = $8;
 $66 = $12 + 1 | 0;
 HEAP8[$66 >> 0] = $65;
 $67 = $8;
 $68 = $12 + 2 | 0;
 HEAP8[$68 >> 0] = $67;
 $69 = $3;
 $70 = $69 + 6 | 0;
 $71 = HEAPU8[$70 >> 0] | HEAPU8[$70 + 1 >> 0] << 8;
 $72 = $71 & 255;
 $73 = $12 + 3 | 0;
 HEAP8[$73 >> 0] = $72;
 $74 = $5;
 $6 = $74;
 $75 = $5;
 $76 = _strlen($75) | 0;
 $77 = $76 & 65535;
 $13 = $77;
 $7 = 0;
 while (1) {
  $78 = $7;
  $79 = $78 & 255;
  $80 = ($79 | 0) < 4;
  if (!$80) {
   label = 5;
   break;
  }
  $81 = $7;
  $82 = $81 & 255;
  $83 = $9 + $82 | 0;
  $84 = HEAP8[$83 >> 0] | 0;
  $85 = $7;
  $86 = $85 & 255;
  $87 = $10 + $86 | 0;
  $88 = HEAP8[$87 >> 0] | 0;
  $89 = $7;
  $90 = $89 & 255;
  $91 = $11 + $90 | 0;
  $92 = HEAP8[$91 >> 0] | 0;
  $93 = $7;
  $94 = $93 & 255;
  $95 = $12 + $94 | 0;
  $96 = HEAP8[$95 >> 0] | 0;
  $97 = $6;
  $98 = _PlcItemShowS($84, $88, $92, $96, $97) | 0;
  $6 = $98;
  $99 = $6;
  $100 = $5;
  $101 = $13;
  $102 = $101 & 65535;
  $103 = $100 + $102 | 0;
  $104 = $99 >>> 0 >= $103 >>> 0;
  if ($104) {
   label = 5;
   break;
  }
  $105 = $7;
  $106 = $105 & 255;
  $107 = $106 + 1 | 0;
  $108 = $107 & 255;
  $7 = $108;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function _FgtShowAtRng() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = HEAP32[44301] | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $0 = $6;
 $2 = 0;
 while (1) {
  $7 = $2;
  $8 = $7 & 255;
  $9 = $0;
  $10 = $9 & 255;
  $11 = ($8 | 0) < ($10 | 0);
  if (!$11) {
   break;
  }
  $12 = $2;
  $13 = $12 & 255;
  $14 = HEAP32[44301] | 0;
  $15 = $14 + 2 | 0;
  $16 = HEAP8[$15 >> 0] | 0;
  $17 = $16 & 255;
  $18 = $13 + $17 | 0;
  $19 = $18 & 255;
  $4 = $19;
  $20 = $4;
  $21 = $20 & 255;
  $22 = HEAP8[186064] | 0;
  $23 = $22 & 255;
  $24 = ($21 | 0) < ($23 | 0);
  L4 : do {
   if (!$24) {
    $25 = $4;
    $26 = $25 & 255;
    $27 = HEAP8[186064] | 0;
    $28 = $27 & 255;
    $29 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
    $30 = $29 & 65535;
    $31 = ($30 | 0) / 16 & -1;
    $32 = $31 - 1 | 0;
    $33 = $28 + $32 | 0;
    $34 = ($26 | 0) >= ($33 | 0);
    if (!$34) {
     $35 = $4;
     $36 = $35 & 255;
     $37 = HEAP8[186064] | 0;
     $38 = $37 & 255;
     $39 = $36 - $38 | 0;
     $40 = $39 << 4;
     $41 = $40 + 0 | 0;
     $42 = $41 & 255;
     $4 = $42;
     $1 = 0;
     while (1) {
      $43 = $1;
      $44 = $43 & 255;
      $45 = $0;
      $46 = $45 & 255;
      $47 = ($44 | 0) < ($46 | 0);
      if (!$47) {
       break L4;
      }
      $48 = $1;
      $49 = $48 & 255;
      $50 = HEAP32[44301] | 0;
      $51 = $50 + 1 | 0;
      $52 = HEAP8[$51 >> 0] | 0;
      $53 = $52 & 255;
      $54 = $49 + $53 | 0;
      $55 = $54 & 255;
      $3 = $55;
      $56 = $3;
      $57 = $56 & 255;
      $58 = HEAP8[186063] | 0;
      $59 = $58 & 255;
      $60 = ($57 | 0) < ($59 | 0);
      if (!$60) {
       $61 = $3;
       $62 = $61 & 255;
       $63 = HEAP8[186063] | 0;
       $64 = $63 & 255;
       $65 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
       $66 = $65 & 65535;
       $67 = ($66 | 0) / 16 & -1;
       $68 = $64 + $67 | 0;
       $69 = ($62 | 0) >= ($68 | 0);
       if (!$69) {
        $70 = HEAP32[44301] | 0;
        $71 = $1;
        $72 = $71 & 255;
        $73 = 3 + $72 | 0;
        $74 = $2;
        $75 = $74 & 255;
        $76 = $0;
        $77 = $76 & 255;
        $78 = Math_imul($75, $77) | 0;
        $79 = $73 + $78 | 0;
        $80 = $70 + $79 | 0;
        $81 = HEAP8[$80 >> 0] | 0;
        $82 = $81 & 255;
        $83 = ($82 | 0) != 1;
        if (!$83) {
         $84 = $3;
         $85 = $84 & 255;
         $86 = HEAP8[186063] | 0;
         $87 = $86 & 255;
         $88 = $85 - $87 | 0;
         $89 = $88 << 4;
         $90 = $89 + 0 | 0;
         $91 = $90 & 255;
         $3 = $91;
         $92 = $3;
         $93 = $4;
         _FgtRPicShowV(7, 2, $92, $93);
        }
       }
      }
      $94 = $1;
      $95 = $94 & 255;
      $96 = $95 + 1 | 0;
      $97 = $96 & 255;
      $1 = $97;
     }
    }
   }
  } while (0);
  $98 = $2;
  $99 = $98 & 255;
  $100 = $99 + 1 | 0;
  $101 = $100 & 255;
  $2 = $101;
 }
 STACKTOP = sp;
 return;
}

function _FgtTransMove($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $1 = sp + 284 | 0;
 $7 = sp + 24 | 0;
 HEAP8[$1 >> 0] = $0;
 $6 = 0;
 $12 = HEAP8[$1 >> 0] | 0;
 $13 = $12 & 255;
 $14 = 186088 + ($13 << 1) | 0;
 $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
 $16 = $15 & 65535;
 $17 = $16 - 1 | 0;
 $18 = 186276 + ($17 * 19 | 0) | 0;
 $19 = _GetArmType($18) | 0;
 $3 = $19;
 $20 = _has_hook(173762) | 0;
 $21 = ($20 | 0) != 0;
 L1 : do {
  if ($21) {
   $8 = 173762;
   while (1) {
    $22 = $8;
    $23 = ($22 | 0) != (0 | 0);
    if (!$23) {
     break L1;
    }
    $24 = _Value_ObjectValue_new() | 0;
    $9 = $24;
    while (1) {
     $25 = $9;
     $26 = ($25 | 0) != (0 | 0);
     if (!$26) {
      break;
     }
     $27 = $9;
     $28 = HEAP32[$27 >> 2] | 0;
     $29 = $28 + 8 | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     $10 = $30;
     while (1) {
      $31 = $10;
      $32 = ($31 | 0) != (0 | 0);
      if (!$32) {
       break;
      }
      $11 = $7;
      $33 = $10;
      _ObjectDef_addFieldF($33, 173627, 0, $1, 0, 0);
      $34 = $10;
      $35 = $11;
      _ObjectDef_addFieldArray($34, 173782, 0, $35, 256);
      $36 = $8;
      $37 = $9;
      $38 = _call_hook_a($36, $37) | 0;
      $39 = ($38 | 0) == 0;
      if ($39) {
       $6 = $7;
      }
      $10 = 0;
     }
     $40 = $9;
     _Value_ObjectValue_free($40);
     $9 = 0;
    }
    $8 = 0;
   }
  }
 } while (0);
 $41 = $6;
 $42 = ($41 | 0) == (0 | 0);
 if ($42) {
  $43 = HEAP32[44294] | 0;
  $44 = _ResLoadToCon(2, 3, $43) | 0;
  $6 = $44;
  $45 = $3;
  $46 = $45 & 255;
  $47 = $46 * 46 | 0;
  $48 = $6;
  $49 = $48 + $47 | 0;
  $6 = $49;
 }
 $5 = 0;
 while (1) {
  $50 = $5;
  $51 = $50 & 255;
  $52 = ($51 | 0) < 225;
  if (!$52) {
   break;
  }
  $53 = HEAP32[44300] | 0;
  $54 = $5;
  $55 = $54 & 255;
  $56 = $53 + $55 | 0;
  $57 = HEAP8[$56 >> 0] | 0;
  $2 = $57;
  $58 = $2;
  $59 = $58 & 255;
  $60 = 255 == ($59 | 0);
  if (!$60) {
   $61 = $6;
   $62 = $2;
   $63 = $62 & 255;
   $64 = $61 + $63 | 0;
   $65 = HEAP8[$64 >> 0] | 0;
   $66 = HEAP32[44300] | 0;
   $67 = $5;
   $68 = $67 & 255;
   $69 = $66 + $68 | 0;
   HEAP8[$69 >> 0] = $65;
  }
  $70 = $5;
  $71 = $70 & 255;
  $72 = $71 + 1 | 0;
  $73 = $72 & 255;
  $5 = $73;
 }
 $74 = HEAP8[$1 >> 0] | 0;
 _FgtSetDifPot($74);
 $75 = HEAP8[$1 >> 0] | 0;
 $76 = $75 & 255;
 $77 = 186129 + ($76 * 7 | 0) | 0;
 $78 = $77 + 4 | 0;
 $79 = HEAP8[$78 >> 0] | 0;
 $80 = $79 & 255;
 $81 = $80 - 1 | 0;
 $82 = $81 & 255;
 $4 = $82;
 $83 = $4;
 $84 = $83 & 255;
 $85 = $84 << 4;
 $86 = $85 & 255;
 $5 = $86;
 $87 = HEAP8[$1 >> 0] | 0;
 $88 = $87 & 255;
 $89 = 186129 + ($88 * 7 | 0) | 0;
 $90 = $89 + 4 | 0;
 $91 = HEAP8[$90 >> 0] | 0;
 $92 = HEAP32[44300] | 0;
 $93 = $5;
 $94 = $93 & 255;
 $95 = $92 + $94 | 0;
 HEAP8[$95 >> 0] = $91;
 STACKTOP = sp;
 return;
}

function _FgtUnfurlTree($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $5;
 $13 = HEAP8[$12 >> 0] | 0;
 $7 = $13;
 $14 = HEAP32[44300] | 0;
 $15 = $3;
 $16 = $15 & 255;
 $17 = $14 + $16 | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $6 = $18;
 $9 = 0;
 while (1) {
  $19 = $9;
  $20 = $19 & 255;
  $21 = ($20 | 0) < 4;
  if (!$21) {
   break;
  }
  $11 = 0;
  $22 = $3;
  $23 = $22 & 255;
  $24 = $9;
  $25 = $24 & 255;
  $26 = 173601 + $25 | 0;
  $27 = HEAP8[$26 >> 0] | 0;
  $28 = $27 & 255;
  $29 = $23 + $28 | 0;
  $30 = $29 & 255;
  $10 = $30;
  $31 = $10;
  $32 = $31 & 255;
  $33 = ($32 | 0) > 224;
  if (!$33) {
   $34 = HEAP32[44300] | 0;
   $35 = $10;
   $36 = $35 & 255;
   $37 = $34 + $36 | 0;
   $38 = HEAP8[$37 >> 0] | 0;
   $8 = $38;
   $39 = $8;
   $40 = $39 & 255;
   $41 = ($40 | 0) < 128;
   if (!$41) {
    $42 = $8;
    $43 = $42 & 255;
    $44 = ($43 | 0) == 254;
    if (!$44) {
     $45 = $8;
     $46 = $45 & 255;
     $47 = ($46 | 0) == 255;
     if (!$47) {
      $48 = $8;
      $49 = $48 & 255;
      $50 = ($49 | 0) > 160;
      do {
       if ($50) {
        $51 = $8;
        $52 = $51 & 255;
        $53 = $52 - 160 | 0;
        $54 = $53 & 255;
        $11 = $54;
        $55 = $6;
        $56 = $55 & 255;
        $57 = $11;
        $58 = $57 & 255;
        $59 = ($56 | 0) > ($58 | 0);
        if ($59) {
         $11 = 1;
         break;
        } else {
         $11 = 0;
         break;
        }
       }
      } while (0);
      $60 = $11;
      $61 = $60 << 24 >> 24 != 0;
      do {
       if (!$61) {
        $62 = $6;
        $63 = $62 & 255;
        $64 = $63 + 128 | 0;
        $65 = $64 & 255;
        $11 = $65;
        $66 = $11;
        $67 = $66 & 255;
        $68 = $8;
        $69 = $68 & 255;
        $70 = ($67 | 0) > ($69 | 0);
        if ($70) {
         $71 = $8;
         $72 = $71 & 255;
         $73 = $11;
         $74 = $73 & 255;
         $75 = $74 - $72 | 0;
         $76 = $75 & 255;
         $11 = $76;
         break;
        } else {
         $11 = 0;
         break;
        }
       }
      } while (0);
      $77 = $11;
      $78 = $77 << 24 >> 24 != 0;
      if ($78) {
       $79 = $11;
       $80 = HEAP32[44300] | 0;
       $81 = $10;
       $82 = $81 & 255;
       $83 = $80 + $82 | 0;
       HEAP8[$83 >> 0] = $79;
       $84 = $10;
       $85 = $4;
       $86 = $7;
       $87 = $86 & 255;
       $88 = $85 + $87 | 0;
       HEAP8[$88 >> 0] = $84;
       $89 = $7;
       $90 = $89 & 255;
       $91 = $90 + 1 | 0;
       $92 = $91 & 255;
       $7 = $92;
      }
     }
    }
   }
  }
  $93 = $9;
  $94 = $93 & 255;
  $95 = $94 + 1 | 0;
  $96 = $95 & 255;
  $9 = $96;
 }
 $97 = $7;
 $98 = $5;
 HEAP8[$98 >> 0] = $97;
 STACKTOP = sp;
 return;
}

function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 $5 = ($3 | 0) == (0 | 0);
 $$ = $5 ? 179404 : $3;
 $6 = HEAP32[$$ >> 2] | 0;
 $7 = ($1 | 0) == (0 | 0);
 L1 : do {
  if ($7) {
   $8 = ($6 | 0) == 0;
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0 | 0) == (0 | 0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2 | 0) == 0;
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6 | 0) == 0;
    if ($11) {
     $12 = HEAP8[$1 >> 0] | 0;
     $13 = $12 << 24 >> 24 > -1;
     if ($13) {
      $14 = $12 & 255;
      HEAP32[$$47 >> 2] = $14;
      $15 = $12 << 24 >> 24 != 0;
      $16 = $15 & 1;
      $$0 = $16;
      break;
     }
     $17 = ___pthread_self_912() | 0;
     $18 = $17 + 188 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     $not$ = ($20 | 0) == (0 | 0);
     $21 = HEAP8[$1 >> 0] | 0;
     if ($not$) {
      $22 = $21 << 24 >> 24;
      $23 = $22 & 57343;
      HEAP32[$$47 >> 2] = $23;
      $$0 = 1;
      break;
     }
     $24 = $21 & 255;
     $25 = $24 + -194 | 0;
     $26 = $25 >>> 0 > 50;
     if ($26) {
      label = 17;
      break;
     }
     $27 = $1 + 1 | 0;
     $28 = 3144 + ($25 << 2) | 0;
     $29 = HEAP32[$28 >> 2] | 0;
     $30 = $2 + -1 | 0;
     $31 = ($30 | 0) == 0;
     if ($31) {
      $$2 = $29;
     } else {
      $$03952 = $27;
      $$04051 = $29;
      $$04350 = $30;
      label = 11;
     }
    } else {
     $$03952 = $1;
     $$04051 = $6;
     $$04350 = $2;
     label = 11;
    }
    L14 : do {
     if ((label | 0) == 11) {
      $32 = HEAP8[$$03952 >> 0] | 0;
      $33 = $32 & 255;
      $34 = $33 >>> 3;
      $35 = $34 + -16 | 0;
      $36 = $$04051 >> 26;
      $37 = $34 + $36 | 0;
      $38 = $35 | $37;
      $39 = $38 >>> 0 > 7;
      if ($39) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;
       $$141 = $$04051;
       $$144 = $$04350;
       $43 = $32;
      }
      while (1) {
       $40 = $$141 << 6;
       $41 = $$1 + 1 | 0;
       $42 = $43 & 255;
       $44 = $42 + -128 | 0;
       $45 = $44 | $40;
       $46 = $$144 + -1 | 0;
       $47 = ($45 | 0) < 0;
       if (!$47) {
        break;
       }
       $49 = ($46 | 0) == 0;
       if ($49) {
        $$2 = $45;
        break L14;
       }
       $50 = HEAP8[$41 >> 0] | 0;
       $51 = $50 & -64;
       $52 = $51 << 24 >> 24 == -128;
       if ($52) {
        $$1 = $41;
        $$141 = $45;
        $$144 = $46;
        $43 = $50;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0;
      HEAP32[$$47 >> 2] = $45;
      $48 = $2 - $46 | 0;
      $$0 = $48;
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2;
    $$0 = -2;
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0;
  $53 = ___errno_location() | 0;
  HEAP32[$53 >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5 | 0) != 0;
 $7 = ($2 | 0) != 0;
 $or$cond53 = $7 & $6;
 L1 : do {
  if ($or$cond53) {
   $8 = $1 & 255;
   $$03555 = $0;
   $$03654 = $2;
   while (1) {
    $9 = HEAP8[$$03555 >> 0] | 0;
    $10 = $9 << 24 >> 24 == $8 << 24 >> 24;
    if ($10) {
     $$035$lcssa65 = $$03555;
     $$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = $$03555 + 1 | 0;
    $12 = $$03654 + -1 | 0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14 | 0) != 0;
    $16 = ($12 | 0) != 0;
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;
     $$03654 = $12;
    } else {
     $$035$lcssa = $11;
     $$036$lcssa = $12;
     $$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;
   $$036$lcssa = $2;
   $$lcssa = $7;
   label = 5;
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;
   $$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;
   $$3 = 0;
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $17 = HEAP8[$$035$lcssa65 >> 0] | 0;
   $18 = $1 & 255;
   $19 = $17 << 24 >> 24 == $18 << 24 >> 24;
   if ($19) {
    $$2 = $$035$lcssa65;
    $$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009) | 0;
    $21 = $$036$lcssa64 >>> 0 > 3;
    L11 : do {
     if ($21) {
      $$046 = $$035$lcssa65;
      $$13745 = $$036$lcssa64;
      while (1) {
       $22 = HEAP32[$$046 >> 2] | 0;
       $23 = $22 ^ $20;
       $24 = $23 + -16843009 | 0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27 | 0) == 0;
       if (!$28) {
        break;
       }
       $29 = $$046 + 4 | 0;
       $30 = $$13745 + -4 | 0;
       $31 = $30 >>> 0 > 3;
       if ($31) {
        $$046 = $29;
        $$13745 = $30;
       } else {
        $$0$lcssa = $29;
        $$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;
      $$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;
      $$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while (0);
    if ((label | 0) == 11) {
     $32 = ($$137$lcssa | 0) == 0;
     if ($32) {
      $$2 = $$0$lcssa;
      $$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;
      $$23839 = $$137$lcssa;
     }
    }
    while (1) {
     $33 = HEAP8[$$140 >> 0] | 0;
     $34 = $33 << 24 >> 24 == $18 << 24 >> 24;
     if ($34) {
      $$2 = $$140;
      $$3 = $$23839;
      break L8;
     }
     $35 = $$140 + 1 | 0;
     $36 = $$23839 + -1 | 0;
     $37 = ($36 | 0) == 0;
     if ($37) {
      $$2 = $35;
      $$3 = 0;
      break;
     } else {
      $$140 = $35;
      $$23839 = $36;
     }
    }
   }
  }
 } while (0);
 $38 = ($$3 | 0) != 0;
 $39 = $38 ? $$2 : 0;
 return $39 | 0;
}

function __decodePic($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $20 = $7;
 $21 = $20 << 16 >> 16;
 $22 = $21 + 7 | 0;
 $23 = ($22 | 0) / 8 & -1;
 $10 = $23;
 $24 = $7;
 $25 = $24 << 16 >> 16;
 $26 = $9;
 $27 = $26 & 255;
 $28 = Math_imul($25, $27) | 0;
 $29 = $28 & 65535;
 $13 = $29;
 $30 = $8;
 $31 = $30 << 16 >> 16;
 $32 = $9;
 $33 = $32 & 255;
 $34 = Math_imul($31, $33) | 0;
 $35 = $34 & 65535;
 $14 = $35;
 $12 = 0;
 while (1) {
  $36 = $12;
  $37 = $36 << 16 >> 16;
  $38 = $8;
  $39 = $38 << 16 >> 16;
  $40 = ($37 | 0) < ($39 | 0);
  if (!$40) {
   break;
  }
  $11 = 0;
  while (1) {
   $41 = $11;
   $42 = $41 << 16 >> 16;
   $43 = $7;
   $44 = $43 << 16 >> 16;
   $45 = ($42 | 0) < ($44 | 0);
   if (!$45) {
    break;
   }
   $46 = $11;
   $47 = $46 << 16 >> 16;
   $48 = $9;
   $49 = $48 & 255;
   $50 = Math_imul($47, $49) | 0;
   $51 = $50 & 65535;
   $15 = $51;
   $52 = $12;
   $53 = $52 << 16 >> 16;
   $54 = $9;
   $55 = $54 & 255;
   $56 = Math_imul($53, $55) | 0;
   $57 = $56 & 65535;
   $16 = $57;
   $58 = $6;
   $59 = $10;
   $60 = $12;
   $61 = $60 << 16 >> 16;
   $62 = Math_imul($59, $61) | 0;
   $63 = $11;
   $64 = $63 << 16 >> 16;
   $65 = ($64 | 0) / 8 & -1;
   $66 = $62 + $65 | 0;
   $67 = $58 + $66 | 0;
   $68 = HEAP8[$67 >> 0] | 0;
   $69 = $68 & 255;
   $70 = $11;
   $71 = $70 << 16 >> 16;
   $72 = ($71 | 0) % 8 & -1;
   $73 = 128 >> $72;
   $74 = $69 & $73;
   $75 = $74 & 255;
   $17 = $75;
   $18 = 0;
   while (1) {
    $76 = $18;
    $77 = $9;
    $78 = $77 & 255;
    $79 = ($76 | 0) < ($78 | 0);
    if (!$79) {
     break;
    }
    $19 = 0;
    while (1) {
     $80 = $19;
     $81 = $9;
     $82 = $81 & 255;
     $83 = ($80 | 0) < ($82 | 0);
     if (!$83) {
      break;
     }
     $84 = $17;
     $85 = $5;
     $86 = $13;
     $87 = $86 << 16 >> 16;
     $88 = $16;
     $89 = $88 << 16 >> 16;
     $90 = $18;
     $91 = $89 + $90 | 0;
     $92 = Math_imul($87, $91) | 0;
     $93 = $15;
     $94 = $93 << 16 >> 16;
     $95 = $92 + $94 | 0;
     $96 = $19;
     $97 = $95 + $96 | 0;
     $98 = $85 + $97 | 0;
     HEAP8[$98 >> 0] = $84;
     $99 = $19;
     $100 = $99 + 1 | 0;
     $19 = $100;
    }
    $101 = $18;
    $102 = $101 + 1 | 0;
    $18 = $102;
   }
   $103 = $11;
   $104 = $103 + 1 << 16 >> 16;
   $11 = $104;
  }
  $105 = $12;
  $106 = $105 + 1 << 16 >> 16;
  $12 = $106;
 }
 STACKTOP = sp;
 return;
}

function _FgtShowMvRng() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $7 = HEAP8[186063] | 0;
 $8 = $7 & 255;
 $9 = HEAP8[186067] | 0;
 $10 = $9 & 255;
 $11 = $8 + $10 | 0;
 $12 = HEAP8[186065] | 0;
 $13 = $12 & 255;
 $14 = $11 - $13 | 0;
 $15 = $14 & 255;
 $2 = $15;
 $16 = HEAP8[186064] | 0;
 $17 = $16 & 255;
 $18 = HEAP8[186068] | 0;
 $19 = $18 & 255;
 $20 = $17 + $19 | 0;
 $21 = HEAP8[186066] | 0;
 $22 = $21 & 255;
 $23 = $20 - $22 | 0;
 $24 = $23 & 255;
 $3 = $24;
 $25 = HEAP8[186067] | 0;
 $0 = $25;
 while (1) {
  $26 = $0;
  $27 = $26 & 255;
  $28 = ($27 | 0) < 15;
  if (!$28) {
   break;
  }
  $29 = HEAP8[186068] | 0;
  $1 = $29;
  while (1) {
   $30 = $1;
   $31 = $30 & 255;
   $32 = ($31 | 0) < 15;
   $33 = $0;
   $34 = $33 & 255;
   if (!$32) {
    break;
   }
   $35 = $2;
   $36 = $35 & 255;
   $37 = $34 - $36 | 0;
   $38 = $37 & 255;
   $5 = $38;
   $39 = $1;
   $40 = $39 & 255;
   $41 = $3;
   $42 = $41 & 255;
   $43 = $40 - $42 | 0;
   $44 = $43 & 255;
   $6 = $44;
   $45 = $5;
   $46 = $45 & 255;
   $47 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
   $48 = $47 & 65535;
   $49 = ($48 | 0) / 16 & -1;
   $50 = ($46 | 0) >= ($49 | 0);
   if (!$50) {
    $51 = $6;
    $52 = $51 & 255;
    $53 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
    $54 = $53 & 65535;
    $55 = ($54 | 0) / 16 & -1;
    $56 = $55 - 1 | 0;
    $57 = ($52 | 0) >= ($56 | 0);
    if (!$57) {
     $58 = HEAP32[44300] | 0;
     $59 = $1;
     $60 = $59 & 255;
     $61 = $60 * 15 | 0;
     $62 = $0;
     $63 = $62 & 255;
     $64 = $61 + $63 | 0;
     $65 = $58 + $64 | 0;
     $66 = HEAP8[$65 >> 0] | 0;
     $4 = $66;
     $67 = $4;
     $68 = $67 & 255;
     $69 = ($68 | 0) != 0;
     if ($69) {
      $70 = $4;
      $71 = $70 & 255;
      $72 = ($71 | 0) < 128;
      if ($72) {
       $73 = $5;
       $74 = $73 & 255;
       $75 = $74 << 4;
       $76 = $75 & 255;
       $5 = $76;
       $77 = $6;
       $78 = $77 & 255;
       $79 = $78 << 4;
       $80 = $79 & 255;
       $6 = $80;
       $81 = $5;
       $82 = $81 & 255;
       $83 = $82 + 0 | 0;
       $84 = $83 & 255;
       $5 = $84;
       $85 = $6;
       $86 = $85 & 255;
       $87 = $86 + 0 | 0;
       $88 = $87 & 255;
       $6 = $88;
       $89 = $5;
       $90 = $89 & 255;
       $91 = $6;
       $92 = $91 & 255;
       _PlcRPicShowEx(7, 0, 1, $90, $92, 0);
      }
     }
    }
   }
   $93 = $1;
   $94 = $93 & 255;
   $95 = $94 + 1 | 0;
   $96 = $95 & 255;
   $1 = $96;
  }
  $97 = $34 + 1 | 0;
  $98 = $97 & 255;
  $0 = $98;
 }
 STACKTOP = sp;
 return;
}

function _GamConInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer10 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $2 = HEAP8[180032] | 0;
 $3 = $2 << 24 >> 24 != 0;
 if ($3) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;
  return $45 | 0;
 }
 HEAP8[180032] = 1;
 _GuiInit() | 0;
 _FlashInit();
 _SysMemInit(11264, 5120);
 _SysIconAllClear();
 $4 = _GuiGetKbdState() | 0;
 HEAP8[186045 >> 0] = $4 & 255;
 HEAP8[186045 + 1 >> 0] = $4 >> 8;
 _GuiSetInputFilter(3);
 _GuiSetKbdType(3);
 $5 = _SysGetKeySound() | 0;
 HEAP8[186044] = $5;
 _SysSetKeySound(0);
 _SysTimer1Open(50);
 _DataBankSwitch(4, 1, 4);
 $6 = HEAP32[2] | 0;
 $7 = _gam_fopen($6, 114) | 0;
 HEAP32[44296] = $7;
 $8 = HEAP32[44296] | 0;
 $9 = (0 | 0) == ($8 | 0);
 if ($9) {
  $10 = HEAP32[2] | 0;
  HEAP32[$vararg_buffer >> 2] = $10;
  _printf(5027, $vararg_buffer) | 0;
  $0 = 1;
  $45 = $0;
  STACKTOP = sp;
  return $45 | 0;
 }
 $11 = HEAP32[44290] | 0;
 $12 = ($11 | 0) != (0 | 0);
 if ($12) {
  $13 = HEAP32[44290] | 0;
  $14 = _gam_fopen($13, 114) | 0;
  HEAP32[44295] = $14;
 }
 $15 = HEAP32[44295] | 0;
 $16 = (0 | 0) == ($15 | 0);
 if ($16) {
  $17 = HEAP32[3] | 0;
  $18 = _gam_fopen($17, 114) | 0;
  HEAP32[44295] = $18;
 } else {
  _printf(5043, $vararg_buffer1) | 0;
 }
 $19 = HEAP32[44295] | 0;
 $20 = (0 | 0) == ($19 | 0);
 if ($20) {
  _printf(5061, $vararg_buffer3) | 0;
  _printf(5079, $vararg_buffer5) | 0;
  $21 = HEAP32[44290] | 0;
  HEAP32[$vararg_buffer7 >> 2] = $21;
  _printf(5087, $vararg_buffer7) | 0;
  $22 = HEAP32[3] | 0;
  HEAP32[$vararg_buffer10 >> 2] = $22;
  _printf(5087, $vararg_buffer10) | 0;
  $0 = 1;
  $45 = $0;
  STACKTOP = sp;
  return $45 | 0;
 } else {
  $23 = HEAP32[44295] | 0;
  $24 = _gam_freadall($23) | 0;
  HEAP32[44294] = $24;
  $25 = _SysGetSecond() | 0;
  $1 = $25;
  $26 = $1;
  $27 = $26 & 255;
  _gam_srand($27);
  _GetDataBankNumber(9, 186052);
  HEAP8[186047] = 1;
  HEAP8[186048] = 0;
  HEAP8[186049] = 0;
  $28 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $29 = $28 & 65535;
  $30 = $29 - 1 | 0;
  $31 = $30 & 255;
  HEAP8[186050] = $31;
  $32 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $33 = $32 & 65535;
  $34 = $33 - 1 | 0;
  $35 = $34 & 255;
  HEAP8[186051] = $35;
  $36 = HEAP32[44322] | 0;
  HEAP32[44297] = $36;
  $37 = HEAP32[44297] | 0;
  $38 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $39 = $38 & 65535;
  $40 = $39 + 7 | 0;
  $41 = ($40 | 0) / 8 & -1;
  $42 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $43 = $42 & 65535;
  $44 = Math_imul($41, $43) | 0;
  _memset($37 | 0, 0, $44 | 0) | 0;
  _GamLoadEngineConfig();
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;
  return $45 | 0;
 }
 return 0 | 0;
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $3 = sp + 32 | 0;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $6 = $3 + 4 | 0;
 $7 = $0 + 20 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $8 - $5 | 0;
 HEAP32[$6 >> 2] = $9;
 $10 = $3 + 8 | 0;
 HEAP32[$10 >> 2] = $1;
 $11 = $3 + 12 | 0;
 HEAP32[$11 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $3;
 HEAP32[$vararg_buffer >> 2] = $14;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = $15;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = 2;
 $16 = ___syscall146(146, $vararg_buffer | 0) | 0;
 $17 = ___syscall_ret($16) | 0;
 $18 = ($12 | 0) == ($17 | 0);
 L1 : do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;
   $$04855 = $12;
   $$04954 = $3;
   $26 = $17;
   while (1) {
    $25 = ($26 | 0) < 0;
    if ($25) {
     break;
    }
    $34 = $$04855 - $26 | 0;
    $35 = $$04954 + 4 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = $26 >>> 0 > $36 >>> 0;
    $38 = $$04954 + 8 | 0;
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = $39 + $$04756 | 0;
    $40 = $37 ? $36 : 0;
    $$0 = $26 - $40 | 0;
    $41 = HEAP32[$$150 >> 2] | 0;
    $42 = $41 + $$0 | 0;
    HEAP32[$$150 >> 2] = $42;
    $43 = $$150 + 4 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = $44 - $$0 | 0;
    HEAP32[$43 >> 2] = $45;
    $46 = HEAP32[$13 >> 2] | 0;
    $47 = $$150;
    HEAP32[$vararg_buffer3 >> 2] = $46;
    $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
    HEAP32[$vararg_ptr6 >> 2] = $47;
    $vararg_ptr7 = $vararg_buffer3 + 8 | 0;
    HEAP32[$vararg_ptr7 >> 2] = $$1;
    $48 = ___syscall146(146, $vararg_buffer3 | 0) | 0;
    $49 = ___syscall_ret($48) | 0;
    $50 = ($34 | 0) == ($49 | 0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;
     $$04855 = $34;
     $$04954 = $$150;
     $26 = $49;
    }
   }
   $27 = $0 + 16 | 0;
   HEAP32[$27 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$7 >> 2] = 0;
   $28 = HEAP32[$0 >> 2] | 0;
   $29 = $28 | 32;
   HEAP32[$0 >> 2] = $29;
   $30 = ($$04756 | 0) == 2;
   if ($30) {
    $$051 = 0;
   } else {
    $31 = $$04954 + 4 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $2 - $32 | 0;
    $$051 = $33;
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $19 = $0 + 44 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = $0 + 48 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  $23 = $20 + $22 | 0;
  $24 = $0 + 16 | 0;
  HEAP32[$24 >> 2] = $23;
  HEAP32[$4 >> 2] = $20;
  HEAP32[$7 >> 2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}
function _DelPerson($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = $8 & 255;
 $10 = HEAP8[5256 >> 0] | 0;
 $11 = $10 & 255;
 $12 = ($9 | 0) >= ($11 | 0);
 if ($12) {
  $2 = 0;
  $82 = $2;
  STACKTOP = sp;
  return $82 | 0;
 }
 $13 = $4;
 $14 = $13 & 65535;
 $15 = _GamGetPersonCount() | 0;
 $16 = $14 >>> 0 >= $15 >>> 0;
 if ($16) {
  $2 = 0;
  $82 = $2;
  STACKTOP = sp;
  return $82 | 0;
 }
 $17 = $3;
 $18 = $17 & 255;
 $19 = 224276 + ($18 * 37 | 0) | 0;
 $7 = $19;
 $20 = $7;
 $21 = $20 + 29 | 0;
 $22 = HEAPU8[$21 >> 0] | HEAPU8[$21 + 1 >> 0] << 8;
 $23 = $22 & 65535;
 $24 = $7;
 $25 = $24 + 31 | 0;
 $26 = HEAPU8[$25 >> 0] | HEAPU8[$25 + 1 >> 0] << 8;
 $27 = $26 & 65535;
 $28 = $23 + $27 | 0;
 $6 = $28;
 $29 = $7;
 $30 = $29 + 29 | 0;
 $31 = HEAPU8[$30 >> 0] | HEAPU8[$30 + 1 >> 0] << 8;
 $32 = $31 & 65535;
 $5 = $32;
 while (1) {
  $33 = $5;
  $34 = $6;
  $35 = $33 >>> 0 < $34 >>> 0;
  if (!$35) {
   break;
  }
  $36 = $5;
  $37 = 233748 + ($36 << 1) | 0;
  $38 = HEAPU8[$37 >> 0] | HEAPU8[$37 + 1 >> 0] << 8;
  $39 = $38 & 65535;
  $40 = $4;
  $41 = $40 & 65535;
  $42 = ($39 | 0) == ($41 | 0);
  if ($42) {
   break;
  }
  $43 = $5;
  $44 = $43 + 1 | 0;
  $5 = $44;
 }
 $45 = $5;
 $46 = $6;
 $47 = $45 >>> 0 >= $46 >>> 0;
 if ($47) {
  $2 = 0;
  $82 = $2;
  STACKTOP = sp;
  return $82 | 0;
 }
 while (1) {
  $48 = $5;
  $49 = _GamGetPersonCount() | 0;
  $50 = $49 - 1 | 0;
  $51 = $48 >>> 0 < $50 >>> 0;
  if (!$51) {
   break;
  }
  $52 = $5;
  $53 = $52 + 1 | 0;
  $54 = 233748 + ($53 << 1) | 0;
  $55 = HEAPU8[$54 >> 0] | HEAPU8[$54 + 1 >> 0] << 8;
  $56 = $5;
  $57 = 233748 + ($56 << 1) | 0;
  HEAP8[$57 >> 0] = $55 & 255;
  HEAP8[$57 + 1 >> 0] = $55 >> 8;
  $58 = $5;
  $59 = $58 + 1 | 0;
  $5 = $59;
 }
 $60 = $7;
 $61 = $60 + 31 | 0;
 $62 = HEAPU8[$61 >> 0] | HEAPU8[$61 + 1 >> 0] << 8;
 $63 = $62 & 65535;
 $64 = $63 - 1 | 0;
 $65 = $64 & 65535;
 HEAP8[$61 >> 0] = $65 & 255;
 HEAP8[$61 + 1 >> 0] = $65 >> 8;
 $66 = $3;
 $67 = $66 & 255;
 $68 = $67 + 1 | 0;
 $5 = $68;
 while (1) {
  $69 = $5;
  $70 = HEAP8[5256 >> 0] | 0;
  $71 = $70 & 255;
  $72 = $69 >>> 0 < $71 >>> 0;
  if (!$72) {
   break;
  }
  $73 = $5;
  $74 = 224276 + ($73 * 37 | 0) | 0;
  $75 = $74 + 29 | 0;
  $76 = HEAPU8[$75 >> 0] | HEAPU8[$75 + 1 >> 0] << 8;
  $77 = $76 & 65535;
  $78 = $77 - 1 | 0;
  $79 = $78 & 65535;
  HEAP8[$75 >> 0] = $79 & 255;
  HEAP8[$75 + 1 >> 0] = $79 >> 8;
  $80 = $5;
  $81 = $80 + 1 | 0;
  $5 = $81;
 }
 $2 = 1;
 $82 = $2;
 STACKTOP = sp;
 return $82 | 0;
}

function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0 >> 2] | 0;
 $4 = $3 + 1794895138 | 0;
 $5 = $0 + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = _swapc($6, $4) | 0;
 $8 = $0 + 12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = _swapc($9, $4) | 0;
 $11 = $0 + 16 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 $13 = _swapc($12, $4) | 0;
 $14 = $1 >>> 2;
 $15 = $7 >>> 0 < $14 >>> 0;
 L1 : do {
  if ($15) {
   $16 = $7 << 2;
   $17 = $1 - $16 | 0;
   $18 = $10 >>> 0 < $17 >>> 0;
   $19 = $13 >>> 0 < $17 >>> 0;
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21 | 0) == 0;
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;
     $$094 = $7;
     while (1) {
      $25 = $$094 >>> 1;
      $26 = $$090 + $25 | 0;
      $27 = $26 << 1;
      $28 = $27 + $23 | 0;
      $29 = $0 + ($28 << 2) | 0;
      $30 = HEAP32[$29 >> 2] | 0;
      $31 = _swapc($30, $4) | 0;
      $32 = $28 + 1 | 0;
      $33 = $0 + ($32 << 2) | 0;
      $34 = HEAP32[$33 >> 2] | 0;
      $35 = _swapc($34, $4) | 0;
      $36 = $35 >>> 0 < $1 >>> 0;
      $37 = $1 - $35 | 0;
      $38 = $31 >>> 0 < $37 >>> 0;
      $or$cond102 = $36 & $38;
      if (!$or$cond102) {
       $$4 = 0;
       break L1;
      }
      $39 = $35 + $31 | 0;
      $40 = $0 + $39 | 0;
      $41 = HEAP8[$40 >> 0] | 0;
      $42 = $41 << 24 >> 24 == 0;
      if (!$42) {
       $$4 = 0;
       break L1;
      }
      $43 = $0 + $35 | 0;
      $44 = _strcmp($2, $43) | 0;
      $45 = ($44 | 0) == 0;
      if ($45) {
       break;
      }
      $62 = ($$094 | 0) == 1;
      $63 = ($44 | 0) < 0;
      $64 = $$094 - $25 | 0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;
       $$094 = $$195;
      }
     }
     $46 = $27 + $24 | 0;
     $47 = $0 + ($46 << 2) | 0;
     $48 = HEAP32[$47 >> 2] | 0;
     $49 = _swapc($48, $4) | 0;
     $50 = $46 + 1 | 0;
     $51 = $0 + ($50 << 2) | 0;
     $52 = HEAP32[$51 >> 2] | 0;
     $53 = _swapc($52, $4) | 0;
     $54 = $53 >>> 0 < $1 >>> 0;
     $55 = $1 - $53 | 0;
     $56 = $49 >>> 0 < $55 >>> 0;
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = $0 + $53 | 0;
      $58 = $53 + $49 | 0;
      $59 = $0 + $58 | 0;
      $60 = HEAP8[$59 >> 0] | 0;
      $61 = $60 << 24 >> 24 == 0;
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while (0);
 return $$4 | 0;
}

function _ShowFightNoteFace($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $3 = $2 & 65535;
 $4 = $3 - 1 | 0;
 $5 = $4 - 120 | 0;
 $6 = $5 - 0 | 0;
 $7 = ($6 | 0) / 2 & -1;
 $8 = 0 + $7 | 0;
 $9 = $8 & 65535;
 $10 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $11 = $10 & 65535;
 $12 = $11 - 1 | 0;
 $13 = $12 - 84 | 0;
 $14 = $13 - 0 | 0;
 $15 = ($14 | 0) / 2 & -1;
 $16 = 0 + $15 | 0;
 $17 = $16 & 65535;
 $18 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $19 = $18 & 65535;
 $20 = $19 - 1 | 0;
 $21 = $20 - 120 | 0;
 $22 = $21 - 0 | 0;
 $23 = ($22 | 0) / 2 & -1;
 $24 = 0 + $23 | 0;
 $25 = $24 + 120 | 0;
 $26 = $25 & 65535;
 $27 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $28 = $27 & 65535;
 $29 = $28 - 1 | 0;
 $30 = $29 - 84 | 0;
 $31 = $30 - 0 | 0;
 $32 = ($31 | 0) / 2 & -1;
 $33 = 0 + $32 | 0;
 $34 = $33 + 84 | 0;
 $35 = $34 & 65535;
 _gam_clrlcd($9, $17, $26, $35);
 $36 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $37 = $36 & 65535;
 $38 = $37 - 1 | 0;
 $39 = $38 - 120 | 0;
 $40 = $39 - 0 | 0;
 $41 = ($40 | 0) / 2 & -1;
 $42 = 0 + $41 | 0;
 $43 = $42 & 65535;
 $44 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $45 = $44 & 65535;
 $46 = $45 - 1 | 0;
 $47 = $46 - 84 | 0;
 $48 = $47 - 0 | 0;
 $49 = ($48 | 0) / 2 & -1;
 $50 = 0 + $49 | 0;
 $51 = $50 & 65535;
 $52 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $53 = $52 & 65535;
 $54 = $53 - 1 | 0;
 $55 = $54 - 120 | 0;
 $56 = $55 - 0 | 0;
 $57 = ($56 | 0) / 2 & -1;
 $58 = 0 + $57 | 0;
 $59 = $58 + 120 | 0;
 $60 = $59 & 65535;
 $61 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $62 = $61 & 65535;
 $63 = $62 - 1 | 0;
 $64 = $63 - 84 | 0;
 $65 = $64 - 0 | 0;
 $66 = ($65 | 0) / 2 & -1;
 $67 = 0 + $66 | 0;
 $68 = $67 + 84 | 0;
 $69 = $68 & 65535;
 _gam_rect($43, $51, $60, $69);
 $70 = $1;
 $71 = $70 & 255;
 $72 = $71 + 1 | 0;
 $73 = $72 & 65535;
 $74 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $75 = $74 & 65535;
 $76 = $75 - 1 | 0;
 $77 = $76 - 84 | 0;
 $78 = $77 - 0 | 0;
 $79 = ($78 | 0) / 2 & -1;
 $80 = 0 + $79 | 0;
 $81 = $80 & 65535;
 $82 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $83 = $82 & 65535;
 $84 = $83 - 1 | 0;
 $85 = $84 - 84 | 0;
 $86 = $85 - 0 | 0;
 $87 = ($86 | 0) / 2 & -1;
 $88 = 0 + $87 | 0;
 $89 = $88 + 2 | 0;
 $90 = $89 & 65535;
 _PlcRPicShowEx(76, 0, $73, $81, $90, 1);
 STACKTOP = sp;
 return;
}

function _touchListViewCalcTopLeftForMove($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $15 = sp + 28 | 0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $22 = $9;
 HEAP8[$15 >> 0] = $22 & 255;
 HEAP8[$15 + 1 >> 0] = $22 >> 8;
 $23 = $15 + 2 | 0;
 $24 = $12;
 HEAP8[$23 >> 0] = $24 & 255;
 HEAP8[$23 + 1 >> 0] = $24 >> 8;
 $25 = $11;
 $26 = $25 << 16 >> 16 != 0;
 if ($26) {
  $27 = $8;
  $28 = $27 + 7 | 0;
  $29 = HEAPU8[$28 >> 0] | HEAPU8[$28 + 1 >> 0] << 8;
  $30 = $29 << 16 >> 16;
  $31 = $8;
  $32 = $31 + 3 | 0;
  $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8;
  $34 = $33 << 16 >> 16;
  $35 = $30 - $34 | 0;
  $36 = $35 & 65535;
  $16 = $36;
  $37 = $16;
  $38 = $37 << 16 >> 16;
  $39 = $11;
  $40 = $39 & 65535;
  $41 = ($38 | 0) / ($40 | 0) & -1;
  $42 = $41 & 65535;
  $17 = $42;
  $43 = $9;
  $44 = $43 & 65535;
  $45 = $17;
  $46 = $45 << 16 >> 16;
  $47 = $44 - $46 | 0;
  $48 = $47 & 65535;
  $18 = $48;
  $49 = $18;
  $50 = $49 << 16 >> 16;
  $51 = $10;
  $52 = $51 & 65535;
  $53 = _limitValueInRange($50, 0, $52) | 0;
  $54 = $53 & 65535;
  HEAP8[$15 >> 0] = $54 & 255;
  HEAP8[$15 + 1 >> 0] = $54 >> 8;
 }
 $55 = $14;
 $56 = $55 << 16 >> 16 != 0;
 if (!$56) {
  HEAP8[$0 >> 0] = HEAP8[$15 >> 0] | 0;
  HEAP8[$0 + 1 >> 0] = HEAP8[$15 + 1 >> 0] | 0;
  HEAP8[$0 + 2 >> 0] = HEAP8[$15 + 2 >> 0] | 0;
  HEAP8[$0 + 3 >> 0] = HEAP8[$15 + 3 >> 0] | 0;
  STACKTOP = sp;
  return;
 }
 $57 = $8;
 $58 = $57 + 9 | 0;
 $59 = HEAPU8[$58 >> 0] | HEAPU8[$58 + 1 >> 0] << 8;
 $60 = $59 << 16 >> 16;
 $61 = $8;
 $62 = $61 + 5 | 0;
 $63 = HEAPU8[$62 >> 0] | HEAPU8[$62 + 1 >> 0] << 8;
 $64 = $63 << 16 >> 16;
 $65 = $60 - $64 | 0;
 $66 = $65 & 65535;
 $19 = $66;
 $67 = $19;
 $68 = $67 << 16 >> 16;
 $69 = $14;
 $70 = $69 & 65535;
 $71 = ($68 | 0) / ($70 | 0) & -1;
 $72 = $71 & 65535;
 $20 = $72;
 $73 = $12;
 $74 = $73 & 65535;
 $75 = $20;
 $76 = $75 << 16 >> 16;
 $77 = $74 - $76 | 0;
 $78 = $77 & 65535;
 $21 = $78;
 $79 = $21;
 $80 = $79 << 16 >> 16;
 $81 = $13;
 $82 = $81 & 65535;
 $83 = _limitValueInRange($80, 0, $82) | 0;
 $84 = $83 & 65535;
 $85 = $15 + 2 | 0;
 HEAP8[$85 >> 0] = $84 & 255;
 HEAP8[$85 + 1 >> 0] = $84 >> 8;
 HEAP8[$0 >> 0] = HEAP8[$15 >> 0] | 0;
 HEAP8[$0 + 1 >> 0] = HEAP8[$15 + 1 >> 0] | 0;
 HEAP8[$0 + 2 >> 0] = HEAP8[$15 + 2 >> 0] | 0;
 HEAP8[$0 + 3 >> 0] = HEAP8[$15 + 3 >> 0] | 0;
 STACKTOP = sp;
 return;
}

function _GetResItem($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = HEAP32[44295] | 0;
 $10 = $5;
 _gam_fseek($9, $10, 0) | 0;
 $11 = $7;
 $12 = HEAP32[44295] | 0;
 _gam_fread($11, 14, 1, $12) | 0;
 $13 = $6;
 $14 = $13 & 65535;
 $15 = $14 - 1 | 0;
 $16 = $7;
 $17 = $16 + 6 | 0;
 $18 = HEAPU8[$17 >> 0] | HEAPU8[$17 + 1 >> 0] << 8;
 $19 = $18 & 65535;
 $20 = ($15 | 0) >= ($19 | 0);
 if ($20) {
  $21 = $8;
  HEAP8[$21 >> 0] = 0 & 255;
  HEAP8[$21 + 1 >> 0] = 0 >> 8 & 255;
  HEAP8[$21 + 2 >> 0] = 0 >> 16 & 255;
  HEAP8[$21 + 3 >> 0] = 0 >> 24;
  $22 = $8;
  $23 = $22 + 4 | 0;
  HEAP8[$23 >> 0] = 0 & 255;
  HEAP8[$23 + 1 >> 0] = 0 >> 8 & 255;
  HEAP8[$23 + 2 >> 0] = 0 >> 16 & 255;
  HEAP8[$23 + 3 >> 0] = 0 >> 24;
  $4 = 0;
  $55 = $4;
  STACKTOP = sp;
  return $55 | 0;
 }
 $24 = $7;
 $25 = $24 + 8 | 0;
 $26 = HEAPU8[$25 >> 0] | HEAPU8[$25 + 1 >> 0] << 8 | HEAPU8[$25 + 2 >> 0] << 16 | HEAPU8[$25 + 3 >> 0] << 24;
 $27 = ($26 | 0) != 0;
 $28 = $6;
 $29 = $28 & 65535;
 $30 = $29 - 1 | 0;
 if ($27) {
  $31 = $8;
  HEAP8[$31 >> 0] = $30 & 255;
  HEAP8[$31 + 1 >> 0] = $30 >> 8 & 255;
  HEAP8[$31 + 2 >> 0] = $30 >> 16 & 255;
  HEAP8[$31 + 3 >> 0] = $30 >> 24;
  $32 = $7;
  $33 = $32 + 8 | 0;
  $34 = HEAPU8[$33 >> 0] | HEAPU8[$33 + 1 >> 0] << 8 | HEAPU8[$33 + 2 >> 0] << 16 | HEAPU8[$33 + 3 >> 0] << 24;
  $35 = $8;
  $36 = HEAPU8[$35 >> 0] | HEAPU8[$35 + 1 >> 0] << 8 | HEAPU8[$35 + 2 >> 0] << 16 | HEAPU8[$35 + 3 >> 0] << 24;
  $37 = Math_imul($36, $34) | 0;
  HEAP8[$35 >> 0] = $37 & 255;
  HEAP8[$35 + 1 >> 0] = $37 >> 8 & 255;
  HEAP8[$35 + 2 >> 0] = $37 >> 16 & 255;
  HEAP8[$35 + 3 >> 0] = $37 >> 24;
  $38 = $8;
  $39 = HEAPU8[$38 >> 0] | HEAPU8[$38 + 1 >> 0] << 8 | HEAPU8[$38 + 2 >> 0] << 16 | HEAPU8[$38 + 3 >> 0] << 24;
  $40 = $39 + 14 | 0;
  HEAP8[$38 >> 0] = $40 & 255;
  HEAP8[$38 + 1 >> 0] = $40 >> 8 & 255;
  HEAP8[$38 + 2 >> 0] = $40 >> 16 & 255;
  HEAP8[$38 + 3 >> 0] = $40 >> 24;
  $41 = $7;
  $42 = $41 + 8 | 0;
  $43 = HEAPU8[$42 >> 0] | HEAPU8[$42 + 1 >> 0] << 8 | HEAPU8[$42 + 2 >> 0] << 16 | HEAPU8[$42 + 3 >> 0] << 24;
  $44 = $8;
  $45 = $44 + 4 | 0;
  HEAP8[$45 >> 0] = $43 & 255;
  HEAP8[$45 + 1 >> 0] = $43 >> 8 & 255;
  HEAP8[$45 + 2 >> 0] = $43 >> 16 & 255;
  HEAP8[$45 + 3 >> 0] = $43 >> 24;
 } else {
  $5 = $30;
  $46 = $5;
  $47 = $46 << 3;
  $5 = $47;
  $48 = HEAP32[44295] | 0;
  $49 = $5;
  _gam_fseek($48, $49, 1) | 0;
  $50 = $8;
  $51 = HEAP32[44295] | 0;
  _gam_fread($50, 8, 1, $51) | 0;
 }
 $52 = $8;
 $53 = $52 + 4 | 0;
 $54 = HEAPU8[$53 >> 0] | HEAPU8[$53 + 1 >> 0] << 8 | HEAPU8[$53 + 2 >> 0] << 16 | HEAPU8[$53 + 3 >> 0] << 24;
 $4 = $54;
 $55 = $4;
 STACKTOP = sp;
 return $55 | 0;
}

function _SetCitySatrap() {
 var $$sink = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = 0;
 while (1) {
  $6 = $0;
  $7 = HEAP8[5256 >> 0] | 0;
  $8 = $7 & 255;
  $9 = $6 >>> 0 < $8 >>> 0;
  if (!$9) {
   break;
  }
  $10 = $0;
  $11 = 224276 + ($10 * 37 | 0) | 0;
  $12 = $11 + 1 | 0;
  $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
  $14 = $13 & 65535;
  $4 = $14;
  $15 = $4;
  $16 = ($15 | 0) != 0;
  if ($16) {
   $5 = 0;
   $17 = $0;
   $18 = 224276 + ($17 * 37 | 0) | 0;
   $19 = $18 + 29 | 0;
   $20 = HEAPU8[$19 >> 0] | HEAPU8[$19 + 1 >> 0] << 8;
   $21 = $20 & 65535;
   $2 = $21;
   $1 = 0;
   L6 : while (1) {
    $22 = $1;
    $23 = $0;
    $24 = 224276 + ($23 * 37 | 0) | 0;
    $25 = $24 + 31 | 0;
    $26 = HEAPU8[$25 >> 0] | HEAPU8[$25 + 1 >> 0] << 8;
    $27 = $26 & 65535;
    $28 = $22 >>> 0 < $27 >>> 0;
    if (!$28) {
     break;
    }
    $29 = $2;
    $30 = $1;
    $31 = $29 + $30 | 0;
    $32 = 233748 + ($31 << 1) | 0;
    $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8;
    $34 = $33 & 65535;
    $3 = $34;
    $35 = $3;
    $36 = 186276 + ($35 * 19 | 0) | 0;
    $37 = $36 + 2 | 0;
    $38 = HEAPU8[$37 >> 0] | HEAPU8[$37 + 1 >> 0] << 8;
    $39 = $38 & 65535;
    $40 = $4;
    $41 = ($39 | 0) == ($40 | 0);
    do {
     if ($41) {
      $42 = $4;
      $43 = $3;
      $44 = $43 + 1 | 0;
      $45 = ($42 | 0) == ($44 | 0);
      if ($45) {
       label = 8;
       break L6;
      }
      $48 = $5;
      $49 = ($48 | 0) != 0;
      if (!$49) {
       $64 = $3;
       $65 = $64 + 1 | 0;
       $5 = $65;
       break;
      }
      $50 = $5;
      $51 = $50 - 1 | 0;
      $52 = 186276 + ($51 * 19 | 0) | 0;
      $53 = $52 + 6 | 0;
      $54 = HEAP8[$53 >> 0] | 0;
      $55 = $54 & 255;
      $56 = $3;
      $57 = 186276 + ($56 * 19 | 0) | 0;
      $58 = $57 + 6 | 0;
      $59 = HEAP8[$58 >> 0] | 0;
      $60 = $59 & 255;
      $61 = ($55 | 0) < ($60 | 0);
      if ($61) {
       $62 = $3;
       $63 = $62 + 1 | 0;
       $5 = $63;
      }
     }
    } while (0);
    $66 = $1;
    $67 = $66 + 1 | 0;
    $1 = $67;
   }
   if ((label | 0) == 8) {
    label = 0;
    $46 = $3;
    $47 = $46 + 1 | 0;
    $5 = $47;
   }
   $68 = $5;
   $69 = $68 & 65535;
   $70 = $0;
   $$sink = $69;
   $$sink3 = $70;
  } else {
   $71 = $0;
   $$sink = 0;
   $$sink3 = $71;
  }
  $72 = 224276 + ($$sink3 * 37 | 0) | 0;
  $73 = $72 + 3 | 0;
  HEAP8[$73 >> 0] = $$sink & 255;
  HEAP8[$73 + 1 >> 0] = $$sink >> 8;
  $74 = $0;
  $75 = $74 + 1 | 0;
  $0 = $75;
 }
 STACKTOP = sp;
 return;
}

function _DelGoods($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = $8 & 255;
 $10 = HEAP8[5256 >> 0] | 0;
 $11 = $10 & 255;
 $12 = ($9 | 0) >= ($11 | 0);
 if ($12) {
  $2 = 0;
  $80 = $2;
  STACKTOP = sp;
  return $80 | 0;
 }
 $13 = $4;
 $14 = $13 & 65535;
 $15 = ($14 | 0) >= 2e3;
 if ($15) {
  $2 = 0;
  $80 = $2;
  STACKTOP = sp;
  return $80 | 0;
 }
 $16 = $3;
 $17 = $16 & 255;
 $18 = 224276 + ($17 * 37 | 0) | 0;
 $7 = $18;
 $19 = $7;
 $20 = $19 + 33 | 0;
 $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8;
 $22 = $21 & 65535;
 $23 = $7;
 $24 = $23 + 35 | 0;
 $25 = HEAPU8[$24 >> 0] | HEAPU8[$24 + 1 >> 0] << 8;
 $26 = $25 & 65535;
 $27 = $22 + $26 | 0;
 $6 = $27;
 $28 = $7;
 $29 = $28 + 33 | 0;
 $30 = HEAPU8[$29 >> 0] | HEAPU8[$29 + 1 >> 0] << 8;
 $31 = $30 & 65535;
 $5 = $31;
 while (1) {
  $32 = $5;
  $33 = $6;
  $34 = $32 >>> 0 < $33 >>> 0;
  if (!$34) {
   break;
  }
  $35 = $5;
  $36 = 237748 + ($35 << 1) | 0;
  $37 = HEAPU8[$36 >> 0] | HEAPU8[$36 + 1 >> 0] << 8;
  $38 = $37 & 65535;
  $39 = $38 & 32767;
  $40 = $4;
  $41 = $40 & 65535;
  $42 = ($39 | 0) == ($41 | 0);
  if ($42) {
   break;
  }
  $43 = $5;
  $44 = $43 + 1 | 0;
  $5 = $44;
 }
 $45 = $5;
 $46 = $6;
 $47 = $45 >>> 0 >= $46 >>> 0;
 if ($47) {
  $2 = 0;
  $80 = $2;
  STACKTOP = sp;
  return $80 | 0;
 }
 while (1) {
  $48 = $5;
  $49 = $48 >>> 0 < 1999;
  if (!$49) {
   break;
  }
  $50 = $5;
  $51 = $50 + 1 | 0;
  $52 = 237748 + ($51 << 1) | 0;
  $53 = HEAPU8[$52 >> 0] | HEAPU8[$52 + 1 >> 0] << 8;
  $54 = $5;
  $55 = 237748 + ($54 << 1) | 0;
  HEAP8[$55 >> 0] = $53 & 255;
  HEAP8[$55 + 1 >> 0] = $53 >> 8;
  $56 = $5;
  $57 = $56 + 1 | 0;
  $5 = $57;
 }
 $58 = $7;
 $59 = $58 + 35 | 0;
 $60 = HEAPU8[$59 >> 0] | HEAPU8[$59 + 1 >> 0] << 8;
 $61 = $60 & 65535;
 $62 = $61 - 1 | 0;
 $63 = $62 & 65535;
 HEAP8[$59 >> 0] = $63 & 255;
 HEAP8[$59 + 1 >> 0] = $63 >> 8;
 $64 = $3;
 $65 = $64 & 255;
 $66 = $65 + 1 | 0;
 $5 = $66;
 while (1) {
  $67 = $5;
  $68 = HEAP8[5256 >> 0] | 0;
  $69 = $68 & 255;
  $70 = $67 >>> 0 < $69 >>> 0;
  if (!$70) {
   break;
  }
  $71 = $5;
  $72 = 224276 + ($71 * 37 | 0) | 0;
  $73 = $72 + 33 | 0;
  $74 = HEAPU8[$73 >> 0] | HEAPU8[$73 + 1 >> 0] << 8;
  $75 = $74 & 65535;
  $76 = $75 - 1 | 0;
  $77 = $76 & 65535;
  HEAP8[$73 >> 0] = $77 & 255;
  HEAP8[$73 + 1 >> 0] = $77 >> 8;
  $78 = $5;
  $79 = $78 + 1 | 0;
  $5 = $79;
 }
 $2 = 1;
 $80 = $2;
 STACKTOP = sp;
 return $80 | 0;
}

function _touchUpdate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = HEAP8[$1 >> 0] | 0;
 $5 = $4 & 255;
 $6 = ($5 | 0) != 16;
 if ($6) {
  $2 = -1;
  $66 = $2;
  STACKTOP = sp;
  return $66 | 0;
 }
 $7 = $1 + 3 | 0;
 $8 = HEAPU8[$7 >> 0] | HEAPU8[$7 + 1 >> 0] << 8;
 $9 = $3;
 $10 = $9 + 7 | 0;
 HEAP8[$10 >> 0] = $8 & 255;
 HEAP8[$10 + 1 >> 0] = $8 >> 8;
 $11 = $1 + 3 | 0;
 $12 = $11 + 2 | 0;
 $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
 $14 = $3;
 $15 = $14 + 9 | 0;
 HEAP8[$15 >> 0] = $13 & 255;
 HEAP8[$15 + 1 >> 0] = $13 >> 8;
 $16 = $1 + 1 | 0;
 $17 = HEAPU8[$16 >> 0] | HEAPU8[$16 + 1 >> 0] << 8;
 $18 = $17 & 65535;
 L5 : do {
  switch ($18 | 0) {
  case 1:
   {
    $19 = $3;
    $20 = $19 + 7 | 0;
    $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8;
    $22 = $3;
    $23 = $22 + 3 | 0;
    HEAP8[$23 >> 0] = $21 & 255;
    HEAP8[$23 + 1 >> 0] = $21 >> 8;
    $24 = $3;
    $25 = $24 + 9 | 0;
    $26 = HEAPU8[$25 >> 0] | HEAPU8[$25 + 1 >> 0] << 8;
    $27 = $3;
    $28 = $27 + 5 | 0;
    HEAP8[$28 >> 0] = $26 & 255;
    HEAP8[$28 + 1 >> 0] = $26 >> 8;
    $29 = $3;
    $30 = $29 + 1 | 0;
    HEAP8[$30 >> 0] = 1;
    $31 = $3;
    $32 = $31 + 2 | 0;
    HEAP8[$32 >> 0] = 0;
    break;
   }
  case 2:
   {
    $33 = $3;
    $34 = $33 + 1 | 0;
    $35 = HEAP8[$34 >> 0] | 0;
    $36 = $3;
    HEAP8[$36 >> 0] = $35;
    $37 = $3;
    $38 = $37 + 1 | 0;
    HEAP8[$38 >> 0] = 0;
    break;
   }
  case 3:
   {
    $39 = $3;
    $40 = $39 + 7 | 0;
    $41 = HEAPU8[$40 >> 0] | HEAPU8[$40 + 1 >> 0] << 8;
    $42 = $41 << 16 >> 16;
    $43 = $3;
    $44 = $43 + 3 | 0;
    $45 = HEAPU8[$44 >> 0] | HEAPU8[$44 + 1 >> 0] << 8;
    $46 = $45 << 16 >> 16;
    $47 = $42 - $46 | 0;
    $48 = Math_abs($47 | 0) | 0;
    $49 = ($48 | 0) > 2;
    if (!$49) {
     $50 = $3;
     $51 = $50 + 9 | 0;
     $52 = HEAPU8[$51 >> 0] | HEAPU8[$51 + 1 >> 0] << 8;
     $53 = $52 << 16 >> 16;
     $54 = $3;
     $55 = $54 + 5 | 0;
     $56 = HEAPU8[$55 >> 0] | HEAPU8[$55 + 1 >> 0] << 8;
     $57 = $56 << 16 >> 16;
     $58 = $53 - $57 | 0;
     $59 = Math_abs($58 | 0) | 0;
     $60 = ($59 | 0) > 2;
     if (!$60) {
      break L5;
     }
    }
    $61 = $3;
    $62 = $61 + 2 | 0;
    HEAP8[$62 >> 0] = 1;
    break;
   }
  case 4:
   {
    $63 = $3;
    $64 = $63 + 1 | 0;
    HEAP8[$64 >> 0] = 0;
    $65 = $3;
    HEAP8[$65 >> 0] = 0;
    break;
   }
  default:
   {}
  }
 } while (0);
 $2 = 0;
 $66 = $2;
 STACKTOP = sp;
 return $66 | 0;
}

function _PersonUpDatadate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = HEAP8[186274] | 0;
 $6 = $5 & 255;
 $7 = 1 == ($6 | 0);
 L1 : do {
  if ($7) {
   $3 = 0;
   while (1) {
    $8 = $3;
    $9 = _GamGetPersonCount() | 0;
    $10 = $8 >>> 0 < $9 >>> 0;
    if (!$10) {
     break L1;
    }
    $11 = $3;
    $12 = 186276 + ($11 * 19 | 0) | 0;
    $13 = $12 + 18 | 0;
    $14 = HEAP8[$13 >> 0] | 0;
    $15 = $14 & 255;
    $16 = $15 + 1 | 0;
    $17 = $16 & 255;
    HEAP8[$13 >> 0] = $17;
    $18 = $3;
    $19 = $18 + 1 | 0;
    $3 = $19;
   }
  }
 } while (0);
 $20 = HEAP8[186275] | 0;
 $21 = $20 & 255;
 $22 = _ResGetItemLen(63, $21) | 0;
 $23 = ($22 >>> 0) / 4 & -1;
 $4 = $23;
 $24 = HEAP8[186275] | 0;
 $25 = $24 & 255;
 $26 = HEAP32[44294] | 0;
 $27 = _ResLoadToCon(63, $25, $26) | 0;
 $1 = $27;
 $3 = 0;
 while (1) {
  $28 = $3;
  $29 = _GamGetPersonCount() | 0;
  $30 = $28 >>> 0 < $29 >>> 0;
  if (!$30) {
   label = 18;
   break;
  }
  $31 = $3;
  $32 = $4;
  $33 = $31 >>> 0 < $32 >>> 0;
  if (!$33) {
   label = 18;
   break;
  }
  $34 = $1;
  $35 = $3;
  $36 = $34 + ($35 << 2) | 0;
  $37 = HEAP8[$36 >> 0] | 0;
  $38 = $37 & 255;
  $39 = $38 + 16 | 0;
  $40 = HEAPU8[186272 >> 0] | HEAPU8[186272 + 1 >> 0] << 8;
  $41 = $40 & 65535;
  $42 = ($39 | 0) == ($41 | 0);
  if ($42) {
   $43 = $1;
   $44 = $3;
   $45 = $43 + ($44 << 2) | 0;
   $46 = $45 + 3 | 0;
   $47 = HEAP8[$46 >> 0] | 0;
   $48 = $47 & 255;
   $2 = $48;
   $49 = $2;
   $50 = ($49 | 0) != 0;
   if (!$50) {
    $51 = _gam_rand() | 0;
    $52 = HEAP8[5256 >> 0] | 0;
    $53 = $52 & 255;
    $54 = ($51 | 0) % ($53 | 0) & -1;
    $2 = $54;
   }
   $55 = HEAP8[5153 >> 0] | 0;
   $56 = $55 << 24 >> 24 != 0;
   if ($56) {
    $57 = $2;
    $58 = $57 - 1 | 0;
    $2 = $58;
   }
   $59 = $2;
   $60 = $59 & 255;
   $61 = $3;
   $62 = $61 & 65535;
   $63 = _AddPerson($60, $62) | 0;
   $64 = $63 << 24 >> 24 != 0;
   if (!$64) {
    label = 14;
    break;
   }
   $65 = HEAP8[5164 >> 0] | 0;
   $66 = $65 << 24 >> 24 != 0;
   if (!$66) {
    $67 = $3;
    $68 = 186276 + ($67 * 19 | 0) | 0;
    $69 = $68 + 18 | 0;
    HEAP8[$69 >> 0] = 16;
   }
  }
  $70 = $3;
  $71 = $70 + 1 | 0;
  $3 = $71;
 }
 if ((label | 0) == 14) {
  $0 = 0;
  $72 = $0;
  STACKTOP = sp;
  return $72 | 0;
 } else if ((label | 0) == 18) {
  $0 = 1;
  $72 = $0;
  STACKTOP = sp;
  return $72 | 0;
 }
 return 0 | 0;
}

function _AddGoodsEx($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = $9 & 255;
 $11 = HEAP8[5256 >> 0] | 0;
 $12 = $11 & 255;
 $13 = ($10 | 0) >= ($12 | 0);
 if ($13) {
  $3 = 0;
  $77 = $3;
  STACKTOP = sp;
  return $77 | 0;
 }
 $14 = $5;
 $15 = $14 & 65535;
 $16 = ($15 | 0) >= 2e3;
 if ($16) {
  $3 = 0;
  $77 = $3;
  STACKTOP = sp;
  return $77 | 0;
 }
 $17 = $4;
 $18 = $17 & 255;
 $19 = 224276 + ($18 * 37 | 0) | 0;
 $20 = $19 + 33 | 0;
 $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8;
 $22 = $21 & 65535;
 $23 = $4;
 $24 = $23 & 255;
 $25 = 224276 + ($24 * 37 | 0) | 0;
 $26 = $25 + 35 | 0;
 $27 = HEAPU8[$26 >> 0] | HEAPU8[$26 + 1 >> 0] << 8;
 $28 = $27 & 65535;
 $29 = $22 + $28 | 0;
 $8 = $29;
 $7 = 1999;
 while (1) {
  $30 = $7;
  $31 = $8;
  $32 = $30 >>> 0 > $31 >>> 0;
  if (!$32) {
   break;
  }
  $33 = $7;
  $34 = $33 - 1 | 0;
  $35 = 237748 + ($34 << 1) | 0;
  $36 = HEAPU8[$35 >> 0] | HEAPU8[$35 + 1 >> 0] << 8;
  $37 = $7;
  $38 = 237748 + ($37 << 1) | 0;
  HEAP8[$38 >> 0] = $36 & 255;
  HEAP8[$38 + 1 >> 0] = $36 >> 8;
  $39 = $7;
  $40 = $39 + -1 | 0;
  $7 = $40;
 }
 $41 = $6;
 $42 = $41 << 24 >> 24 != 0;
 if ($42) {
  $43 = $5;
  $44 = $43 & 65535;
  $45 = $44 | 32768;
  $46 = $45 & 65535;
  $5 = $46;
 }
 $47 = $5;
 $48 = $8;
 $49 = 237748 + ($48 << 1) | 0;
 HEAP8[$49 >> 0] = $47 & 255;
 HEAP8[$49 + 1 >> 0] = $47 >> 8;
 $50 = $4;
 $51 = $50 & 255;
 $52 = 224276 + ($51 * 37 | 0) | 0;
 $53 = $52 + 35 | 0;
 $54 = HEAPU8[$53 >> 0] | HEAPU8[$53 + 1 >> 0] << 8;
 $55 = $54 & 65535;
 $56 = $55 + 1 | 0;
 $57 = $56 & 65535;
 HEAP8[$53 >> 0] = $57 & 255;
 HEAP8[$53 + 1 >> 0] = $57 >> 8;
 $58 = $4;
 $59 = $58 & 255;
 $60 = $59 + 1 | 0;
 $7 = $60;
 while (1) {
  $61 = $7;
  $62 = HEAP8[5256 >> 0] | 0;
  $63 = $62 & 255;
  $64 = $61 >>> 0 < $63 >>> 0;
  if (!$64) {
   break;
  }
  $65 = $7;
  $66 = 224276 + ($65 * 37 | 0) | 0;
  $67 = $66 + 33 | 0;
  $68 = HEAPU8[$67 >> 0] | HEAPU8[$67 + 1 >> 0] << 8;
  $69 = $68 & 65535;
  $70 = $69 + 1 | 0;
  $71 = $70 & 65535;
  HEAP8[$67 >> 0] = $71 & 255;
  HEAP8[$67 + 1 >> 0] = $71 >> 8;
  $72 = $7;
  $73 = $72 + 1 | 0;
  $7 = $73;
 }
 $74 = $8;
 $75 = $74 + 1 | 0;
 $76 = $75 & 65535;
 $3 = $76;
 $77 = $3;
 STACKTOP = sp;
 return $77 | 0;
}

function _FgtGetMapDat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $8 = HEAP8[186059] | 0;
 $9 = $8 & 255;
 $10 = $2;
 $11 = $10 & 255;
 $12 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $13 = $12 & 65535;
 $14 = ($13 | 0) / 16 & -1;
 $15 = $11 + $14 | 0;
 $16 = ($9 | 0) < ($15 | 0);
 if ($16) {
  $17 = HEAP8[186059] | 0;
  $18 = $17 & 255;
  $19 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $20 = $19 & 65535;
  $21 = ($20 | 0) / 16 & -1;
  $22 = $18 - $21 | 0;
  $23 = $22 & 255;
  $2 = $23;
 }
 $24 = HEAP8[186060] | 0;
 $25 = $24 & 255;
 $26 = $3;
 $27 = $26 & 255;
 $28 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $29 = $28 & 65535;
 $30 = ($29 | 0) / 16 & -1;
 $31 = $30 - 1 | 0;
 $32 = $27 + $31 | 0;
 $33 = ($25 | 0) < ($32 | 0);
 if ($33) {
  $34 = HEAP8[186060] | 0;
  $35 = $34 & 255;
  $36 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $37 = $36 & 65535;
  $38 = ($37 | 0) / 16 & -1;
  $39 = $38 - 1 | 0;
  $40 = $35 - $39 | 0;
  $41 = $40 & 255;
  $3 = $41;
 }
 $42 = $2;
 HEAP8[186063] = $42;
 $43 = $3;
 HEAP8[186064] = $43;
 $44 = HEAP32[44298] | 0;
 $5 = $44;
 $45 = HEAP32[44299] | 0;
 $6 = $45;
 $46 = HEAP8[186059] | 0;
 $47 = $46 & 255;
 $7 = $47;
 $48 = $3;
 $49 = $48 & 255;
 $50 = $7;
 $51 = $50 & 65535;
 $52 = Math_imul($49, $51) | 0;
 $53 = $5;
 $54 = $53 + $52 | 0;
 $5 = $54;
 $55 = $2;
 $56 = $55 & 255;
 $57 = $5;
 $58 = $57 + $56 | 0;
 $5 = $58;
 $4 = 0;
 while (1) {
  $59 = $4;
  $60 = $59 & 255;
  $61 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $62 = $61 & 65535;
  $63 = ($62 | 0) / 16 & -1;
  $64 = $63 - 1 | 0;
  $65 = ($60 | 0) < ($64 | 0);
  if (!$65) {
   break;
  }
  $66 = $6;
  $67 = $5;
  $68 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $69 = $68 & 65535;
  $70 = ($69 | 0) / 16 & -1;
  _memcpy($66 | 0, $67 | 0, $70 | 0) | 0;
  $71 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $72 = $71 & 65535;
  $73 = ($72 | 0) / 16 & -1;
  $74 = $6;
  $75 = $74 + $73 | 0;
  $6 = $75;
  $76 = HEAP8[186059] | 0;
  $77 = $76 & 255;
  $78 = $5;
  $79 = $78 + $77 | 0;
  $5 = $79;
  $80 = $4;
  $81 = $80 & 255;
  $82 = $81 + 1 | 0;
  $83 = $82 & 255;
  $4 = $83;
 }
 STACKTOP = sp;
 return;
}

function _ResLoadToCon($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = $11 << 16 >> 16 != 0;
 if (!$12) {
  $3 = 0;
  $72 = $3;
  STACKTOP = sp;
  return $72 | 0;
 }
 $13 = $5;
 $14 = $13 & 65535;
 $15 = $14 - 1 | 0;
 $16 = $15 & 65535;
 $5 = $16;
 $17 = $4;
 $18 = _GetResStartAddr($17) | 0;
 $9 = $18;
 $19 = $9;
 $20 = ($19 | 0) == 0;
 if ($20) {
  $3 = 0;
  $72 = $3;
  STACKTOP = sp;
  return $72 | 0;
 }
 $21 = $6;
 $22 = $9;
 $23 = HEAP32[44295] | 0;
 $24 = _gam_fload($21, $22, $23) | 0;
 $7 = $24;
 $25 = $7;
 $10 = $25;
 $26 = $10;
 $27 = $26 + 6 | 0;
 $28 = HEAPU8[$27 >> 0] | HEAPU8[$27 + 1 >> 0] << 8;
 $29 = $28 & 65535;
 $30 = $5;
 $31 = $30 & 65535;
 $32 = ($29 | 0) <= ($31 | 0);
 if (!$32) {
  $33 = $10;
  $34 = $33 + 12 | 0;
  $35 = HEAP8[$34 >> 0] | 0;
  $36 = $35 & 255;
  $37 = ($36 | 0) != 0;
  if (!$37) {
   $38 = $10;
   $39 = $38 + 8 | 0;
   $40 = HEAPU8[$39 >> 0] | HEAPU8[$39 + 1 >> 0] << 8 | HEAPU8[$39 + 2 >> 0] << 16 | HEAPU8[$39 + 3 >> 0] << 24;
   $41 = ($40 | 0) != 0;
   do {
    if ($41) {
     $42 = $7;
     $43 = $42 + 14 | 0;
     $7 = $43;
     $44 = $5;
     $45 = $44 & 65535;
     $46 = $10;
     $47 = $46 + 8 | 0;
     $48 = HEAPU8[$47 >> 0] | HEAPU8[$47 + 1 >> 0] << 8 | HEAPU8[$47 + 2 >> 0] << 16 | HEAPU8[$47 + 3 >> 0] << 24;
     $49 = Math_imul($45, $48) | 0;
     $50 = $7;
     $51 = $50 + $49 | 0;
     $7 = $51;
    } else {
     $52 = $10;
     $53 = $52 + 6 | 0;
     $54 = HEAPU8[$53 >> 0] | HEAPU8[$53 + 1 >> 0] << 8;
     $55 = $54 & 65535;
     $56 = ($55 | 0) == 1;
     if ($56) {
      $57 = $7;
      $58 = $57 + 14 | 0;
      $7 = $58;
      break;
     } else {
      $59 = $5;
      $60 = $59 & 65535;
      $61 = $60 << 3;
      $62 = 14 + $61 | 0;
      $63 = $62 & 65535;
      $8 = $63;
      $64 = $7;
      $65 = $8;
      $66 = $65 & 65535;
      $67 = $64 + $66 | 0;
      $68 = HEAPU8[$67 >> 0] | HEAPU8[$67 + 1 >> 0] << 8 | HEAPU8[$67 + 2 >> 0] << 16 | HEAPU8[$67 + 3 >> 0] << 24;
      $69 = $7;
      $70 = $69 + $68 | 0;
      $7 = $70;
      break;
     }
    }
   } while (0);
   $71 = $7;
   $3 = $71;
   $72 = $3;
   STACKTOP = sp;
   return $72 | 0;
  }
 }
 $3 = 0;
 $72 = $3;
 STACKTOP = sp;
 return $72 | 0;
}

function _GetPersonsCount($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $0;
 $7 = 0;
 $8 = HEAP32[44326] | 0;
 $6 = $8;
 $2 = 0;
 while (1) {
  $9 = $2;
  $10 = $9 & 255;
  $11 = ($10 | 0) < 200;
  if (!$11) {
   break;
  }
  $12 = $6;
  $13 = $2;
  $14 = $13 & 255;
  $15 = $12 + ($14 * 14 | 0) | 0;
  $16 = HEAP8[$15 >> 0] | 0;
  $17 = $16 & 255;
  $18 = 255 == ($17 | 0);
  L4 : do {
   if (!$18) {
    $19 = $6;
    $20 = $2;
    $21 = $20 & 255;
    $22 = $19 + ($21 * 14 | 0) | 0;
    $23 = $22 + 3 | 0;
    $24 = HEAP8[$23 >> 0] | 0;
    $25 = $24 & 255;
    $26 = 224276 + ($25 * 37 | 0) | 0;
    $27 = $26 + 1 | 0;
    $28 = HEAPU8[$27 >> 0] | HEAPU8[$27 + 1 >> 0] << 8;
    $29 = $28 & 65535;
    $30 = $1;
    $31 = $30 & 65535;
    $32 = $31 + 1 | 0;
    $33 = ($29 | 0) != ($32 | 0);
    if (!$33) {
     $34 = $6;
     $35 = $2;
     $36 = $35 & 255;
     $37 = $34 + ($36 * 14 | 0) | 0;
     $38 = HEAP8[$37 >> 0] | 0;
     $39 = $38 & 255;
     $40 = 27 == ($39 | 0);
     if (!$40) {
      $68 = $7;
      $69 = $68 + 1 | 0;
      $7 = $69;
      break;
     }
     $41 = $6;
     $42 = $2;
     $43 = $42 & 255;
     $44 = $41 + ($43 * 14 | 0) | 0;
     $45 = $44 + 1 | 0;
     $46 = HEAPU8[$45 >> 0] | HEAPU8[$45 + 1 >> 0] << 8;
     $4 = $46;
     $47 = $4;
     $48 = $47 & 65535;
     $49 = $48 * 10 | 0;
     $50 = $49 & 65535;
     $4 = $50;
     $51 = HEAP32[44325] | 0;
     $52 = $4;
     $53 = $52 & 65535;
     $54 = $51 + $53 | 0;
     $5 = $54;
     $3 = 0;
     while (1) {
      $55 = $3;
      $56 = $55 & 255;
      $57 = ($56 | 0) < 10;
      if (!$57) {
       break L4;
      }
      $58 = $5;
      $59 = $3;
      $60 = $59 & 255;
      $61 = $58 + $60 | 0;
      $62 = HEAP8[$61 >> 0] | 0;
      $63 = $62 << 24 >> 24 != 0;
      if ($63) {
       $64 = $7;
       $65 = $64 + 1 | 0;
       $7 = $65;
      }
      $66 = $3;
      $67 = $66 + 1 << 24 >> 24;
      $3 = $67;
     }
    }
   }
  } while (0);
  $70 = $2;
  $71 = $70 + 1 << 24 >> 24;
  $2 = $71;
 }
 $72 = HEAP32[44323] | 0;
 $5 = $72;
 $73 = $1;
 $74 = $5;
 $75 = _GetKingPersons($73, $74) | 0;
 $76 = $7;
 $77 = $76 + $75 | 0;
 $7 = $77;
 $78 = $7;
 STACKTOP = sp;
 return $78 | 0;
}

function _PlcRPicShowEx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $19 & 65535;
 $21 = $20 + 1 | 0;
 $22 = $21 & 65535;
 $23 = HEAP32[44294] | 0;
 $24 = _ResLoadToCon($18, $22, $23) | 0;
 $12 = $24;
 $25 = $12;
 $26 = (0 | 0) == ($25 | 0);
 if ($26) {
  STACKTOP = sp;
  return;
 }
 $27 = $12;
 $17 = $27;
 $28 = $8;
 $29 = $28 & 65535;
 $30 = $17;
 $31 = $30 + 4 | 0;
 $32 = HEAPU8[$31 >> 0] | HEAPU8[$31 + 1 >> 0] << 8;
 $33 = $32 & 65535;
 $34 = ($29 | 0) > ($33 | 0);
 if ($34) {
  STACKTOP = sp;
  return;
 }
 $35 = $17;
 $36 = HEAPU8[$35 >> 0] | HEAPU8[$35 + 1 >> 0] << 8;
 $13 = $36;
 $37 = $17;
 $38 = $37 + 2 | 0;
 $39 = HEAPU8[$38 >> 0] | HEAPU8[$38 + 1 >> 0] << 8;
 $14 = $39;
 $40 = $17;
 $41 = $40 + 6 | 0;
 $42 = HEAP8[$41 >> 0] | 0;
 $43 = $42 & 255;
 $44 = $43 & 1;
 $45 = $44 & 255;
 $15 = $45;
 $46 = $13;
 $47 = $46 & 65535;
 $48 = $47 >> 3;
 $16 = $48;
 $49 = $13;
 $50 = $49 & 65535;
 $51 = $50 & 7;
 $52 = ($51 | 0) != 0;
 if ($52) {
  $53 = $16;
  $54 = $53 + 1 | 0;
  $16 = $54;
 }
 $55 = $14;
 $56 = $55 & 65535;
 $57 = $16;
 $58 = Math_imul($57, $56) | 0;
 $16 = $58;
 $59 = $15;
 $60 = $59 & 255;
 $61 = $16;
 $62 = $61 << $60;
 $16 = $62;
 $63 = $8;
 $64 = $63 & 65535;
 $65 = $64 - 1 | 0;
 $66 = $16;
 $67 = Math_imul($66, $65) | 0;
 $16 = $67;
 $68 = $16;
 $69 = $12;
 $70 = $69 + $68 | 0;
 $12 = $70;
 $71 = $12;
 $72 = $71 + 7 | 0;
 $12 = $72;
 $73 = $11;
 $74 = $73 << 24 >> 24 != 0;
 $75 = $15;
 $76 = $75 << 24 >> 24 != 0;
 $77 = $9;
 $78 = $10;
 $79 = $13;
 $80 = $14;
 $81 = $12;
 if ($74) {
  if ($76) {
   _GamMPicShowS($77, $78, $79, $80, $81);
   STACKTOP = sp;
   return;
  } else {
   _GamPicShowS($77, $78, $79, $80, $81);
   STACKTOP = sp;
   return;
  }
 } else {
  $82 = HEAP32[44297] | 0;
  if ($76) {
   _GamMPicShowV($77, $78, $79, $80, $81, $82);
   STACKTOP = sp;
   return;
  } else {
   _GamPicShowV($77, $78, $79, $80, $81, $82);
   STACKTOP = sp;
   return;
  }
 }
}

function _AddItem($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $8;
 $12 = $11 + 5 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $14 = $13 & 255;
 $15 = $7;
 $16 = $15 & 255;
 $17 = $14 + $16 | 0;
 $18 = $17 - 1 | 0;
 $19 = $8;
 $20 = $19 + 3 | 0;
 $21 = HEAP8[$20 >> 0] | 0;
 $22 = $21 & 255;
 $23 = ($18 | 0) > ($22 | 0);
 if ($23) {
  $5 = 0;
  $88 = $5;
  STACKTOP = sp;
  return $88 | 0;
 }
 $24 = $8;
 $25 = $24 + 6 | 0;
 $26 = HEAP8[$25 >> 0] | 0;
 $27 = $26 & 255;
 $28 = $6;
 $29 = $28 & 255;
 $30 = $27 + $29 | 0;
 $31 = $30 - 1 | 0;
 $32 = $8;
 $33 = $32 + 2 | 0;
 $34 = HEAP8[$33 >> 0] | 0;
 $35 = $34 & 255;
 $36 = ($31 | 0) > ($35 | 0);
 if ($36) {
  $5 = 0;
  $88 = $5;
  STACKTOP = sp;
  return $88 | 0;
 }
 $37 = $8;
 $38 = $37 + 6 | 0;
 $39 = HEAP8[$38 >> 0] | 0;
 $40 = $39 & 255;
 $41 = $40 + 1 | 0;
 $42 = $41 & 255;
 $43 = $8;
 $44 = $43 + 4 | 0;
 HEAP8[$44 >> 0] = $42;
 $45 = $8;
 $46 = $45 + 4 | 0;
 $47 = HEAP8[$46 >> 0] | 0;
 $48 = $47 & 255;
 $49 = $6;
 $50 = $49 & 255;
 $51 = $48 + $50 | 0;
 $52 = $51 - 1 | 0;
 $53 = $52 & 255;
 $54 = $8;
 $55 = $54 + 6 | 0;
 HEAP8[$55 >> 0] = $53;
 $56 = $8;
 $57 = $56 + 5 | 0;
 $58 = HEAP8[$57 >> 0] | 0;
 $59 = $58 & 255;
 $60 = $7;
 $61 = $60 & 255;
 $62 = $59 + $61 | 0;
 $63 = $62 - 1 | 0;
 $64 = $8;
 $65 = $64 + 7 | 0;
 $66 = HEAP8[$65 >> 0] | 0;
 $67 = $66 & 255;
 $68 = ($63 | 0) > ($67 | 0);
 if ($68) {
  $69 = $8;
  $70 = $69 + 5 | 0;
  $71 = HEAP8[$70 >> 0] | 0;
  $72 = $71 & 255;
  $73 = $7;
  $74 = $73 & 255;
  $75 = $72 + $74 | 0;
  $76 = $75 - 1 | 0;
  $77 = $76 & 255;
  $78 = $8;
  $79 = $78 + 7 | 0;
  HEAP8[$79 >> 0] = $77;
 }
 $80 = $8;
 $81 = $80 + 4 | 0;
 $82 = HEAP8[$81 >> 0] | 0;
 $83 = $9;
 HEAP8[$83 >> 0] = $82;
 $84 = $8;
 $85 = $84 + 5 | 0;
 $86 = HEAP8[$85 >> 0] | 0;
 $87 = $10;
 HEAP8[$87 >> 0] = $86;
 $5 = 1;
 $88 = $5;
 STACKTOP = sp;
 return $88 | 0;
}

function _GetEnemyPersons($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $4 = 0;
 while (1) {
  $9 = $4;
  $10 = HEAP8[5256 >> 0] | 0;
  $11 = $10 & 255;
  $12 = $9 >>> 0 < $11 >>> 0;
  if (!$12) {
   break;
  }
  $13 = $4;
  $14 = 224276 + ($13 * 37 | 0) | 0;
  $15 = $14 + 1 | 0;
  $16 = HEAPU8[$15 >> 0] | HEAPU8[$15 + 1 >> 0] << 8;
  $7 = $16;
  $17 = $7;
  $18 = $17 & 65535;
  $19 = $2;
  $20 = $19 & 65535;
  $21 = $20 + 1 | 0;
  $22 = ($18 | 0) != ($21 | 0);
  L4 : do {
   if ($22) {
    $23 = $7;
    $24 = $23 & 65535;
    $25 = ($24 | 0) != 0;
    if ($25) {
     $5 = 0;
     while (1) {
      $26 = $5;
      $27 = $4;
      $28 = 224276 + ($27 * 37 | 0) | 0;
      $29 = $28 + 31 | 0;
      $30 = HEAPU8[$29 >> 0] | HEAPU8[$29 + 1 >> 0] << 8;
      $31 = $30 & 65535;
      $32 = $26 >>> 0 < $31 >>> 0;
      if (!$32) {
       break L4;
      }
      $33 = $4;
      $34 = 224276 + ($33 * 37 | 0) | 0;
      $35 = $34 + 29 | 0;
      $36 = HEAPU8[$35 >> 0] | HEAPU8[$35 + 1 >> 0] << 8;
      $37 = $36 & 65535;
      $38 = $5;
      $39 = $37 + $38 | 0;
      $40 = 233748 + ($39 << 1) | 0;
      $41 = HEAPU8[$40 >> 0] | HEAPU8[$40 + 1 >> 0] << 8;
      $8 = $41;
      $42 = $8;
      $43 = $42 & 65535;
      $44 = 186276 + ($43 * 19 | 0) | 0;
      $45 = $44 + 2 | 0;
      $46 = HEAPU8[$45 >> 0] | HEAPU8[$45 + 1 >> 0] << 8;
      $47 = $46 & 65535;
      $48 = $7;
      $49 = $48 & 65535;
      $50 = ($47 | 0) == ($49 | 0);
      if ($50) {
       $51 = $8;
       $52 = $51 & 65535;
       $53 = $52 + 1 | 0;
       $54 = $7;
       $55 = $54 & 65535;
       $56 = ($53 | 0) != ($55 | 0);
       if ($56) {
        $57 = $8;
        $58 = $3;
        $59 = $6;
        $60 = $58 + ($59 << 1) | 0;
        HEAP8[$60 >> 0] = $57 & 255;
        HEAP8[$60 + 1 >> 0] = $57 >> 8;
        $61 = $6;
        $62 = $61 + 1 | 0;
        $6 = $62;
       }
      }
      $63 = $5;
      $64 = $63 + 1 | 0;
      $5 = $64;
     }
    }
   }
  } while (0);
  $65 = $4;
  $66 = $65 + 1 | 0;
  $4 = $66;
 }
 $67 = $6;
 $68 = $67 & 255;
 STACKTOP = sp;
 return $68 | 0;
}

function _FgtSetSamPot($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $10 = $1;
 $11 = $10 & 255;
 $12 = ($11 | 0) < 10;
 if ($12) {
  $3 = 0;
 } else {
  $3 = 10;
 }
 $13 = HEAP8[186065] | 0;
 $14 = $13 & 255;
 $15 = HEAP8[186067] | 0;
 $16 = $15 & 255;
 $17 = $14 - $16 | 0;
 $18 = $17 & 255;
 $4 = $18;
 $19 = HEAP8[186066] | 0;
 $20 = $19 & 255;
 $21 = HEAP8[186068] | 0;
 $22 = $21 & 255;
 $23 = $20 - $22 | 0;
 $24 = $23 & 255;
 $5 = $24;
 $25 = $3;
 $2 = $25;
 while (1) {
  $26 = $2;
  $27 = $26 & 255;
  $28 = $3;
  $29 = $28 & 255;
  $30 = $29 + 10 | 0;
  $31 = ($27 | 0) < ($30 | 0);
  if (!$31) {
   break;
  }
  $32 = $2;
  $33 = $32 & 255;
  $34 = 186129 + ($33 * 7 | 0) | 0;
  $9 = $34;
  $35 = $9;
  $36 = $35 + 6 | 0;
  $37 = HEAP8[$36 >> 0] | 0;
  $38 = $37 & 255;
  $39 = 8 == ($38 | 0);
  if (!$39) {
   $40 = $1;
   $41 = $40 & 255;
   $42 = $2;
   $43 = $42 & 255;
   $44 = ($41 | 0) == ($43 | 0);
   if (!$44) {
    $45 = $9;
    $46 = HEAP8[$45 >> 0] | 0;
    $47 = $46 & 255;
    $48 = $4;
    $49 = $48 & 255;
    $50 = $47 - $49 | 0;
    $51 = $50 & 255;
    $6 = $51;
    $52 = $9;
    $53 = $52 + 1 | 0;
    $54 = HEAP8[$53 >> 0] | 0;
    $55 = $54 & 255;
    $56 = $5;
    $57 = $56 & 255;
    $58 = $55 - $57 | 0;
    $59 = $58 & 255;
    $7 = $59;
    $60 = $6;
    $61 = $60 & 255;
    $62 = ($61 | 0) > 15;
    if (!$62) {
     $63 = $7;
     $64 = $63 & 255;
     $65 = ($64 | 0) > 15;
     if (!$65) {
      $66 = $7;
      $67 = $66 & 255;
      $68 = $67 * 15 | 0;
      $69 = $6;
      $70 = $69 & 255;
      $71 = $68 + $70 | 0;
      $72 = $71 & 255;
      $8 = $72;
      $73 = $8;
      $74 = $73 & 255;
      $75 = ($74 | 0) < 225;
      if ($75) {
       $76 = HEAP32[44300] | 0;
       $77 = $8;
       $78 = $77 & 255;
       $79 = $76 + $78 | 0;
       HEAP8[$79 >> 0] = -2;
      }
     }
    }
   }
  }
  $80 = $2;
  $81 = $80 & 255;
  $82 = $81 + 1 | 0;
  $83 = $82 & 255;
  $2 = $83;
 }
 STACKTOP = sp;
 return;
}

function _AddPerson($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $6 & 255;
 $8 = HEAP8[5256 >> 0] | 0;
 $9 = $8 & 255;
 $10 = ($7 | 0) >= ($9 | 0);
 if ($10) {
  $2 = 0;
  $65 = $2;
  STACKTOP = sp;
  return $65 | 0;
 }
 $11 = $4;
 $12 = $11 & 65535;
 $13 = _GamGetPersonCount() | 0;
 $14 = $12 >>> 0 >= $13 >>> 0;
 if ($14) {
  $2 = 0;
  $65 = $2;
  STACKTOP = sp;
  return $65 | 0;
 }
 $15 = _GamGetPersonCount() | 0;
 $16 = $15 - 1 | 0;
 $5 = $16;
 while (1) {
  $17 = $5;
  $18 = $3;
  $19 = $18 & 255;
  $20 = 224276 + ($19 * 37 | 0) | 0;
  $21 = $20 + 29 | 0;
  $22 = HEAPU8[$21 >> 0] | HEAPU8[$21 + 1 >> 0] << 8;
  $23 = $22 & 65535;
  $24 = $17 >>> 0 > $23 >>> 0;
  if (!$24) {
   break;
  }
  $25 = $5;
  $26 = $25 - 1 | 0;
  $27 = 233748 + ($26 << 1) | 0;
  $28 = HEAPU8[$27 >> 0] | HEAPU8[$27 + 1 >> 0] << 8;
  $29 = $5;
  $30 = 233748 + ($29 << 1) | 0;
  HEAP8[$30 >> 0] = $28 & 255;
  HEAP8[$30 + 1 >> 0] = $28 >> 8;
  $31 = $5;
  $32 = $31 + -1 | 0;
  $5 = $32;
 }
 $33 = $3;
 $34 = $33 & 255;
 $35 = $34 + 1 | 0;
 $5 = $35;
 while (1) {
  $36 = $5;
  $37 = HEAP8[5256 >> 0] | 0;
  $38 = $37 & 255;
  $39 = $36 >>> 0 < $38 >>> 0;
  if (!$39) {
   break;
  }
  $40 = $5;
  $41 = 224276 + ($40 * 37 | 0) | 0;
  $42 = $41 + 29 | 0;
  $43 = HEAPU8[$42 >> 0] | HEAPU8[$42 + 1 >> 0] << 8;
  $44 = $43 & 65535;
  $45 = $44 + 1 | 0;
  $46 = $45 & 65535;
  HEAP8[$42 >> 0] = $46 & 255;
  HEAP8[$42 + 1 >> 0] = $46 >> 8;
  $47 = $5;
  $48 = $47 + 1 | 0;
  $5 = $48;
 }
 $49 = $4;
 $50 = $3;
 $51 = $50 & 255;
 $52 = 224276 + ($51 * 37 | 0) | 0;
 $53 = $52 + 29 | 0;
 $54 = HEAPU8[$53 >> 0] | HEAPU8[$53 + 1 >> 0] << 8;
 $55 = $54 & 65535;
 $56 = 233748 + ($55 << 1) | 0;
 HEAP8[$56 >> 0] = $49 & 255;
 HEAP8[$56 + 1 >> 0] = $49 >> 8;
 $57 = $3;
 $58 = $57 & 255;
 $59 = 224276 + ($58 * 37 | 0) | 0;
 $60 = $59 + 31 | 0;
 $61 = HEAPU8[$60 >> 0] | HEAPU8[$60 + 1 >> 0] << 8;
 $62 = $61 & 65535;
 $63 = $62 + 1 | 0;
 $64 = $63 & 65535;
 HEAP8[$60 >> 0] = $64 & 255;
 HEAP8[$60 + 1 >> 0] = $64 >> 8;
 $2 = 1;
 $65 = $2;
 STACKTOP = sp;
 return $65 | 0;
}

function _ltoa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $6 = sp + 29 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 dest = $6;
 src = 5474;
 stop = dest + 37 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $8 = 0;
 $12 = $5;
 $13 = ($12 | 0) == 10;
 $14 = $3;
 $15 = ($14 | 0) < 0;
 $or$cond = $13 & $15;
 $16 = $3;
 if ($or$cond) {
  $17 = 0 - $16 | 0;
  $7 = $17;
  $18 = $4;
  $19 = $8;
  $20 = $19 + 1 | 0;
  $8 = $20;
  $21 = $18 + $19 | 0;
  HEAP8[$21 >> 0] = 45;
 } else {
  $7 = $16;
 }
 while (1) {
  $22 = $7;
  $23 = $5;
  $24 = ($22 >>> 0) % ($23 >>> 0) & -1;
  $25 = $6 + $24 | 0;
  $26 = HEAP8[$25 >> 0] | 0;
  $27 = $4;
  $28 = $8;
  $29 = $28 + 1 | 0;
  $8 = $29;
  $30 = $27 + $28 | 0;
  HEAP8[$30 >> 0] = $26;
  $31 = $5;
  $32 = $7;
  $33 = ($32 >>> 0) / ($31 >>> 0) & -1;
  $7 = $33;
  $34 = $7;
  $35 = ($34 | 0) != 0;
  if (!$35) {
   break;
  }
 }
 $36 = $4;
 $37 = $8;
 $38 = $36 + $37 | 0;
 HEAP8[$38 >> 0] = 0;
 $39 = $4;
 $40 = HEAP8[$39 >> 0] | 0;
 $41 = $40 << 24 >> 24;
 $42 = ($41 | 0) == 45;
 if ($42) {
  $10 = 1;
 } else {
  $10 = 0;
 }
 $43 = $10;
 $9 = $43;
 while (1) {
  $44 = $9;
  $45 = $8;
  $46 = $45 - 1 | 0;
  $47 = ($46 | 0) / 2 & -1;
  $48 = ($44 | 0) <= ($47 | 0);
  $49 = $4;
  if (!$48) {
   break;
  }
  $50 = $9;
  $51 = $49 + $50 | 0;
  $52 = HEAP8[$51 >> 0] | 0;
  $11 = $52;
  $53 = $4;
  $54 = $8;
  $55 = $54 - 1 | 0;
  $56 = $10;
  $57 = $55 + $56 | 0;
  $58 = $9;
  $59 = $57 - $58 | 0;
  $60 = $53 + $59 | 0;
  $61 = HEAP8[$60 >> 0] | 0;
  $62 = $4;
  $63 = $9;
  $64 = $62 + $63 | 0;
  HEAP8[$64 >> 0] = $61;
  $65 = $11;
  $66 = $4;
  $67 = $8;
  $68 = $67 - 1 | 0;
  $69 = $10;
  $70 = $68 + $69 | 0;
  $71 = $9;
  $72 = $70 - $71 | 0;
  $73 = $66 + $72 | 0;
  HEAP8[$73 >> 0] = $65;
  $74 = $9;
  $75 = $74 + 1 | 0;
  $9 = $75;
 }
 STACKTOP = sp;
 return $49 | 0;
}

function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5 | 0) == 0;
 L1 : do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7 | 0) == 0;
   if ($8) {
    $$026$lcssa = $1;
    $$027$lcssa = $0;
   } else {
    $$02642 = $1;
    $$02741 = $0;
    while (1) {
     $9 = HEAP8[$$02642 >> 0] | 0;
     HEAP8[$$02741 >> 0] = $9;
     $10 = $9 << 24 >> 24 == 0;
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = $$02642 + 1 | 0;
     $12 = $$02741 + 1 | 0;
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14 | 0) == 0;
     if ($15) {
      $$026$lcssa = $11;
      $$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;
      $$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa >> 2] | 0;
   $17 = $16 + -16843009 | 0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20 | 0) == 0;
   if ($21) {
    $$02536 = $$027$lcssa;
    $$037 = $$026$lcssa;
    $24 = $16;
    while (1) {
     $22 = $$037 + 4 | 0;
     $23 = $$02536 + 4 | 0;
     HEAP32[$$02536 >> 2] = $24;
     $25 = HEAP32[$22 >> 2] | 0;
     $26 = $25 + -16843009 | 0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29 | 0) == 0;
     if ($30) {
      $$02536 = $23;
      $$037 = $22;
      $24 = $25;
     } else {
      $$0$lcssa = $22;
      $$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;
    $$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;
   $$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;
   $$128$ph = $0;
   label = 8;
  }
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0;
  HEAP8[$$128$ph >> 0] = $31;
  $32 = $31 << 24 >> 24 == 0;
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;
   $$135 = $$1$ph;
   while (1) {
    $33 = $$135 + 1 | 0;
    $34 = $$12834 + 1 | 0;
    $35 = HEAP8[$33 >> 0] | 0;
    HEAP8[$34 >> 0] = $35;
    $36 = $35 << 24 >> 24 == 0;
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;
     $$135 = $33;
    }
   }
  }
 }
 return $$029 | 0;
}

function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = ($0 | 0) == (0 | 0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = $1 >>> 0 < 128;
   if ($4) {
    $5 = $1 & 255;
    HEAP8[$0 >> 0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ___pthread_self_909() | 0;
   $7 = $6 + 188 | 0;
   $8 = HEAP32[$7 >> 2] | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $not$ = ($9 | 0) == (0 | 0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10 | 0) == 57216;
    if ($11) {
     $13 = $1 & 255;
     HEAP8[$0 >> 0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = ___errno_location() | 0;
     HEAP32[$12 >> 2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = $1 >>> 0 < 2048;
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16 & 255;
    $18 = $0 + 1 | 0;
    HEAP8[$0 >> 0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20 & 255;
    HEAP8[$18 >> 0] = $21;
    $$0 = 2;
    break;
   }
   $22 = $1 >>> 0 < 55296;
   $23 = $1 & -8192;
   $24 = ($23 | 0) == 57344;
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26 & 255;
    $28 = $0 + 1 | 0;
    HEAP8[$0 >> 0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31 & 255;
    $33 = $0 + 2 | 0;
    HEAP8[$28 >> 0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35 & 255;
    HEAP8[$33 >> 0] = $36;
    $$0 = 3;
    break;
   }
   $37 = $1 + -65536 | 0;
   $38 = $37 >>> 0 < 1048576;
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40 & 255;
    $42 = $0 + 1 | 0;
    HEAP8[$0 >> 0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45 & 255;
    $47 = $0 + 2 | 0;
    HEAP8[$42 >> 0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50 & 255;
    $52 = $0 + 3 | 0;
    HEAP8[$47 >> 0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54 & 255;
    HEAP8[$52 >> 0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = ___errno_location() | 0;
    HEAP32[$56 >> 2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _loadPerson($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 HEAP8[$4 >> 0] = HEAP8[$5 >> 0] | 0;
 HEAP8[$4 + 1 >> 0] = HEAP8[$5 + 1 >> 0] | 0;
 $6 = $3;
 $7 = $6 + 2 | 0;
 $3 = $7;
 $8 = $2;
 $9 = $8 + 2 | 0;
 $10 = $3;
 HEAP8[$9 >> 0] = HEAP8[$10 >> 0] | 0;
 HEAP8[$9 + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
 $11 = $3;
 $12 = $11 + 2 | 0;
 $3 = $12;
 $13 = $2;
 $14 = $13 + 4 | 0;
 $15 = $3;
 HEAP8[$14 >> 0] = HEAP8[$15 >> 0] | 0;
 $16 = $3;
 $17 = $16 + 1 | 0;
 $3 = $17;
 $18 = $2;
 $19 = $18 + 5 | 0;
 $20 = $3;
 HEAP8[$19 >> 0] = HEAP8[$20 >> 0] | 0;
 $21 = $3;
 $22 = $21 + 1 | 0;
 $3 = $22;
 $23 = $2;
 $24 = $23 + 6 | 0;
 $25 = $3;
 HEAP8[$24 >> 0] = HEAP8[$25 >> 0] | 0;
 $26 = $3;
 $27 = $26 + 1 | 0;
 $3 = $27;
 $28 = $2;
 $29 = $28 + 7 | 0;
 $30 = $3;
 HEAP8[$29 >> 0] = HEAP8[$30 >> 0] | 0;
 $31 = $3;
 $32 = $31 + 1 | 0;
 $3 = $32;
 $33 = $2;
 $34 = $33 + 8 | 0;
 $35 = $3;
 HEAP8[$34 >> 0] = HEAP8[$35 >> 0] | 0;
 $36 = $3;
 $37 = $36 + 1 | 0;
 $3 = $37;
 $38 = $2;
 $39 = $38 + 9 | 0;
 $40 = $3;
 HEAP8[$39 >> 0] = HEAP8[$40 >> 0] | 0;
 $41 = $3;
 $42 = $41 + 1 | 0;
 $3 = $42;
 $43 = $2;
 $44 = $43 + 10 | 0;
 $45 = $3;
 HEAP8[$44 >> 0] = HEAP8[$45 >> 0] | 0;
 $46 = $3;
 $47 = $46 + 1 | 0;
 $3 = $47;
 $48 = $2;
 $49 = $48 + 11 | 0;
 $50 = $3;
 HEAP8[$49 >> 0] = HEAP8[$50 >> 0] | 0;
 $51 = $3;
 $52 = $51 + 1 | 0;
 $3 = $52;
 $53 = $2;
 $54 = $53 + 12 | 0;
 $55 = $3;
 HEAP8[$54 >> 0] = HEAP8[$55 >> 0] | 0;
 HEAP8[$54 + 1 >> 0] = HEAP8[$55 + 1 >> 0] | 0;
 $56 = $3;
 $57 = $56 + 2 | 0;
 $3 = $57;
 $58 = $2;
 $59 = $58 + 14 | 0;
 $60 = $3;
 HEAP8[$59 >> 0] = HEAP8[$60 >> 0] | 0;
 HEAP8[$59 + 1 >> 0] = HEAP8[$60 + 1 >> 0] | 0;
 HEAP8[$59 + 2 >> 0] = HEAP8[$60 + 2 >> 0] | 0;
 HEAP8[$59 + 3 >> 0] = HEAP8[$60 + 3 >> 0] | 0;
 $61 = $3;
 $62 = $61 + 4 | 0;
 $3 = $62;
 $63 = $2;
 $64 = $63 + 18 | 0;
 $65 = $3;
 HEAP8[$64 >> 0] = HEAP8[$65 >> 0] | 0;
 $66 = $3;
 $67 = $66 + 1 | 0;
 $3 = $67;
 $68 = $3;
 STACKTOP = sp;
 return $68 | 0;
}

function _AttackCityRoad($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $17 = HEAP32[44294] | 0;
 $18 = _ResLoadToCon(59, 1, $17) | 0;
 $13 = $18;
 $19 = $7;
 $20 = $19 & 255;
 $16 = $20;
 $21 = $16;
 $22 = $21 & 65535;
 $23 = $22 << 4;
 $24 = $23 & 65535;
 $16 = $24;
 $25 = $16;
 $26 = $25 & 65535;
 $27 = $13;
 $28 = $27 + $26 | 0;
 $13 = $28;
 $14 = 0;
 while (1) {
  $29 = $14;
  $30 = $29 & 255;
  $31 = ($30 | 0) < 8;
  if (!$31) {
   break;
  }
  $32 = $13;
  $33 = $14;
  $34 = $33 & 255;
  $35 = $32 + $34 | 0;
  $36 = HEAP8[$35 >> 0] | 0;
  $37 = $36 & 255;
  $38 = $10;
  $39 = $38 & 255;
  $40 = $39 + 1 | 0;
  $41 = ($37 | 0) == ($40 | 0);
  if ($41) {
   break;
  }
  $42 = $14;
  $43 = $42 + 1 << 24 >> 24;
  $14 = $43;
 }
 $44 = $14;
 $45 = $44 & 255;
 $46 = ($45 | 0) >= 8;
 if ($46) {
  $6 = -1;
  $86 = $6;
  STACKTOP = sp;
  return $86 | 0;
 }
 $47 = $12;
 $48 = $47 & 255;
 $49 = $9;
 $50 = $49 & 255;
 $51 = ($48 | 0) > ($50 | 0);
 if ($51) {
  $52 = $12;
  $53 = $52 & 255;
  $54 = $9;
  $55 = $54 & 255;
  $56 = $53 - $55 | 0;
  $57 = $56 & 255;
  $15 = $57;
 } else {
  $58 = $9;
  $59 = $58 & 255;
  $60 = $12;
  $61 = $60 & 255;
  $62 = $59 - $61 | 0;
  $63 = $62 & 255;
  $15 = $63;
 }
 $64 = $11;
 $65 = $64 & 255;
 $66 = $8;
 $67 = $66 & 255;
 $68 = ($65 | 0) > ($67 | 0);
 $69 = $15;
 $70 = $69 & 255;
 if ($68) {
  $71 = $11;
  $72 = $71 & 255;
  $73 = $70 + $72 | 0;
  $74 = $8;
  $75 = $74 & 255;
  $76 = $73 - $75 | 0;
  $77 = $76 & 255;
  $15 = $77;
 } else {
  $78 = $8;
  $79 = $78 & 255;
  $80 = $70 + $79 | 0;
  $81 = $11;
  $82 = $81 & 255;
  $83 = $80 - $82 | 0;
  $84 = $83 & 255;
  $15 = $84;
 }
 $85 = $15;
 $6 = $85;
 $86 = $6;
 STACKTOP = sp;
 return $86 | 0;
}

function _LoadPeriod($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $6 = $1;
 $7 = $6 & 255;
 $8 = HEAP32[44294] | 0;
 $9 = _ResLoadToCon(57, $7, $8) | 0;
 $3 = $9;
 $10 = $3;
 $11 = _loadCities(224276, $10) | 0;
 $3 = $11;
 $12 = $3;
 $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
 HEAP8[186272 >> 0] = $13 & 255;
 HEAP8[186272 + 1 >> 0] = $13 >> 8;
 $14 = $1;
 $15 = $14 & 255;
 $16 = _ResGetItemLen(61, $15) | 0;
 $4 = $16;
 $17 = $4;
 $18 = ($17 >>> 0) / 19 & -1;
 $19 = $18 & 65535;
 $5 = $19;
 $20 = $5;
 $21 = $20 & 65535;
 _GamSetPersonCount($21);
 $22 = $1;
 $23 = $22 & 255;
 $24 = HEAP32[44294] | 0;
 $25 = _ResLoadToCon(61, $23, $24) | 0;
 $3 = $25;
 $26 = $3;
 $27 = $4;
 $28 = $27 & 65535;
 _loadPersons(186276, $26, $28) | 0;
 $29 = $1;
 $30 = $29 & 255;
 $31 = $5;
 $32 = $31 & 65535;
 $33 = $32 << 1;
 _ResItemGetN(65, $30, 233748, $33) | 0;
 $34 = $1;
 $35 = $34 & 255;
 _ResItemGetN(68, $35, 237748, 2e3) | 0;
 $36 = HEAP32[44324] | 0;
 dest = $36;
 stop = dest + 30 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $37 = HEAP32[44326] | 0;
 _memset($37 | 0, -1, 2800) | 0;
 $38 = $1;
 HEAP8[186275] = $38;
 $2 = 0;
 while (1) {
  $39 = $2;
  $40 = HEAP8[5256 >> 0] | 0;
  $41 = $40 & 255;
  $42 = $39 >>> 0 < $41 >>> 0;
  if (!$42) {
   break;
  }
  $43 = $2;
  $44 = 224276 + ($43 * 37 | 0) | 0;
  HEAP8[$44 >> 0] = 0;
  $45 = $2;
  $46 = $45 + 1 | 0;
  $2 = $46;
 }
 $2 = 0;
 while (1) {
  $47 = $2;
  $48 = _GamGetPersonCount() | 0;
  $49 = $47 >>> 0 < $48 >>> 0;
  if (!$49) {
   break;
  }
  $50 = $2;
  $51 = 186276 + ($50 * 19 | 0) | 0;
  $52 = $51 + 10 | 0;
  HEAP8[$52 >> 0] = 100;
  $53 = $2;
  $54 = 186276 + ($53 * 19 | 0) | 0;
  $55 = $54 + 12 | 0;
  HEAP8[$55 >> 0] = 100 & 255;
  HEAP8[$55 + 1 >> 0] = 100 >> 8;
  $56 = $2;
  $57 = 186276 + ($56 * 19 | 0) | 0;
  HEAP8[$57 >> 0] = 0 & 255;
  HEAP8[$57 + 1 >> 0] = 0 >> 8;
  $58 = $2;
  $59 = $58 + 1 | 0;
  $2 = $59;
 }
 HEAP8[186274] = 1;
 STACKTOP = sp;
 return;
}

function _bits_to_bytes($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $7;
 $17 = $16 & 65535;
 $18 = $17 + 7 | 0;
 $19 = ($18 | 0) / 8 & -1;
 $20 = $19 & 65535;
 $10 = $20;
 $11 = 0;
 while (1) {
  $21 = $11;
  $22 = $21 & 65535;
  $23 = $8;
  $24 = $23 & 65535;
  $25 = ($22 | 0) < ($24 | 0);
  if (!$25) {
   break;
  }
  $12 = 0;
  while (1) {
   $26 = $12;
   $27 = $26 & 65535;
   $28 = $7;
   $29 = $28 & 65535;
   $30 = ($27 | 0) < ($29 | 0);
   if (!$30) {
    break;
   }
   $31 = $12;
   $32 = $31 & 65535;
   $33 = ($32 | 0) / 8 & -1;
   $34 = $33 & 255;
   $13 = $34;
   $35 = $12;
   $36 = $35 & 65535;
   $37 = ($36 | 0) % 8 & -1;
   $38 = $37 & 255;
   $14 = $38;
   $39 = $6;
   $40 = $10;
   $41 = $40 & 65535;
   $42 = $11;
   $43 = $42 & 65535;
   $44 = Math_imul($41, $43) | 0;
   $45 = $13;
   $46 = $45 & 255;
   $47 = $44 + $46 | 0;
   $48 = $39 + $47 | 0;
   $49 = HEAP8[$48 >> 0] | 0;
   $50 = $49 & 255;
   $51 = $14;
   $52 = $51 & 255;
   $53 = 128 >> $52;
   $54 = $50 & $53;
   $55 = $54 & 255;
   $15 = $55;
   $56 = $15;
   $57 = $56 & 255;
   $58 = ($57 | 0) == 0;
   $59 = $9;
   $60 = $59 << 24 >> 24 != 0;
   $or$cond = $58 & $60;
   if (!$or$cond) {
    $61 = $15;
    $62 = $61 << 24 >> 24 != 0;
    $63 = $62 ^ 1;
    $64 = $63 ^ 1;
    $65 = $64 & 1;
    $66 = $65 & 255;
    $67 = $5;
    $68 = $7;
    $69 = $68 & 65535;
    $70 = $11;
    $71 = $70 & 65535;
    $72 = Math_imul($69, $71) | 0;
    $73 = $12;
    $74 = $73 & 65535;
    $75 = $72 + $74 | 0;
    $76 = $67 + $75 | 0;
    HEAP8[$76 >> 0] = $66;
   }
   $77 = $12;
   $78 = $77 + 1 << 16 >> 16;
   $12 = $78;
  }
  $79 = $11;
  $80 = $79 + 1 << 16 >> 16;
  $11 = $80;
 }
 STACKTOP = sp;
 return 0;
}

function _ObjectDef_addFieldF($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $12 = sp + 8 | 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $15 = $7;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $16 << 24 >> 24;
 $18 = ($17 | 0) == 38;
 if ($18) {
  $19 = $7;
  $20 = $19 + 1 | 0;
  $7 = $20;
 }
 $21 = $7;
 HEAP32[$12 >> 2] = $21;
 $22 = $9;
 $23 = $22;
 $24 = $12 + 4 | 0;
 $25 = $24 + 4 | 0;
 HEAP32[$25 >> 2] = $23;
 $26 = $8;
 switch ($26 | 0) {
 case 0:
  {
   $27 = $12 + 4 | 0;
   HEAP32[$27 >> 2] = 16;
   break;
  }
 case 1:
  {
   $28 = $12 + 4 | 0;
   HEAP32[$28 >> 2] = 28;
   break;
  }
 case 2:
  {
   $29 = $12 + 4 | 0;
   HEAP32[$29 >> 2] = 40;
   break;
  }
 case 3:
  {
   $30 = $12 + 4 | 0;
   HEAP32[$30 >> 2] = 52;
   break;
  }
 case 7:
 case 5:
  {
   $31 = _calloc(1, 12) | 0;
   $13 = $31;
   $32 = $10;
   $33 = $13;
   $34 = $33 + 8 | 0;
   HEAP32[$34 >> 2] = $32;
   $35 = $13;
   $36 = $35 + 8 | 0;
   $37 = HEAP32[$36 >> 2] | 0;
   $38 = $37 + 4 | 0;
   $39 = HEAP32[$38 >> 2] | 0;
   $40 = $11;
   $41 = Math_imul($39, $40) | 0;
   $42 = $13;
   $43 = $42 + 4 | 0;
   HEAP32[$43 >> 2] = $41;
   $44 = $13;
   $45 = $12 + 4 | 0;
   HEAP32[$45 >> 2] = $44;
   $46 = $8;
   $47 = $12 + 4 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   HEAP32[$48 >> 2] = $46;
   break;
  }
 case 4:
  {
   $49 = _calloc(1, 12) | 0;
   $14 = $49;
   $50 = $10;
   $51 = $14;
   $52 = $51 + 8 | 0;
   HEAP32[$52 >> 2] = $50;
   $53 = $14;
   $54 = $53 + 8 | 0;
   $55 = HEAP32[$54 >> 2] | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   $58 = $14;
   $59 = $58 + 4 | 0;
   HEAP32[$59 >> 2] = $57;
   $60 = $14;
   $61 = $12 + 4 | 0;
   HEAP32[$61 >> 2] = $60;
   $62 = $8;
   $63 = $12 + 4 | 0;
   $64 = HEAP32[$63 >> 2] | 0;
   HEAP32[$64 >> 2] = $62;
   break;
  }
 default:
  {}
 }
 $65 = $6;
 _ObjectDef_addField($65, $12);
 STACKTOP = sp;
 return;
}

function _GetRoundEnemyCity($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $10 = HEAP32[44294] | 0;
 $11 = _ResLoadToCon(59, 1, $10) | 0;
 $4 = $11;
 $12 = $2;
 $13 = $12 & 255;
 $9 = $13;
 $14 = $9;
 $15 = $14 & 65535;
 $16 = $15 << 4;
 $17 = $16 & 65535;
 $9 = $17;
 $18 = $9;
 $19 = $18 & 65535;
 $20 = $4;
 $21 = $20 + $19 | 0;
 $4 = $21;
 $6 = 0;
 $22 = $2;
 $23 = $22 & 255;
 $24 = 224276 + ($23 * 37 | 0) | 0;
 $25 = $24 + 1 | 0;
 $26 = HEAPU8[$25 >> 0] | HEAPU8[$25 + 1 >> 0] << 8;
 $8 = $26;
 $5 = 0;
 while (1) {
  $27 = $5;
  $28 = $27 & 255;
  $29 = ($28 | 0) < 8;
  if (!$29) {
   break;
  }
  $30 = $4;
  $31 = $5;
  $32 = $31 & 255;
  $33 = $30 + $32 | 0;
  $34 = HEAP8[$33 >> 0] | 0;
  $35 = $34 << 24 >> 24 != 0;
  if ($35) {
   $36 = $4;
   $37 = $5;
   $38 = $37 & 255;
   $39 = $36 + $38 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   $41 = $40 & 255;
   $42 = $41 - 1 | 0;
   $43 = 224276 + ($42 * 37 | 0) | 0;
   $44 = $43 + 1 | 0;
   $45 = HEAPU8[$44 >> 0] | HEAPU8[$44 + 1 >> 0] << 8;
   $7 = $45;
   $46 = $7;
   $47 = $46 & 65535;
   $48 = ($47 | 0) != 0;
   if ($48) {
    $49 = $7;
    $50 = $49 & 65535;
    $51 = $8;
    $52 = $51 & 65535;
    $53 = ($50 | 0) != ($52 | 0);
    if ($53) {
     $54 = $3;
     $55 = ($54 | 0) != (0 | 0);
     if ($55) {
      $56 = $4;
      $57 = $5;
      $58 = $57 & 255;
      $59 = $56 + $58 | 0;
      $60 = HEAP8[$59 >> 0] | 0;
      $61 = $60 & 255;
      $62 = $61 - 1 | 0;
      $63 = $62 & 255;
      $64 = $3;
      $65 = $6;
      $66 = $65 & 255;
      $67 = $64 + $66 | 0;
      HEAP8[$67 >> 0] = $63;
     }
     $68 = $6;
     $69 = $68 & 255;
     $70 = $69 + 1 | 0;
     $71 = $70 & 255;
     $6 = $71;
    }
   }
  }
  $72 = $5;
  $73 = $72 + 1 << 24 >> 24;
  $5 = $73;
 }
 $74 = $6;
 STACKTOP = sp;
 return $74 | 0;
}

function _BeOccupied($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $10 = HEAP32[44323] | 0;
 $8 = $10;
 $11 = $3;
 $12 = $8;
 $13 = _GetCityPersons($11, $12) | 0;
 $5 = $13;
 $14 = $2;
 $15 = $14 & 65535;
 $16 = 186276 + ($15 * 19 | 0) | 0;
 $17 = $16 + 2 | 0;
 $18 = HEAPU8[$17 >> 0] | HEAPU8[$17 + 1 >> 0] << 8;
 $19 = $3;
 $20 = $19 & 255;
 $21 = 224276 + ($20 * 37 | 0) | 0;
 $22 = $21 + 1 | 0;
 HEAP8[$22 >> 0] = $18 & 255;
 HEAP8[$22 + 1 >> 0] = $18 >> 8;
 $23 = $2;
 $24 = $23 & 65535;
 $25 = $24 + 1 | 0;
 $26 = $25 & 65535;
 $27 = $3;
 $28 = $27 & 255;
 $29 = 224276 + ($28 * 37 | 0) | 0;
 $30 = $29 + 3 | 0;
 HEAP8[$30 >> 0] = $26 & 255;
 HEAP8[$30 + 1 >> 0] = $26 >> 8;
 $7 = -1;
 $4 = 0;
 while (1) {
  $31 = $4;
  $32 = $5;
  $33 = $31 >>> 0 < $32 >>> 0;
  if (!$33) {
   break;
  }
  $34 = $8;
  $35 = $4;
  $36 = $34 + ($35 << 1) | 0;
  $37 = HEAPU8[$36 >> 0] | HEAPU8[$36 + 1 >> 0] << 8;
  $6 = $37;
  $38 = $6;
  $39 = $38 & 65535;
  $40 = 186276 + ($39 * 19 | 0) | 0;
  $9 = $40;
  $41 = $9;
  $42 = $41 + 2 | 0;
  $43 = HEAPU8[$42 >> 0] | HEAPU8[$42 + 1 >> 0] << 8;
  $44 = $43 & 65535;
  $45 = $6;
  $46 = $45 & 65535;
  $47 = $46 + 1 | 0;
  $48 = ($44 | 0) == ($47 | 0);
  if ($48) {
   $49 = $6;
   $7 = $49;
   $50 = $6;
   HEAP8[242652 >> 0] = $50 & 255;
   HEAP8[242652 + 1 >> 0] = $50 >> 8;
   $51 = HEAP8[242654] | 0;
   $52 = $51 & 255;
   $53 = $52 + 1 | 0;
   $54 = $53 & 255;
   HEAP8[242654] = $54;
   $55 = $9;
   $$sink = -1;
   $$sink2 = $55;
  } else {
   $56 = $9;
   $$sink = 0;
   $$sink2 = $56;
  }
  $57 = $$sink2 + 2 | 0;
  HEAP8[$57 >> 0] = $$sink & 255;
  HEAP8[$57 + 1 >> 0] = $$sink >> 8;
  $58 = $9;
  $59 = $58 + 12 | 0;
  HEAP8[$59 >> 0] = 0 & 255;
  HEAP8[$59 + 1 >> 0] = 0 >> 8;
  $60 = $4;
  $61 = $60 + 1 | 0;
  $4 = $61;
 }
 $62 = $7;
 STACKTOP = sp;
 return $62 | 0;
}

function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = $0 + 104 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) == 0;
 if ($3) {
  label = 3;
 } else {
  $4 = $0 + 108 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = ($5 | 0) < ($2 | 0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0;
  $8 = ($7 | 0) < 0;
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1 >> 2] | 0;
   $11 = ($10 | 0) == 0;
   $$phi$trans$insert = $0 + 8 | 0;
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
    $$phi$trans$insert28$phi$trans$insert = $0 + 4 | 0;
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert >> 2] | 0;
    $$pre35 = $0 + 108 | 0;
    $$pre$phi34Z2D = $$pre35;
    $$sink = $$pre;
    $26 = $$pre;
    $29 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0;
    $13 = $0 + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    $16 = $12 - $15 | 0;
    $17 = $0 + 108 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $10 - $18 | 0;
    $20 = ($16 | 0) < ($19 | 0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;
     $$sink = $21;
     $26 = $21;
     $29 = $14;
    } else {
     $22 = $19 + -1 | 0;
     $23 = $14 + $22 | 0;
     $$pre$phi34Z2D = $17;
     $$sink = $23;
     $26 = $21;
     $29 = $14;
    }
   }
   $24 = $0 + 100 | 0;
   HEAP32[$24 >> 2] = $$sink;
   $25 = ($26 | 0) == (0 | 0);
   if (!$25) {
    $27 = $26;
    $28 = $29;
    $30 = HEAP32[$$pre$phi34Z2D >> 2] | 0;
    $31 = $27 + 1 | 0;
    $32 = $31 - $28 | 0;
    $33 = $32 + $30 | 0;
    HEAP32[$$pre$phi34Z2D >> 2] = $33;
   }
   $34 = $29 + -1 | 0;
   $35 = HEAP8[$34 >> 0] | 0;
   $36 = $35 & 255;
   $37 = ($36 | 0) == ($7 | 0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7 & 255;
    HEAP8[$34 >> 0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label | 0) == 4) {
  $9 = $0 + 100 | 0;
  HEAP32[$9 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 80 | 0;
 $5 = sp;
 $6 = sp + 136 | 0;
 dest = $4;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $vacopy_currentptr = HEAP32[$2 >> 2] | 0;
 HEAP32[$3 >> 2] = $vacopy_currentptr;
 $7 = _printf_core(0, $1, $3, $5, $4) | 0;
 $8 = ($7 | 0) < 0;
 if ($8) {
  $$0 = -1;
 } else {
  $9 = $0 + 76 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = ($10 | 0) > -1;
  if ($11) {
   $12 = ___lockfile($0) | 0;
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0 >> 2] | 0;
  $14 = $13 & 32;
  $15 = $0 + 74 | 0;
  $16 = HEAP8[$15 >> 0] | 0;
  $17 = $16 << 24 >> 24 < 1;
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0 >> 2] = $18;
  }
  $19 = $0 + 48 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = ($20 | 0) == 0;
  if ($21) {
   $23 = $0 + 44 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$23 >> 2] = $6;
   $25 = $0 + 28 | 0;
   HEAP32[$25 >> 2] = $6;
   $26 = $0 + 20 | 0;
   HEAP32[$26 >> 2] = $6;
   HEAP32[$19 >> 2] = 80;
   $27 = $6 + 80 | 0;
   $28 = $0 + 16 | 0;
   HEAP32[$28 >> 2] = $27;
   $29 = _printf_core($0, $1, $3, $5, $4) | 0;
   $30 = ($24 | 0) == (0 | 0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = $0 + 36 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0;
    $33 = HEAP32[$26 >> 2] | 0;
    $34 = ($33 | 0) == (0 | 0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23 >> 2] = $24;
    HEAP32[$19 >> 2] = 0;
    HEAP32[$28 >> 2] = 0;
    HEAP32[$25 >> 2] = 0;
    HEAP32[$26 >> 2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = _printf_core($0, $1, $3, $5, $4) | 0;
   $$1 = $22;
  }
  $35 = HEAP32[$0 >> 2] | 0;
  $36 = $35 & 32;
  $37 = ($36 | 0) == 0;
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0 >> 2] = $38;
  $39 = ($40 | 0) == 0;
  if (!$39) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _GetRoundSelfCity($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $10 = HEAP32[44294] | 0;
 $11 = _ResLoadToCon(59, 1, $10) | 0;
 $4 = $11;
 $12 = $2;
 $13 = $12 & 255;
 $9 = $13;
 $14 = $9;
 $15 = $14 & 65535;
 $16 = $15 << 4;
 $17 = $16 & 65535;
 $9 = $17;
 $18 = $9;
 $19 = $18 & 65535;
 $20 = $4;
 $21 = $20 + $19 | 0;
 $4 = $21;
 $6 = 0;
 $22 = $2;
 $23 = $22 & 255;
 $24 = 224276 + ($23 * 37 | 0) | 0;
 $25 = $24 + 1 | 0;
 $26 = HEAPU8[$25 >> 0] | HEAPU8[$25 + 1 >> 0] << 8;
 $8 = $26;
 $5 = 0;
 while (1) {
  $27 = $5;
  $28 = $27 & 255;
  $29 = ($28 | 0) < 8;
  if (!$29) {
   break;
  }
  $30 = $4;
  $31 = $5;
  $32 = $31 & 255;
  $33 = $30 + $32 | 0;
  $34 = HEAP8[$33 >> 0] | 0;
  $35 = $34 << 24 >> 24 != 0;
  if ($35) {
   $36 = $4;
   $37 = $5;
   $38 = $37 & 255;
   $39 = $36 + $38 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   $41 = $40 & 255;
   $42 = $41 - 1 | 0;
   $43 = 224276 + ($42 * 37 | 0) | 0;
   $44 = $43 + 1 | 0;
   $45 = HEAPU8[$44 >> 0] | HEAPU8[$44 + 1 >> 0] << 8;
   $7 = $45;
   $46 = $7;
   $47 = $46 & 65535;
   $48 = $8;
   $49 = $48 & 65535;
   $50 = ($47 | 0) == ($49 | 0);
   if ($50) {
    $51 = $4;
    $52 = $5;
    $53 = $52 & 255;
    $54 = $51 + $53 | 0;
    $55 = HEAP8[$54 >> 0] | 0;
    $56 = $55 & 255;
    $57 = $56 - 1 | 0;
    $58 = $57 & 255;
    $59 = $3;
    $60 = $6;
    $61 = $60 & 255;
    $62 = $59 + $61 | 0;
    HEAP8[$62 >> 0] = $58;
    $63 = $6;
    $64 = $63 & 255;
    $65 = $64 + 1 | 0;
    $66 = $65 & 255;
    $6 = $66;
   }
  }
  $67 = $5;
  $68 = $67 + 1 << 24 >> 24;
  $5 = $68;
 }
 $69 = $6;
 STACKTOP = sp;
 return $69 | 0;
}

function _FgtCountWon() {
 var $$sink = 0, $$sink11 = 0, $$sink15$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = _gam_rand() | 0;
 $6 = ($5 | 0) % 101 & -1;
 $7 = $6 & 255;
 $0 = $7;
 $8 = _FgtAllArms(0) | 0;
 $1 = $8;
 $9 = $1;
 $10 = $9 << 16 >> 16 != 0;
 if (!$10) {
  HEAP8[186073] = 2;
 }
 $11 = _FgtAllArms(1) | 0;
 $2 = $11;
 $12 = $2;
 $13 = $12 << 16 >> 16 != 0;
 if (!$13) {
  HEAP8[186073] = 1;
 }
 $14 = HEAPU8[186084 >> 0] | HEAPU8[186084 + 1 >> 0] << 8;
 $3 = $14;
 $15 = HEAPU8[186086 >> 0] | HEAPU8[186086 + 1 >> 0] << 8;
 $4 = $15;
 $16 = $1;
 $17 = $16 & 65535;
 $18 = $2;
 $19 = $18 & 65535;
 $20 = ($17 | 0) > ($19 | 0);
 $21 = $1;
 $22 = $21 & 65535;
 do {
  if ($20) {
   $23 = $22 >> 1;
   $24 = $2;
   $25 = $24 & 65535;
   $26 = ($23 | 0) > ($25 | 0);
   if ($26) {
    $27 = $0;
    $28 = $27 & 255;
    $29 = ($28 | 0) < 30;
    $$sink15$sink = $29;
    break;
   } else {
    $30 = $3;
    $31 = $30 & 65535;
    $32 = $4;
    $33 = $32 & 65535;
    $34 = ($31 | 0) > ($33 | 0);
    $35 = $0;
    $36 = $35 & 255;
    $$sink = $34 ? 40 : 60;
    $37 = ($36 | 0) < ($$sink | 0);
    $$sink15$sink = $37;
    break;
   }
  } else {
   $38 = $2;
   $39 = $38 & 65535;
   $40 = $39 >> 1;
   $41 = ($22 | 0) < ($40 | 0);
   if ($41) {
    $42 = $0;
    $43 = $42 & 255;
    $44 = ($43 | 0) > 2;
    $$sink15$sink = $44;
    break;
   } else {
    $45 = $3;
    $46 = $45 & 65535;
    $47 = $4;
    $48 = $47 & 65535;
    $49 = ($46 | 0) > ($48 | 0);
    $50 = $0;
    $51 = $50 & 255;
    $$sink11 = $49 ? 30 : 10;
    $52 = ($51 | 0) > ($$sink11 | 0);
    $$sink15$sink = $52;
    break;
   }
  }
 } while (0);
 $53 = $$sink15$sink & 1;
 $54 = $53 + 1 | 0;
 $55 = $54 & 255;
 HEAP8[186073] = $55;
 STACKTOP = sp;
 return;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = ($4 | 0) == (0 | 0);
 if ($5) {
  $7 = ___towrite($2) | 0;
  $8 = ($7 | 0) == 0;
  if ($8) {
   $$pre = HEAP32[$3 >> 2] | 0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   $11 = $12 - $10 | 0;
   $13 = $11 >>> 0 < $1 >>> 0;
   $14 = $10;
   if ($13) {
    $15 = $2 + 36 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = FUNCTION_TABLE_iiii[$16 & 31]($2, $0, $1) | 0;
    $$1 = $17;
    break;
   }
   $18 = $2 + 75 | 0;
   $19 = HEAP8[$18 >> 0] | 0;
   $20 = $19 << 24 >> 24 > -1;
   L10 : do {
    if ($20) {
     $$038 = $1;
     while (1) {
      $21 = ($$038 | 0) == 0;
      if ($21) {
       $$139 = 0;
       $$141 = $0;
       $$143 = $1;
       $31 = $14;
       break L10;
      }
      $22 = $$038 + -1 | 0;
      $23 = $0 + $22 | 0;
      $24 = HEAP8[$23 >> 0] | 0;
      $25 = $24 << 24 >> 24 == 10;
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = $2 + 36 | 0;
     $27 = HEAP32[$26 >> 2] | 0;
     $28 = FUNCTION_TABLE_iiii[$27 & 31]($2, $0, $$038) | 0;
     $29 = $28 >>> 0 < $$038 >>> 0;
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = $0 + $$038 | 0;
     $$042 = $1 - $$038 | 0;
     $$pre47 = HEAP32[$9 >> 2] | 0;
     $$139 = $$038;
     $$141 = $30;
     $$143 = $$042;
     $31 = $$pre47;
    } else {
     $$139 = 0;
     $$141 = $0;
     $$143 = $1;
     $31 = $14;
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0;
   $32 = HEAP32[$9 >> 2] | 0;
   $33 = $32 + $$143 | 0;
   HEAP32[$9 >> 2] = $33;
   $34 = $$139 + $$143 | 0;
   $$1 = $34;
  }
 } while (0);
 return $$1 | 0;
}

function _PlcArmsMaxP($0) {
 $0 = $0 | 0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = 0;
 $3 = HEAP8[5165 >> 0] | 0;
 $4 = $3 << 24 >> 24 != 0;
 $5 = $1;
 $6 = $5 + 4 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 if ($4) {
  $9 = HEAPU8[5166 >> 0] | HEAPU8[5166 + 1 >> 0] << 8;
  $10 = $9 & 65535;
  $11 = Math_imul($8, $10) | 0;
  $12 = $2;
  $13 = $12 + $11 | 0;
  $2 = $13;
  $14 = $1;
  $15 = $14 + 18 | 0;
  $16 = HEAP8[$15 >> 0] | 0;
  $17 = $16 & 255;
  $18 = HEAP8[5168 >> 0] | 0;
  $19 = $18 & 255;
  $20 = Math_imul($17, $19) | 0;
  $21 = $2;
  $22 = $21 + $20 | 0;
  $2 = $22;
  $23 = $1;
  $24 = $23 + 5 | 0;
  $25 = HEAP8[$24 >> 0] | 0;
  $26 = $25 & 255;
  $27 = HEAP8[5170 >> 0] | 0;
  $28 = $27 & 255;
  $29 = Math_imul($26, $28) | 0;
  $30 = $2;
  $31 = $30 + $29 | 0;
  $2 = $31;
  $32 = $1;
  $33 = $32 + 6 | 0;
  $34 = HEAP8[$33 >> 0] | 0;
  $35 = $34 & 255;
  $36 = HEAP8[5169 >> 0] | 0;
  $37 = $36 & 255;
  $38 = Math_imul($35, $37) | 0;
  $39 = $2;
  $40 = $39 + $38 | 0;
  $2 = $40;
  $41 = $2;
  $42 = $41 >>> 0 > 65534;
  $$ = $42 ? 65534 : $40;
  $2 = $$;
  $60 = $2;
  $61 = $60 & 65535;
  STACKTOP = sp;
  return $61 | 0;
 } else {
  $43 = $8 * 100 | 0;
  $44 = $2;
  $45 = $44 + $43 | 0;
  $2 = $45;
  $46 = $1;
  $47 = $46 + 5 | 0;
  $48 = HEAP8[$47 >> 0] | 0;
  $49 = $48 & 255;
  $50 = $49 * 10 | 0;
  $51 = $2;
  $52 = $51 + $50 | 0;
  $2 = $52;
  $53 = $1;
  $54 = $53 + 6 | 0;
  $55 = HEAP8[$54 >> 0] | 0;
  $56 = $55 & 255;
  $57 = $56 * 10 | 0;
  $58 = $2;
  $59 = $58 + $57 | 0;
  $2 = $59;
  $60 = $2;
  $61 = $60 & 65535;
  STACKTOP = sp;
  return $61 | 0;
 }
 return 0 | 0;
}

function _SysRect($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $11 = $10 << 16 >> 16;
 $9 = $11;
 $12 = $4;
 $13 = $12 << 16 >> 16;
 $8 = $13;
 while (1) {
  $14 = $8;
  $15 = $6;
  $16 = $15 << 16 >> 16;
  $17 = ($14 | 0) <= ($16 | 0);
  if (!$17) {
   break;
  }
  $18 = $8;
  $19 = $18 & 65535;
  $20 = $9;
  $21 = $20 & 65535;
  __pixel($19, $21, 1);
  $22 = $8;
  $23 = $22 + 1 | 0;
  $8 = $23;
 }
 $24 = $7;
 $25 = $24 << 16 >> 16;
 $9 = $25;
 $26 = $4;
 $27 = $26 << 16 >> 16;
 $8 = $27;
 while (1) {
  $28 = $8;
  $29 = $6;
  $30 = $29 << 16 >> 16;
  $31 = ($28 | 0) <= ($30 | 0);
  if (!$31) {
   break;
  }
  $32 = $8;
  $33 = $32 & 65535;
  $34 = $9;
  $35 = $34 & 65535;
  __pixel($33, $35, 1);
  $36 = $8;
  $37 = $36 + 1 | 0;
  $8 = $37;
 }
 $38 = $4;
 $39 = $38 << 16 >> 16;
 $8 = $39;
 $40 = $5;
 $41 = $40 << 16 >> 16;
 $9 = $41;
 while (1) {
  $42 = $9;
  $43 = $7;
  $44 = $43 << 16 >> 16;
  $45 = ($42 | 0) <= ($44 | 0);
  if (!$45) {
   break;
  }
  $46 = $8;
  $47 = $46 & 65535;
  $48 = $9;
  $49 = $48 & 65535;
  __pixel($47, $49, 1);
  $50 = $9;
  $51 = $50 + 1 | 0;
  $9 = $51;
 }
 $52 = $6;
 $53 = $52 << 16 >> 16;
 $8 = $53;
 $54 = $5;
 $55 = $54 << 16 >> 16;
 $9 = $55;
 while (1) {
  $56 = $9;
  $57 = $7;
  $58 = $57 << 16 >> 16;
  $59 = ($56 | 0) <= ($58 | 0);
  if (!$59) {
   break;
  }
  $60 = $8;
  $61 = $60 & 65535;
  $62 = $9;
  $63 = $62 & 65535;
  __pixel($61, $63, 1);
  $64 = $9;
  $65 = $64 + 1 | 0;
  $9 = $65;
 }
 _flushLcd();
 STACKTOP = sp;
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2] | 0;
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2] | 0;
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2] | 0;
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2] | 0;
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2] | 0;
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2] | 0;
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2] | 0;
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2] | 0;
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2] | 0;
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2] | 0;
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2] | 0;
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2] | 0;
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2] | 0;
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2] | 0;
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2] | 0;
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _FgtRefrashMap() {
 var $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g_MapSX$sink = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[186269] | 0;
 $1 = $0 << 24 >> 24 != 0;
 if ($1) {
  $2 = HEAP8[186061] | 0;
  $3 = $2 & 255;
  $4 = HEAP8[186063] | 0;
  $5 = $4 & 255;
  $6 = ($3 | 0) < ($5 | 0);
  do {
   if ($6) {
    $7 = HEAP8[186063] | 0;
    $8 = $7 & 255;
    $9 = $8 - 1 | 0;
    $$sink1 = $9;
    $g_MapSX$sink = 186063;
   } else {
    $10 = HEAP8[186062] | 0;
    $11 = $10 & 255;
    $12 = HEAP8[186064] | 0;
    $13 = $12 & 255;
    $14 = ($11 | 0) < ($13 | 0);
    if ($14) {
     $15 = HEAP8[186064] | 0;
     $16 = $15 & 255;
     $17 = $16 - 1 | 0;
     $$sink1 = $17;
     $g_MapSX$sink = 186064;
     break;
    }
    $18 = HEAP8[186061] | 0;
    $19 = $18 & 255;
    $20 = HEAP8[186063] | 0;
    $21 = $20 & 255;
    $22 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
    $23 = $22 & 65535;
    $24 = ($23 | 0) / 16 & -1;
    $25 = $21 + $24 | 0;
    $26 = ($19 | 0) >= ($25 | 0);
    if ($26) {
     $27 = HEAP8[186063] | 0;
     $28 = $27 & 255;
     $29 = $28 + 1 | 0;
     $$sink1 = $29;
     $g_MapSX$sink = 186063;
     break;
    }
    $30 = HEAP8[186062] | 0;
    $31 = $30 & 255;
    $32 = HEAP8[186064] | 0;
    $33 = $32 & 255;
    $34 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
    $35 = $34 & 65535;
    $36 = ($35 | 0) / 16 & -1;
    $37 = $36 - 1 | 0;
    $38 = $33 + $37 | 0;
    $39 = ($31 | 0) >= ($38 | 0);
    if ($39) {
     $40 = HEAP8[186064] | 0;
     $41 = $40 & 255;
     $42 = $41 + 1 | 0;
     $$sink1 = $42;
     $g_MapSX$sink = 186064;
     break;
    } else {
     return;
    }
   }
  } while (0);
  $43 = $$sink1 & 255;
  HEAP8[$g_MapSX$sink >> 0] = $43;
 }
 $44 = HEAP8[186063] | 0;
 $45 = HEAP8[186064] | 0;
 _FgtShowMap($44, $45);
 return;
}

function _CountBaseAttr($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $0;
 $9 = $1;
 $10 = $9 & 255;
 $11 = 186129 + ($10 * 7 | 0) | 0;
 $6 = $11;
 $12 = $1;
 $13 = _TransIdxToGen($12) | 0;
 $8 = $13;
 $14 = $8;
 $15 = $14 & 65535;
 $16 = 186276 + ($15 * 19 | 0) | 0;
 $7 = $16;
 $17 = $7;
 $18 = $17 + 5 | 0;
 $19 = HEAP8[$18 >> 0] | 0;
 $20 = $19 & 255;
 $2 = $20;
 $21 = $7;
 $22 = $21 + 6 | 0;
 $23 = HEAP8[$22 >> 0] | 0;
 $24 = $23 & 255;
 $3 = $24;
 $25 = $7;
 $26 = $25 + 4 | 0;
 $27 = HEAP8[$26 >> 0] | 0;
 $28 = $27 & 255;
 $4 = $28;
 $29 = $7;
 $30 = $29 + 10 | 0;
 $31 = HEAP8[$30 >> 0] | 0;
 $32 = $31 & 255;
 $5 = $32;
 $33 = $2;
 $34 = $33 & 65535;
 $35 = $34 * 80 | 0;
 $36 = ($35 | 0) / 100 & -1;
 $37 = $3;
 $38 = $37 & 65535;
 $39 = $38 * 30 | 0;
 $40 = ($39 | 0) / 100 & -1;
 $41 = $36 + $40 | 0;
 $42 = $4;
 $43 = $42 & 65535;
 $44 = $41 + $43 | 0;
 $45 = $5;
 $46 = $45 & 65535;
 $47 = Math_imul($44, $46) | 0;
 $48 = ($47 | 0) / 100 & -1;
 $49 = $48 & 255;
 $50 = $6;
 $51 = $50 + 2 | 0;
 HEAP8[$51 >> 0] = $49;
 $52 = $3;
 $53 = $52 & 65535;
 $54 = $53 * 80 | 0;
 $55 = ($54 | 0) / 100 & -1;
 $56 = $2;
 $57 = _PlcExtract($56) | 0;
 $58 = $57 & 255;
 $59 = $58 >> 1;
 $60 = $55 + $59 | 0;
 $61 = $4;
 $62 = $61 & 65535;
 $63 = $60 + $62 | 0;
 $64 = $5;
 $65 = $64 & 65535;
 $66 = Math_imul($63, $65) | 0;
 $67 = ($66 | 0) / 100 & -1;
 $68 = $67 & 255;
 $69 = $6;
 $70 = $69 + 3 | 0;
 HEAP8[$70 >> 0] = $68;
 $71 = $1;
 _CountMoveP($71);
 STACKTOP = sp;
 return;
}

function _HarvestryFood() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = 0;
 while (1) {
  $1 = $0;
  $2 = $1 & 255;
  $3 = HEAP8[5256 >> 0] | 0;
  $4 = $3 & 255;
  $5 = ($2 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $0;
  $7 = $6 & 255;
  $8 = 224276 + ($7 * 37 | 0) | 0;
  $9 = $8 + 25 | 0;
  $10 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8;
  $11 = $10 & 65535;
  $12 = ($11 | 0) < 3e4;
  do {
   if ($12) {
    $13 = HEAP8[5156 >> 0] | 0;
    $14 = $13 << 24 >> 24 != 0;
    $15 = $0;
    $16 = $15 & 255;
    $17 = 224276 + ($16 * 37 | 0) | 0;
    if ($14) {
     $18 = $17 + 25 | 0;
     $19 = HEAPU8[$18 >> 0] | HEAPU8[$18 + 1 >> 0] << 8;
     $20 = $0;
     $21 = $20 & 255;
     $22 = 224276 + ($21 * 37 | 0) | 0;
     $23 = $22 + 7 | 0;
     $24 = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8;
     $25 = $24 & 65535;
     $26 = ($25 | 0) / 4 & -1;
     $27 = _add_16($19, $26) | 0;
     $28 = $0;
     $29 = $28 & 255;
     $30 = 224276 + ($29 * 37 | 0) | 0;
     $31 = $30 + 25 | 0;
     HEAP8[$31 >> 0] = $27 & 255;
     HEAP8[$31 + 1 >> 0] = $27 >> 8;
     break;
    } else {
     $32 = $17 + 7 | 0;
     $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8;
     $34 = $33 & 65535;
     $35 = ($34 | 0) / 4 & -1;
     $36 = $0;
     $37 = $36 & 255;
     $38 = 224276 + ($37 * 37 | 0) | 0;
     $39 = $38 + 25 | 0;
     $40 = HEAPU8[$39 >> 0] | HEAPU8[$39 + 1 >> 0] << 8;
     $41 = $40 & 65535;
     $42 = $41 + $35 | 0;
     $43 = $42 & 65535;
     HEAP8[$39 >> 0] = $43 & 255;
     HEAP8[$39 + 1 >> 0] = $43 >> 8;
     break;
    }
   }
  } while (0);
  $44 = $0;
  $45 = $44 + 1 << 24 >> 24;
  $0 = $45;
 }
 STACKTOP = sp;
 return;
}

function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = ($0 | 0) == (0 | 0);
 do {
  if ($1) {
   $8 = HEAP32[785] | 0;
   $9 = ($8 | 0) == (0 | 0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[785] | 0;
    $11 = _fflush($10) | 0;
    $29 = $11;
   }
   $12 = ___ofl_lock() | 0;
   $$02325 = HEAP32[$12 >> 2] | 0;
   $13 = ($$02325 | 0) == (0 | 0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;
    $$02426 = $29;
    while (1) {
     $14 = $$02327 + 76 | 0;
     $15 = HEAP32[$14 >> 2] | 0;
     $16 = ($15 | 0) > -1;
     if ($16) {
      $17 = ___lockfile($$02327) | 0;
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = $$02327 + 20 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     $20 = $$02327 + 28 | 0;
     $21 = HEAP32[$20 >> 2] | 0;
     $22 = $19 >>> 0 > $21 >>> 0;
     if ($22) {
      $23 = ___fflush_unlocked($$02327) | 0;
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26 | 0) == 0;
     if (!$25) {
      ___unlockfile($$02327);
     }
     $27 = $$02327 + 56 | 0;
     $$023 = HEAP32[$27 >> 2] | 0;
     $28 = ($$023 | 0) == (0 | 0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;
      $$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = $0 + 76 | 0;
   $3 = HEAP32[$2 >> 2] | 0;
   $4 = ($3 | 0) > -1;
   if (!$4) {
    $5 = ___fflush_unlocked($0) | 0;
    $$0 = $5;
    break;
   }
   $6 = ___lockfile($0) | 0;
   $phitmp = ($6 | 0) == 0;
   $7 = ___fflush_unlocked($0) | 0;
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _FgtShowMap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 _FgtGetMapDat($6, $7);
 $4 = 0;
 while (1) {
  $8 = $4;
  $9 = $8 & 255;
  $10 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $11 = $10 & 65535;
  $12 = ($11 | 0) / 16 & -1;
  $13 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
  $14 = $13 & 65535;
  $15 = ($14 | 0) / 16 & -1;
  $16 = $15 - 1 | 0;
  $17 = Math_imul($12, $16) | 0;
  $18 = ($9 | 0) < ($17 | 0);
  if (!$18) {
   break;
  }
  $19 = $4;
  $20 = $19 & 255;
  $21 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $22 = $21 & 65535;
  $23 = ($22 | 0) / 16 & -1;
  $24 = ($20 | 0) / ($23 | 0) & -1;
  $25 = $24 << 4;
  $26 = $25 + 0 | 0;
  $27 = $26 & 255;
  $3 = $27;
  $28 = $4;
  $29 = $28 & 255;
  $30 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
  $31 = $30 & 65535;
  $32 = ($31 | 0) / 16 & -1;
  $33 = ($29 | 0) % ($32 | 0) & -1;
  $34 = $33 << 4;
  $35 = $34 + 0 | 0;
  $36 = $35 & 255;
  $2 = $36;
  $37 = HEAP32[44299] | 0;
  $38 = $4;
  $39 = $38 & 255;
  $40 = $37 + $39 | 0;
  $41 = HEAP8[$40 >> 0] | 0;
  $42 = $41 & 255;
  $5 = $42;
  $43 = HEAPU8[186055 >> 0] | HEAPU8[186055 + 1 >> 0] << 8;
  $44 = $5;
  $45 = $44 & 65535;
  $46 = $45 + 1 | 0;
  $47 = $46 & 65535;
  $48 = $2;
  $49 = $48 & 255;
  $50 = $3;
  $51 = $50 & 255;
  _PlcRPicShowEx($43, 0, $47, $49, $51, 0);
  $52 = $4;
  $53 = $52 & 255;
  $54 = $53 + 1 | 0;
  $55 = $54 & 255;
  $4 = $55;
 }
 STACKTOP = sp;
 return;
}

function _GetAllKing($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $4 = 0;
 $2 = 0;
 while (1) {
  $6 = $2;
  $7 = $6 & 255;
  $8 = HEAP8[5256 >> 0] | 0;
  $9 = $8 & 255;
  $10 = ($7 | 0) < ($9 | 0);
  if (!$10) {
   break;
  }
  $11 = $2;
  $12 = $11 & 255;
  $13 = 224276 + ($12 * 37 | 0) | 0;
  $14 = $13 + 1 | 0;
  $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
  $16 = $15 & 65535;
  $5 = $16;
  $17 = $5;
  $18 = ($17 | 0) != 0;
  if ($18) {
   $3 = 0;
   while (1) {
    $19 = $3;
    $20 = $19 & 255;
    $21 = $4;
    $22 = $21 & 255;
    $23 = ($20 | 0) < ($22 | 0);
    if (!$23) {
     break;
    }
    $24 = $1;
    $25 = $3;
    $26 = $25 & 255;
    $27 = $24 + ($26 << 1) | 0;
    $28 = HEAPU8[$27 >> 0] | HEAPU8[$27 + 1 >> 0] << 8;
    $29 = $28 & 65535;
    $30 = $5;
    $31 = $30 - 1 | 0;
    $32 = ($29 | 0) == ($31 | 0);
    if ($32) {
     break;
    }
    $33 = $3;
    $34 = $33 + 1 << 24 >> 24;
    $3 = $34;
   }
   $35 = $3;
   $36 = $35 & 255;
   $37 = $4;
   $38 = $37 & 255;
   $39 = ($36 | 0) < ($38 | 0);
   if (!$39) {
    $40 = $5;
    $41 = $40 - 1 | 0;
    $42 = $41 & 65535;
    $43 = $1;
    $44 = $4;
    $45 = $44 & 255;
    $46 = $43 + ($45 << 1) | 0;
    HEAP8[$46 >> 0] = $42 & 255;
    HEAP8[$46 + 1 >> 0] = $42 >> 8;
    $47 = $4;
    $48 = $47 & 255;
    $49 = $48 + 1 | 0;
    $50 = $49 & 255;
    $4 = $50;
   }
  }
  $51 = $2;
  $52 = $51 + 1 << 24 >> 24;
  $2 = $52;
 }
 $53 = $4;
 $54 = $53 & 255;
 STACKTOP = sp;
 return $54 | 0;
}

function _PlcNumShow($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 20 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $12;
 dest = $12;
 stop = dest + 12 | 0;
 do {
  HEAP8[dest >> 0] = 48 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $15 = $7;
 $16 = $8;
 $17 = $16 & 255;
 $18 = 4809 + ($17 << 2) | 0;
 $19 = HEAPU8[$18 >> 0] | HEAPU8[$18 + 1 >> 0] << 8 | HEAPU8[$18 + 2 >> 0] << 16 | HEAPU8[$18 + 3 >> 0] << 24;
 $20 = ($15 >>> 0) % ($19 >>> 0) & -1;
 $14 = $20;
 $21 = $14;
 _ltoa($21, $13, 10) | 0;
 $22 = _strlen($13) | 0;
 $23 = $22 & 255;
 $10 = $23;
 $24 = $10;
 $25 = $24 & 255;
 $26 = $8;
 $27 = $26 & 255;
 $28 = ($25 | 0) <= ($27 | 0);
 if ($28) {
  $29 = $7;
  $30 = $8;
  $31 = $30 & 255;
  $32 = 4809 + ($31 << 2) | 0;
  $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8 | HEAPU8[$32 + 2 >> 0] << 16 | HEAPU8[$32 + 3 >> 0] << 24;
  $34 = $29 >>> 0 >= $33 >>> 0;
  if ($34) {
   $35 = $8;
   $36 = $35 & 255;
   $37 = $10;
   $38 = $37 & 255;
   $39 = $36 - $38 | 0;
   $40 = $11;
   $41 = $40 + $39 | 0;
   $11 = $41;
  }
 }
 $42 = $11;
 $43 = $10;
 $44 = $43 & 255;
 $45 = $44 + 1 | 0;
 _memcpy($42 | 0, $13 | 0, $45 | 0) | 0;
 $46 = $9;
 $47 = ($46 | 0) == (0 | 0);
 $48 = $5;
 $49 = $6;
 if ($47) {
  _GamStrShowS($48, $49, $12) | 0;
  STACKTOP = sp;
  return;
 } else {
  $50 = $9;
  _GamStrShowV($48, $49, $12, $50) | 0;
  STACKTOP = sp;
  return;
 }
}

function _hex_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $8 = sp + 4 | 0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = _strlen($9) | 0;
 $5 = $10;
 $11 = $5;
 $12 = ($11 >>> 0) % 2 & -1;
 $13 = ($12 | 0) != 0;
 if ($13) {
  $2 = 0;
  $39 = $2;
  STACKTOP = sp;
  return $39 | 0;
 }
 $14 = $5;
 $15 = ($14 >>> 0) / 2 & -1;
 $16 = $15 + 1 | 0;
 $17 = _calloc(1, $16) | 0;
 $6 = $17;
 $7 = 0;
 while (1) {
  $18 = $7;
  $19 = $5;
  $20 = $18 >>> 0 < $19 >>> 0;
  if (!$20) {
   label = 8;
   break;
  }
  HEAP8[$8 >> 0] = 0 & 255;
  HEAP8[$8 + 1 >> 0] = 0 >> 8 & 255;
  HEAP8[$8 + 2 >> 0] = 0 >> 16 & 255;
  HEAP8[$8 + 3 >> 0] = 0 >> 24;
  $21 = $3;
  $22 = $7;
  $23 = $21 + $22 | 0;
  HEAP32[$vararg_buffer >> 2] = $8;
  $24 = _sscanf($23, 8591, $vararg_buffer) | 0;
  $25 = ($24 | 0) != 1;
  if ($25) {
   label = 6;
   break;
  }
  $27 = HEAPU8[$8 >> 0] | HEAPU8[$8 + 1 >> 0] << 8 | HEAPU8[$8 + 2 >> 0] << 16 | HEAPU8[$8 + 3 >> 0] << 24;
  $28 = $27 & 255;
  $29 = $6;
  $30 = $7;
  $31 = ($30 | 0) / 2 & -1;
  $32 = $29 + $31 | 0;
  HEAP8[$32 >> 0] = $28;
  $33 = $7;
  $34 = $33 + 2 | 0;
  $7 = $34;
 }
 if ((label | 0) == 6) {
  $26 = $6;
  _free($26);
  $2 = 0;
  $39 = $2;
  STACKTOP = sp;
  return $39 | 0;
 } else if ((label | 0) == 8) {
  $35 = $5;
  $36 = ($35 >>> 0) / 2 & -1;
  $37 = $4;
  HEAP8[$37 >> 0] = $36 & 255;
  HEAP8[$37 + 1 >> 0] = $36 >> 8 & 255;
  HEAP8[$37 + 2 >> 0] = $36 >> 16 & 255;
  HEAP8[$37 + 3 >> 0] = $36 >> 24;
  $38 = $6;
  $2 = $38;
  $39 = $2;
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0 | 0;
}

function _GetEnemyKing($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $4 = 0;
 while (1) {
  $8 = $4;
  $9 = HEAP8[5256 >> 0] | 0;
  $10 = $9 & 255;
  $11 = $8 >>> 0 < $10 >>> 0;
  if (!$11) {
   break;
  }
  $12 = $4;
  $13 = 224276 + ($12 * 37 | 0) | 0;
  $14 = $13 + 1 | 0;
  $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
  $16 = $15 & 65535;
  $7 = $16;
  $17 = $7;
  $18 = ($17 | 0) != 0;
  if ($18) {
   $19 = $7;
   $20 = $2;
   $21 = $20 & 65535;
   $22 = $21 + 1 | 0;
   $23 = ($19 | 0) != ($22 | 0);
   if ($23) {
    $5 = 0;
    while (1) {
     $24 = $5;
     $25 = $6;
     $26 = $24 >>> 0 < $25 >>> 0;
     if (!$26) {
      break;
     }
     $27 = $3;
     $28 = $5;
     $29 = $27 + ($28 << 1) | 0;
     $30 = HEAPU8[$29 >> 0] | HEAPU8[$29 + 1 >> 0] << 8;
     $31 = $30 & 65535;
     $32 = $7;
     $33 = $32 - 1 | 0;
     $34 = ($31 | 0) == ($33 | 0);
     if ($34) {
      break;
     }
     $35 = $5;
     $36 = $35 + 1 | 0;
     $5 = $36;
    }
    $37 = $5;
    $38 = $6;
    $39 = $37 >>> 0 < $38 >>> 0;
    if (!$39) {
     $40 = $7;
     $41 = $40 - 1 | 0;
     $42 = $41 & 65535;
     $43 = $3;
     $44 = $6;
     $45 = $43 + ($44 << 1) | 0;
     HEAP8[$45 >> 0] = $42 & 255;
     HEAP8[$45 + 1 >> 0] = $42 >> 8;
     $46 = $6;
     $47 = $46 + 1 | 0;
     $6 = $47;
    }
   }
  }
  $48 = $4;
  $49 = $48 + 1 | 0;
  $4 = $49;
 }
 $50 = $6;
 $51 = $50 & 255;
 STACKTOP = sp;
 return $51 | 0;
}

function ___stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $3 = sp + 16 | 0;
 HEAP32[$3 >> 2] = $1;
 $4 = $3 + 4 | 0;
 $5 = $0 + 48 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = ($6 | 0) != 0;
 $8 = $7 & 1;
 $9 = $2 - $8 | 0;
 HEAP32[$4 >> 2] = $9;
 $10 = $3 + 8 | 0;
 $11 = $0 + 44 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAP32[$10 >> 2] = $12;
 $13 = $3 + 12 | 0;
 HEAP32[$13 >> 2] = $6;
 $14 = $0 + 60 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $3;
 HEAP32[$vararg_buffer >> 2] = $15;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = $16;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = 2;
 $17 = ___syscall145(145, $vararg_buffer | 0) | 0;
 $18 = ___syscall_ret($17) | 0;
 $19 = ($18 | 0) < 1;
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0 >> 2] | 0;
  $23 = $22 | $21;
  HEAP32[$0 >> 2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4 >> 2] | 0;
  $25 = $18 >>> 0 > $24 >>> 0;
  if ($25) {
   $26 = $18 - $24 | 0;
   $27 = HEAP32[$11 >> 2] | 0;
   $28 = $0 + 4 | 0;
   HEAP32[$28 >> 2] = $27;
   $29 = $27 + $26 | 0;
   $30 = $0 + 8 | 0;
   HEAP32[$30 >> 2] = $29;
   $31 = HEAP32[$5 >> 2] | 0;
   $32 = ($31 | 0) == 0;
   if ($32) {
    $$0 = $2;
   } else {
    $33 = $27 + 1 | 0;
    HEAP32[$28 >> 2] = $33;
    $34 = HEAP8[$27 >> 0] | 0;
    $35 = $2 + -1 | 0;
    $36 = $1 + $35 | 0;
    HEAP8[$36 >> 0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _FgtJNChkAim($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $6;
 $11 = $10 & 255;
 $12 = 186088 + ($11 << 1) | 0;
 $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
 $14 = $13 & 65535;
 $15 = $14 - 1 | 0;
 $16 = 186276 + ($15 * 19 | 0) | 0;
 $17 = _GetArmType($16) | 0;
 $8 = $17;
 $18 = $6;
 $19 = _FgtGetGenTer($18) | 0;
 $7 = $19;
 $20 = $4;
 $21 = _FgtGetJNPtr($20) | 0;
 $9 = $21;
 $22 = $9;
 $23 = $22 + 28 | 0;
 $24 = $8;
 $25 = $24 & 255;
 $26 = $23 + $25 | 0;
 $27 = HEAP8[$26 >> 0] | 0;
 $28 = $27 << 24 >> 24 != 0;
 if (!$28) {
  $3 = 0;
  $51 = $3;
  STACKTOP = sp;
  return $51 | 0;
 }
 $29 = $9;
 $30 = $29 + 12 | 0;
 $31 = $7;
 $32 = $31 & 255;
 $33 = $30 + $32 | 0;
 $34 = HEAP8[$33 >> 0] | 0;
 $35 = $34 << 24 >> 24 != 0;
 if (!$35) {
  $3 = 0;
  $51 = $3;
  STACKTOP = sp;
  return $51 | 0;
 }
 $36 = $9;
 $37 = HEAP8[$36 >> 0] | 0;
 $38 = $37 & 255;
 $39 = $38 & 1;
 $40 = ($39 | 0) == 0;
 $41 = $5;
 $42 = $41 << 24 >> 24 != 0;
 $or$cond = $40 | $42;
 do {
  if ($or$cond) {
   $43 = $9;
   $44 = HEAP8[$43 >> 0] | 0;
   $45 = $44 & 255;
   $46 = $45 & 1;
   $47 = ($46 | 0) != 0;
   if (!$47) {
    $48 = $5;
    $49 = $48 & 255;
    $50 = ($49 | 0) != 0;
    if ($50) {
     break;
    }
   }
   $3 = 1;
   $51 = $3;
   STACKTOP = sp;
   return $51 | 0;
  }
 } while (0);
 $3 = 0;
 $51 = $3;
 STACKTOP = sp;
 return $51 | 0;
}

function _GetArmType($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $6 = $1;
 $7 = $6 + 11 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $2 = $8;
 $3 = 0;
 while (1) {
  $9 = $3;
  $10 = ($9 | 0) < 2;
  if (!$10) {
   break;
  }
  $11 = $1;
  $12 = $11 + 14 | 0;
  $13 = $3;
  $14 = $12 + ($13 << 1) | 0;
  $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
  $4 = $15;
  $16 = $4;
  $17 = $16 << 16 >> 16 != 0;
  L4 : do {
   if ($17) {
    $18 = HEAP32[44294] | 0;
    $19 = _ResLoadToCon(66, 1, $18) | 0;
    $20 = $4;
    $21 = $20 & 65535;
    $22 = $21 - 1 | 0;
    $23 = $22 & 65535;
    $24 = $23 & 65535;
    $25 = $24 * 66 | 0;
    $26 = $19 + $25 | 0;
    $5 = $26;
    $27 = $5;
    $28 = ($27 | 0) == (0 | 0);
    if (!$28) {
     $29 = $5;
     $30 = $29 + 65 | 0;
     $31 = HEAP8[$30 >> 0] | 0;
     $32 = $31 & 255;
     switch ($32 | 0) {
     case 0:
      {
       break L4;
       break;
      }
     case 1:
      {
       $2 = 3;
       break L4;
       break;
      }
     case 2:
      {
       $2 = 5;
       break L4;
       break;
      }
     case 3:
      {
       $2 = 4;
       break L4;
       break;
      }
     default:
      {
       $33 = $5;
       $34 = $33 + 65 | 0;
       $35 = HEAP8[$34 >> 0] | 0;
       $36 = $35 & 255;
       $37 = $36 - 4 | 0;
       $38 = $37 & 255;
       $2 = $38;
       break L4;
      }
     }
    }
   }
  } while (0);
  $39 = $3;
  $40 = $39 + 1 | 0;
  $3 = $40;
 }
 $41 = $2;
 STACKTOP = sp;
 return $41 | 0;
}

function _touchListViewItemIndexAtPoint($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 24 | 0;
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $18 = $9;
 $19 = $10;
 HEAP16[$$byval_copy >> 1] = HEAP16[$2 >> 1] | 0;
 HEAP16[$$byval_copy + 2 >> 1] = HEAP16[$2 + 2 >> 1] | 0;
 HEAP16[$$byval_copy + 4 >> 1] = HEAP16[$2 + 4 >> 1] | 0;
 HEAP16[$$byval_copy + 6 >> 1] = HEAP16[$2 + 6 >> 1] | 0;
 $20 = _touchIsPointInRect($18, $19, $$byval_copy) | 0;
 $21 = $20 << 24 >> 24 != 0;
 if ($21) {
  $22 = $10;
  $23 = $22 << 16 >> 16;
  $24 = $2 + 2 | 0;
  $25 = HEAPU8[$24 >> 0] | HEAPU8[$24 + 1 >> 0] << 8;
  $26 = $25 << 16 >> 16;
  $27 = $23 - $26 | 0;
  $28 = $11;
  $29 = $28 << 16 >> 16;
  $30 = $27 - $29 | 0;
  $31 = $30 & 65535;
  $16 = $31;
  $32 = $13;
  $33 = $32 & 65535;
  $34 = $16;
  $35 = $34 & 65535;
  $36 = $15;
  $37 = $36 & 65535;
  $38 = ($35 | 0) / ($37 | 0) & -1;
  $39 = $33 + $38 | 0;
  $40 = $39 & 65535;
  $17 = $40;
  $41 = $17;
  $42 = $41 & 65535;
  $43 = $14;
  $44 = $43 & 65535;
  $45 = ($42 | 0) < ($44 | 0);
  $46 = $17;
  $47 = $46 & 65535;
  $48 = $45 ? $47 : -1;
  $49 = $48 & 65535;
  $8 = $49;
  $50 = $8;
  STACKTOP = sp;
  return $50 | 0;
 } else {
  $8 = -2;
  $50 = $8;
  STACKTOP = sp;
  return $50 | 0;
 }
 return 0 | 0;
}

function _ResItemGetN($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 18 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = _GetResStartAddr($13) | 0;
 $10 = $14;
 $15 = $10;
 $16 = ($15 | 0) == 0;
 if ($16) {
  $4 = 1;
  $48 = $4;
  STACKTOP = sp;
  return $48 | 0;
 }
 $17 = $10;
 $18 = $6;
 _GetResItem($17, $18, $12, $11) | 0;
 $19 = HEAPU8[$11 >> 0] | HEAPU8[$11 + 1 >> 0] << 8 | HEAPU8[$11 + 2 >> 0] << 16 | HEAPU8[$11 + 3 >> 0] << 24;
 $20 = $10;
 $21 = $20 + $19 | 0;
 $10 = $21;
 $22 = $11 + 4 | 0;
 $23 = HEAPU8[$22 >> 0] | HEAPU8[$22 + 1 >> 0] << 8 | HEAPU8[$22 + 2 >> 0] << 16 | HEAPU8[$22 + 3 >> 0] << 24;
 $24 = $23 & 65535;
 $9 = $24;
 $25 = $9;
 $26 = $25 & 65535;
 $27 = ($26 | 0) == 0;
 if ($27) {
  $4 = 2;
  $48 = $4;
  STACKTOP = sp;
  return $48 | 0;
 }
 $28 = HEAP32[44295] | 0;
 $29 = $10;
 _gam_fseek($28, $29, 0) | 0;
 $30 = $7;
 $31 = $9;
 $32 = $31 & 65535;
 $33 = $8;
 $34 = $32 >>> 0 > $33 >>> 0;
 $35 = $8;
 $36 = $9;
 $37 = $36 & 65535;
 $38 = $34 ? $35 : $37;
 $39 = $38 & 65535;
 $40 = HEAP32[44295] | 0;
 _gam_fread($30, 1, $39, $40) | 0;
 $41 = $12 + 12 | 0;
 $42 = HEAP8[$41 >> 0] | 0;
 $43 = $42 << 24 >> 24 != 0;
 if ($43) {
  $44 = $7;
  $45 = $12 + 12 | 0;
  $46 = HEAP8[$45 >> 0] | 0;
  $47 = $9;
  _ExpDataWithKey($44, $46, $47);
 }
 $4 = 0;
 $48 = $4;
 STACKTOP = sp;
 return $48 | 0;
}

function _GamAscii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $8 = sp + 8 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = $9 & 255;
 $11 = ($10 | 0) <= 32;
 L1 : do {
  if ($11) {
   dest = $8;
   stop = dest + 24 | 0;
   do {
    HEAP8[dest >> 0] = 0 | 0;
    dest = dest + 1 | 0;
   } while ((dest | 0) < (stop | 0));
  } else {
   $6 = 164;
   $12 = $6;
   $13 = $12 & 65535;
   $14 = $13 << 8;
   $15 = $14 & 65535;
   $6 = $15;
   $16 = $5;
   $17 = $16 & 255;
   $18 = $17 - 33 | 0;
   $19 = $18 + 161 | 0;
   $20 = $6;
   $21 = $20 & 65535;
   $22 = $21 + $19 | 0;
   $23 = $22 & 65535;
   $6 = $23;
   $24 = $6;
   _GetExcHZMCode($24, $8);
   $7 = 0;
   while (1) {
    $25 = $7;
    $26 = $25 & 255;
    $27 = ($26 | 0) < 12;
    if (!$27) {
     break L1;
    }
    $28 = $7;
    $29 = $28 & 255;
    $30 = $29 << 1;
    $31 = $8 + $30 | 0;
    $32 = HEAP8[$31 >> 0] | 0;
    $33 = $7;
    $34 = $33 & 255;
    $35 = $8 + $34 | 0;
    HEAP8[$35 >> 0] = $32;
    $36 = $7;
    $37 = $36 + 1 << 24 >> 24;
    $7 = $37;
   }
  }
 } while (0);
 $38 = $3;
 $39 = $4;
 $40 = $3;
 $41 = $40 << 16 >> 16;
 $42 = $41 + 6 | 0;
 $43 = $42 - 1 | 0;
 $44 = $43 & 65535;
 $45 = $4;
 $46 = $45 << 16 >> 16;
 $47 = $46 + 12 | 0;
 $48 = $47 - 1 | 0;
 $49 = $48 & 65535;
 _SysPicture($38, $39, $44, $49, $8, 0, 2);
 STACKTOP = sp;
 return;
}

function _FgtGetNearGen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 7 | 0;
 $3 = sp + 6 | 0;
 $4 = -1;
 $5 = -1;
 _FgtGetAimPos($2, $3);
 $0 = 10;
 while (1) {
  $7 = $0;
  $8 = $7 & 255;
  $9 = ($8 | 0) < 20;
  if (!$9) {
   break;
  }
  $10 = $0;
  $11 = $10 & 255;
  $12 = 186129 + ($11 * 7 | 0) | 0;
  $6 = $12;
  $13 = $6;
  $14 = $13 + 6 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  $1 = $15;
  $16 = $1;
  $17 = $16 & 255;
  $18 = 8 == ($17 | 0);
  if (!$18) {
   $19 = $1;
   $20 = $19 & 255;
   $21 = 1 == ($20 | 0);
   if (!$21) {
    $22 = $1;
    $23 = $22 & 255;
    $24 = 6 == ($23 | 0);
    if (!$24) {
     $25 = $6;
     $26 = $25 + 5 | 0;
     $27 = HEAP8[$26 >> 0] | 0;
     $28 = $27 & 255;
     $29 = 1 == ($28 | 0);
     if (!$29) {
      $30 = $6;
      $31 = HEAP8[$30 >> 0] | 0;
      $32 = $6;
      $33 = $32 + 1 | 0;
      $34 = HEAP8[$33 >> 0] | 0;
      $35 = HEAP8[$2 >> 0] | 0;
      $36 = HEAP8[$3 >> 0] | 0;
      $37 = _FgtCntInterval($31, $34, $35, $36) | 0;
      $1 = $37;
      $38 = $4;
      $39 = $38 & 255;
      $40 = $1;
      $41 = $40 & 255;
      $42 = ($39 | 0) > ($41 | 0);
      if ($42) {
       $43 = $1;
       $4 = $43;
       $44 = $0;
       $5 = $44;
      }
     }
    }
   }
  }
  $45 = $0;
  $46 = $45 & 255;
  $47 = $46 + 1 | 0;
  $48 = $47 & 255;
  $0 = $48;
 }
 $49 = $5;
 STACKTOP = sp;
 return $49 | 0;
}

function _GamRevCity($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while (1) {
  $9 = $6;
  $10 = $9 & 255;
  $11 = $3;
  $12 = $11 & 255;
  $13 = ($10 | 0) < ($12 | 0);
  if (!$13) {
   break;
  }
  $14 = $4;
  $15 = $6;
  $16 = $15 & 255;
  $17 = $14 + $16 | 0;
  $18 = HEAP8[$17 >> 0] | 0;
  $19 = $18 & 255;
  $20 = $19 << 1;
  $21 = $20 & 255;
  $7 = $21;
  $22 = $5;
  $23 = $7;
  $24 = $23 & 255;
  $25 = $24 + 1 | 0;
  $26 = $22 + $25 | 0;
  $27 = HEAP8[$26 >> 0] | 0;
  $28 = $27 & 255;
  $29 = $28 * 7 | 0;
  $30 = $29 + 0 | 0;
  $31 = $30 + 20 | 0;
  $32 = $31 + 3 | 0;
  $33 = $32 & 255;
  $8 = $33;
  $34 = $5;
  $35 = $7;
  $36 = $35 & 255;
  $37 = $34 + $36 | 0;
  $38 = HEAP8[$37 >> 0] | 0;
  $39 = $38 & 255;
  $40 = $39 * 7 | 0;
  $41 = $40 + 0 | 0;
  $42 = $41 + 60 | 0;
  $43 = $42 + 3 | 0;
  $44 = $43 & 255;
  $7 = $44;
  $45 = $7;
  $46 = $45 & 255;
  $47 = $8;
  $48 = $47 & 255;
  $49 = $7;
  $50 = $49 & 255;
  $51 = $50 + 1 | 0;
  $52 = $51 & 65535;
  $53 = $8;
  $54 = $53 & 255;
  $55 = $54 + 1 | 0;
  $56 = $55 & 65535;
  _gam_revlcd($46, $48, $52, $56);
  $57 = $6;
  $58 = $57 & 255;
  $59 = $58 + 1 | 0;
  $60 = $59 & 255;
  $6 = $60;
 }
 STACKTOP = sp;
 return;
}

function _FgtCheckIdx() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = 0;
 while (1) {
  $4 = $1;
  $5 = $4 & 255;
  $6 = ($5 | 0) < 10;
  if (!$6) {
   label = 13;
   break;
  }
  $7 = $1;
  $8 = $7 & 255;
  $9 = 186129 + ($8 * 7 | 0) | 0;
  $3 = $9;
  $10 = $3;
  $11 = $10 + 6 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $2 = $12;
  $13 = $2;
  $14 = $13 & 255;
  $15 = 8 == ($14 | 0);
  if (!$15) {
   $16 = $3;
   $17 = HEAP8[$16 >> 0] | 0;
   $18 = $17 & 255;
   $19 = HEAP8[186061] | 0;
   $20 = $19 & 255;
   $21 = ($18 | 0) != ($20 | 0);
   if (!$21) {
    $22 = $3;
    $23 = $22 + 1 | 0;
    $24 = HEAP8[$23 >> 0] | 0;
    $25 = $24 & 255;
    $26 = HEAP8[186062] | 0;
    $27 = $26 & 255;
    $28 = ($25 | 0) != ($27 | 0);
    if (!$28) {
     break;
    }
   }
  }
  $41 = $1;
  $42 = $41 & 255;
  $43 = $42 + 1 | 0;
  $44 = $43 & 255;
  $1 = $44;
 }
 if ((label | 0) == 13) {
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;
  return $45 | 0;
 }
 $29 = $3;
 $30 = $29 + 5 | 0;
 $31 = HEAP8[$30 >> 0] | 0;
 $32 = $31 & 255;
 $33 = 0 != ($32 | 0);
 if ($33) {
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;
  return $45 | 0;
 }
 $34 = $2;
 $35 = $34 & 255;
 $36 = 1 == ($35 | 0);
 if (!$36) {
  $37 = $2;
  $38 = $37 & 255;
  $39 = 6 == ($38 | 0);
  if (!$39) {
   $40 = $1;
   $0 = $40;
   $45 = $0;
   STACKTOP = sp;
   return $45 | 0;
  }
 }
 $0 = -1;
 $45 = $0;
 STACKTOP = sp;
 return $45 | 0;
}

function _SetGoods($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $6 & 255;
 $8 = 224276 + ($7 * 37 | 0) | 0;
 $9 = $8 + 33 | 0;
 $10 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8;
 $11 = $10 & 65535;
 $5 = $11;
 $12 = $5;
 $13 = $2;
 $14 = $13 & 255;
 $15 = 224276 + ($14 * 37 | 0) | 0;
 $16 = $15 + 35 | 0;
 $17 = HEAPU8[$16 >> 0] | HEAPU8[$16 + 1 >> 0] << 8;
 $18 = $17 & 65535;
 $19 = $12 + $18 | 0;
 $4 = $19;
 while (1) {
  $20 = $5;
  $21 = $4;
  $22 = $20 >>> 0 < $21 >>> 0;
  if (!$22) {
   label = 7;
   break;
  }
  $23 = $5;
  $24 = 237748 + ($23 << 1) | 0;
  $25 = HEAPU8[$24 >> 0] | HEAPU8[$24 + 1 >> 0] << 8;
  $26 = $25 & 65535;
  $27 = $26 & 32767;
  $28 = $3;
  $29 = $28 & 65535;
  $30 = ($27 | 0) == ($29 | 0);
  if ($30) {
   $31 = $5;
   $32 = 237748 + ($31 << 1) | 0;
   $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8;
   $34 = $33 & 65535;
   $35 = $34 & 32768;
   $36 = ($35 | 0) != 0;
   if (!$36) {
    break;
   }
  }
  $43 = $5;
  $44 = $43 + 1 | 0;
  $5 = $44;
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return;
 }
 $37 = $5;
 $38 = 237748 + ($37 << 1) | 0;
 $39 = HEAPU8[$38 >> 0] | HEAPU8[$38 + 1 >> 0] << 8;
 $40 = $39 & 65535;
 $41 = $40 | 32768;
 $42 = $41 & 65535;
 HEAP8[$38 >> 0] = $42 & 255;
 HEAP8[$38 + 1 >> 0] = $42 >> 8;
 STACKTOP = sp;
 return;
}

function _GetCityPersons($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while (1) {
  $7 = $4;
  $8 = $2;
  $9 = $8 & 255;
  $10 = 224276 + ($9 * 37 | 0) | 0;
  $11 = $10 + 31 | 0;
  $12 = HEAPU8[$11 >> 0] | HEAPU8[$11 + 1 >> 0] << 8;
  $13 = $12 & 65535;
  $14 = $7 >>> 0 < $13 >>> 0;
  if (!$14) {
   break;
  }
  $15 = $2;
  $16 = $15 & 255;
  $17 = 224276 + ($16 * 37 | 0) | 0;
  $18 = $17 + 29 | 0;
  $19 = HEAPU8[$18 >> 0] | HEAPU8[$18 + 1 >> 0] << 8;
  $20 = $19 & 65535;
  $21 = $4;
  $22 = $20 + $21 | 0;
  $23 = 233748 + ($22 << 1) | 0;
  $24 = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8;
  $6 = $24;
  $25 = $6;
  $26 = $25 & 65535;
  $27 = 186276 + ($26 * 19 | 0) | 0;
  $28 = $27 + 2 | 0;
  $29 = HEAPU8[$28 >> 0] | HEAPU8[$28 + 1 >> 0] << 8;
  $30 = $29 & 65535;
  $31 = $2;
  $32 = $31 & 255;
  $33 = 224276 + ($32 * 37 | 0) | 0;
  $34 = $33 + 1 | 0;
  $35 = HEAPU8[$34 >> 0] | HEAPU8[$34 + 1 >> 0] << 8;
  $36 = $35 & 65535;
  $37 = ($30 | 0) == ($36 | 0);
  if ($37) {
   $38 = $6;
   $39 = $3;
   $40 = $5;
   $41 = $39 + ($40 << 1) | 0;
   HEAP8[$41 >> 0] = $38 & 255;
   HEAP8[$41 + 1 >> 0] = $38 >> 8;
   $42 = $5;
   $43 = $42 + 1 | 0;
   $5 = $43;
  }
  $44 = $4;
  $45 = $44 + 1 | 0;
  $4 = $45;
 }
 $46 = $5;
 STACKTOP = sp;
 return $46 | 0;
}

function _FgtShowCursor() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $0 = sp + 16 | 0;
 $3 = HEAP8[186063] | 0;
 $4 = $3 & 255;
 $5 = HEAP8[186064] | 0;
 $6 = $5 & 255;
 $7 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $8 = $7 & 65535;
 $9 = ($8 | 0) / 16 & -1;
 $10 = $9 & 65535;
 $11 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $12 = $11 & 65535;
 $13 = ($12 | 0) / 16 & -1;
 $14 = $13 - 1 | 0;
 $15 = $14 & 65535;
 _MakeRect($0, $4, $6, $10, $15);
 $16 = HEAP8[186061] | 0;
 $17 = $16 & 255;
 $18 = HEAP8[186062] | 0;
 $19 = $18 & 255;
 HEAP16[$$byval_copy >> 1] = HEAP16[$0 >> 1] | 0;
 HEAP16[$$byval_copy + 2 >> 1] = HEAP16[$0 + 2 >> 1] | 0;
 HEAP16[$$byval_copy + 4 >> 1] = HEAP16[$0 + 4 >> 1] | 0;
 HEAP16[$$byval_copy + 6 >> 1] = HEAP16[$0 + 6 >> 1] | 0;
 $20 = _touchIsPointInRect($17, $19, $$byval_copy) | 0;
 $21 = $20 << 24 >> 24 != 0;
 if (!$21) {
  STACKTOP = sp;
  return;
 }
 $22 = HEAP8[186061] | 0;
 $23 = $22 & 255;
 $24 = HEAP8[186063] | 0;
 $25 = $24 & 255;
 $26 = $23 - $25 | 0;
 $27 = $26 << 4;
 $28 = $27 + 0 | 0;
 $29 = $28 & 255;
 $1 = $29;
 $30 = HEAP8[186062] | 0;
 $31 = $30 & 255;
 $32 = HEAP8[186064] | 0;
 $33 = $32 & 255;
 $34 = $31 - $33 | 0;
 $35 = $34 << 4;
 $36 = $35 + 0 | 0;
 $37 = $36 & 255;
 $2 = $37;
 $38 = $1;
 $39 = $2;
 _FgtRPicShowV(7, 5, $38, $39);
 STACKTOP = sp;
 return;
}

function _sav_fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $7;
 $8 = $11;
 $12 = $5;
 $13 = $6;
 $14 = $13 & 65535;
 $15 = Math_imul($12, $14) | 0;
 $9 = $15;
 $16 = $8;
 $17 = $16 + 20 | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 $19 = $9;
 $20 = $18 + $19 | 0;
 $21 = $8;
 $22 = $21 + 36 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $20 >>> 0 > $23 >>> 0;
 if ($24) {
  $25 = $8;
  $26 = $25 + 20 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $28 = $9;
  $29 = $27 + $28 | 0;
  $30 = $29 + 1024 | 0;
  $10 = $30;
  $31 = $8;
  $32 = $31 + 28 | 0;
  $33 = HEAP32[$32 >> 2] | 0;
  $34 = $10;
  $35 = _realloc($33, $34) | 0;
  $36 = $8;
  $37 = $36 + 28 | 0;
  HEAP32[$37 >> 2] = $35;
  $38 = $10;
  $39 = $8;
  $40 = $39 + 36 | 0;
  HEAP32[$40 >> 2] = $38;
 }
 $41 = $8;
 $42 = $41 + 28 | 0;
 $43 = HEAP32[$42 >> 2] | 0;
 $44 = $8;
 $45 = $44 + 20 | 0;
 $46 = HEAP32[$45 >> 2] | 0;
 $47 = $43 + $46 | 0;
 $48 = $4;
 $49 = $9;
 _memcpy($47 | 0, $48 | 0, $49 | 0) | 0;
 $50 = $9;
 $51 = $8;
 $52 = $51 + 20 | 0;
 $53 = HEAP32[$52 >> 2] | 0;
 $54 = $53 + $50 | 0;
 HEAP32[$52 >> 2] = $54;
 $55 = $6;
 $56 = $55 & 65535;
 STACKTOP = sp;
 return $56 | 0;
}

function _FgtResumeMp($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $5 = $1;
 $6 = _TransIdxToGen1($5) | 0;
 $4 = $6;
 $7 = $4;
 $8 = $7 & 65535;
 $9 = 186276 + ($8 * 19 | 0) | 0;
 $3 = $9;
 $10 = $3;
 $11 = $10 + 6 | 0;
 $12 = HEAP8[$11 >> 0] | 0;
 $13 = $12 & 255;
 $14 = $13 & 65535;
 $15 = $14 * 80 | 0;
 $16 = ($15 | 0) / 100 & -1;
 $17 = $3;
 $18 = $17 + 5 | 0;
 $19 = HEAP8[$18 >> 0] | 0;
 $20 = $19 & 255;
 $21 = _PlcExtract($20) | 0;
 $22 = $21 & 255;
 $23 = $22 >> 1;
 $24 = $16 + $23 | 0;
 $25 = $3;
 $26 = $25 + 4 | 0;
 $27 = HEAP8[$26 >> 0] | 0;
 $28 = $27 & 255;
 $29 = $24 + $28 | 0;
 $30 = $3;
 $31 = $30 + 10 | 0;
 $32 = HEAP8[$31 >> 0] | 0;
 $33 = $32 & 255;
 $34 = Math_imul($29, $33) | 0;
 $35 = ($34 | 0) / 100 & -1;
 $36 = $35 & 255;
 $2 = $36;
 $37 = $1;
 $38 = $37 & 255;
 $39 = 186129 + ($38 * 7 | 0) | 0;
 $40 = $39 + 3 | 0;
 $41 = HEAP8[$40 >> 0] | 0;
 $42 = $41 & 255;
 $43 = $2;
 $44 = $43 & 255;
 $45 = ($42 | 0) < ($44 | 0);
 if (!$45) {
  STACKTOP = sp;
  return;
 }
 $46 = $1;
 $47 = $46 & 255;
 $48 = 186129 + ($47 * 7 | 0) | 0;
 $49 = $48 + 3 | 0;
 $50 = HEAP8[$49 >> 0] | 0;
 $51 = $50 & 255;
 $52 = $51 + 1 | 0;
 $53 = $52 & 255;
 HEAP8[$49 >> 0] = $53;
 STACKTOP = sp;
 return;
}

function _FgtGetTerrain($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $8 = HEAP32[44298] | 0;
 $6 = $8;
 $9 = HEAP8[186059] | 0;
 $10 = $9 & 255;
 $11 = $4;
 $12 = $11 & 255;
 $13 = Math_imul($10, $12) | 0;
 $14 = $3;
 $15 = $14 & 255;
 $16 = $13 + $15 | 0;
 $17 = $16 & 65535;
 $7 = $17;
 $18 = $6;
 $19 = $7;
 $20 = $19 & 65535;
 $21 = $18 + $20 | 0;
 $22 = HEAP8[$21 >> 0] | 0;
 $5 = $22;
 $23 = $5;
 $24 = $23 & 255;
 $25 = ($24 | 0) > 15;
 $26 = $5;
 $27 = $26 & 255;
 do {
  if ($25) {
   $28 = ($27 | 0) == 41;
   if ($28) {
    $2 = 6;
    break;
   } else {
    $2 = 7;
    break;
   }
  } else {
   $29 = ($27 | 0) > 5;
   if ($29) {
    $2 = 2;
    break;
   }
   $30 = $5;
   $31 = $30 & 255;
   $32 = ($31 | 0) > 4;
   if ($32) {
    $2 = 3;
    break;
   }
   $33 = $5;
   $34 = $33 & 255;
   $35 = ($34 | 0) > 3;
   if ($35) {
    $2 = 4;
    break;
   }
   $36 = $5;
   $37 = $36 & 255;
   $38 = ($37 | 0) > 2;
   if ($38) {
    $2 = 5;
    break;
   }
   $39 = $5;
   $40 = $39 & 255;
   $41 = ($40 | 0) > 1;
   if ($41) {
    $2 = 0;
    break;
   }
   $42 = $5;
   $43 = $42 & 255;
   $44 = ($43 | 0) > 0;
   if ($44) {
    $2 = 1;
    break;
   } else {
    $2 = -1;
    break;
   }
  }
 } while (0);
 $45 = $2;
 STACKTOP = sp;
 return $45 | 0;
}

function _rom_fread($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $7;
 $8 = $11;
 $12 = $8;
 $13 = $12 + 24 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $8;
 $16 = $15 + 20 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $14 - $17 | 0;
 $9 = $18;
 $19 = $5;
 $20 = $19 & 255;
 $21 = $6;
 $22 = $21 & 65535;
 $23 = Math_imul($20, $22) | 0;
 $24 = $9;
 $25 = $23 >>> 0 < $24 >>> 0;
 if ($25) {
  $26 = $5;
  $27 = $26 & 255;
  $28 = $6;
  $29 = $28 & 65535;
  $30 = Math_imul($27, $29) | 0;
  $32 = $30;
 } else {
  $31 = $9;
  $32 = $31;
 }
 $10 = $32;
 $33 = $10;
 $34 = $33 >>> 0 > 0;
 if (!$34) {
  $49 = $10;
  $50 = $5;
  $51 = $50 & 255;
  $52 = ($49 >>> 0) / ($51 >>> 0) & -1;
  STACKTOP = sp;
  return $52 | 0;
 }
 $35 = $4;
 $36 = $8;
 $37 = $36 + 28 | 0;
 $38 = HEAP32[$37 >> 2] | 0;
 $39 = $8;
 $40 = $39 + 20 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 $42 = $38 + $41 | 0;
 $43 = $10;
 _memcpy($35 | 0, $42 | 0, $43 | 0) | 0;
 $44 = $10;
 $45 = $8;
 $46 = $45 + 20 | 0;
 $47 = HEAP32[$46 >> 2] | 0;
 $48 = $47 + $44 | 0;
 HEAP32[$46 >> 2] = $48;
 $49 = $10;
 $50 = $5;
 $51 = $50 & 255;
 $52 = ($49 >>> 0) / ($51 >>> 0) & -1;
 STACKTOP = sp;
 return $52 | 0;
}

function _ResLoadToMem($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 14 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $4;
 $12 = _GetResStartAddr($11) | 0;
 $8 = $12;
 $13 = $8;
 $14 = ($13 | 0) == 0;
 if ($14) {
  $3 = 1;
  $42 = $3;
  STACKTOP = sp;
  return $42 | 0;
 }
 $15 = $8;
 $16 = $5;
 _GetResItem($15, $16, $10, $9) | 0;
 $17 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8 | HEAPU8[$9 + 2 >> 0] << 16 | HEAPU8[$9 + 3 >> 0] << 24;
 $18 = $8;
 $19 = $18 + $17 | 0;
 $8 = $19;
 $20 = $9 + 4 | 0;
 $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8 | HEAPU8[$20 + 2 >> 0] << 16 | HEAPU8[$20 + 3 >> 0] << 24;
 $22 = $21 & 65535;
 $7 = $22;
 $23 = $7;
 $24 = $23 & 65535;
 $25 = ($24 | 0) == 0;
 if ($25) {
  $3 = 2;
  $42 = $3;
  STACKTOP = sp;
  return $42 | 0;
 }
 $26 = HEAP32[44295] | 0;
 $27 = $8;
 _gam_fseek($26, $27, 0) | 0;
 $28 = $6;
 $29 = $7;
 $30 = HEAP32[44295] | 0;
 _gam_fread($28, 1, $29, $30) | 0;
 $31 = $6;
 $32 = $7;
 $33 = $32 & 65535;
 $34 = $31 + $33 | 0;
 HEAP8[$34 >> 0] = 0;
 $35 = $10 + 12 | 0;
 $36 = HEAP8[$35 >> 0] | 0;
 $37 = $36 << 24 >> 24 != 0;
 if ($37) {
  $38 = $6;
  $39 = $10 + 12 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $41 = $7;
  _ExpDataWithKey($38, $40, $41);
 }
 $3 = 0;
 $42 = $3;
 STACKTOP = sp;
 return $42 | 0;
}

function _sav_fopen_589($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 12 | 0;
 $3 = $0;
 $4 = $1;
 $10 = $4;
 $11 = $10 & 255;
 $12 = ($11 | 0) == 114;
 if (!$12) {
  $31 = $4;
  $32 = $31 & 255;
  $33 = ($32 | 0) == 119;
  if ($33) {
   $34 = _calloc(1, 40) | 0;
   $9 = $34;
   $35 = $9;
   $36 = $3;
   _sav_finit_w($35, $36);
   $37 = $9;
   $2 = $37;
   $38 = $2;
   STACKTOP = sp;
   return $38 | 0;
  } else {
   $2 = 0;
   $38 = $2;
   STACKTOP = sp;
   return $38 | 0;
  }
 }
 $13 = $3;
 $14 = _getValue($13) | 0;
 $5 = $14;
 $15 = $5;
 $16 = ($15 | 0) != (0 | 0);
 if ($16) {
  HEAP8[$6 >> 0] = 0 & 255;
  HEAP8[$6 + 1 >> 0] = 0 >> 8 & 255;
  HEAP8[$6 + 2 >> 0] = 0 >> 16 & 255;
  HEAP8[$6 + 3 >> 0] = 0 >> 24;
  $17 = $5;
  $18 = _hex_decode($17, $6) | 0;
  $7 = $18;
  $19 = $5;
  _free($19);
  $20 = $7;
  $21 = ($20 | 0) != (0 | 0);
  if ($21) {
   $22 = _rom_fnew() | 0;
   $8 = $22;
   $23 = $8;
   HEAP32[$23 >> 2] = 12;
   $24 = $7;
   $25 = $8;
   $26 = $25 + 28 | 0;
   HEAP32[$26 >> 2] = $24;
   $27 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8 | HEAPU8[$6 + 2 >> 0] << 16 | HEAPU8[$6 + 3 >> 0] << 24;
   $28 = $8;
   $29 = $28 + 24 | 0;
   HEAP32[$29 >> 2] = $27;
   $30 = $8;
   $2 = $30;
   $38 = $2;
   STACKTOP = sp;
   return $38 | 0;
  }
 }
 $2 = 0;
 $38 = $2;
 STACKTOP = sp;
 return $38 | 0;
}

function _FgtGetBaseXY($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $5 = HEAP8[186059] | 0;
 $6 = $5 & 255;
 $7 = $6 - 5 | 0;
 $8 = $7 & 255;
 $3 = $8;
 $9 = HEAP8[186060] | 0;
 $10 = $9 & 255;
 $11 = $10 - 5 | 0;
 $12 = $11 & 255;
 $4 = $12;
 $13 = HEAP8[186081 >> 0] | 0;
 $14 = $13 & 255;
 switch ($14 | 0) {
 case 7:
  {
   $3 = 0;
   $4 = 0;
   break;
  }
 case 0:
  {
   $15 = HEAP8[186059] | 0;
   $16 = $15 & 255;
   $17 = $16 >> 1;
   $18 = $17 - 2 | 0;
   $19 = $18 & 255;
   $3 = $19;
   $4 = 0;
   break;
  }
 case 1:
  {
   $4 = 2;
   break;
  }
 case 2:
  {
   $20 = HEAP8[186060] | 0;
   $21 = $20 & 255;
   $22 = $21 >> 1;
   $23 = $22 - 2 | 0;
   $24 = $23 & 255;
   $4 = $24;
   break;
  }
 case 4:
  {
   $25 = HEAP8[186059] | 0;
   $26 = $25 & 255;
   $27 = $26 >> 1;
   $28 = $27 - 2 | 0;
   $29 = $28 & 255;
   $3 = $29;
   break;
  }
 case 5:
  {
   $3 = 2;
   break;
  }
 case 6:
  {
   $3 = 2;
   $30 = HEAP8[186060] | 0;
   $31 = $30 & 255;
   $32 = $31 >> 1;
   $33 = $32 - 2 | 0;
   $34 = $33 & 255;
   $4 = $34;
   break;
  }
 default:
  {}
 }
 $35 = $2;
 $36 = $35 & 255;
 $37 = 120 == ($36 | 0);
 if ($37) {
  $38 = $3;
  $1 = $38;
  $40 = $1;
  STACKTOP = sp;
  return $40 | 0;
 } else {
  $39 = $4;
  $1 = $39;
  $40 = $1;
  STACKTOP = sp;
  return $40 | 0;
 }
 return 0 | 0;
}

function _GetEnemySatraps($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while (1) {
  $8 = $4;
  $9 = HEAP8[5256 >> 0] | 0;
  $10 = $9 & 255;
  $11 = $8 >>> 0 < $10 >>> 0;
  if (!$11) {
   break;
  }
  $12 = $4;
  $13 = 224276 + ($12 * 37 | 0) | 0;
  $14 = $13 + 1 | 0;
  $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
  $16 = $15 & 65535;
  $6 = $16;
  $17 = $6;
  $18 = ($17 | 0) != 0;
  if ($18) {
   $19 = $4;
   $20 = 224276 + ($19 * 37 | 0) | 0;
   $21 = $20 + 3 | 0;
   $22 = HEAPU8[$21 >> 0] | HEAPU8[$21 + 1 >> 0] << 8;
   $23 = $22 & 65535;
   $7 = $23;
   $24 = $7;
   $25 = ($24 | 0) != 0;
   if ($25) {
    $26 = $6;
    $27 = $2;
    $28 = $27 & 65535;
    $29 = $28 + 1 | 0;
    $30 = ($26 | 0) != ($29 | 0);
    if ($30) {
     $31 = $7;
     $32 = $6;
     $33 = ($31 | 0) != ($32 | 0);
     if ($33) {
      $34 = $7;
      $35 = $34 - 1 | 0;
      $36 = $35 & 65535;
      $37 = $3;
      $38 = $5;
      $39 = $37 + ($38 << 1) | 0;
      HEAP8[$39 >> 0] = $36 & 255;
      HEAP8[$39 + 1 >> 0] = $36 >> 8;
      $40 = $5;
      $41 = $40 + 1 | 0;
      $5 = $41;
     }
    }
   }
  }
  $42 = $4;
  $43 = $42 + 1 | 0;
  $4 = $43;
 }
 $44 = $5;
 $45 = $44 & 255;
 STACKTOP = sp;
 return $45 | 0;
}

function _FgtChkAkRng($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $6 = HEAP32[44301] | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $5 = $7;
 $8 = HEAP32[44301] | 0;
 $9 = $8 + 1 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $11 = $10 & 255;
 $12 = $3;
 $13 = $12 & 255;
 $14 = $13 - $11 | 0;
 $15 = $14 & 255;
 $3 = $15;
 $16 = HEAP32[44301] | 0;
 $17 = $16 + 2 | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $19 = $18 & 255;
 $20 = $4;
 $21 = $20 & 255;
 $22 = $21 - $19 | 0;
 $23 = $22 & 255;
 $4 = $23;
 $24 = $4;
 $25 = $24 & 255;
 $26 = $5;
 $27 = $26 & 255;
 $28 = ($25 | 0) >= ($27 | 0);
 if (!$28) {
  $29 = $3;
  $30 = $29 & 255;
  $31 = $5;
  $32 = $31 & 255;
  $33 = ($30 | 0) >= ($32 | 0);
  if (!$33) {
   $34 = HEAP32[44301] | 0;
   $35 = $4;
   $36 = $35 & 255;
   $37 = $36 & 65535;
   $38 = $5;
   $39 = $38 & 255;
   $40 = Math_imul($37, $39) | 0;
   $41 = $3;
   $42 = $41 & 255;
   $43 = $40 + $42 | 0;
   $44 = $43 + 3 | 0;
   $45 = $34 + $44 | 0;
   $46 = HEAP8[$45 >> 0] | 0;
   $47 = $46 & 255;
   $48 = ($47 | 0) == 1;
   $49 = $48 & 1;
   $50 = $49 & 255;
   $2 = $50;
   $51 = $2;
   STACKTOP = sp;
   return $51 | 0;
  }
 }
 $2 = 0;
 $51 = $2;
 STACKTOP = sp;
 return $51 | 0;
}

function __rdot($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $7 << 16 >> 16;
 $9 = $8 << 1;
 $10 = $9 & 65535;
 $2 = $10;
 $11 = $3;
 $12 = $11 << 16 >> 16;
 $13 = $12 << 1;
 $14 = $13 & 65535;
 $3 = $14;
 $4 = 0;
 while (1) {
  $15 = $4;
  $16 = ($15 | 0) < 2;
  if (!$16) {
   break;
  }
  $5 = 0;
  while (1) {
   $17 = $5;
   $18 = ($17 | 0) < 2;
   if (!$18) {
    break;
   }
   $19 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
   $20 = $19 & 65535;
   $21 = $20 + 7 | 0;
   $22 = ($21 | 0) / 8 & -1;
   $23 = $22 << 3;
   $24 = $23 << 1;
   $25 = $3;
   $26 = $25 << 16 >> 16;
   $27 = $4;
   $28 = $26 + $27 | 0;
   $29 = Math_imul($24, $28) | 0;
   $30 = $2;
   $31 = $30 << 16 >> 16;
   $32 = $5;
   $33 = $31 + $32 | 0;
   $34 = $29 + $33 | 0;
   $6 = $34;
   $35 = HEAP32[503] | 0;
   $36 = $6;
   $37 = $35 + $36 | 0;
   $38 = HEAP8[$37 >> 0] | 0;
   $39 = $38 << 24 >> 24 != 0;
   $40 = $39 ^ 1;
   $41 = $40 & 1;
   $42 = $41 & 255;
   $43 = HEAP32[503] | 0;
   $44 = $6;
   $45 = $43 + $44 | 0;
   HEAP8[$45 >> 0] = $42;
   $46 = $5;
   $47 = $46 + 1 | 0;
   $5 = $47;
  }
  $48 = $4;
  $49 = $48 + 1 | 0;
  $4 = $49;
 }
 STACKTOP = sp;
 return;
}

function _FgtGenPIdx($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $6 = $1;
 $7 = $6 & 255;
 $8 = 186129 + ($7 * 7 | 0) | 0;
 $4 = $8;
 $9 = $1;
 $10 = _TransIdxToGen1($9) | 0;
 $5 = $10;
 $11 = $4;
 $12 = $11 + 6 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $3 = $13;
 $14 = $3;
 $15 = $14 & 255;
 $16 = ($15 | 0) == 6;
 do {
  if ($16) {
   label = 3;
  } else {
   $17 = $3;
   $18 = $17 & 255;
   $19 = ($18 | 0) == 1;
   if ($19) {
    label = 3;
   } else {
    $20 = $4;
    $21 = HEAP8[$20 >> 0] | 0;
    $22 = $4;
    $23 = $22 + 1 | 0;
    $24 = HEAP8[$23 >> 0] | 0;
    $25 = _FgtGetTerrain($21, $24) | 0;
    $26 = $25 & 255;
    $27 = ($26 | 0) == 7;
    if ($27) {
     $2 = 12;
     break;
    } else {
     $28 = $5;
     $29 = $28 & 65535;
     $30 = 186276 + ($29 * 19 | 0) | 0;
     $31 = _GetArmType($30) | 0;
     $2 = $31;
     $32 = $2;
     $33 = $32 & 255;
     $34 = $33 << 1;
     $35 = $34 & 255;
     $2 = $35;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $2 = 14;
 }
 $36 = $1;
 $37 = $36 & 255;
 $38 = ($37 | 0) > 9;
 if (!$38) {
  $43 = $2;
  STACKTOP = sp;
  return $43 | 0;
 }
 $39 = $2;
 $40 = $39 & 255;
 $41 = $40 + 16 | 0;
 $42 = $41 & 255;
 $2 = $42;
 $43 = $2;
 STACKTOP = sp;
 return $43 | 0;
}

function _FgtMapUnitShow($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = $7 & 255;
 $9 = HEAP8[186064] | 0;
 $10 = $9 & 255;
 $11 = $8 - $10 | 0;
 $12 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $13 = $12 & 65535;
 $14 = ($13 | 0) / 16 & -1;
 $15 = Math_imul($11, $14) | 0;
 $16 = $3;
 $17 = $16 & 255;
 $18 = $15 + $17 | 0;
 $19 = HEAP8[186063] | 0;
 $20 = $19 & 255;
 $21 = $18 - $20 | 0;
 $22 = $21 & 255;
 $6 = $22;
 $23 = $3;
 $24 = $23 & 255;
 $25 = HEAP8[186063] | 0;
 $26 = $25 & 255;
 $27 = $24 - $26 | 0;
 $28 = $27 << 4;
 $29 = $28 + 0 | 0;
 $30 = $29 & 255;
 $3 = $30;
 $31 = $4;
 $32 = $31 & 255;
 $33 = HEAP8[186064] | 0;
 $34 = $33 & 255;
 $35 = $32 - $34 | 0;
 $36 = $35 << 4;
 $37 = $36 + 0 | 0;
 $38 = $37 & 255;
 $4 = $38;
 $39 = HEAPU8[186055 >> 0] | HEAPU8[186055 + 1 >> 0] << 8;
 $40 = HEAP32[44299] | 0;
 $41 = $6;
 $42 = $41 & 255;
 $43 = $40 + $42 | 0;
 $44 = HEAP8[$43 >> 0] | 0;
 $45 = $44 & 255;
 $46 = $45 + 1 | 0;
 $47 = $46 & 65535;
 $48 = $3;
 $49 = $48 & 255;
 $50 = $4;
 $51 = $50 & 255;
 $52 = $5;
 _PlcRPicShowEx($39, 0, $47, $49, $51, $52);
 STACKTOP = sp;
 return;
}

function _GetCityOutPersons($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while (1) {
  $7 = $4;
  $8 = $7 & 255;
  $9 = $2;
  $10 = $9 & 255;
  $11 = 224276 + ($10 * 37 | 0) | 0;
  $12 = $11 + 31 | 0;
  $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
  $14 = $13 & 65535;
  $15 = ($8 | 0) < ($14 | 0);
  if (!$15) {
   break;
  }
  $16 = $2;
  $17 = $16 & 255;
  $18 = 224276 + ($17 * 37 | 0) | 0;
  $19 = $18 + 29 | 0;
  $20 = HEAPU8[$19 >> 0] | HEAPU8[$19 + 1 >> 0] << 8;
  $21 = $20 & 65535;
  $22 = $4;
  $23 = $22 & 255;
  $24 = $21 + $23 | 0;
  $25 = 233748 + ($24 << 1) | 0;
  $26 = HEAPU8[$25 >> 0] | HEAPU8[$25 + 1 >> 0] << 8;
  $6 = $26;
  $27 = $6;
  $28 = $27 & 65535;
  $29 = 186276 + ($28 * 19 | 0) | 0;
  $30 = $29 + 2 | 0;
  $31 = HEAPU8[$30 >> 0] | HEAPU8[$30 + 1 >> 0] << 8;
  $32 = $31 << 16 >> 16 != 0;
  if (!$32) {
   $33 = $6;
   $34 = $3;
   $35 = $5;
   $36 = $35 & 255;
   $37 = $34 + ($36 << 1) | 0;
   HEAP8[$37 >> 0] = $33 & 255;
   HEAP8[$37 + 1 >> 0] = $33 >> 8;
   $38 = $5;
   $39 = $38 & 255;
   $40 = $39 + 1 | 0;
   $41 = $40 & 255;
   $5 = $41;
  }
  $42 = $4;
  $43 = $42 + 1 << 24 >> 24;
  $4 = $43;
 }
 $44 = $5;
 STACKTOP = sp;
 return $44 | 0;
}

function _CountInitGen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = 0;
 $0 = 0;
 while (1) {
  $2 = $0;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 20;
  if (!$4) {
   label = 10;
   break;
  }
  $5 = $0;
  $6 = $5 & 255;
  $7 = ($6 | 0) % 10 & -1;
  $8 = ($7 | 0) != 0;
  if (!$8) {
   $1 = 0;
  }
  $9 = $0;
  $10 = $9 & 255;
  $11 = 186129 + ($10 * 7 | 0) | 0;
  $12 = $11 + 6 | 0;
  HEAP8[$12 >> 0] = 0;
  $13 = $0;
  $14 = $13 & 255;
  $15 = 186088 + ($14 << 1) | 0;
  $16 = HEAPU8[$15 >> 0] | HEAPU8[$15 + 1 >> 0] << 8;
  $17 = $16 & 65535;
  $18 = ($17 | 0) == 0;
  if ($18) {
   $19 = $1;
   $20 = $19 & 255;
   $21 = $20 + 1 | 0;
   $22 = $21 & 255;
   $1 = $22;
   $23 = $0;
   $24 = $23 & 255;
   $25 = 186129 + ($24 * 7 | 0) | 0;
   $26 = $25 + 6 | 0;
   HEAP8[$26 >> 0] = 8;
   $27 = $1;
   $28 = $27 & 255;
   $29 = ($28 | 0) == 10;
   if ($29) {
    break;
   }
  } else {
   $35 = $0;
   _CountBaseAttr($35);
  }
  $36 = $0;
  $37 = $36 & 255;
  $38 = $37 + 1 | 0;
  $39 = $38 & 255;
  $0 = $39;
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return;
 }
 _printf(173605, $vararg_buffer) | 0;
 $30 = $0;
 $31 = $30 & 255;
 $32 = ($31 | 0) / 10 & -1;
 $33 = 2 - $32 | 0;
 $34 = $33 & 255;
 HEAP8[186073] = $34;
 STACKTOP = sp;
 return;
}

function _GamVarInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP8[186054] = 0;
 $1 = HEAP32[44324] | 0;
 dest = $1;
 stop = dest + 30 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = HEAP32[44326] | 0;
 _memset($2 | 0, -1, 2800) | 0;
 $3 = _calloc(1, 256) | 0;
 HEAP32[44299] = $3;
 $4 = HEAP32[44299] | 0;
 $5 = (0 | 0) == ($4 | 0);
 if ($5) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;
  return $17 | 0;
 }
 $6 = _calloc(1, 65536) | 0;
 HEAP32[44298] = $6;
 $7 = _calloc(1, 250) | 0;
 HEAP32[44300] = $7;
 $8 = HEAP32[44300] | 0;
 $9 = (0 | 0) == ($8 | 0);
 if ($9) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;
  return $17 | 0;
 }
 $10 = _calloc(1, 230) | 0;
 HEAP32[44301] = $10;
 $11 = HEAP32[44301] | 0;
 $12 = (0 | 0) == ($11 | 0);
 if ($12) {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;
  return $17 | 0;
 }
 HEAP32[44314] = 0;
 HEAP32[44315] = 0;
 HEAP8[186270 >> 0] = 0 & 255;
 HEAP8[186270 + 1 >> 0] = 0 >> 8;
 HEAP8[241748] = 0;
 HEAP8[241749 >> 0] = 0;
 HEAP8[241750 >> 0] = 0;
 HEAP8[241751 >> 0] = 0;
 HEAP8[186272 >> 0] = 0 & 255;
 HEAP8[186272 + 1 >> 0] = 0 >> 8;
 HEAP8[186274] = 1;
 HEAP8[186077] = 1;
 HEAP8[186078] = 1;
 HEAP8[186079] = 1;
 $13 = _ResLoadStringWithId(77) | 0;
 $14 = ($13 | 0) != (0 | 0);
 if ($14) {
  HEAP8[5160 >> 0] = 1;
 }
 $15 = HEAP8[5160 >> 0] | 0;
 $16 = $15 << 24 >> 24 != 0;
 if ($16) {
  _script_init();
 }
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;
 return $17 | 0;
}

function _FgtChkRng() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = HEAP32[44301] | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $3 = $5;
 $6 = HEAP8[186061] | 0;
 $7 = $6 & 255;
 $8 = HEAP32[44301] | 0;
 $9 = $8 + 1 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $11 = $10 & 255;
 $12 = $7 - $11 | 0;
 $13 = $12 & 255;
 $1 = $13;
 $14 = HEAP8[186062] | 0;
 $15 = $14 & 255;
 $16 = HEAP32[44301] | 0;
 $17 = $16 + 2 | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $19 = $18 & 255;
 $20 = $15 - $19 | 0;
 $21 = $20 & 255;
 $2 = $21;
 $22 = $2;
 $23 = $22 & 255;
 $24 = $3;
 $25 = $24 & 255;
 $26 = ($23 | 0) >= ($25 | 0);
 if (!$26) {
  $27 = $1;
  $28 = $27 & 255;
  $29 = $3;
  $30 = $29 & 255;
  $31 = ($28 | 0) >= ($30 | 0);
  if (!$31) {
   $32 = HEAP32[44301] | 0;
   $33 = $2;
   $34 = $33 & 255;
   $35 = $34 & 65535;
   $36 = $3;
   $37 = $36 & 255;
   $38 = Math_imul($35, $37) | 0;
   $39 = $1;
   $40 = $39 & 255;
   $41 = $38 + $40 | 0;
   $42 = $41 + 3 | 0;
   $43 = $32 + $42 | 0;
   $44 = HEAP8[$43 >> 0] | 0;
   $45 = $44 & 255;
   $46 = ($45 | 0) == 1;
   $47 = $46 & 1;
   $48 = $47 & 255;
   $0 = $48;
   $49 = $0;
   STACKTOP = sp;
   return $49 | 0;
  }
 }
 $0 = 0;
 $49 = $0;
 STACKTOP = sp;
 return $49 | 0;
}

function _CountProvUse() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = 3;
 $4 = HEAPU8[5179 >> 0] | HEAPU8[5179 + 1 >> 0] << 8;
 $5 = $4 << 16 >> 16 != 0;
 if ($5) {
  $6 = HEAPU8[5179 >> 0] | HEAPU8[5179 + 1 >> 0] << 8;
  $7 = $6 & 255;
  $3 = $7;
 }
 $0 = 0;
 while (1) {
  $8 = $0;
  $9 = $8 & 255;
  $10 = ($9 | 0) < 2;
  if (!$10) {
   break;
  }
  $11 = $0;
  $12 = _FgtAllArms($11) | 0;
  $1 = $12;
  $13 = $1;
  $14 = _PlcExtract($13) | 0;
  $15 = $14 & 255;
  $16 = $3;
  $17 = $16 & 255;
  $18 = ($15 | 0) / ($17 | 0) & -1;
  $19 = $18 & 65535;
  $1 = $19;
  $20 = $0;
  $21 = $20 << 24 >> 24 != 0;
  if ($21) {
   $2 = 186086;
  } else {
   $2 = 186084;
  }
  $22 = $1;
  $23 = $22 & 65535;
  $24 = $2;
  $25 = HEAPU8[$24 >> 0] | HEAPU8[$24 + 1 >> 0] << 8;
  $26 = $25 & 65535;
  $27 = ($23 | 0) > ($26 | 0);
  if ($27) {
   $28 = $2;
   HEAP8[$28 >> 0] = 0 & 255;
   HEAP8[$28 + 1 >> 0] = 0 >> 8;
  } else {
   $29 = $1;
   $30 = $29 & 65535;
   $31 = $2;
   $32 = HEAPU8[$31 >> 0] | HEAPU8[$31 + 1 >> 0] << 8;
   $33 = $32 & 65535;
   $34 = $33 - $30 | 0;
   $35 = $34 & 65535;
   HEAP8[$31 >> 0] = $35 & 255;
   HEAP8[$31 + 1 >> 0] = $35 >> 8;
  }
  $36 = $0;
  $37 = $36 & 255;
  $38 = $37 + 1 | 0;
  $39 = $38 & 255;
  $0 = $39;
 }
 STACKTOP = sp;
 return;
}

function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $4 = sp + 124 | 0;
 $5 = sp;
 dest = $5;
 src = 3388;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $6 = $1 + -1 | 0;
 $7 = $6 >>> 0 > 2147483646;
 if ($7) {
  $8 = ($1 | 0) == 0;
  if ($8) {
   $$014 = $4;
   $$015 = 1;
   label = 4;
  } else {
   $9 = ___errno_location() | 0;
   HEAP32[$9 >> 2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;
  $$015 = $1;
  label = 4;
 }
 if ((label | 0) == 4) {
  $10 = $$014;
  $11 = -2 - $10 | 0;
  $12 = $$015 >>> 0 > $11 >>> 0;
  $$$015 = $12 ? $11 : $$015;
  $13 = $5 + 48 | 0;
  HEAP32[$13 >> 2] = $$$015;
  $14 = $5 + 20 | 0;
  HEAP32[$14 >> 2] = $$014;
  $15 = $5 + 44 | 0;
  HEAP32[$15 >> 2] = $$014;
  $16 = $$014 + $$$015 | 0;
  $17 = $5 + 16 | 0;
  HEAP32[$17 >> 2] = $16;
  $18 = $5 + 28 | 0;
  HEAP32[$18 >> 2] = $16;
  $19 = _vfprintf($5, $2, $3) | 0;
  $20 = ($$$015 | 0) == 0;
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14 >> 2] | 0;
   $22 = HEAP32[$17 >> 2] | 0;
   $23 = ($21 | 0) == ($22 | 0);
   $24 = $23 << 31 >> 31;
   $25 = $21 + $24 | 0;
   HEAP8[$25 >> 0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _GetCityPGoods($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $7 = $2;
 $8 = $7 & 255;
 $9 = 224276 + ($8 * 37 | 0) | 0;
 $10 = $9 + 33 | 0;
 $11 = HEAPU8[$10 >> 0] | HEAPU8[$10 + 1 >> 0] << 8;
 $12 = $11 & 65535;
 $5 = $12;
 $4 = 0;
 while (1) {
  $13 = $4;
  $14 = $2;
  $15 = $14 & 255;
  $16 = 224276 + ($15 * 37 | 0) | 0;
  $17 = $16 + 35 | 0;
  $18 = HEAPU8[$17 >> 0] | HEAPU8[$17 + 1 >> 0] << 8;
  $19 = $18 & 65535;
  $20 = $13 >>> 0 < $19 >>> 0;
  if (!$20) {
   break;
  }
  $21 = $5;
  $22 = 237748 + ($21 << 1) | 0;
  $23 = HEAPU8[$22 >> 0] | HEAPU8[$22 + 1 >> 0] << 8;
  $24 = $23 & 65535;
  $25 = $24 & 32768;
  $26 = ($25 | 0) != 0;
  if ($26) {
   $27 = $5;
   $28 = 237748 + ($27 << 1) | 0;
   $29 = HEAPU8[$28 >> 0] | HEAPU8[$28 + 1 >> 0] << 8;
   $30 = $29 & 65535;
   $31 = $30 & 32767;
   $32 = $31 & 65535;
   $33 = $3;
   $34 = $6;
   $35 = $33 + ($34 << 1) | 0;
   HEAP8[$35 >> 0] = $32 & 255;
   HEAP8[$35 + 1 >> 0] = $32 >> 8;
   $36 = $6;
   $37 = $36 + 1 | 0;
   $6 = $37;
  }
  $38 = $4;
  $39 = $38 + 1 | 0;
  $4 = $39;
  $40 = $5;
  $41 = $40 + 1 | 0;
  $5 = $41;
 }
 $42 = $6;
 $43 = $42 & 65535;
 STACKTOP = sp;
 return $43 | 0;
}

function _GamMPicShow($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $12 = $11 << 16 >> 16;
 $13 = $12 + 7 | 0;
 $14 = ($13 | 0) / 8 & -1;
 $15 = $8;
 $16 = $15 << 16 >> 16;
 $17 = Math_imul($14, $16) | 0;
 $18 = $17 & 65535;
 $10 = $18;
 $19 = $5;
 $20 = $6;
 $21 = $5;
 $22 = $21 << 16 >> 16;
 $23 = $7;
 $24 = $23 << 16 >> 16;
 $25 = $22 + $24 | 0;
 $26 = $25 - 1 | 0;
 $27 = $26 & 65535;
 $28 = $6;
 $29 = $28 << 16 >> 16;
 $30 = $8;
 $31 = $30 << 16 >> 16;
 $32 = $29 + $31 | 0;
 $33 = $32 - 1 | 0;
 $34 = $33 & 65535;
 $35 = $9;
 _SysPicture($19, $20, $27, $34, $35, 1, 1);
 $36 = $5;
 $37 = $6;
 $38 = $5;
 $39 = $38 << 16 >> 16;
 $40 = $7;
 $41 = $40 << 16 >> 16;
 $42 = $39 + $41 | 0;
 $43 = $42 - 1 | 0;
 $44 = $43 & 65535;
 $45 = $6;
 $46 = $45 << 16 >> 16;
 $47 = $8;
 $48 = $47 << 16 >> 16;
 $49 = $46 + $48 | 0;
 $50 = $49 - 1 | 0;
 $51 = $50 & 65535;
 $52 = $9;
 $53 = $10;
 $54 = $53 & 65535;
 $55 = $52 + $54 | 0;
 _SysPicture($36, $37, $44, $51, $55, 2, 1);
 STACKTOP = sp;
 return;
}

function _GetPersonCity($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = 0;
 L1 : while (1) {
  $6 = $3;
  $7 = HEAP8[5256 >> 0] | 0;
  $8 = $7 & 255;
  $9 = $6 >>> 0 < $8 >>> 0;
  if (!$9) {
   label = 9;
   break;
  }
  $10 = $3;
  $11 = 224276 + ($10 * 37 | 0) | 0;
  $12 = $11 + 29 | 0;
  $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
  $14 = $13 & 65535;
  $5 = $14;
  $4 = 0;
  while (1) {
   $15 = $4;
   $16 = $3;
   $17 = 224276 + ($16 * 37 | 0) | 0;
   $18 = $17 + 31 | 0;
   $19 = HEAPU8[$18 >> 0] | HEAPU8[$18 + 1 >> 0] << 8;
   $20 = $19 & 65535;
   $21 = $15 >>> 0 < $20 >>> 0;
   if (!$21) {
    break;
   }
   $22 = $5;
   $23 = 233748 + ($22 << 1) | 0;
   $24 = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8;
   $25 = $24 & 65535;
   $26 = $2;
   $27 = $26 & 65535;
   $28 = ($25 | 0) == ($27 | 0);
   if ($28) {
    label = 6;
    break L1;
   }
   $31 = $4;
   $32 = $31 + 1 | 0;
   $4 = $32;
   $33 = $5;
   $34 = $33 + 1 | 0;
   $5 = $34;
  }
  $35 = $3;
  $36 = $35 + 1 | 0;
  $3 = $36;
 }
 if ((label | 0) == 6) {
  $29 = $3;
  $30 = $29 & 255;
  $1 = $30;
  $37 = $1;
  STACKTOP = sp;
  return $37 | 0;
 } else if ((label | 0) == 9) {
  $1 = -1;
  $37 = $1;
  STACKTOP = sp;
  return $37 | 0;
 }
 return 0 | 0;
}

function _strncmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = ($2 | 0) == 0;
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0 >> 0] | 0;
  $5 = $4 & 255;
  $6 = $4 << 24 >> 24 == 0;
  $7 = HEAP8[$1 >> 0] | 0;
  $8 = $7 & 255;
  L3 : do {
   if ($6) {
    $$lcssa = $8;
    $$lcssa22 = $5;
   } else {
    $$01824 = $0;
    $$01926$in = $2;
    $$025 = $1;
    $10 = $7;
    $13 = $4;
    $22 = $8;
    $23 = $5;
    while (1) {
     $$01926 = $$01926$in + -1 | 0;
     $9 = $10 << 24 >> 24 != 0;
     $11 = ($$01926 | 0) != 0;
     $or$cond = $11 & $9;
     $12 = $13 << 24 >> 24 == $10 << 24 >> 24;
     $or$cond21 = $12 & $or$cond;
     if (!$or$cond21) {
      $$lcssa = $22;
      $$lcssa22 = $23;
      break L3;
     }
     $14 = $$01824 + 1 | 0;
     $15 = $$025 + 1 | 0;
     $16 = HEAP8[$14 >> 0] | 0;
     $17 = $16 & 255;
     $18 = $16 << 24 >> 24 == 0;
     $19 = HEAP8[$15 >> 0] | 0;
     $20 = $19 & 255;
     if ($18) {
      $$lcssa = $20;
      $$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;
      $$01926$in = $$01926;
      $$025 = $15;
      $10 = $19;
      $13 = $16;
      $22 = $20;
      $23 = $17;
     }
    }
   }
  } while (0);
  $21 = $$lcssa22 - $$lcssa | 0;
  $$020 = $21;
 }
 return $$020 | 0;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = $1 >>> 0 > 0;
 $4 = $0 >>> 0 > 4294967295;
 $5 = ($1 | 0) == 0;
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $11 = tempRet0;
   $12 = $10 & 255;
   $13 = $12 | 48;
   $14 = $$0914 + -1 | 0;
   HEAP8[$14 >> 0] = $13;
   $15 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $16 = tempRet0;
   $17 = $9 >>> 0 > 9;
   $18 = $8 >>> 0 > 4294967295;
   $19 = ($9 | 0) == 9;
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;
    $8 = $15;
    $9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;
  $$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0 | 0) == 0;
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $23 = ($$012 >>> 0) % 10 & -1;
   $24 = $23 | 48;
   $25 = $24 & 255;
   $26 = $$111 + -1 | 0;
   HEAP8[$26 >> 0] = $25;
   $27 = ($$012 >>> 0) / 10 & -1;
   $28 = $$012 >>> 0 < 10;
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;
    $$111 = $26;
   }
  }
 }
 return $$1$lcssa | 0;
}

function _GetCityCaptives($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while (1) {
  $7 = $4;
  $8 = $2;
  $9 = $8 & 255;
  $10 = 224276 + ($9 * 37 | 0) | 0;
  $11 = $10 + 31 | 0;
  $12 = HEAPU8[$11 >> 0] | HEAPU8[$11 + 1 >> 0] << 8;
  $13 = $12 & 65535;
  $14 = $7 >>> 0 < $13 >>> 0;
  if (!$14) {
   break;
  }
  $15 = $2;
  $16 = $15 & 255;
  $17 = 224276 + ($16 * 37 | 0) | 0;
  $18 = $17 + 29 | 0;
  $19 = HEAPU8[$18 >> 0] | HEAPU8[$18 + 1 >> 0] << 8;
  $20 = $19 & 65535;
  $21 = $4;
  $22 = $20 + $21 | 0;
  $23 = 233748 + ($22 << 1) | 0;
  $24 = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8;
  $6 = $24;
  $25 = $6;
  $26 = $25 & 65535;
  $27 = 186276 + ($26 * 19 | 0) | 0;
  $28 = $27 + 2 | 0;
  $29 = HEAPU8[$28 >> 0] | HEAPU8[$28 + 1 >> 0] << 8;
  $30 = $29 & 65535;
  $31 = 65535 == ($30 | 0);
  if ($31) {
   $32 = $6;
   $33 = $3;
   $34 = $5;
   $35 = $33 + ($34 << 1) | 0;
   HEAP8[$35 >> 0] = $32 & 255;
   HEAP8[$35 + 1 >> 0] = $32 >> 8;
   $36 = $5;
   $37 = $36 + 1 | 0;
   $5 = $37;
  }
  $38 = $4;
  $39 = $38 + 1 | 0;
  $4 = $39;
 }
 $40 = $5;
 $41 = $40 & 255;
 STACKTOP = sp;
 return $41 | 0;
}

function _msg_queue_put($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $7 = _msg_new() | 0;
 $4 = $7;
 $8 = $4;
 $9 = ($8 | 0) == (0 | 0);
 if ($9) {
  STACKTOP = sp;
  return;
 }
 $10 = $4;
 $11 = $10 + 8 | 0;
 $12 = $3;
 HEAP8[$11 >> 0] = HEAP8[$12 >> 0] | 0;
 HEAP8[$11 + 1 >> 0] = HEAP8[$12 + 1 >> 0] | 0;
 HEAP8[$11 + 2 >> 0] = HEAP8[$12 + 2 >> 0] | 0;
 HEAP8[$11 + 3 >> 0] = HEAP8[$12 + 3 >> 0] | 0;
 HEAP8[$11 + 4 >> 0] = HEAP8[$12 + 4 >> 0] | 0;
 HEAP8[$11 + 5 >> 0] = HEAP8[$12 + 5 >> 0] | 0;
 HEAP8[$11 + 6 >> 0] = HEAP8[$12 + 6 >> 0] | 0;
 $13 = $2;
 $14 = $13 + 12 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 _gam_lock_lock($15);
 $16 = $2;
 $17 = HEAP32[$16 >> 2] | 0;
 $5 = $17;
 $18 = $2;
 $19 = $18 + 4 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 $6 = $20;
 $21 = $4;
 $22 = $2;
 $23 = $22 + 4 | 0;
 HEAP32[$23 >> 2] = $21;
 $24 = $6;
 $25 = $4;
 $26 = $25 + 4 | 0;
 HEAP32[$26 >> 2] = $24;
 $27 = $2;
 $28 = $4;
 HEAP32[$28 >> 2] = $27;
 $29 = $4;
 $30 = $6;
 HEAP32[$30 >> 2] = $29;
 $31 = $2;
 $32 = $31 + 12 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 _gam_lock_unlock($33);
 $34 = $2;
 $35 = $34 + 8 | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 _gam_sem_signal($36);
 STACKTOP = sp;
 return;
}

function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2 | 0) == 0;
 L1 : do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;
   $23 = $1;
   while (1) {
    $4 = HEAP8[$$01519 >> 0] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = $$01519 + 1 | 0;
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8 | 0) == 0;
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;
     $23 = $7;
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa;
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0;
   $11 = $10 + -16843009 | 0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14 | 0) == 0;
   $16 = $$0 + 4 | 0;
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10 & 255;
  $18 = $17 << 24 >> 24 == 0;
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while (1) {
    $19 = $$pn + 1 | 0;
    $$pre = HEAP8[$19 >> 0] | 0;
    $20 = $$pre << 24 >> 24 == 0;
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = $$sink - $1 | 0;
 return $22 | 0;
}

function _ObjectDef_addField($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP16[$4 >> 1] | 0;
 $6 = $5 & 65535;
 $7 = $2;
 $8 = $7 + 2 | 0;
 $9 = HEAP16[$8 >> 1] | 0;
 $10 = $9 & 65535;
 $11 = ($6 | 0) == ($10 | 0);
 if ($11) {
  $12 = $2;
  $13 = $12 + 2 | 0;
  $14 = HEAP16[$13 >> 1] | 0;
  $15 = $14 & 65535;
  $16 = $15 << 1;
  $17 = $16 & 65535;
  HEAP16[$13 >> 1] = $17;
  $18 = $2;
  $19 = $18 + 8 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = $2;
  $22 = $21 + 2 | 0;
  $23 = HEAP16[$22 >> 1] | 0;
  $24 = $23 & 65535;
  $25 = $24 * 12 | 0;
  $26 = _realloc($20, $25) | 0;
  $27 = $2;
  $28 = $27 + 8 | 0;
  HEAP32[$28 >> 2] = $26;
 }
 $29 = $2;
 $30 = $29 + 8 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = $2;
 $33 = HEAP16[$32 >> 1] | 0;
 $34 = $33 & 65535;
 $35 = $31 + ($34 * 12 | 0) | 0;
 $36 = $3;
 HEAP32[$35 >> 2] = HEAP32[$36 >> 2] | 0;
 HEAP32[$35 + 4 >> 2] = HEAP32[$36 + 4 >> 2] | 0;
 HEAP32[$35 + 8 >> 2] = HEAP32[$36 + 8 >> 2] | 0;
 $37 = $2;
 $38 = HEAP16[$37 >> 1] | 0;
 $39 = $38 & 65535;
 $40 = $39 + 1 | 0;
 $41 = $40 & 65535;
 HEAP16[$37 >> 1] = $41;
 STACKTOP = sp;
 return;
}

function _GetCityDispGoods($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $7 = $2;
 $8 = $7 & 255;
 $9 = 224276 + ($8 * 37 | 0) | 0;
 $10 = $9 + 33 | 0;
 $11 = HEAPU8[$10 >> 0] | HEAPU8[$10 + 1 >> 0] << 8;
 $12 = $11 & 65535;
 $5 = $12;
 $4 = 0;
 while (1) {
  $13 = $4;
  $14 = $2;
  $15 = $14 & 255;
  $16 = 224276 + ($15 * 37 | 0) | 0;
  $17 = $16 + 35 | 0;
  $18 = HEAPU8[$17 >> 0] | HEAPU8[$17 + 1 >> 0] << 8;
  $19 = $18 & 65535;
  $20 = $13 >>> 0 < $19 >>> 0;
  if (!$20) {
   break;
  }
  $21 = $5;
  $22 = 237748 + ($21 << 1) | 0;
  $23 = HEAPU8[$22 >> 0] | HEAPU8[$22 + 1 >> 0] << 8;
  $24 = $23 & 65535;
  $25 = $24 & 32768;
  $26 = ($25 | 0) != 0;
  if (!$26) {
   $27 = $5;
   $28 = 237748 + ($27 << 1) | 0;
   $29 = HEAPU8[$28 >> 0] | HEAPU8[$28 + 1 >> 0] << 8;
   $30 = $3;
   $31 = $6;
   $32 = $30 + ($31 << 1) | 0;
   HEAP8[$32 >> 0] = $29 & 255;
   HEAP8[$32 + 1 >> 0] = $29 >> 8;
   $33 = $6;
   $34 = $33 + 1 | 0;
   $6 = $34;
  }
  $35 = $4;
  $36 = $35 + 1 | 0;
  $4 = $36;
  $37 = $5;
  $38 = $37 + 1 | 0;
  $5 = $38;
 }
 $39 = $6;
 $40 = $39 & 65535;
 STACKTOP = sp;
 return $40 | 0;
}

function _GetResStartAddr($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = $4 & 65535;
 $6 = ($5 | 0) == 0;
 if ($6) {
  $1 = 0;
  $18 = $1;
  STACKTOP = sp;
  return $18 | 0;
 }
 $7 = $2;
 $8 = $7 & 65535;
 $9 = $8 - 1 | 0;
 HEAP8[$3 >> 0] = $9 & 255;
 HEAP8[$3 + 1 >> 0] = $9 >> 8 & 255;
 HEAP8[$3 + 2 >> 0] = $9 >> 16 & 255;
 HEAP8[$3 + 3 >> 0] = $9 >> 24;
 $10 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8 | HEAPU8[$3 + 2 >> 0] << 16 | HEAPU8[$3 + 3 >> 0] << 24;
 $11 = $10 << 2;
 HEAP8[$3 >> 0] = $11 & 255;
 HEAP8[$3 + 1 >> 0] = $11 >> 8 & 255;
 HEAP8[$3 + 2 >> 0] = $11 >> 16 & 255;
 HEAP8[$3 + 3 >> 0] = $11 >> 24;
 $12 = HEAP32[44295] | 0;
 $13 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8 | HEAPU8[$3 + 2 >> 0] << 16 | HEAPU8[$3 + 3 >> 0] << 24;
 _gam_fseek($12, $13, 0) | 0;
 $14 = HEAP32[44295] | 0;
 _gam_fread($3, 4, 1, $14) | 0;
 $15 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8 | HEAPU8[$3 + 2 >> 0] << 16 | HEAPU8[$3 + 3 >> 0] << 24;
 $16 = ($15 | 0) == -1;
 if ($16) {
  HEAP8[$3 >> 0] = 0 & 255;
  HEAP8[$3 + 1 >> 0] = 0 >> 8 & 255;
  HEAP8[$3 + 2 >> 0] = 0 >> 16 & 255;
  HEAP8[$3 + 3 >> 0] = 0 >> 24;
 }
 $17 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8 | HEAPU8[$3 + 2 >> 0] << 16 | HEAPU8[$3 + 3 >> 0] << 24;
 $1 = $17;
 $18 = $1;
 STACKTOP = sp;
 return $18 | 0;
}

function _gam_freadall($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $vararg_buffer = sp;
 $3 = sp + 24 | 0;
 $1 = $0;
 $2 = 409600;
 $7 = $2;
 $8 = _calloc(1, $7) | 0;
 $4 = $8;
 $5 = 0;
 $6 = 0;
 while (1) {
  $9 = $1;
  $10 = _gam_fread($3, 1, 1024, $9) | 0;
  $6 = $10;
  $11 = $5;
  $12 = $6;
  $13 = $11 + $12 | 0;
  $14 = $2;
  $15 = $13 >>> 0 > $14 >>> 0;
  if ($15) {
   $16 = $2;
   $17 = $16 << 1;
   $2 = $17;
   $18 = $4;
   $19 = $2;
   $20 = _realloc($18, $19) | 0;
   $4 = $20;
  }
  $21 = $4;
  $22 = $5;
  $23 = $21 + $22 | 0;
  $24 = $6;
  _memcpy($23 | 0, $3 | 0, $24 | 0) | 0;
  $25 = $6;
  $26 = $5;
  $27 = $26 + $25 | 0;
  $5 = $27;
  $28 = $6;
  $29 = $28 >>> 0 > 0;
  if (!$29) {
   break;
  }
 }
 $30 = $5;
 $31 = $2;
 $32 = $30 >>> 0 >= $31 >>> 0;
 if ($32) {
  $33 = $4;
  $34 = $2;
  $35 = $34 + 1 | 0;
  $36 = _realloc($33, $35) | 0;
  $4 = $36;
 }
 $37 = $4;
 $38 = $5;
 $39 = $37 + $38 | 0;
 HEAP8[$39 >> 0] = 0;
 $40 = $5;
 HEAP32[$vararg_buffer >> 2] = $40;
 _printf(172796, $vararg_buffer) | 0;
 $41 = $4;
 STACKTOP = sp;
 return $41 | 0;
}

function __dot($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = $9 << 16 >> 16;
 $11 = $10 << 1;
 $12 = $11 & 65535;
 $3 = $12;
 $13 = $4;
 $14 = $13 << 16 >> 16;
 $15 = $14 << 1;
 $16 = $15 & 65535;
 $4 = $16;
 $6 = 0;
 while (1) {
  $17 = $6;
  $18 = ($17 | 0) < 2;
  if (!$18) {
   break;
  }
  $7 = 0;
  while (1) {
   $19 = $7;
   $20 = ($19 | 0) < 2;
   if (!$20) {
    break;
   }
   $21 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
   $22 = $21 & 65535;
   $23 = $22 + 7 | 0;
   $24 = ($23 | 0) / 8 & -1;
   $25 = $24 << 3;
   $26 = $25 << 1;
   $27 = $4;
   $28 = $27 << 16 >> 16;
   $29 = $6;
   $30 = $28 + $29 | 0;
   $31 = Math_imul($26, $30) | 0;
   $32 = $3;
   $33 = $32 << 16 >> 16;
   $34 = $7;
   $35 = $33 + $34 | 0;
   $36 = $31 + $35 | 0;
   $8 = $36;
   $37 = $5;
   $38 = HEAP32[503] | 0;
   $39 = $8;
   $40 = $38 + $39 | 0;
   HEAP8[$40 >> 0] = $37;
   $41 = $7;
   $42 = $41 + 1 | 0;
   $7 = $42;
  }
  $43 = $6;
  $44 = $43 + 1 | 0;
  $6 = $44;
 }
 STACKTOP = sp;
 return;
}

function _MoveDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $5 = $1;
 $6 = $5 + 4 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 $8 = $7 & 65535;
 $4 = $8;
 $9 = $4;
 $10 = 224276 + ($9 * 37 | 0) | 0;
 $11 = $10 + 1 | 0;
 $3 = $11;
 $12 = $1;
 $13 = $12 + 1 | 0;
 $14 = HEAPU8[$13 >> 0] | HEAPU8[$13 + 1 >> 0] << 8;
 $15 = $14 & 65535;
 $16 = 186276 + ($15 * 19 | 0) | 0;
 $17 = $16 + 2 | 0;
 $18 = HEAPU8[$17 >> 0] | HEAPU8[$17 + 1 >> 0] << 8;
 $2 = $18;
 $19 = $3;
 $20 = HEAPU8[$19 >> 0] | HEAPU8[$19 + 1 >> 0] << 8;
 $21 = $20 << 16 >> 16 != 0;
 if ($21) {
  $24 = $3;
  $25 = HEAPU8[$24 >> 0] | HEAPU8[$24 + 1 >> 0] << 8;
  $26 = $25 & 65535;
  $27 = $2;
  $28 = $27 & 65535;
  $29 = ($26 | 0) != ($28 | 0);
  if ($29) {
   $30 = $1;
   $31 = $30 + 3 | 0;
   $32 = HEAP8[$31 >> 0] | 0;
   $33 = $32 & 255;
   $4 = $33;
  }
 } else {
  $22 = $2;
  $23 = $3;
  HEAP8[$23 >> 0] = $22 & 255;
  HEAP8[$23 + 1 >> 0] = $22 >> 8;
 }
 $34 = $4;
 $35 = $34 & 255;
 $36 = $1;
 $37 = $36 + 1 | 0;
 $38 = HEAPU8[$37 >> 0] | HEAPU8[$37 + 1 >> 0] << 8;
 _AddPerson($35, $38) | 0;
 STACKTOP = sp;
 return 1;
}

function _FgtChkEnd($0) {
 $0 = $0 | 0;
 var $$sink = 0, $$sink1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $4 = HEAP8[186073] | 0;
 $5 = $4 << 24 >> 24 != 0;
 if ($5) {
  STACKTOP = sp;
  return;
 }
 $6 = HEAP8[186076] | 0;
 $7 = $6 & 255;
 $8 = 186129 + ($7 * 7 | 0) | 0;
 $9 = $8 + 6 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $11 = $10 & 255;
 $12 = 8 == ($11 | 0);
 if ($12) {
  $13 = HEAP8[186076] | 0;
  $14 = $13 & 255;
  $15 = 10 == ($14 | 0);
  $$sink = $15 ? 1 : 2;
  HEAP8[186073] = $$sink;
  STACKTOP = sp;
  return;
 }
 $16 = $1;
 $17 = $16 << 24 >> 24 != 0;
 if ($17) {
  $3 = 0;
  $$sink1 = 2;
 } else {
  $3 = 10;
  $$sink1 = 1;
 }
 HEAP8[186073] = $$sink1;
 $18 = $3;
 $2 = $18;
 while (1) {
  $19 = $2;
  $20 = $19 & 255;
  $21 = ($20 | 0) < 20;
  if (!$21) {
   label = 12;
   break;
  }
  $22 = $2;
  $23 = $22 & 255;
  $24 = 186129 + ($23 * 7 | 0) | 0;
  $25 = $24 + 6 | 0;
  $26 = HEAP8[$25 >> 0] | 0;
  $27 = $26 & 255;
  $28 = 8 == ($27 | 0);
  if (!$28) {
   break;
  }
  $29 = $2;
  $30 = $29 & 255;
  $31 = $30 + 1 | 0;
  $32 = $31 & 255;
  $2 = $32;
 }
 if ((label | 0) == 12) {
  STACKTOP = sp;
  return;
 }
 HEAP8[186073] = 0;
 STACKTOP = sp;
 return;
}

function _OrderConsumeThew($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = HEAP32[44294] | 0;
 $6 = _ResLoadToCon(2, 10, $5) | 0;
 $4 = $6;
 $7 = HEAP8[5156 >> 0] | 0;
 $8 = $7 << 24 >> 24 != 0;
 if ($8) {
  $9 = $2;
  $10 = $9 & 65535;
  $11 = 186276 + ($10 * 19 | 0) | 0;
  $12 = $11 + 10 | 0;
  $13 = HEAP8[$12 >> 0] | 0;
  $14 = $13 & 255;
  $15 = $4;
  $16 = $3;
  $17 = $16 & 255;
  $18 = $15 + $17 | 0;
  $19 = HEAP8[$18 >> 0] | 0;
  $20 = $19 & 255;
  $21 = 0 - $20 | 0;
  $22 = _add_16($14, $21) | 0;
  $23 = $22 & 255;
  $24 = $2;
  $25 = $24 & 65535;
  $26 = 186276 + ($25 * 19 | 0) | 0;
  $27 = $26 + 10 | 0;
  HEAP8[$27 >> 0] = $23;
  STACKTOP = sp;
  return;
 } else {
  $28 = $4;
  $29 = $3;
  $30 = $29 & 255;
  $31 = $28 + $30 | 0;
  $32 = HEAP8[$31 >> 0] | 0;
  $33 = $32 & 255;
  $34 = $2;
  $35 = $34 & 65535;
  $36 = 186276 + ($35 * 19 | 0) | 0;
  $37 = $36 + 10 | 0;
  $38 = HEAP8[$37 >> 0] | 0;
  $39 = $38 & 255;
  $40 = $39 - $33 | 0;
  $41 = $40 & 255;
  HEAP8[$37 >> 0] = $41;
  STACKTOP = sp;
  return;
 }
}

function _FgtCanUse($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = $8 & 255;
 $10 = 186129 + ($9 * 7 | 0) | 0;
 $7 = $10;
 $11 = $4;
 $12 = _FgtGetGenTer($11) | 0;
 $5 = $12;
 $13 = $3;
 $14 = _FgtGetJNPtr($13) | 0;
 $6 = $14;
 $15 = $6;
 $16 = $15 + 6 | 0;
 $17 = HEAP8[$16 >> 0] | 0;
 $18 = $17 & 255;
 $19 = $7;
 $20 = $19 + 3 | 0;
 $21 = HEAP8[$20 >> 0] | 0;
 $22 = $21 & 255;
 $23 = ($18 | 0) > ($22 | 0);
 if ($23) {
  $2 = 6;
  $39 = $2;
  STACKTOP = sp;
  return $39 | 0;
 }
 $24 = $6;
 $25 = $24 + 20 | 0;
 $26 = $5;
 $27 = $26 & 255;
 $28 = $25 + $27 | 0;
 $29 = HEAP8[$28 >> 0] | 0;
 $30 = $29 << 24 >> 24 != 0;
 if (!$30) {
  $2 = 5;
  $39 = $2;
  STACKTOP = sp;
  return $39 | 0;
 }
 $31 = $6;
 $32 = $31 + 7 | 0;
 $33 = HEAP8[186074] | 0;
 $34 = $33 & 255;
 $35 = $34 - 1 | 0;
 $36 = $32 + $35 | 0;
 $37 = HEAP8[$36 >> 0] | 0;
 $38 = $37 << 24 >> 24 != 0;
 if ($38) {
  $2 = 0;
  $39 = $2;
  STACKTOP = sp;
  return $39 | 0;
 } else {
  $2 = 4;
  $39 = $2;
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0 | 0;
}

function _FgtCntInterval($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = $10 & 255;
 $12 = $6;
 $13 = $12 & 255;
 $14 = $11 - $13 | 0;
 $15 = $14 & 255;
 $8 = $15;
 $16 = $4;
 $17 = $16 & 255;
 $18 = $6;
 $19 = $18 & 255;
 $20 = ($17 | 0) < ($19 | 0);
 if ($20) {
  $21 = $8;
  $22 = $21 & 255;
  $23 = 0 - $22 | 0;
  $24 = $23 & 255;
  $8 = $24;
 }
 $25 = $5;
 $26 = $25 & 255;
 $27 = $7;
 $28 = $27 & 255;
 $29 = $26 - $28 | 0;
 $30 = $29 & 255;
 $9 = $30;
 $31 = $5;
 $32 = $31 & 255;
 $33 = $7;
 $34 = $33 & 255;
 $35 = ($32 | 0) < ($34 | 0);
 if (!$35) {
  $40 = $8;
  $41 = $40 & 255;
  $42 = $9;
  $43 = $42 & 255;
  $44 = $41 + $43 | 0;
  $45 = $44 & 255;
  STACKTOP = sp;
  return $45 | 0;
 }
 $36 = $9;
 $37 = $36 & 255;
 $38 = 0 - $37 | 0;
 $39 = $38 & 255;
 $9 = $39;
 $40 = $8;
 $41 = $40 & 255;
 $42 = $9;
 $43 = $42 & 255;
 $44 = $41 + $43 | 0;
 $45 = $44 & 255;
 STACKTOP = sp;
 return $45 | 0;
}

function _FgtAllArms($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $7 = $1;
 $8 = $7 & 255;
 $9 = $8 * 10 | 0;
 $10 = $9 & 255;
 $4 = $10;
 $5 = 0;
 $2 = 0;
 while (1) {
  $11 = $2;
  $12 = $11 & 255;
  $13 = ($12 | 0) < 10;
  if (!$13) {
   break;
  }
  $14 = $2;
  $15 = $14 & 255;
  $16 = $4;
  $17 = $16 & 255;
  $18 = $15 + $17 | 0;
  $19 = $18 & 255;
  $3 = $19;
  $20 = $3;
  $21 = $20 & 255;
  $22 = 186129 + ($21 * 7 | 0) | 0;
  $23 = $22 + 6 | 0;
  $24 = HEAP8[$23 >> 0] | 0;
  $25 = $24 & 255;
  $26 = 8 == ($25 | 0);
  if (!$26) {
   $27 = $3;
   $28 = _TransIdxToGen($27) | 0;
   $6 = $28;
   $29 = $6;
   $30 = $29 & 65535;
   $31 = 186276 + ($30 * 19 | 0) | 0;
   $32 = $31 + 12 | 0;
   $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8;
   $34 = $33 & 65535;
   $35 = $5;
   $36 = $35 & 65535;
   $37 = $36 + $34 | 0;
   $38 = $37 & 65535;
   $5 = $38;
  }
  $39 = $2;
  $40 = $39 & 255;
  $41 = $40 + 1 | 0;
  $42 = $41 & 255;
  $2 = $42;
 }
 $43 = $5;
 STACKTOP = sp;
 return $43 | 0;
}

function _FgtGetGenIdx($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while (1) {
  $7 = $5;
  $8 = $7 & 255;
  $9 = ($8 | 0) < 20;
  if (!$9) {
   label = 8;
   break;
  }
  $10 = $5;
  $11 = $10 & 255;
  $12 = 186129 + ($11 * 7 | 0) | 0;
  $6 = $12;
  $13 = $6;
  $14 = $13 + 6 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  $16 = $15 & 255;
  $17 = 8 == ($16 | 0);
  if (!$17) {
   $18 = $3;
   $19 = $18 & 255;
   $20 = $6;
   $21 = HEAP8[$20 >> 0] | 0;
   $22 = $21 & 255;
   $23 = ($19 | 0) == ($22 | 0);
   if ($23) {
    $24 = $4;
    $25 = $24 & 255;
    $26 = $6;
    $27 = $26 + 1 | 0;
    $28 = HEAP8[$27 >> 0] | 0;
    $29 = $28 & 255;
    $30 = ($25 | 0) == ($29 | 0);
    if ($30) {
     label = 6;
     break;
    }
   }
  }
  $32 = $5;
  $33 = $32 & 255;
  $34 = $33 + 1 | 0;
  $35 = $34 & 255;
  $5 = $35;
 }
 if ((label | 0) == 6) {
  $31 = $5;
  $2 = $31;
  $36 = $2;
  STACKTOP = sp;
  return $36 | 0;
 } else if ((label | 0) == 8) {
  $2 = -1;
  $36 = $2;
  STACKTOP = sp;
  return $36 | 0;
 }
 return 0 | 0;
}

function _rom_fseek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $7 = $9;
 $10 = $6;
 $11 = $10 & 255;
 $12 = ($11 | 0) == 0;
 do {
  if ($12) {
   $13 = $5;
   $14 = $7;
   $15 = $14 + 24 | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $13 >>> 0 < $16 >>> 0;
   if ($17) {
    $18 = $5;
    $19 = $7;
    $20 = $19 + 20 | 0;
    HEAP32[$20 >> 2] = $18;
    $3 = 0;
    break;
   } else {
    $3 = -1;
    break;
   }
  } else {
   $21 = $6;
   $22 = $21 & 255;
   $23 = ($22 | 0) == 1;
   if (!$23) {
    $3 = -1;
    break;
   }
   $24 = $7;
   $25 = $24 + 20 | 0;
   $26 = HEAP32[$25 >> 2] | 0;
   $27 = $5;
   $28 = $26 + $27 | 0;
   $8 = $28;
   $29 = $8;
   $30 = $7;
   $31 = $30 + 24 | 0;
   $32 = HEAP32[$31 >> 2] | 0;
   $33 = $29 >>> 0 < $32 >>> 0;
   if ($33) {
    $34 = $8;
    $35 = $7;
    $36 = $35 + 20 | 0;
    HEAP32[$36 >> 2] = $34;
    $3 = 0;
    break;
   } else {
    $3 = -1;
    break;
   }
  }
 } while (0);
 $37 = $3;
 STACKTOP = sp;
 return $37 | 0;
}

function _FgtFormatStr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 14 | 0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = _strlen($8) | 0;
 $10 = $9 & 65535;
 $7 = $10;
 $4 = 0;
 $6 = 0;
 while (1) {
  $11 = $6;
  $12 = $11 & 65535;
  $13 = $7;
  $14 = $13 & 65535;
  $15 = ($12 | 0) < ($14 | 0);
  if (!$15) {
   break;
  }
  $16 = $2;
  $17 = $6;
  $18 = $17 & 65535;
  $19 = $16 + $18 | 0;
  $20 = HEAP8[$19 >> 0] | 0;
  $21 = $20 & 255;
  $22 = ($21 | 0) == 37;
  if ($22) {
   label = 4;
   break;
  }
  $27 = $6;
  $28 = $27 & 65535;
  $29 = $28 + 1 | 0;
  $30 = $29 & 65535;
  $6 = $30;
 }
 if ((label | 0) == 4) {
  $23 = $2;
  $24 = $6;
  $25 = $24 & 65535;
  $26 = $23 + $25 | 0;
  $4 = $26;
 }
 $31 = $4;
 $32 = (0 | 0) == ($31 | 0);
 if ($32) {
  STACKTOP = sp;
  return;
 }
 $33 = $3;
 $34 = $33 & 65535;
 _itoa($34, $5, 10) | 0;
 $35 = _strlen($5) | 0;
 $36 = $35 & 65535;
 $7 = $36;
 $37 = $4;
 $38 = $7;
 $39 = $38 & 65535;
 _memcpy($37 | 0, $5 | 0, $39 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _msg_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 8 | 0;
 $4 = HEAP32[502] | 0;
 $5 = ($4 | 0) == -1;
 if ($5) {
  $1 = 0;
  while (1) {
   $6 = $1;
   $7 = ($6 | 0) < 100;
   if (!$7) {
    break;
   }
   $8 = $1;
   $9 = $1;
   $10 = 177308 + ($9 << 2) | 0;
   HEAP32[$10 >> 2] = $8;
   $11 = $1;
   $12 = $11 + 1 | 0;
   $1 = $12;
  }
  HEAP32[502] = 0;
 } else {
  $13 = HEAP32[502] | 0;
  $14 = ($13 | 0) == 100;
  if ($14) {
   $0 = 0;
   $23 = $0;
   STACKTOP = sp;
   return $23 | 0;
  }
 }
 HEAP32[$2 >> 2] = 0 | 0;
 HEAP32[$2 + 4 >> 2] = 0 | 0;
 HEAP32[$2 + 8 >> 2] = 0 | 0;
 HEAP32[$2 + 12 >> 2] = 0 | 0;
 $15 = HEAP32[502] | 0;
 $16 = 177308 + ($15 << 2) | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = 177708 + ($17 << 4) | 0;
 $3 = $18;
 $19 = $3;
 HEAP32[$19 >> 2] = HEAP32[$2 >> 2] | 0;
 HEAP32[$19 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0;
 HEAP32[$19 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
 HEAP32[$19 + 12 >> 2] = HEAP32[$2 + 12 >> 2] | 0;
 $20 = HEAP32[502] | 0;
 $21 = $20 + 1 | 0;
 HEAP32[502] = $21;
 $22 = $3;
 $0 = $22;
 $23 = $0;
 STACKTOP = sp;
 return $23 | 0;
}

function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $$016 = 0;
 while (1) {
  $3 = 175266 + $$016 | 0;
  $4 = HEAP8[$3 >> 0] | 0;
  $5 = $4 & 255;
  $6 = ($5 | 0) == ($0 | 0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = $$016 + 1 | 0;
  $8 = ($7 | 0) == 87;
  if ($8) {
   $$01214 = 175354;
   $$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label | 0) == 2) {
  $2 = ($$016 | 0) == 0;
  if ($2) {
   $$012$lcssa = 175354;
  } else {
   $$01214 = 175354;
   $$115 = $$016;
   label = 5;
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0;
   $$113 = $$01214;
   while (1) {
    $9 = HEAP8[$$113 >> 0] | 0;
    $10 = $9 << 24 >> 24 == 0;
    $11 = $$113 + 1 | 0;
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = $$115 + -1 | 0;
   $13 = ($12 | 0) == 0;
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;
    $$115 = $12;
    label = 5;
   }
  }
 }
 $14 = $1 + 20 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = ___lctrans($$012$lcssa, $15) | 0;
 return $16 | 0;
}

function _OrderConsumeMoney($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = _needMoney($5) | 0;
 $4 = $6;
 $7 = HEAP8[5156 >> 0] | 0;
 $8 = $7 << 24 >> 24 != 0;
 if ($8) {
  $9 = $2;
  $10 = $9 & 255;
  $11 = 224276 + ($10 * 37 | 0) | 0;
  $12 = $11 + 23 | 0;
  $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
  $14 = $4;
  $15 = $14 & 65535;
  $16 = 0 - $15 | 0;
  $17 = _add_16($13, $16) | 0;
  $18 = $2;
  $19 = $18 & 255;
  $20 = 224276 + ($19 * 37 | 0) | 0;
  $21 = $20 + 23 | 0;
  HEAP8[$21 >> 0] = $17 & 255;
  HEAP8[$21 + 1 >> 0] = $17 >> 8;
  STACKTOP = sp;
  return;
 } else {
  $22 = $4;
  $23 = $22 & 65535;
  $24 = $2;
  $25 = $24 & 255;
  $26 = 224276 + ($25 * 37 | 0) | 0;
  $27 = $26 + 23 | 0;
  $28 = HEAPU8[$27 >> 0] | HEAPU8[$27 + 1 >> 0] << 8;
  $29 = $28 & 65535;
  $30 = $29 - $23 | 0;
  $31 = $30 & 65535;
  HEAP8[$27 >> 0] = $31 & 255;
  HEAP8[$27 + 1 >> 0] = $31 >> 8;
  STACKTOP = sp;
  return;
 }
}

function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = ($1 | 0) > 1023;
 if ($2) {
  $3 = $0 * 8988465674311579538646525.0e283;
  $4 = $1 + -1023 | 0;
  $5 = ($4 | 0) > 1023;
  $6 = $3 * 8988465674311579538646525.0e283;
  $7 = $1 + -2046 | 0;
  $8 = ($7 | 0) < 1023;
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;
  $$020 = $$$;
 } else {
  $9 = ($1 | 0) < -1022;
  if ($9) {
   $10 = $0 * 2.2250738585072014e-308;
   $11 = $1 + 1022 | 0;
   $12 = ($11 | 0) < -1022;
   $13 = $10 * 2.2250738585072014e-308;
   $14 = $1 + 2044 | 0;
   $15 = ($14 | 0) > -1022;
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;
   $$020 = $$1$;
  } else {
   $$0 = $0;
   $$020 = $1;
  }
 }
 $16 = $$020 + 1023 | 0;
 $17 = _bitshift64Shl($16 | 0, 0, 52) | 0;
 $18 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $17;
 HEAP32[tempDoublePtr + 4 >> 2] = $18;
 $19 = +HEAPF64[tempDoublePtr >> 3];
 $20 = $$0 * $19;
 return +$20;
}

function _touchIsPointInRect($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
 $6 = $5 << 16 >> 16;
 $7 = $3;
 $8 = $7 << 16 >> 16;
 $9 = ($6 | 0) <= ($8 | 0);
 if ($9) {
  $10 = $3;
  $11 = $10 << 16 >> 16;
  $12 = $2 + 4 | 0;
  $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
  $14 = $13 << 16 >> 16;
  $15 = ($11 | 0) <= ($14 | 0);
  if ($15) {
   $16 = $2 + 2 | 0;
   $17 = HEAPU8[$16 >> 0] | HEAPU8[$16 + 1 >> 0] << 8;
   $18 = $17 << 16 >> 16;
   $19 = $4;
   $20 = $19 << 16 >> 16;
   $21 = ($18 | 0) <= ($20 | 0);
   if ($21) {
    $22 = $4;
    $23 = $22 << 16 >> 16;
    $24 = $2 + 6 | 0;
    $25 = HEAPU8[$24 >> 0] | HEAPU8[$24 + 1 >> 0] << 8;
    $26 = $25 << 16 >> 16;
    $27 = ($23 | 0) <= ($26 | 0);
    $29 = $27;
   } else {
    $29 = 0;
   }
  } else {
   $29 = 0;
  }
 } else {
  $29 = 0;
 }
 $28 = $29 & 1;
 $30 = $28 & 255;
 STACKTOP = sp;
 return $30 | 0;
}

function _RevenueMoney() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = 0;
 while (1) {
  $1 = $0;
  $2 = $1 & 255;
  $3 = HEAP8[5256 >> 0] | 0;
  $4 = $3 & 255;
  $5 = ($2 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $0;
  $7 = $6 & 255;
  $8 = 224276 + ($7 * 37 | 0) | 0;
  $9 = $8 + 23 | 0;
  $10 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8;
  $11 = $10 & 65535;
  $12 = ($11 | 0) < 3e4;
  if ($12) {
   $13 = $0;
   $14 = $13 & 255;
   $15 = 224276 + ($14 * 37 | 0) | 0;
   $16 = $15 + 11 | 0;
   $17 = HEAPU8[$16 >> 0] | HEAPU8[$16 + 1 >> 0] << 8;
   $18 = $17 & 65535;
   $19 = ($18 | 0) / 2 & -1;
   $20 = $0;
   $21 = $20 & 255;
   $22 = 224276 + ($21 * 37 | 0) | 0;
   $23 = $22 + 23 | 0;
   $24 = HEAPU8[$23 >> 0] | HEAPU8[$23 + 1 >> 0] << 8;
   $25 = $24 & 65535;
   $26 = $25 + $19 | 0;
   $27 = $26 & 65535;
   HEAP8[$23 >> 0] = $27 & 255;
   HEAP8[$23 + 1 >> 0] = $27 >> 8;
  }
  $28 = $0;
  $29 = $28 + 1 << 24 >> 24;
  $0 = $29;
 }
 STACKTOP = sp;
 return;
}

function _touchDrawButton($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $1;
 $3 = HEAPU8[$0 >> 0] | HEAPU8[$0 + 1 >> 0] << 8;
 $4 = $0 + 2 | 0;
 $5 = HEAPU8[$4 >> 0] | HEAPU8[$4 + 1 >> 0] << 8;
 $6 = $0 + 4 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 $8 = $0 + 6 | 0;
 $9 = HEAPU8[$8 >> 0] | HEAPU8[$8 + 1 >> 0] << 8;
 _gam_clrlcd($3, $5, $7, $9);
 $10 = HEAPU8[$0 >> 0] | HEAPU8[$0 + 1 >> 0] << 8;
 $11 = $0 + 2 | 0;
 $12 = HEAPU8[$11 >> 0] | HEAPU8[$11 + 1 >> 0] << 8;
 $13 = $0 + 4 | 0;
 $14 = HEAPU8[$13 >> 0] | HEAPU8[$13 + 1 >> 0] << 8;
 $15 = $0 + 6 | 0;
 $16 = HEAPU8[$15 >> 0] | HEAPU8[$15 + 1 >> 0] << 8;
 _gam_rect($10, $12, $14, $16);
 $17 = HEAPU8[$0 >> 0] | HEAPU8[$0 + 1 >> 0] << 8;
 $18 = $17 << 16 >> 16;
 $19 = $18 + 2 | 0;
 $20 = $19 & 65535;
 $21 = $0 + 2 | 0;
 $22 = HEAPU8[$21 >> 0] | HEAPU8[$21 + 1 >> 0] << 8;
 $23 = $22 << 16 >> 16;
 $24 = $23 + 1 | 0;
 $25 = $24 & 65535;
 $26 = $2;
 _GamStrShowS($20, $25, $26) | 0;
 STACKTOP = sp;
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while ((ptr & 3) != 0) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function _CountOverAdd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = HEAPU8[$7 >> 0] | HEAPU8[$7 + 1 >> 0] << 8;
 $6 = $8;
 $9 = $6;
 $10 = $9 & 65535;
 $11 = $4;
 $12 = $11 & 65535;
 $13 = $10 + $12 | 0;
 $14 = $5;
 $15 = $14 & 65535;
 $16 = ($13 | 0) > ($15 | 0);
 if ($16) {
  $17 = $5;
  $18 = $17 & 65535;
  $19 = $6;
  $20 = $19 & 65535;
  $21 = $18 - $20 | 0;
  $22 = $21 & 65535;
  $4 = $22;
  $23 = $5;
  $6 = $23;
  $30 = $6;
  $31 = $3;
  HEAP8[$31 >> 0] = $30 & 255;
  HEAP8[$31 + 1 >> 0] = $30 >> 8;
  $32 = $4;
  STACKTOP = sp;
  return $32 | 0;
 } else {
  $24 = $4;
  $25 = $24 & 65535;
  $26 = $6;
  $27 = $26 & 65535;
  $28 = $27 + $25 | 0;
  $29 = $28 & 65535;
  $6 = $29;
  $30 = $6;
  $31 = $3;
  HEAP8[$31 >> 0] = $30 & 255;
  HEAP8[$31 + 1 >> 0] = $30 >> 8;
  $32 = $4;
  STACKTOP = sp;
  return $32 | 0;
 }
 return 0 | 0;
}

function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = $0 + 74 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24;
 $4 = $3 + 255 | 0;
 $5 = $4 | $3;
 $6 = $5 & 255;
 HEAP8[$1 >> 0] = $6;
 $7 = $0 + 20 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $0 + 28 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $8 >>> 0 > $10 >>> 0;
 if ($11) {
  $12 = $0 + 36 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  FUNCTION_TABLE_iiii[$13 & 31]($0, 0, 0) | 0;
 }
 $14 = $0 + 16 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 $15 = HEAP32[$0 >> 2] | 0;
 $16 = $15 & 4;
 $17 = ($16 | 0) == 0;
 if ($17) {
  $19 = $0 + 44 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = $0 + 48 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  $23 = $20 + $22 | 0;
  $24 = $0 + 8 | 0;
  HEAP32[$24 >> 2] = $23;
  $25 = $0 + 4 | 0;
  HEAP32[$25 >> 2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0 >> 2] = $18;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _GetDirect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $7 = HEAP32[44294] | 0;
 $8 = _ResLoadToCon(59, 1, $7) | 0;
 $4 = $8;
 $9 = $2;
 $10 = $9 & 255;
 $6 = $10;
 $11 = $6;
 $12 = $11 & 65535;
 $13 = $12 << 4;
 $14 = $13 & 65535;
 $6 = $14;
 $15 = $6;
 $16 = $15 & 65535;
 $17 = $4;
 $18 = $17 + $16 | 0;
 $4 = $18;
 $5 = 0;
 while (1) {
  $19 = $5;
  $20 = $19 & 255;
  $21 = ($20 | 0) < 8;
  if (!$21) {
   label = 5;
   break;
  }
  $22 = $4;
  $23 = $5;
  $24 = $23 & 255;
  $25 = $22 + $24 | 0;
  $26 = HEAP8[$25 >> 0] | 0;
  $27 = $26 & 255;
  $28 = $3;
  $29 = $28 & 255;
  $30 = $29 + 1 | 0;
  $31 = ($27 | 0) == ($30 | 0);
  if ($31) {
   label = 5;
   break;
  }
  $32 = $5;
  $33 = $32 + 1 << 24 >> 24;
  $5 = $33;
 }
 if ((label | 0) == 5) {
  $34 = $5;
  STACKTOP = sp;
  return $34 | 0;
 }
 return 0 | 0;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $5 = tempRet0;
 $6 = $4 & 65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear << 16 >> 16) {
 case 0:
  {
   $7 = $0 != 0.0;
   if ($7) {
    $8 = $0 * 18446744073709551616.0;
    $9 = +_frexp($8, $1);
    $10 = HEAP32[$1 >> 2] | 0;
    $11 = $10 + -64 | 0;
    $$016 = $9;
    $storemerge = $11;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   $12 = $4 & 2047;
   $13 = $12 + -1022 | 0;
   HEAP32[$1 >> 2] = $13;
   $14 = $3 & -2146435073;
   $15 = $14 | 1071644672;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $15;
   $16 = +HEAPF64[tempDoublePtr >> 3];
   $$0 = $16;
  }
 }
 return +$$0;
}

function _GoodsUpDatadate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = HEAP8[186275] | 0;
 $4 = $3 & 255;
 $5 = _ResGetItemLen(67, $4) | 0;
 $6 = ($5 >>> 0) / 4 & -1;
 $2 = $6;
 $7 = HEAP8[186275] | 0;
 $8 = $7 & 255;
 $9 = HEAP32[44294] | 0;
 $10 = _ResLoadToCon(67, $8, $9) | 0;
 $0 = $10;
 $1 = 0;
 while (1) {
  $11 = $1;
  $12 = $2;
  $13 = $11 >>> 0 < $12 >>> 0;
  if (!$13) {
   break;
  }
  $14 = $0;
  $15 = $1;
  $16 = $14 + ($15 << 2) | 0;
  $17 = HEAP8[$16 >> 0] | 0;
  $18 = $17 & 255;
  $19 = HEAPU8[186272 >> 0] | HEAPU8[186272 + 1 >> 0] << 8;
  $20 = $19 & 65535;
  $21 = ($18 | 0) == ($20 | 0);
  if ($21) {
   $22 = $0;
   $23 = $1;
   $24 = $22 + ($23 << 2) | 0;
   $25 = $24 + 3 | 0;
   $26 = HEAP8[$25 >> 0] | 0;
   $27 = $1;
   $28 = $27 & 65535;
   _AddGoods($26, $28) | 0;
  }
  $29 = $1;
  $30 = $29 + 1 | 0;
  $1 = $30;
 }
 STACKTOP = sp;
 return 1;
}

function _calcAt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 << 24 >> 24;
 $7 = 0 <= ($6 | 0);
 if ($7) {
  $8 = $3;
  $9 = $8 << 24 >> 24;
  $10 = ($9 | 0) <= 3;
  if ($10) {
   $11 = $4;
   $12 = $11 & 65535;
   $13 = $3;
   $14 = $13 << 24 >> 24;
   $15 = $12 >> $14;
   $16 = $15 & 65535;
   $2 = $16;
   $33 = $2;
   STACKTOP = sp;
   return $33 | 0;
  }
 }
 $17 = $3;
 $18 = $17 << 24 >> 24;
 $19 = ($18 | 0) > 99;
 if ($19) {
  $3 = 99;
 }
 $20 = $3;
 $21 = $20 << 24 >> 24;
 $22 = ($21 | 0) < -99;
 if ($22) {
  $3 = -99;
 }
 $23 = $4;
 $24 = $23 & 65535;
 $25 = $4;
 $26 = $25 & 65535;
 $27 = $3;
 $28 = $27 << 24 >> 24;
 $29 = Math_imul($26, $28) | 0;
 $30 = ($29 >>> 0) / 100 & -1;
 $31 = $24 - $30 | 0;
 $32 = $31 & 65535;
 $2 = $32;
 $33 = $2;
 STACKTOP = sp;
 return $33 | 0;
}

function _LostEscape($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $8 = HEAP32[44323] | 0;
 $7 = $8;
 $9 = $3;
 $10 = $9 & 65535;
 $11 = 186276 + ($10 * 19 | 0) | 0;
 $12 = $11 + 2 | 0;
 $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
 $14 = $13 & 65535;
 $15 = $14 - 1 | 0;
 $16 = $15 & 65535;
 $17 = $7;
 $18 = _GetKingCitys($16, $17) | 0;
 $6 = $18;
 $19 = $6;
 $20 = $19 << 24 >> 24 != 0;
 if ($20) {
  $21 = _gam_rand() | 0;
  $22 = $6;
  $23 = $22 & 255;
  $24 = ($21 | 0) % ($23 | 0) & -1;
  $25 = $24 & 255;
  $5 = $25;
  $26 = $7;
  $27 = $5;
  $28 = $27 & 255;
  $29 = $26 + $28 | 0;
  $30 = HEAP8[$29 >> 0] | 0;
  $31 = $3;
  _AddPerson($30, $31) | 0;
  $2 = 1;
  $32 = $2;
  STACKTOP = sp;
  return $32 | 0;
 } else {
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;
  return $32 | 0;
 }
 return 0 | 0;
}

function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = ($0 | 0) == (0 | 0);
 if ($2) {
  $3 = _malloc($1) | 0;
  $$1 = $3;
  return $$1 | 0;
 }
 $4 = $1 >>> 0 > 4294967231;
 if ($4) {
  $5 = ___errno_location() | 0;
  HEAP32[$5 >> 2] = 12;
  $$1 = 0;
  return $$1 | 0;
 }
 $6 = $1 >>> 0 < 11;
 $7 = $1 + 11 | 0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = $0 + -8 | 0;
 $11 = _try_realloc_chunk($10, $9) | 0;
 $12 = ($11 | 0) == (0 | 0);
 if (!$12) {
  $13 = $11 + 8 | 0;
  $$1 = $13;
  return $$1 | 0;
 }
 $14 = _malloc($1) | 0;
 $15 = ($14 | 0) == (0 | 0);
 if ($15) {
  $$1 = 0;
  return $$1 | 0;
 }
 $16 = $0 + -4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19 | 0) == 0;
 $21 = $20 ? 8 : 4;
 $22 = $18 - $21 | 0;
 $23 = $22 >>> 0 < $1 >>> 0;
 $24 = $23 ? $22 : $1;
 _memcpy($14 | 0, $0 | 0, $24 | 0) | 0;
 _free($0);
 $$1 = $14;
 return $$1 | 0;
}

function _SysLcdPartClear($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $9 = $10;
 while (1) {
  $11 = $9;
  $12 = $11 << 16 >> 16;
  $13 = $7;
  $14 = $13 << 16 >> 16;
  $15 = ($12 | 0) <= ($14 | 0);
  if (!$15) {
   break;
  }
  $16 = $4;
  $8 = $16;
  while (1) {
   $17 = $8;
   $18 = $17 << 16 >> 16;
   $19 = $6;
   $20 = $19 << 16 >> 16;
   $21 = ($18 | 0) <= ($20 | 0);
   if (!$21) {
    break;
   }
   $22 = $8;
   $23 = $9;
   $24 = __insideScreen($22, $23) | 0;
   $25 = $24 << 24 >> 24 != 0;
   if ($25) {
    $26 = $8;
    $27 = $9;
    __dot($26, $27, 0);
   }
   $28 = $8;
   $29 = $28 + 1 << 16 >> 16;
   $8 = $29;
  }
  $30 = $9;
  $31 = $30 + 1 << 16 >> 16;
  $9 = $31;
 }
 _flushLcd();
 STACKTOP = sp;
 return;
}

function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = $0 + 20 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 >>> 0 > $4 >>> 0;
 if ($5) {
  $6 = $0 + 36 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0;
  $8 = HEAP32[$1 >> 2] | 0;
  $9 = ($8 | 0) == (0 | 0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  $10 = $0 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $0 + 8 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $14 = $11 >>> 0 < $13 >>> 0;
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = $15 - $16 | 0;
   $18 = $0 + 40 | 0;
   $19 = HEAP32[$18 >> 2] | 0;
   FUNCTION_TABLE_iiii[$19 & 31]($0, $17, 1) | 0;
  }
  $20 = $0 + 16 | 0;
  HEAP32[$20 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _SysLcdReverse($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5;
 $9 = $10;
 while (1) {
  $11 = $9;
  $12 = $11 << 16 >> 16;
  $13 = $7;
  $14 = $13 << 16 >> 16;
  $15 = ($12 | 0) <= ($14 | 0);
  if (!$15) {
   break;
  }
  $16 = $4;
  $8 = $16;
  while (1) {
   $17 = $8;
   $18 = $17 << 16 >> 16;
   $19 = $6;
   $20 = $19 << 16 >> 16;
   $21 = ($18 | 0) <= ($20 | 0);
   if (!$21) {
    break;
   }
   $22 = $8;
   $23 = $9;
   $24 = __insideScreen($22, $23) | 0;
   $25 = $24 << 24 >> 24 != 0;
   if ($25) {
    $26 = $8;
    $27 = $9;
    __rdot($26, $27);
   }
   $28 = $8;
   $29 = $28 + 1 << 16 >> 16;
   $8 = $29;
  }
  $30 = $9;
  $31 = $30 + 1 << 16 >> 16;
  $9 = $31;
 }
 _flushLcd();
 STACKTOP = sp;
 return;
}

function _GetKingCitys($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while (1) {
  $6 = $4;
  $7 = $6 & 255;
  $8 = HEAP8[5256 >> 0] | 0;
  $9 = $8 & 255;
  $10 = ($7 | 0) < ($9 | 0);
  if (!$10) {
   break;
  }
  $11 = $4;
  $12 = $11 & 255;
  $13 = 224276 + ($12 * 37 | 0) | 0;
  $14 = $13 + 1 | 0;
  $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
  $16 = $15 & 65535;
  $17 = $2;
  $18 = $17 & 65535;
  $19 = $18 + 1 | 0;
  $20 = ($16 | 0) == ($19 | 0);
  if ($20) {
   $21 = $4;
   $22 = $3;
   $23 = $5;
   $24 = $23 & 255;
   $25 = $22 + $24 | 0;
   HEAP8[$25 >> 0] = $21;
   $26 = $5;
   $27 = $26 + 1 << 24 >> 24;
   $5 = $27;
  }
  $28 = $4;
  $29 = $28 + 1 << 24 >> 24;
  $4 = $29;
 }
 $30 = $5;
 STACKTOP = sp;
 return $30 | 0;
}

function _GetKingPersons($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while (1) {
  $6 = $4;
  $7 = HEAP8[5256 >> 0] | 0;
  $8 = $7 & 255;
  $9 = $6 >>> 0 < $8 >>> 0;
  if (!$9) {
   break;
  }
  $10 = $4;
  $11 = 224276 + ($10 * 37 | 0) | 0;
  $12 = $11 + 1 | 0;
  $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
  $14 = $13 & 65535;
  $15 = $2;
  $16 = $15 & 65535;
  $17 = $16 + 1 | 0;
  $18 = ($14 | 0) == ($17 | 0);
  if ($18) {
   $19 = $4;
   $20 = $19 & 255;
   $21 = $3;
   $22 = $5;
   $23 = $21 + ($22 << 1) | 0;
   $24 = _GetCityPersons($20, $23) | 0;
   $25 = $5;
   $26 = $25 + $24 | 0;
   $5 = $26;
  }
  $27 = $4;
  $28 = $27 + 1 | 0;
  $4 = $28;
 }
 $29 = $5;
 STACKTOP = sp;
 return $29 | 0;
}

function _sqrt32($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 while (1) {
  $6 = $5;
  $7 = $6 & 255;
  $8 = ($7 | 0) < 16;
  $9 = $3;
  if (!$8) {
   break;
  }
  $10 = $9 << 1;
  $3 = $10;
  $11 = $2;
  $12 = $11 << 2;
  $13 = $1;
  $14 = $13 >>> 30;
  $15 = $12 + $14 | 0;
  $2 = $15;
  $16 = $1;
  $17 = $16 << 2;
  $1 = $17;
  $18 = $3;
  $19 = $18 << 1;
  $20 = $19 + 1 | 0;
  $4 = $20;
  $21 = $4;
  $22 = $2;
  $23 = $21 >>> 0 <= $22 >>> 0;
  if ($23) {
   $24 = $4;
   $25 = $2;
   $26 = $25 - $24 | 0;
   $2 = $26;
   $27 = $3;
   $28 = $27 + 1 | 0;
   $3 = $28;
  }
  $29 = $5;
  $30 = $29 + 1 << 24 >> 24;
  $5 = $30;
 }
 $31 = $9 & 65535;
 STACKTOP = sp;
 return $31 | 0;
}

function _FgtGetExp($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $4 = HEAP32[44302] | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 & 255;
 $7 = HEAP32[177232 >> 2] | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $9 = $8 & 255;
 $10 = $6 - $9 | 0;
 $3 = $10;
 $11 = $1;
 $12 = _PlcExtract($11) | 0;
 $13 = $12 & 255;
 $14 = $13 >> 2;
 $2 = $14;
 $15 = $3;
 $16 = $15 >>> 0 > 128;
 do {
  if ($16) {
   $17 = $3;
   $18 = $2;
   $19 = $18 - $17 | 0;
   $2 = $19;
  } else {
   $20 = $2;
   $21 = $3;
   $22 = $20 >>> 0 > $21 >>> 0;
   if ($22) {
    $23 = $3;
    $24 = $2;
    $25 = $24 - $23 | 0;
    $2 = $25;
    break;
   } else {
    $2 = 0;
    break;
   }
  }
 } while (0);
 $26 = $2;
 $27 = $26 + 2 | 0;
 $2 = $27;
 $28 = $2;
 STACKTOP = sp;
 return $28 | 0;
}

function _MakeRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 HEAP8[$0 >> 0] = $9 & 255;
 HEAP8[$0 + 1 >> 0] = $9 >> 8;
 $10 = $0 + 2 | 0;
 $11 = $6;
 HEAP8[$10 >> 0] = $11 & 255;
 HEAP8[$10 + 1 >> 0] = $11 >> 8;
 $12 = $0 + 4 | 0;
 $13 = $5;
 $14 = $13 << 16 >> 16;
 $15 = $7;
 $16 = $15 << 16 >> 16;
 $17 = $14 + $16 | 0;
 $18 = $17 - 1 | 0;
 $19 = $18 & 65535;
 HEAP8[$12 >> 0] = $19 & 255;
 HEAP8[$12 + 1 >> 0] = $19 >> 8;
 $20 = $0 + 6 | 0;
 $21 = $6;
 $22 = $21 << 16 >> 16;
 $23 = $8;
 $24 = $23 << 16 >> 16;
 $25 = $22 + $24 | 0;
 $26 = $25 - 1 | 0;
 $27 = $26 & 65535;
 HEAP8[$20 >> 0] = $27 & 255;
 HEAP8[$20 + 1 >> 0] = $27 >> 8;
 STACKTOP = sp;
 return;
}

function _FgtInitArmsJNNum() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = HEAP32[44294] | 0;
 $4 = _ResLoadToCon(2, 2, $3) | 0;
 $0 = $4;
 $1 = 0;
 while (1) {
  $5 = $1;
  $6 = $5 >>> 0 < 6;
  if (!$6) {
   break;
  }
  $2 = 0;
  while (1) {
   $7 = $2;
   $8 = $7 & 255;
   $9 = ($8 | 0) < 10;
   if (!$9) {
    break;
   }
   $10 = $0;
   $11 = $1;
   $12 = $11 * 10 | 0;
   $13 = $2;
   $14 = $13 & 255;
   $15 = $12 + $14 | 0;
   $16 = $10 + $15 | 0;
   $17 = HEAP8[$16 >> 0] | 0;
   $18 = $17 & 255;
   $19 = ($18 | 0) == 0;
   if ($19) {
    break;
   }
   $20 = $2;
   $21 = $20 + 1 << 24 >> 24;
   $2 = $21;
  }
  $22 = $2;
  $23 = $1;
  $24 = 3710 + $23 | 0;
  HEAP8[$24 >> 0] = $22;
  $25 = $1;
  $26 = $25 + 1 | 0;
  $1 = $26;
 }
 STACKTOP = sp;
 return;
}

function _FgtGetAimPos($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = HEAP8[186080] | 0;
 $5 = $4 & 255;
 $6 = 1 == ($5 | 0);
 if ($6) {
  $7 = HEAP8[5185 >> 0] | 0;
  $8 = $7 & 255;
  $9 = ($8 | 0) == 0;
  if ($9) {
   $10 = HEAP8[186076] | 0;
   $11 = $10 & 255;
   $12 = 186129 + ($11 * 7 | 0) | 0;
   $13 = HEAP8[$12 >> 0] | 0;
   $14 = $2;
   HEAP8[$14 >> 0] = $13;
   $15 = HEAP8[186076] | 0;
   $16 = $15 & 255;
   $17 = 186129 + ($16 * 7 | 0) | 0;
   $18 = $17 + 1 | 0;
   $19 = HEAP8[$18 >> 0] | 0;
   $20 = $3;
   HEAP8[$20 >> 0] = $19;
   STACKTOP = sp;
   return;
  }
 }
 $21 = HEAP8[186071] | 0;
 $22 = $2;
 HEAP8[$22 >> 0] = $21;
 $23 = HEAP8[186072] | 0;
 $24 = $3;
 HEAP8[$24 >> 0] = $23;
 STACKTOP = sp;
 return;
}

function _InitItem($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $9;
 HEAP8[$11 >> 0] = $10;
 $12 = $6;
 $13 = $9;
 $14 = $13 + 1 | 0;
 HEAP8[$14 >> 0] = $12;
 $15 = $7;
 $16 = $9;
 $17 = $16 + 2 | 0;
 HEAP8[$17 >> 0] = $15;
 $18 = $8;
 $19 = $9;
 $20 = $19 + 3 | 0;
 HEAP8[$20 >> 0] = $18;
 $21 = $5;
 $22 = $9;
 $23 = $22 + 4 | 0;
 HEAP8[$23 >> 0] = $21;
 $24 = $6;
 $25 = $9;
 $26 = $25 + 5 | 0;
 HEAP8[$26 >> 0] = $24;
 $27 = $5;
 $28 = $9;
 $29 = $28 + 6 | 0;
 HEAP8[$29 >> 0] = $27;
 $30 = $6;
 $31 = $9;
 $32 = $31 + 7 | 0;
 HEAP8[$32 >> 0] = $30;
 STACKTOP = sp;
 return;
}

function _arg_n_728($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0 >> 2] | 0;
 HEAP32[$2 >> 2] = $vacopy_currentptr;
 $$0 = $1;
 while (1) {
  $3 = $$0 >>> 0 > 1;
  $arglist_current = HEAP32[$2 >> 2] | 0;
  $4 = $arglist_current;
  $5 = 0 + 4 | 0;
  $expanded1 = $5;
  $expanded = $expanded1 - 1 | 0;
  $6 = $4 + $expanded | 0;
  $7 = 0 + 4 | 0;
  $expanded5 = $7;
  $expanded4 = $expanded5 - 1 | 0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9 >> 2] | 0;
  $arglist_next = $9 + 4 | 0;
  HEAP32[$2 >> 2] = $arglist_next;
  $11 = $$0 + -1 | 0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return $10 | 0;
}

function _hex_encode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = $6 << 1;
 $8 = $7 + 1 | 0;
 $9 = _calloc(1, $8) | 0;
 $4 = $9;
 $10 = $4;
 $11 = $3;
 $12 = $11 << 1;
 $13 = $10 + $12 | 0;
 HEAP8[$13 >> 0] = 0;
 $5 = 0;
 while (1) {
  $14 = $5;
  $15 = $3;
  $16 = $14 >>> 0 < $15 >>> 0;
  $17 = $4;
  if (!$16) {
   break;
  }
  $18 = $5;
  $19 = $18 << 1;
  $20 = $17 + $19 | 0;
  $21 = $2;
  $22 = $5;
  $23 = $21 + $22 | 0;
  $24 = HEAP8[$23 >> 0] | 0;
  $25 = $24 & 255;
  HEAP32[$vararg_buffer >> 2] = $25;
  _sprintf($20, 8591, $vararg_buffer) | 0;
  $26 = $5;
  $27 = $26 + 1 | 0;
  $5 = $27;
 }
 STACKTOP = sp;
 return $17 | 0;
}

function _HoldCaptive($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 & 65535;
 $7 = 186276 + ($6 * 19 | 0) | 0;
 $4 = $7;
 $8 = $4;
 $9 = $8 + 2 | 0;
 $10 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8;
 $11 = $4;
 HEAP8[$11 >> 0] = $10 & 255;
 HEAP8[$11 + 1 >> 0] = $10 >> 8;
 $12 = $4;
 $13 = $12 + 2 | 0;
 HEAP8[$13 >> 0] = -1 & 255;
 HEAP8[$13 + 1 >> 0] = -1 >> 8;
 $14 = $4;
 $15 = $14 + 12 | 0;
 HEAP8[$15 >> 0] = 0 & 255;
 HEAP8[$15 + 1 >> 0] = 0 >> 8;
 $16 = $2;
 HEAP8[242652 >> 0] = $16 & 255;
 HEAP8[242652 + 1 >> 0] = $16 >> 8;
 $17 = HEAP8[242654] | 0;
 $18 = $17 & 255;
 $19 = $18 + 1 | 0;
 $20 = $19 & 255;
 HEAP8[242654] = $20;
 $21 = $3;
 $22 = $2;
 _AddPerson($21, $22) | 0;
 STACKTOP = sp;
 return;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 $4 = $0 + 60 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $3;
 HEAP32[$vararg_buffer >> 2] = $5;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = 0;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = $1;
 $vararg_ptr3 = $vararg_buffer + 12 | 0;
 HEAP32[$vararg_ptr3 >> 2] = $6;
 $vararg_ptr4 = $vararg_buffer + 16 | 0;
 HEAP32[$vararg_ptr4 >> 2] = $2;
 $7 = ___syscall140(140, $vararg_buffer | 0) | 0;
 $8 = ___syscall_ret($7) | 0;
 $9 = ($8 | 0) < 0;
 if ($9) {
  HEAP32[$3 >> 2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3 >> 2] | 0;
  $10 = $$pre;
 }
 STACKTOP = sp;
 return $10 | 0;
}

function _GamPicShow($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $7;
 $11 = $10 << 16 >> 16;
 $12 = $11 - 1 | 0;
 $13 = $12 & 65535;
 $7 = $13;
 $14 = $8;
 $15 = $14 << 16 >> 16;
 $16 = $15 - 1 | 0;
 $17 = $16 & 65535;
 $8 = $17;
 $18 = $5;
 $19 = $6;
 $20 = $5;
 $21 = $20 << 16 >> 16;
 $22 = $7;
 $23 = $22 << 16 >> 16;
 $24 = $21 + $23 | 0;
 $25 = $24 & 65535;
 $26 = $6;
 $27 = $26 << 16 >> 16;
 $28 = $8;
 $29 = $28 << 16 >> 16;
 $30 = $27 + $29 | 0;
 $31 = $30 & 65535;
 $32 = $9;
 _SysPicture($18, $19, $25, $31, $32, 0, 1);
 STACKTOP = sp;
 return;
}

function _IsManual($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $6 = HEAP8[180040] | 0;
 $7 = $6 << 24 >> 24 != 0;
 if ($7) {
  $2 = 1;
  $23 = $2;
  STACKTOP = sp;
  return $23 | 0;
 }
 $8 = HEAP32[44294] | 0;
 $9 = _ResLoadToCon(2, 10, $8) | 0;
 $5 = $9;
 $10 = $3;
 $11 = $10 & 65535;
 $12 = 186276 + ($11 * 19 | 0) | 0;
 $13 = $12 + 10 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $15 = $14 & 255;
 $16 = $5;
 $17 = $4;
 $18 = $17 & 255;
 $19 = $16 + $18 | 0;
 $20 = HEAP8[$19 >> 0] | 0;
 $21 = $20 & 255;
 $22 = ($15 | 0) >= ($21 | 0);
 if ($22) {
  $2 = 1;
  $23 = $2;
  STACKTOP = sp;
  return $23 | 0;
 } else {
  $2 = 0;
  $23 = $2;
  STACKTOP = sp;
  return $23 | 0;
 }
 return 0 | 0;
}

function __insideScreen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 << 16 >> 16;
 $6 = ($5 | 0) >= 0;
 if ($6) {
  $7 = $3;
  $8 = $7 << 16 >> 16;
  $9 = ($8 | 0) >= 0;
  if ($9) {
   $10 = $2;
   $11 = $10 << 16 >> 16;
   $12 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
   $13 = $12 & 65535;
   $14 = ($11 | 0) < ($13 | 0);
   if ($14) {
    $15 = $3;
    $16 = $15 << 16 >> 16;
    $17 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
    $18 = $17 & 65535;
    $19 = ($16 | 0) < ($18 | 0);
    $21 = $19;
   } else {
    $21 = 0;
   }
  } else {
   $21 = 0;
  }
 } else {
  $21 = 0;
 }
 $20 = $21 & 1;
 $22 = $20 & 255;
 STACKTOP = sp;
 return $22 | 0;
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 $4 = $2 << 24 >> 24 != $3 << 24 >> 24;
 $5 = $2 << 24 >> 24 == 0;
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  while (1) {
   $6 = $$0710 + 1 | 0;
   $7 = $$011 + 1 | 0;
   $8 = HEAP8[$6 >> 0] | 0;
   $9 = HEAP8[$7 >> 0] | 0;
   $10 = $8 << 24 >> 24 != $9 << 24 >> 24;
   $11 = $8 << 24 >> 24 == 0;
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;
    $$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;
    $$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8 & 255;
 $13 = $$lcssa & 255;
 $14 = $12 - $13 | 0;
 return $14 | 0;
}

function _SysAdjustLCDBuffer($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = Math_imul($5, $6) | 0;
 $4 = $7;
 $8 = $4;
 $9 = HEAP32[505] | 0;
 $10 = $8 >>> 0 <= $9 >>> 0;
 $11 = HEAP32[504] | 0;
 if ($10) {
  $12 = $4;
  _memset($11 | 0, 0, $12 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $13 = ($11 | 0) != (0 | 0);
 $14 = HEAP32[504] | 0;
 $15 = ($14 | 0) != (253158 | 0);
 $or$cond = $13 & $15;
 if ($or$cond) {
  $16 = HEAP32[504] | 0;
  _free($16);
 }
 $17 = $4;
 $18 = _calloc(1, $17) | 0;
 HEAP32[504] = $18;
 $19 = HEAP32[504] | 0;
 $20 = $4;
 _memset($19 | 0, 0, $20 | 0) | 0;
 $21 = $4;
 HEAP32[505] = $21;
 STACKTOP = sp;
 return;
}

function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $3 = sp + 16 | 0;
 $4 = $0 + 36 | 0;
 HEAP32[$4 >> 2] = 21;
 $5 = HEAP32[$0 >> 2] | 0;
 $6 = $5 & 64;
 $7 = ($6 | 0) == 0;
 if ($7) {
  $8 = $0 + 60 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  $10 = $3;
  HEAP32[$vararg_buffer >> 2] = $9;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = 21523;
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  HEAP32[$vararg_ptr2 >> 2] = $10;
  $11 = ___syscall54(54, $vararg_buffer | 0) | 0;
  $12 = ($11 | 0) == 0;
  if (!$12) {
   $13 = $0 + 75 | 0;
   HEAP8[$13 >> 0] = -1;
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _FgtStatGen($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $4 = $1;
 $5 = $4 & 255;
 $6 = $5 * 10 | 0;
 $7 = $6 & 255;
 $3 = $7;
 $2 = 0;
 while (1) {
  $8 = $2;
  $9 = $8 & 255;
  $10 = ($9 | 0) < 10;
  if (!$10) {
   label = 5;
   break;
  }
  $11 = $2;
  $12 = $11 & 255;
  $13 = $3;
  $14 = $13 & 255;
  $15 = $12 + $14 | 0;
  $16 = 186088 + ($15 << 1) | 0;
  $17 = HEAPU8[$16 >> 0] | HEAPU8[$16 + 1 >> 0] << 8;
  $18 = $17 << 16 >> 16 != 0;
  if (!$18) {
   label = 5;
   break;
  }
  $19 = $2;
  $20 = $19 & 255;
  $21 = $20 + 1 | 0;
  $22 = $21 & 255;
  $2 = $22;
 }
 if ((label | 0) == 5) {
  $23 = $2;
  STACKTOP = sp;
  return $23 | 0;
 }
 return 0 | 0;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = $0 + 74 | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24;
 $4 = $3 + 255 | 0;
 $5 = $4 | $3;
 $6 = $5 & 255;
 HEAP8[$1 >> 0] = $6;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7 & 8;
 $9 = ($8 | 0) == 0;
 if ($9) {
  $11 = $0 + 8 | 0;
  HEAP32[$11 >> 2] = 0;
  $12 = $0 + 4 | 0;
  HEAP32[$12 >> 2] = 0;
  $13 = $0 + 44 | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  $15 = $0 + 28 | 0;
  HEAP32[$15 >> 2] = $14;
  $16 = $0 + 20 | 0;
  HEAP32[$16 >> 2] = $14;
  $17 = $0 + 48 | 0;
  $18 = HEAP32[$17 >> 2] | 0;
  $19 = $14 + $18 | 0;
  $20 = $0 + 16 | 0;
  HEAP32[$20 >> 2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0 >> 2] = $10;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _pad_677($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6 | 0) == 0;
 $8 = ($2 | 0) > ($3 | 0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = $2 - $3 | 0;
  $10 = $9 >>> 0 < 256;
  $11 = $10 ? $9 : 256;
  _memset($5 | 0, $1 | 0, $11 | 0) | 0;
  $12 = $9 >>> 0 > 255;
  if ($12) {
   $13 = $2 - $3 | 0;
   $$011 = $9;
   while (1) {
    _out_671($0, $5, 256);
    $14 = $$011 + -256 | 0;
    $15 = $14 >>> 0 > 255;
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out_671($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $4 = ($0 | 0) == 0;
 $5 = ($1 | 0) == 0;
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $7 = $8 & 15;
   $9 = 175248 + $7 | 0;
   $10 = HEAP8[$9 >> 0] | 0;
   $11 = $10 & 255;
   $12 = $11 | $3;
   $13 = $12 & 255;
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = $13;
   $16 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $17 = tempRet0;
   $18 = ($16 | 0) == 0;
   $19 = ($17 | 0) == 0;
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;
    $15 = $17;
    $8 = $16;
   }
  }
 }
 return $$05$lcssa | 0;
}

function _ShowMapClear() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[44297] | 0;
 _GamShowFrame($0);
 $1 = HEAP8[5260 >> 0] | 0;
 $2 = $1 << 24 >> 24 != 0;
 if ($2) {
  return;
 }
 $3 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $4 = $3 & 65535;
 $5 = $4 - 1 | 0;
 $6 = $5 - 0 | 0;
 $7 = $6 + 1 | 0;
 $8 = $7 + 1 | 0;
 $9 = ($8 | 0) / 16 & -1;
 $10 = $9 - 2 | 0;
 $11 = $10 << 4;
 $12 = 0 + $11 | 0;
 $13 = $12 & 65535;
 $14 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $15 = $14 & 65535;
 $16 = $15 - 1 | 0;
 $17 = $16 & 65535;
 $18 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $19 = $18 & 65535;
 $20 = $19 - 1 | 0;
 $21 = $20 & 65535;
 _gam_rect($13, 0, $17, $21);
 return;
}

function _getint_672($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = $3 + -48 | 0;
 $isdigit5 = $isdigittmp4 >>> 0 < 10;
 if ($isdigit5) {
  $$06 = 0;
  $7 = $1;
  $isdigittmp7 = $isdigittmp4;
  while (1) {
   $4 = $$06 * 10 | 0;
   $5 = $isdigittmp7 + $4 | 0;
   $6 = $7 + 1 | 0;
   HEAP32[$0 >> 2] = $6;
   $8 = HEAP8[$6 >> 0] | 0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = $9 + -48 | 0;
   $isdigit = $isdigittmp >>> 0 < 10;
   if ($isdigit) {
    $$06 = $5;
    $7 = $6;
    $isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return $$0$lcssa | 0;
}

function _store_int_729($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $4 = ($0 | 0) == (0 | 0);
 L1 : do {
  if (!$4) {
   switch ($1 | 0) {
   case -2:
    {
     $5 = $2 & 255;
     HEAP8[$0 >> 0] = $5;
     break L1;
     break;
    }
   case -1:
    {
     $6 = $2 & 65535;
     HEAP16[$0 >> 1] = $6;
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2;
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2;
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0;
     $8 = $7;
     HEAP32[$8 >> 2] = $2;
     $9 = $7 + 4 | 0;
     $10 = $9;
     HEAP32[$10 >> 2] = $3;
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}

function _FgtMakeSklNam($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $5 = $7;
 $4 = 0;
 while (1) {
  $8 = $4;
  $9 = $8 >>> 0 < 10;
  if (!$9) {
   label = 5;
   break;
  }
  $10 = $3;
  $11 = $4;
  $12 = $10 + ($11 << 1) | 0;
  $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
  $6 = $13;
  $14 = $6;
  $15 = $14 << 16 >> 16 != 0;
  if (!$15) {
   label = 5;
   break;
  }
  $16 = $6;
  $17 = $5;
  _ResLoadToMem(11, $16, $17) | 0;
  $18 = $5;
  $19 = $18 + 4 | 0;
  $5 = $19;
  $20 = $4;
  $21 = $20 + 1 | 0;
  $4 = $21;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function _FgtShowStateBackground() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $1 = $0 & 65535;
 $2 = $1 - 1 | 0;
 $3 = $2 - 15 | 0;
 $4 = $3 & 65535;
 $5 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $6 = $5 & 65535;
 $7 = $6 - 1 | 0;
 $8 = $7 & 65535;
 $9 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $10 = $9 & 65535;
 $11 = $10 - 1 | 0;
 $12 = $11 & 65535;
 $13 = HEAP32[44297] | 0;
 _GamClearScreenV(0, $4, $8, $12, $13);
 $14 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $15 = $14 & 65535;
 $16 = $15 - 1 | 0;
 $17 = $16 - 15 | 0;
 $18 = $17 & 255;
 _FgtRPicShowV(8, 1, 0, $18);
 return;
}

function _sav_fclose_w($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $4 = $1;
 $2 = $4;
 $5 = $2;
 $6 = $5 + 28 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $2;
 $9 = $8 + 20 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = _hex_encode($7, $10) | 0;
 $3 = $11;
 $12 = $2;
 $13 = $12 + 28 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 _free($14);
 $15 = $2;
 $16 = $15 + 32 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $18 = $3;
 _setValue($17, $18);
 $19 = $3;
 _free($19);
 $20 = $2;
 $21 = $20 + 32 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 _free($22);
 $23 = $2;
 _free($23);
 STACKTOP = sp;
 return 0;
}

function _bayeLcdDrawLine($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $11;
 _gam_usescr($12);
 $13 = $10;
 $14 = $13 << 24 >> 24 != 0;
 if ($14) {
  $15 = $6;
  $16 = $15 & 65535;
  $17 = $7;
  $18 = $17 & 65535;
  $19 = $8;
  $20 = $19 & 65535;
  $21 = $9;
  $22 = $21 & 65535;
  _SysLine($16, $18, $20, $22);
  STACKTOP = sp;
  return;
 } else {
  _printf(3512, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
}

function _ObjectDef_free($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $3 = $1;
 $4 = ($3 | 0) == (0 | 0);
 if ($4) {
  STACKTOP = sp;
  return;
 }
 $2 = 0;
 while (1) {
  $5 = $2;
  $6 = $1;
  $7 = HEAP16[$6 >> 1] | 0;
  $8 = $7 & 65535;
  $9 = ($5 | 0) < ($8 | 0);
  $10 = $1;
  $11 = $10 + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if (!$9) {
   break;
  }
  $13 = $2;
  $14 = $12 + ($13 * 12 | 0) | 0;
  $15 = $14 + 4 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  _ValueDef_free($16);
  $17 = $2;
  $18 = $17 + 1 | 0;
  $2 = $18;
 }
 _free($12);
 $19 = $1;
 _free($19);
 STACKTOP = sp;
 return;
}

function _ExpDataWithKey($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while (1) {
  $7 = $6;
  $8 = $7 & 65535;
  $9 = $5;
  $10 = $9 & 65535;
  $11 = ($8 | 0) < ($10 | 0);
  if (!$11) {
   break;
  }
  $12 = $4;
  $13 = $12 & 255;
  $14 = $3;
  $15 = $6;
  $16 = $15 & 65535;
  $17 = $14 + $16 | 0;
  $18 = HEAP8[$17 >> 0] | 0;
  $19 = $18 & 255;
  $20 = $19 - $13 | 0;
  $21 = $20 & 255;
  HEAP8[$17 >> 0] = $21;
  $22 = $6;
  $23 = $22 + 1 << 16 >> 16;
  $6 = $23;
 }
 STACKTOP = sp;
 return;
}

function _add_16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $7 & 65535;
 $9 = $4;
 $10 = $8 + $9 | 0;
 $5 = $10;
 $6 = -1;
 $11 = $5;
 $12 = $6;
 $13 = $12 & 65535;
 $14 = $11 >>> 0 > $13 >>> 0;
 if ($14) {
  $15 = $4;
  $16 = ($15 | 0) > 0;
  $17 = $6;
  $18 = $17 & 65535;
  $19 = $16 ? $18 : 0;
  $20 = $19 & 65535;
  $2 = $20;
  $23 = $2;
  STACKTOP = sp;
  return $23 | 0;
 } else {
  $21 = $5;
  $22 = $21 & 65535;
  $2 = $22;
  $23 = $2;
  STACKTOP = sp;
  return $23 | 0;
 }
 return 0 | 0;
}

function _CountPlusSub($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAPU8[$5 >> 0] | HEAPU8[$5 + 1 >> 0] << 8;
 $4 = $6;
 $7 = $4;
 $8 = $7 & 65535;
 $9 = $3;
 $10 = $9 & 65535;
 $11 = ($8 | 0) > ($10 | 0);
 if ($11) {
  $12 = $3;
  $13 = $12 & 65535;
  $14 = $4;
  $15 = $14 & 65535;
  $16 = $15 - $13 | 0;
  $17 = $16 & 65535;
  $4 = $17;
 } else {
  $18 = $4;
  $3 = $18;
  $4 = 0;
 }
 $19 = $4;
 $20 = $2;
 HEAP8[$20 >> 0] = $19 & 255;
 HEAP8[$20 + 1 >> 0] = $19 >> 8;
 $21 = $3;
 STACKTOP = sp;
 return $21 | 0;
}

function _ObjectDef_addFieldArray($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 switch ($11 | 0) {
 case 0:
  {
   $10 = 16;
   break;
  }
 case 1:
  {
   $10 = 28;
   break;
  }
 case 2:
  {
   $10 = 40;
   break;
  }
 case 3:
  {
   $10 = 52;
   break;
  }
 default:
  {
   _printf(6481, $vararg_buffer) | 0;
   _abort();
  }
 }
 $12 = $5;
 $13 = $6;
 $14 = $8;
 $15 = $10;
 $16 = $9;
 _ObjectDef_addFieldF($12, $13, 5, $14, $15, $16);
 STACKTOP = sp;
 return;
}

function _rom_fopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $6 & 255;
 $8 = ($7 | 0) != 114;
 do {
  if ($8) {
   $2 = 0;
  } else {
   $9 = $3;
   $10 = _strcmp($9, 8942) | 0;
   $11 = 0 == ($10 | 0);
   if ($11) {
    $12 = _rom_fnew() | 0;
    $5 = $12;
    $13 = $5;
    $14 = $13 + 28 | 0;
    HEAP32[$14 >> 2] = 8956;
    $15 = $5;
    $16 = $15 + 24 | 0;
    HEAP32[$16 >> 2] = 163840;
    $17 = $5;
    $2 = $17;
    break;
   } else {
    $2 = 0;
    break;
   }
  }
 } while (0);
 $18 = $2;
 STACKTOP = sp;
 return $18 | 0;
}

function _loadPersons($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = $8 & 65535;
 $10 = ($9 >>> 0) / 19 & -1;
 $11 = $10 & 65535;
 $7 = $11;
 $6 = 0;
 while (1) {
  $12 = $6;
  $13 = $7;
  $14 = $13 & 65535;
  $15 = ($12 | 0) < ($14 | 0);
  if (!$15) {
   break;
  }
  $16 = $3;
  $17 = $6;
  $18 = $16 + ($17 * 19 | 0) | 0;
  $19 = $4;
  $20 = _loadPerson($18, $19) | 0;
  $4 = $20;
  $21 = $6;
  $22 = $21 + 1 | 0;
  $6 = $22;
 }
 $23 = $4;
 STACKTOP = sp;
 return $23 | 0;
}

function _needMoney($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $4 = HEAP32[44294] | 0;
 $5 = _ResLoadToCon(2, 11, $4) | 0;
 $3 = $5;
 $6 = HEAP8[5159 >> 0] | 0;
 $7 = $6 << 24 >> 24 != 0;
 $8 = $3;
 if ($7) {
  $9 = $2;
  $10 = $9 & 255;
  $11 = $8 + ($10 << 1) | 0;
  $12 = HEAPU8[$11 >> 0] | HEAPU8[$11 + 1 >> 0] << 8;
  $1 = $12;
  $18 = $1;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  $13 = $2;
  $14 = $13 & 255;
  $15 = $8 + $14 | 0;
  $16 = HEAP8[$15 >> 0] | 0;
  $17 = $16 & 255;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0 | 0;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = ($0 | 0) == 0;
 $4 = ($1 | 0) == 0;
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $6 = $7 & 255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $9;
   $12 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $13 = tempRet0;
   $14 = ($12 | 0) == 0;
   $15 = ($13 | 0) == 0;
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;
    $11 = $13;
    $7 = $12;
   }
  }
 }
 return $$0$lcssa | 0;
}

function _IsMoney($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = HEAP8[180040] | 0;
 $6 = $5 << 24 >> 24 != 0;
 do {
  if ($6) {
   $2 = 1;
  } else {
   $7 = $3;
   $8 = $7 & 255;
   $9 = 224276 + ($8 * 37 | 0) | 0;
   $10 = $9 + 23 | 0;
   $11 = HEAPU8[$10 >> 0] | HEAPU8[$10 + 1 >> 0] << 8;
   $12 = $11 & 65535;
   $13 = $4;
   $14 = _needMoney($13) | 0;
   $15 = $14 & 65535;
   $16 = ($12 | 0) >= ($15 | 0);
   if ($16) {
    $2 = 1;
    break;
   } else {
    $2 = 0;
    break;
   }
  }
 } while (0);
 $17 = $2;
 STACKTOP = sp;
 return $17 | 0;
}

function _bayeLcdDrawRect($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $11;
 _gam_usescr($12);
 $13 = $10;
 $14 = $13 << 24 >> 24 != 0;
 $15 = $6;
 $16 = $15 & 65535;
 $17 = $7;
 $18 = $17 & 65535;
 $19 = $8;
 $20 = $19 & 65535;
 $21 = $9;
 $22 = $21 & 65535;
 if ($14) {
  _SysRect($16, $18, $20, $22);
  STACKTOP = sp;
  return;
 } else {
  _SysRectClear($16, $18, $20, $22);
  STACKTOP = sp;
  return;
 }
}

function _GamShowKing($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 HEAP8[186048] = 16;
 HEAP8[186050] = 51;
 HEAP8[186049] = 13;
 $4 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $5 = $4 & 65535;
 $6 = $5 - 1 | 0;
 $7 = $6 - 6 | 0;
 $8 = $7 - 13 | 0;
 $9 = ($8 | 0) / 12 & -1;
 $10 = $9 * 12 | 0;
 $11 = $10 + 0 | 0;
 $12 = $11 + 13 | 0;
 $13 = $12 & 255;
 HEAP8[186051] = $13;
 $14 = $2;
 $15 = $3;
 $16 = $15 & 255;
 $17 = $16 * 6 | 0;
 $18 = $14 + $17 | 0;
 _GamStrShowS(16, 13, $18) | 0;
 STACKTOP = sp;
 return;
}

function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = ($0 | 0) == 0;
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0) | 0;
  $4 = $1 | $0;
  $5 = $4 >>> 0 > 65535;
  if ($5) {
   $6 = ($3 >>> 0) / ($0 >>> 0) & -1;
   $7 = ($6 | 0) == ($1 | 0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = _malloc($$0) | 0;
 $9 = ($8 | 0) == (0 | 0);
 if ($9) {
  return $8 | 0;
 }
 $10 = $8 + -4 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $11 & 3;
 $13 = ($12 | 0) == 0;
 if ($13) {
  return $8 | 0;
 }
 _memset($8 | 0, 0, $$0 | 0) | 0;
 return $8 | 0;
}

function _PlcMidShowStr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = _strlen($7) | 0;
 $9 = $8 * 6 | 0;
 $10 = $9 & 255;
 $6 = $10;
 $11 = $6;
 $12 = $11 & 255;
 $13 = $12 >> 1;
 $14 = $13 & 255;
 $6 = $14;
 $15 = $6;
 $16 = $15 & 255;
 $17 = $3;
 $18 = $17 << 16 >> 16;
 $19 = $18 - $16 | 0;
 $20 = $19 & 65535;
 $3 = $20;
 $21 = $3;
 $22 = $4;
 $23 = $5;
 _GamStrShowS($21, $22, $23) | 0;
 STACKTOP = sp;
 return;
}

function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = $0 + 84 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 256 | 0;
 $6 = _memchr($4, 0, $5) | 0;
 $7 = ($6 | 0) == (0 | 0);
 $8 = $6;
 $9 = $4;
 $10 = $8 - $9 | 0;
 $$027 = $7 ? $5 : $10;
 $11 = $$027 >>> 0 < $2 >>> 0;
 $$027$ = $11 ? $$027 : $2;
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0;
 $12 = $4 + $$027$ | 0;
 $13 = $0 + 4 | 0;
 HEAP32[$13 >> 2] = $12;
 $14 = $4 + $$027 | 0;
 $15 = $0 + 8 | 0;
 HEAP32[$15 >> 2] = $14;
 HEAP32[$3 >> 2] = $14;
 return $$027$ | 0;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, oldDynamicTopOnChange = 0, newDynamicTop = 0, totalMemory = 0;
 increment = increment + 15 & -16 | 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 totalMemory = getTotalMemory() | 0;
 if ((newDynamicTop | 0) > (totalMemory | 0)) {
  if ((enlargeMemory() | 0) == 0) {
   ___setErrNo(12);
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
   return -1;
  }
 }
 return oldDynamicTop | 0;
}

function _gam_fopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = _strncmp(8357, $5, 5) | 0;
 $7 = ($6 | 0) == 0;
 $8 = $3;
 do {
  if ($7) {
   $9 = $4;
   $10 = _rom_fopen($8, $9) | 0;
   $2 = $10;
  } else {
   $11 = _strncmp(8363, $8, 6) | 0;
   $12 = ($11 | 0) == 0;
   if ($12) {
    $13 = $3;
    $14 = $4;
    $15 = _sav_fopen_589($13, $14) | 0;
    $2 = $15;
    break;
   } else {
    $2 = 0;
    break;
   }
  }
 } while (0);
 $16 = $2;
 STACKTOP = sp;
 return $16 | 0;
}

function _PlcItemShowS($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 HEAP8[186048] = $10;
 $11 = $6;
 HEAP8[186049] = $11;
 $12 = $7;
 HEAP8[186050] = $12;
 $13 = $8;
 HEAP8[186051] = $13;
 $14 = $9;
 $15 = $5;
 $16 = $15 & 255;
 $17 = $6;
 $18 = $17 & 255;
 $19 = $9;
 $20 = _GamStrShowS($16, $18, $19) | 0;
 $21 = $14 + $20 | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function _rom_finit($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP32[$2 >> 2] = 15;
 $3 = $1;
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = 16;
 $5 = $1;
 $6 = $5 + 8 | 0;
 HEAP32[$6 >> 2] = 17;
 $7 = $1;
 $8 = $7 + 12 | 0;
 HEAP32[$8 >> 2] = 18;
 $9 = $1;
 $10 = $9 + 16 | 0;
 HEAP32[$10 >> 2] = 19;
 $11 = $1;
 $12 = $11 + 20 | 0;
 HEAP32[$12 >> 2] = 0;
 $13 = $1;
 $14 = $13 + 24 | 0;
 HEAP32[$14 >> 2] = 0;
 $15 = $1;
 $16 = $15 + 28 | 0;
 HEAP32[$16 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _GetCityState($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $2;
 $6 = $5 & 255;
 $7 = 224276 + ($6 * 37 | 0) | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $9 = $8 & 255;
 switch ($9 | 0) {
 case 0:
  {
   $4 = 12;
   break;
  }
 case 1:
  {
   $4 = 13;
   break;
  }
 case 2:
  {
   $4 = 14;
   break;
  }
 case 3:
  {
   $4 = 15;
   break;
  }
 case 4:
  {
   $4 = 16;
   break;
  }
 default:
  {}
 }
 $10 = $4;
 $11 = $10 & 255;
 $12 = $3;
 _ResLoadToMem(64, $11, $12) | 0;
 STACKTOP = sp;
 return;
}

function _ValueDef_free($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 switch ($3 | 0) {
 case 4:
  {
   $8 = $1;
   $9 = $8 + 8 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   _ObjectDef_free($10);
   $11 = $1;
   _free($11);
   STACKTOP = sp;
   return;
   break;
  }
 case 5:
 case 7:
  {
   $4 = $1;
   $5 = $4 + 8 | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   _ValueDef_free($6);
   $7 = $1;
   _free($7);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _bayeLcdDrawImage($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 $15 = $14 & 65535;
 $16 = $15 + 1 | 0;
 $17 = $16 & 65535;
 $18 = $9;
 $19 = $18 & 65535;
 $20 = $10;
 $21 = $20 & 65535;
 $22 = $11;
 _PlcRPicShowEx($12, $13, $17, $19, $21, $22);
 STACKTOP = sp;
 return;
}

function _touchSendTouchEvent($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp + 6 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP8[$6 >> 0] = 16;
 $7 = $3;
 $8 = $6 + 1 | 0;
 HEAP8[$8 >> 0] = $7 & 255;
 HEAP8[$8 + 1 >> 0] = $7 >> 8;
 $9 = $4;
 $10 = $6 + 3 | 0;
 HEAP8[$10 >> 0] = $9 & 255;
 HEAP8[$10 + 1 >> 0] = $9 >> 8;
 $11 = $5;
 $12 = $6 + 3 | 0;
 $13 = $12 + 2 | 0;
 HEAP8[$13 >> 0] = $11 & 255;
 HEAP8[$13 + 1 >> 0] = $11 >> 8;
 _GuiPushMsg($6) | 0;
 STACKTOP = sp;
 return;
}

function _GamChinese($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 8 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 _GetExcHZMCode($7, $6);
 $8 = $3;
 $9 = $4;
 $10 = $3;
 $11 = $10 << 16 >> 16;
 $12 = $11 + 12 | 0;
 $13 = $12 - 1 | 0;
 $14 = $13 & 65535;
 $15 = $4;
 $16 = $15 << 16 >> 16;
 $17 = $16 + 12 | 0;
 $18 = $17 - 1 | 0;
 $19 = $18 & 65535;
 _SysPicture($8, $9, $14, $19, $6, 0, 2);
 STACKTOP = sp;
 return;
}

function _Value_ObjectValue_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = _ObjectDef_new() | 0;
 $0 = $3;
 $4 = _calloc(1, 12) | 0;
 $1 = $4;
 $5 = _calloc(1, 8) | 0;
 $2 = $5;
 $6 = $1;
 $7 = $6 + 4 | 0;
 HEAP32[$7 >> 2] = 0;
 $8 = $0;
 $9 = $1;
 $10 = $9 + 8 | 0;
 HEAP32[$10 >> 2] = $8;
 $11 = $1;
 HEAP32[$11 >> 2] = 4;
 $12 = $2;
 $13 = $12 + 4 | 0;
 HEAP32[$13 >> 2] = 0;
 $14 = $1;
 $15 = $2;
 HEAP32[$15 >> 2] = $14;
 $16 = $2;
 STACKTOP = sp;
 return $16 | 0;
}

function _sav_finit_w($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 _rom_finit($4);
 $5 = _calloc(1, 1024) | 0;
 $6 = $2;
 $7 = $6 + 28 | 0;
 HEAP32[$7 >> 2] = $5;
 $8 = $2;
 $9 = $8 + 36 | 0;
 HEAP32[$9 >> 2] = 1024;
 $10 = $2;
 HEAP32[$10 >> 2] = 13;
 $11 = $2;
 $12 = $11 + 12 | 0;
 HEAP32[$12 >> 2] = 14;
 $13 = $3;
 $14 = ___strdup($13) | 0;
 $15 = $2;
 $16 = $15 + 32 | 0;
 HEAP32[$16 >> 2] = $14;
 STACKTOP = sp;
 return;
}

function _LevelUp($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 + 1 << 24 >> 24;
 HEAP8[$3 >> 0] = $5;
 $6 = $1;
 $7 = $6 + 4 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $9 = $8 & 255;
 $10 = HEAP8[5183 >> 0] | 0;
 $11 = $10 & 255;
 $12 = ($9 | 0) > ($11 | 0);
 if (!$12) {
  STACKTOP = sp;
  return;
 }
 $13 = HEAP8[5183 >> 0] | 0;
 $14 = $1;
 $15 = $14 + 4 | 0;
 HEAP8[$15 >> 0] = $13;
 STACKTOP = sp;
 return;
}

function _bind_show_face($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $3 = _ObjectDef_new() | 0;
 $2 = $3;
 $4 = $2;
 _ObjectDef_addFieldArray($4, 5511, 0, 5540, 256);
 $5 = $2;
 _ObjectDef_addFieldArray($5, 6055, 0, 5797, 256);
 $6 = $2;
 _ObjectDef_addFieldF($6, 6082, 0, 5796, 0, 0);
 $7 = $2;
 _ObjectDef_addFieldF($7, 6104, 0, 6053, 0, 0);
 $8 = $2;
 _ObjectDef_addFieldF($8, 6124, 0, 6054, 0, 0);
 $9 = $1;
 $10 = $2;
 _ObjectDef_addFieldF($9, 6144, 4, 0, $10, 0);
 STACKTOP = sp;
 return;
}

function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $0 + 104 | 0;
 HEAP32[$2 >> 2] = $1;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $4;
 $8 = $6;
 $9 = $7 - $8 | 0;
 $10 = $0 + 108 | 0;
 HEAP32[$10 >> 2] = $9;
 $11 = ($1 | 0) != 0;
 $12 = ($9 | 0) > ($1 | 0);
 $or$cond = $11 & $12;
 $13 = $6 + $1 | 0;
 $$sink = $or$cond ? $13 : $4;
 $14 = $0 + 100 | 0;
 HEAP32[$14 >> 2] = $$sink;
 return;
}

function _ResGetItemLen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 12 | 0;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = _GetResStartAddr($8) | 0;
 $5 = $9;
 $10 = $5;
 $11 = ($10 | 0) == 0;
 if ($11) {
  $2 = 0;
  $15 = $2;
  STACKTOP = sp;
  return $15 | 0;
 } else {
  $12 = $5;
  $13 = $4;
  $14 = _GetResItem($12, $13, $7, $6) | 0;
  $2 = $14;
  $15 = $2;
  STACKTOP = sp;
  return $15 | 0;
 }
 return 0 | 0;
}

function _loadCities($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while (1) {
  $5 = $4;
  $6 = HEAP8[5256 >> 0] | 0;
  $7 = $6 & 255;
  $8 = ($5 | 0) < ($7 | 0);
  if (!$8) {
   break;
  }
  $9 = $2;
  $10 = $4;
  $11 = $9 + ($10 * 37 | 0) | 0;
  $12 = $3;
  $13 = _loadCity($11, $12) | 0;
  $3 = $13;
  $14 = $4;
  $15 = $14 + 1 | 0;
  $4 = $15;
 }
 $16 = $3;
 STACKTOP = sp;
 return $16 | 0;
}

function _TransIdxToGen($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $2;
 $4 = $3 & 255;
 $5 = ($4 | 0) > 19;
 if ($5) {
  $1 = -1;
  $13 = $1;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  $6 = $2;
  $7 = $6 & 255;
  $8 = 186088 + ($7 << 1) | 0;
  $9 = HEAPU8[$8 >> 0] | HEAPU8[$8 + 1 >> 0] << 8;
  $10 = $9 & 65535;
  $11 = $10 - 1 | 0;
  $12 = $11 & 65535;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0 | 0;
}

function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $3 = sp;
 dest = $3;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $4 = $3 + 32 | 0;
 HEAP32[$4 >> 2] = 22;
 $5 = $3 + 44 | 0;
 HEAP32[$5 >> 2] = $0;
 $6 = $3 + 76 | 0;
 HEAP32[$6 >> 2] = -1;
 $7 = $3 + 84 | 0;
 HEAP32[$7 >> 2] = $0;
 $8 = _vfscanf($3, $1, $2) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _bayeLcdClearRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $9;
 _gam_usescr($10);
 $11 = $5;
 $12 = $11 & 65535;
 $13 = $6;
 $14 = $13 & 65535;
 $15 = $7;
 $16 = $15 & 65535;
 $17 = $8;
 $18 = $17 & 65535;
 _SysLcdPartClear($12, $14, $16, $18);
 STACKTOP = sp;
 return;
}

function _bayeLcdRevertRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $9;
 _gam_usescr($10);
 $11 = $5;
 $12 = $11 & 65535;
 $13 = $6;
 $14 = $13 & 65535;
 $15 = $7;
 $16 = $15 & 65535;
 $17 = $8;
 $18 = $17 & 65535;
 _SysLcdReverse($12, $14, $16, $18);
 STACKTOP = sp;
 return;
}

function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $4 = HEAP32[tempDoublePtr >> 2] | 0;
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $8;
 $9 = +HEAPF64[tempDoublePtr >> 3];
 return +$9;
}

function _msg_free($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $3 = $1;
 $4 = ($3 | 0) == (0 | 0);
 if ($4) {
  STACKTOP = sp;
  return;
 }
 $5 = $1;
 $6 = $5;
 $7 = $6 - 177708 | 0;
 $8 = ($7 | 0) / 16 & -1;
 $2 = $8;
 $9 = HEAP32[502] | 0;
 $10 = $9 - 1 | 0;
 HEAP32[502] = $10;
 $11 = $2;
 $12 = HEAP32[502] | 0;
 $13 = 177308 + ($12 << 2) | 0;
 HEAP32[$13 >> 2] = $11;
 STACKTOP = sp;
 return;
}

function _SetGoodsByIndex($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 65535;
 $4 = ($3 | 0) == 65535;
 if ($4) {
  STACKTOP = sp;
  return;
 }
 $5 = $1;
 $6 = $5 & 65535;
 $7 = 237748 + ($6 << 1) | 0;
 $8 = HEAPU8[$7 >> 0] | HEAPU8[$7 + 1 >> 0] << 8;
 $9 = $8 & 65535;
 $10 = $9 | 32768;
 $11 = $10 & 65535;
 HEAP8[$7 >> 0] = $11 & 255;
 HEAP8[$7 + 1 >> 0] = $11 >> 8;
 STACKTOP = sp;
 return;
}

function _ObjectDef_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = _calloc(1, 12) | 0;
 $0 = $1;
 $2 = $0;
 HEAP16[$2 >> 1] = 0;
 $3 = $0;
 $4 = $3 + 2 | 0;
 HEAP16[$4 >> 1] = 8;
 $5 = $0;
 $6 = $5 + 2 | 0;
 $7 = HEAP16[$6 >> 1] | 0;
 $8 = $7 & 65535;
 $9 = $8 * 12 | 0;
 $10 = _calloc(1, $9) | 0;
 $11 = $0;
 $12 = $11 + 8 | 0;
 HEAP32[$12 >> 2] = $10;
 $13 = $0;
 STACKTOP = sp;
 return $13 | 0;
}

function _ResLoadStringWithId($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $4 = $2;
 $5 = _GetResStartAddr($4) | 0;
 $3 = $5;
 $6 = $3;
 $7 = ($6 | 0) == 0;
 if ($7) {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;
  return $12 | 0;
 } else {
  $8 = HEAP32[44294] | 0;
  $9 = $3;
  $10 = $8 + $9 | 0;
  $11 = $10 + 14 | 0;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;
  return $12 | 0;
 }
 return 0 | 0;
}

function _GamLoadEngineConfig() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 _ResItemGetN(2, 16, 5152, 109) | 0;
 _ResItemGetN(2, 9, $0, 4) | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $2 = $1 & 255;
 $3 = ($2 | 0) >= 8;
 if (!$3) {
  _FgtLoadConsts();
  STACKTOP = sp;
  return;
 }
 $4 = $0 + 1 | 0;
 HEAP8[5256 >> 0] = HEAP8[$4 >> 0] | 0;
 HEAP8[5256 + 1 >> 0] = HEAP8[$4 + 1 >> 0] | 0;
 HEAP8[5256 + 2 >> 0] = HEAP8[$4 + 2 >> 0] | 0;
 _FgtLoadConsts();
 STACKTOP = sp;
 return;
}

function _bind_skill_var($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 _ObjectDef_addFieldArray($2, 4736, 0, 4126, 100);
 $3 = $1;
 _ObjectDef_addFieldArray($3, 4745, 0, 4326, 100);
 $4 = $1;
 _ObjectDef_addFieldArray($4, 4756, 0, 4426, 100);
 $5 = $1;
 _ObjectDef_addFieldArray($5, 4767, 0, 4526, 100);
 $6 = $1;
 _ObjectDef_addFieldArray($6, 4776, 0, 4226, 100);
 $7 = $1;
 _bind_skill_num($7);
 STACKTOP = sp;
 return;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
 return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}

function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = ___toread($0) | 0;
 $3 = ($2 | 0) == 0;
 if ($3) {
  $4 = $0 + 32 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = FUNCTION_TABLE_iiii[$5 & 31]($0, $1, 1) | 0;
  $7 = ($6 | 0) == 1;
  if ($7) {
   $8 = HEAP8[$1 >> 0] | 0;
   $9 = $8 & 255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _CountHZMAddrOff($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $4 = $1;
 $5 = $4 & 65535;
 $6 = $5 >> 8;
 $2 = $6;
 $7 = $1;
 $8 = $7 & 65535;
 $9 = $8 & 255;
 $3 = $9;
 $10 = $2;
 $11 = $10 - 161 | 0;
 $12 = $11 * 94 | 0;
 $13 = $3;
 $14 = $13 - 161 | 0;
 $15 = $12 + $14 | 0;
 $16 = $15 * 18 | 0;
 STACKTOP = sp;
 return $16 | 0;
}

function _FgtGetJNPtr($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = 34;
 $3 = $1;
 $4 = $3 & 65535;
 $5 = $4 - 1 | 0;
 $6 = $2;
 $7 = $6 & 65535;
 $8 = Math_imul($7, $5) | 0;
 $9 = $8 & 65535;
 $2 = $9;
 $10 = HEAP32[44294] | 0;
 $11 = _ResLoadToCon(10, 1, $10) | 0;
 $12 = $2;
 $13 = $12 & 65535;
 $14 = $11 + $13 | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _GamResumeSet() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[186047] | 0;
 $1 = $0 << 24 >> 24 != 0;
 if (!$1) {
  return;
 }
 HEAP8[186048] = 0;
 HEAP8[186049] = 0;
 $2 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $3 = $2 & 65535;
 $4 = $3 - 1 | 0;
 $5 = $4 & 255;
 HEAP8[186050] = $5;
 $6 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $7 = $6 & 65535;
 $8 = $7 - 1 | 0;
 $9 = $8 & 255;
 HEAP8[186051] = $9;
 return;
}

function _GamMPicShowV($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $11;
 _SysSelectScreen($12);
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 _GamMPicShow($13, $14, $15, $16, $17);
 STACKTOP = sp;
 return;
}

function _GamPicShowV($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $11;
 _SysSelectScreen($12);
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 _GamPicShow($13, $14, $15, $16, $17);
 STACKTOP = sp;
 return;
}

function _GamGetLastMsg($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP8[$2 >> 0] = HEAP8[180033 >> 0] | 0;
 HEAP8[$2 + 1 >> 0] = HEAP8[180033 + 1 >> 0] | 0;
 HEAP8[$2 + 2 >> 0] = HEAP8[180033 + 2 >> 0] | 0;
 HEAP8[$2 + 3 >> 0] = HEAP8[180033 + 3 >> 0] | 0;
 HEAP8[$2 + 4 >> 0] = HEAP8[180033 + 4 >> 0] | 0;
 HEAP8[$2 + 5 >> 0] = HEAP8[180033 + 5 >> 0] | 0;
 HEAP8[$2 + 6 >> 0] = HEAP8[180033 + 6 >> 0] | 0;
 STACKTOP = sp;
 return;
}

function _gam_fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $8 + 12 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = FUNCTION_TABLE_iiiii[$10 & 31]($11, $12, $13, $14) | 0;
 STACKTOP = sp;
 return $15 | 0;
}

function _limitValueInRange($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $5;
 $8 = ($6 | 0) > ($7 | 0);
 if ($8) {
  $9 = $5;
  $3 = $9;
 }
 $10 = $3;
 $11 = $4;
 $12 = ($10 | 0) < ($11 | 0);
 if ($12) {
  $13 = $4;
  $3 = $13;
 }
 $14 = $3;
 STACKTOP = sp;
 return $14 | 0;
}

function _gam_fread($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $8 + 8 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = FUNCTION_TABLE_iiiii[$10 & 31]($11, $12, $13, $14) | 0;
 STACKTOP = sp;
 return $15 | 0;
}

function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = $0 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $0 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6;
 $8 = $4 - $7 | 0;
 $9 = $8 >>> 0 > $2 >>> 0;
 $$ = $9 ? $2 : $8;
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0;
 $10 = HEAP32[$5 >> 2] | 0;
 $11 = $10 + $$ | 0;
 HEAP32[$5 >> 2] = $11;
 return $2 | 0;
}

function _bayeSetLcdSize($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 & 65535;
 HEAP8[8353 >> 0] = $5 & 255;
 HEAP8[8353 + 1 >> 0] = $5 >> 8;
 $6 = $3;
 $7 = $6 & 65535;
 HEAP8[8355 >> 0] = $7 & 255;
 HEAP8[8355 + 1 >> 0] = $7 >> 8;
 $8 = $2;
 $9 = $3;
 _SysAdjustLCDBuffer($8, $9);
 STACKTOP = sp;
 return;
}

function _bayeLcdDrawText($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 _gam_usescr($8);
 $9 = $5;
 $10 = $9 & 65535;
 $11 = $6;
 $12 = $11 & 65535;
 $13 = $4;
 $14 = _GamStrShow($10, $12, $13) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _FgtGetGenTer($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 $4 = 186129 + ($3 * 7 | 0) | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $1;
 $7 = $6 & 255;
 $8 = 186129 + ($7 * 7 | 0) | 0;
 $9 = $8 + 1 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $11 = _FgtGetTerrain($5, $10) | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function _IsLoss() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = HEAP32[44323] | 0;
 $1 = $2;
 $3 = HEAPU8[186270 >> 0] | HEAPU8[186270 + 1 >> 0] << 8;
 $4 = $1;
 $5 = _GetKingCitys($3, $4) | 0;
 $6 = $5 << 24 >> 24 != 0;
 if ($6) {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  $0 = 1;
  $7 = $0;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0 | 0;
}

function _IsWin() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = HEAP32[44323] | 0;
 $1 = $2;
 $3 = HEAPU8[186270 >> 0] | HEAPU8[186270 + 1 >> 0] << 8;
 $4 = $1;
 $5 = _GetEnemyKing($3, $4) | 0;
 $6 = $5 << 24 >> 24 != 0;
 if ($6) {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  $0 = 1;
  $7 = $0;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0 | 0;
}

function _GamClearScreenV($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $9;
 _SysSelectScreen($10);
 $11 = $5;
 $12 = $6;
 $13 = $7;
 $14 = $8;
 _SysLcdPartClear($11, $12, $13, $14);
 STACKTOP = sp;
 return;
}

function _GamMPicShowS($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 _SysSelectScreen(0);
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 _GamMPicShow($10, $11, $12, $13, $14);
 STACKTOP = sp;
 return;
}

function __pixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = __insideScreen($6, $7) | 0;
 $9 = $8 << 24 >> 24 != 0;
 if (!$9) {
  STACKTOP = sp;
  return;
 }
 $10 = $3;
 $11 = $4;
 $12 = $5;
 __dot($10, $11, $12);
 STACKTOP = sp;
 return;
}

function _GamPicShowS($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 _SysSelectScreen(0);
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 _GamPicShow($10, $11, $12, $13, $14);
 STACKTOP = sp;
 return;
}

function _FgtRPicShowV($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $9 & 255;
 $11 = $6;
 $12 = $11 & 255;
 $13 = $7;
 $14 = $13 & 255;
 _PlcRPicShow($8, $10, $12, $14, 0);
 STACKTOP = sp;
 return;
}

function _bayePutToolInCity($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $7 & 255;
 $9 = $5;
 $10 = $9 << 24 >> 24 != 0;
 $11 = $10 ^ 1;
 $12 = $11 & 1;
 $13 = $12 & 255;
 _AddGoodsEx($6, $8, $13) | 0;
 STACKTOP = sp;
 return;
}

function _Value_set_u32_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $7;
 HEAP8[$8 >> 0] = $4 & 255;
 HEAP8[$8 + 1 >> 0] = $4 >> 8 & 255;
 HEAP8[$8 + 2 >> 0] = $4 >> 16 & 255;
 HEAP8[$8 + 3 >> 0] = $4 >> 24;
 STACKTOP = sp;
 return;
}

function _Object_get_field_by_index($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $7 + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $3;
 $11 = $9 + ($10 * 12 | 0) | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function _PlcRPicShow($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 _PlcRPicShowEx($10, 0, $11, $12, $13, $14);
 STACKTOP = sp;
 return;
}

function _bayeLcdDot($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 _gam_usescr($8);
 $9 = $4;
 $10 = $9 & 65535;
 $11 = $5;
 $12 = $11 & 65535;
 $13 = $6;
 _SysPutPixel($10, $12, $13);
 STACKTOP = sp;
 return;
}

function _ValueDef_get_array_length($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $1;
 $6 = $5 + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $7 + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = ($4 >>> 0) / ($9 >>> 0) & -1;
 STACKTOP = sp;
 return $10 | 0;
}

function _gam_fseek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6 + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = FUNCTION_TABLE_iiii[$8 & 31]($9, $10, $11) | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}

function __timer_open($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = 1;
 $4 = $1;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = ($5 | 0) != 0;
 if ($6) {
  STACKTOP = sp;
  return;
 }
 $7 = $1;
 HEAP32[$7 >> 2] = 1;
 $8 = $1;
 _schedule_timer($8);
 STACKTOP = sp;
 return;
}

function _sav_fopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $4 = sp + 8 | 0;
 $2 = $0;
 $3 = $1;
 HEAP8[$4 >> 0] = 0;
 $5 = HEAP32[44293] | 0;
 _strcat($4, $5) | 0;
 _strcat($4, 5331) | 0;
 $6 = $2;
 _strcat($4, $6) | 0;
 $7 = $3;
 $8 = _gam_fopen($4, $7) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1 >> 2] | 0;
  $4 = $1 + 4 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = ___mo_lookup($3, $5, $0) | 0;
  $$0 = $6;
 }
 $7 = ($$0 | 0) != (0 | 0);
 $8 = $7 ? $$0 : $0;
 return $8 | 0;
}

function _GamStrShowV($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 _SysSelectScreen($8);
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = _GamStrShow($9, $10, $11) | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function _ValueDef_get_field_by_index($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $6 + 8 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $3;
 $10 = $8 + ($9 * 12 | 0) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _gam_clslcd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _SysSelectScreen(0);
 $0 = HEAPU8[8353 >> 0] | HEAPU8[8353 + 1 >> 0] << 8;
 $1 = $0 & 65535;
 $2 = $1 - 1 | 0;
 $3 = $2 & 65535;
 $4 = HEAPU8[8355 >> 0] | HEAPU8[8355 + 1 >> 0] << 8;
 $5 = $4 & 65535;
 $6 = $5 - 1 | 0;
 $7 = $6 & 65535;
 _SysLcdPartClear(0, 0, $3, $7);
 return;
}

function _bayeSendTouchEvent($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6 & 65535;
 $8 = $4;
 $9 = $8 & 65535;
 $10 = $5;
 $11 = $10 & 65535;
 _touchSendTouchEvent($7, $9, $11);
 STACKTOP = sp;
 return;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = $0 + 60 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = _dummy($2) | 0;
 HEAP32[$vararg_buffer >> 2] = $3;
 $4 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $5 = ___syscall_ret($4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _FgtStrShowV($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6 & 255;
 $8 = $4;
 $9 = $8 & 255;
 $10 = $5;
 $11 = HEAP32[44297] | 0;
 _GamStrShowV($7, $9, $10, $11) | 0;
 STACKTOP = sp;
 return;
}

function _ObjectDef_addFieldGBKArray($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _ObjectDef_addFieldF($8, $9, 7, $10, 16, $11);
 STACKTOP = sp;
 return;
}

function _gam_clrlcd($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _SysSelectScreen(0);
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _SysLcdPartClear($8, $9, $10, $11);
 STACKTOP = sp;
 return;
}

function _gam_revlcd($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _SysSelectScreen(0);
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _SysLcdReverse($8, $9, $10, $11);
 STACKTOP = sp;
 return;
}

function _gam_rectc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _SysSelectScreen(0);
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _SysRectClear($8, $9, $10, $11);
 STACKTOP = sp;
 return;
}

function _SysRectClear($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _SysLcdPartClear($8, $9, $10, $11);
 _flushLcd();
 STACKTOP = sp;
 return;
}

function _gam_rect($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _SysSelectScreen(0);
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _SysRect($8, $9, $10, $11);
 STACKTOP = sp;
 return;
}

function _gam_line($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _SysSelectScreen(0);
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _SysLine($8, $9, $10, $11);
 STACKTOP = sp;
 return;
}

function _Value_get_u32_value($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4;
 $6 = HEAPU8[$5 >> 0] | HEAPU8[$5 + 1 >> 0] << 8 | HEAPU8[$5 + 2 >> 0] << 16 | HEAPU8[$5 + 3 >> 0] << 24;
 STACKTOP = sp;
 return $6 | 0;
}

function _TransIdxToGen3($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 $4 = 186088 + ($3 << 1) | 0;
 $5 = HEAPU8[$4 >> 0] | HEAPU8[$4 + 1 >> 0] << 8;
 $6 = $5 & 65535;
 $7 = $6 - 1 | 0;
 $8 = $7 & 65535;
 STACKTOP = sp;
 return $8 | 0;
}

function _TransIdxToGen2($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 $4 = 186088 + ($3 << 1) | 0;
 $5 = HEAPU8[$4 >> 0] | HEAPU8[$4 + 1 >> 0] << 8;
 $6 = $5 & 65535;
 $7 = $6 - 1 | 0;
 $8 = $7 & 65535;
 STACKTOP = sp;
 return $8 | 0;
}

function _TransIdxToGen1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 $4 = 186088 + ($3 << 1) | 0;
 $5 = HEAPU8[$4 >> 0] | HEAPU8[$4 + 1 >> 0] << 8;
 $6 = $5 & 65535;
 $7 = $6 - 1 | 0;
 $8 = $7 & 65535;
 STACKTOP = sp;
 return $8 | 0;
}

function _script_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _emscripten_asm_const_v(5);
 $1 = _ResLoadStringWithId(77) | 0;
 $0 = $1;
 $2 = $0;
 $3 = ($2 | 0) != (0 | 0);
 if (!$3) {
  STACKTOP = sp;
  return;
 }
 $4 = $0;
 $5 = _emscripten_asm_const_ii(6, $4 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _schedule_timer($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = $3 + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = +($5 | 0);
 $7 = $6 * 10.0;
 $8 = ~~$7;
 _emscripten_async_call(20 | 0, $2 | 0, $8 | 0);
 STACKTOP = sp;
 return;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _Value_set_u16_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $7;
 HEAP8[$8 >> 0] = $4 & 255;
 HEAP8[$8 + 1 >> 0] = $4 >> 8;
 STACKTOP = sp;
 return;
}

function _baye_set_u32_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP8[$5 >> 0] = $4 & 255;
 HEAP8[$5 + 1 >> 0] = $4 >> 8 & 255;
 HEAP8[$5 + 2 >> 0] = $4 >> 16 & 255;
 HEAP8[$5 + 3 >> 0] = $4 >> 24;
 STACKTOP = sp;
 return;
}

function _AccractbusinessDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 3 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $1;
 $6 = $5 + 1 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 _AddPerson($4, $7) | 0;
 STACKTOP = sp;
 return 1;
}

function _ConscriptionDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 3 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $1;
 $6 = $5 + 1 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 _AddPerson($4, $7) | 0;
 STACKTOP = sp;
 return 1;
}

function _ReconnoitreDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 3 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $1;
 $6 = $5 + 1 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 _AddPerson($4, $7) | 0;
 STACKTOP = sp;
 return 1;
}

function _Value_ObjectValue_free($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  STACKTOP = sp;
  return;
 }
 $4 = $1;
 $5 = HEAP32[$4 >> 2] | 0;
 _ValueDef_free($5);
 $6 = $1;
 _free($6);
 STACKTOP = sp;
 return;
}

function _InspectionDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 3 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $1;
 $6 = $5 + 1 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 _AddPerson($4, $7) | 0;
 STACKTOP = sp;
 return 1;
}

function _gam_setcustomdata($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = HEAP32[44292] | 0;
 $3 = ($2 | 0) != (0 | 0);
 if ($3) {
  $4 = HEAP32[44292] | 0;
  _free($4);
 }
 $5 = $1;
 $6 = ___strdup($5) | 0;
 HEAP32[44292] = $6;
 STACKTOP = sp;
 return;
}

function _ExchangeDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 3 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $1;
 $6 = $5 + 1 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 _AddPerson($4, $7) | 0;
 STACKTOP = sp;
 return 1;
}

function _FatherDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 3 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $1;
 $6 = $5 + 1 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 _AddPerson($4, $7) | 0;
 STACKTOP = sp;
 return 1;
}

function _AssartDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 3 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $1;
 $6 = $5 + 1 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 _AddPerson($4, $7) | 0;
 STACKTOP = sp;
 return 1;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function __shm_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _calloc(1, 262144) | 0;
 HEAP32[44322] = $0;
 $1 = _calloc(1, 202400) | 0;
 HEAP32[44323] = $1;
 $2 = _calloc(1, 30) | 0;
 HEAP32[44324] = $2;
 $3 = _calloc(1, 600) | 0;
 HEAP32[44325] = $3;
 $4 = _calloc(1, 2800) | 0;
 HEAP32[44326] = $4;
 return;
}

function _NopDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 3 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $1;
 $6 = $5 + 1 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 _AddPerson($4, $7) | 0;
 STACKTOP = sp;
 return 1;
}

function _bayeSendKey($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $1 = $0;
 HEAP8[$2 >> 0] = 5;
 $3 = $1;
 $4 = $3 & 65535;
 $5 = $2 + 1 | 0;
 HEAP8[$5 >> 0] = $4 & 255;
 HEAP8[$5 + 1 >> 0] = $4 >> 8;
 _GuiPushMsg($2) | 0;
 STACKTOP = sp;
 return;
}

function _GamStrShowS($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _SysSelectScreen(0);
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = _GamStrShow($6, $7, $8) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _Object_get_field_count($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = HEAP16[$5 >> 1] | 0;
 $7 = $6 & 65535;
 STACKTOP = sp;
 return $7 | 0;
}

function _temper($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = $0 >>> 11;
 $2 = $1 ^ $0;
 $3 = $2 << 7;
 $4 = $3 & -1658038656;
 $5 = $4 ^ $2;
 $6 = $5 << 15;
 $7 = $6 & -272236544;
 $8 = $7 ^ $5;
 $9 = $8 >>> 18;
 $10 = $9 ^ $8;
 return $10 | 0;
}

function _GetGoodsName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 & 65535;
 $6 = $5 + 1 | 0;
 $7 = $6 & 65535;
 $8 = $3;
 _ResLoadToMem(73, $7, $8) | 0;
 STACKTOP = sp;
 return;
}

function _FgtLoadToCon($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $5 & 255;
 $7 = HEAP32[44294] | 0;
 $8 = _ResLoadToCon($4, $6, $7) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _Value_set_u8_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5 + 4 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $7;
 HEAP8[$8 >> 0] = $4;
 STACKTOP = sp;
 return;
}

function _ResItemGet($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = _ResItemGetN($6, $7, $8, -1) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _GetCityName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 & 255;
 $6 = $5 + 1 | 0;
 $7 = $6 & 65535;
 $8 = $3;
 _ResLoadToMem(58, $7, $8) | 0;
 STACKTOP = sp;
 return;
}

function _GamSetResourcePath($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ___strdup($4) | 0;
 HEAP32[3] = $5;
 $6 = $3;
 $7 = ___strdup($6) | 0;
 HEAP32[2] = $7;
 STACKTOP = sp;
 return;
}

function _gam_putpixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _SysSelectScreen(0);
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _SysPutPixel($6, $7, $8);
 STACKTOP = sp;
 return;
}

function _bayeCityAddGoods($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $5 & 255;
 $7 = _AddGoodsEx($4, $6, 1) | 0;
 $8 = $7 & 65535;
 STACKTOP = sp;
 return $8 | 0;
}

function _GamSetPersonCount($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP8[242655 >> 0] = $2 & 255;
 HEAP8[242655 + 1 >> 0] = $2 >> 8 & 255;
 HEAP8[242655 + 2 >> 0] = $2 >> 16 & 255;
 HEAP8[242655 + 3 >> 0] = $2 >> 24;
 STACKTOP = sp;
 return;
}

function _Value_get_u16_value($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4;
 $6 = HEAPU8[$5 >> 0] | HEAPU8[$5 + 1 >> 0] << 8;
 STACKTOP = sp;
 return $6 | 0;
}

function _setValue($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = $3;
 $7 = $6;
 $8 = _emscripten_asm_const_iii(4, $5 | 0, $7 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _bayeCityDelGoods($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $5 & 255;
 $7 = _DelGoods($4, $6) | 0;
 $8 = $7 & 255;
 STACKTOP = sp;
 return $8 | 0;
}

function _bayeDeleteToolInCity($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $7 & 255;
 _DelGoods($6, $8) | 0;
 STACKTOP = sp;
 return;
}

function _itoa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = _ltoa($6, $7, $8) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _SysPutPixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 __pixel($6, $7, $8);
 _flushLcd();
 STACKTOP = sp;
 return;
}

function _ValueDef_get_field_count($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = HEAP16[$4 >> 1] | 0;
 $6 = $5 & 65535;
 STACKTOP = sp;
 return $6 | 0;
}

function _sav_fclose($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = $4 + 28 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 _free($6);
 $7 = $2;
 _free($7);
 STACKTOP = sp;
 return 0;
}

function ___strdup($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = _strlen($0) | 0;
 $2 = $1 + 1 | 0;
 $3 = _malloc($2) | 0;
 $4 = ($3 | 0) == (0 | 0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy($3 | 0, $0 | 0, $2 | 0) | 0;
  $$0 = $3;
 }
 return $$0 | 0;
}

function _gam_usescr($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 $4 = ($3 | 0) != 0;
 $5 = HEAP32[44297] | 0;
 $6 = $4 ? $5 : 0;
 _SysSelectScreen($6);
 STACKTOP = sp;
 return;
}

function _SysSelectScreen($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = ($2 | 0) != (0 | 0);
 $4 = $1;
 $5 = HEAP32[504] | 0;
 $6 = $3 ? $4 : $5;
 HEAP32[503] = $6;
 STACKTOP = sp;
 return;
}

function _flushLcd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[44831] | 0;
 $1 = ($0 | 0) != (0 | 0);
 if (!$1) {
  return;
 }
 $2 = HEAP32[503] | 0;
 $3 = HEAP32[504] | 0;
 $4 = ($2 | 0) == ($3 | 0);
 if (!$4) {
  return;
 }
 HEAP8[515302] = 1;
 return;
}

function _js_callback($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = _emscripten_asm_const_ii(8, $3 | 0) | 0;
 $5 = $1;
 HEAP32[$5 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function _getValue($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $3 = $1;
 $4 = $3;
 $5 = _emscripten_asm_const_ii(3, $4 | 0) | 0;
 $2 = $5;
 $6 = $2;
 $7 = $6;
 STACKTOP = sp;
 return $7 | 0;
}

function _FgtLoadToMem2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 & 255;
 $6 = $3;
 $7 = _ResLoadToMem(1, $5, $6) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _GamAsciiS($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _GamAscii($6, $7, $8);
 STACKTOP = sp;
 return;
}

function _gam_timer2_open($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 HEAP32[2048 >> 2] = $4;
 $5 = $3;
 HEAP32[2052 >> 2] = $5;
 __timer_open(2040);
 STACKTOP = sp;
 return;
}

function _baye_get_u32_value($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8 | HEAPU8[$2 + 2 >> 0] << 16 | HEAPU8[$2 + 3 >> 0] << 24;
 STACKTOP = sp;
 return $3 | 0;
}

function _Value_get_u8_value($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4;
 $6 = HEAP8[$5 >> 0] | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _call_hook_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = _emscripten_asm_const_iii(7, $4 | 0, $5 | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _FgtIntVar() {
 var $$sink = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[186074] = 3;
 HEAP8[186073] = 0;
 HEAP8[186075] = 0;
 $0 = HEAP8[186080] | 0;
 $1 = $0 & 255;
 $2 = 1 == ($1 | 0);
 $$sink = $2 ? 0 : 10;
 HEAP8[186076] = $$sink;
 _CountInitGen();
 return 0;
}

function _bayeGetSkillName($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 HEAP8[179968] = 0;
 $2 = $1;
 $3 = $2 + 1 | 0;
 $4 = $3 & 65535;
 _ResLoadToMem(11, $4, 179968) | 0;
 STACKTOP = sp;
 return 179968 | 0;
}

function _gam_fload($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $6 + $7 | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _SysCopyScreen($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = HEAP32[504] | 0;
 $3 = $1;
 $4 = HEAP32[505] | 0;
 _memcpy($2 | 0, $3 | 0, $4 | 0) | 0;
 HEAP8[515302] = 1;
 STACKTOP = sp;
 return;
}

function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $varargs;
 $2 = HEAP32[753] | 0;
 $3 = _vfprintf($2, $0, $1) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _baye_set_u16_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP8[$5 >> 0] = $4 & 255;
 HEAP8[$5 + 1 >> 0] = $4 >> 8;
 STACKTOP = sp;
 return;
}

function _GetPeriodKings($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 _LoadPeriod($4);
 $5 = $3;
 $6 = _GetAllKing($5) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _GamConRst() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _SysTimer1Close();
 $0 = HEAP32[44295] | 0;
 _gam_fclose($0) | 0;
 $1 = HEAP8[186044] | 0;
 _SysSetKeySound($1);
 $2 = HEAPU8[186045 >> 0] | HEAPU8[186045 + 1 >> 0] << 8;
 _GuiSetKbdState($2);
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _bayeDeletePersonInCity($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $5 & 65535;
 _DelPerson($4, $6) | 0;
 STACKTOP = sp;
 return;
}

function _bayePutPersonInCity($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $5 & 65535;
 _AddPerson($4, $6) | 0;
 STACKTOP = sp;
 return;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = $0 >>> 0 > 4294963200;
 if ($1) {
  $2 = 0 - $0 | 0;
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return $$0 | 0;
}

function _FgtLoadJNConsts() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _ResItemGetN(2, 22, 4126, 100) | 0;
 _ResItemGetN(2, 23, 4326, 100) | 0;
 _ResItemGetN(2, 24, 4426, 100) | 0;
 _ResItemGetN(2, 25, 4526, 100) | 0;
 _ResItemGetN(2, 26, 4226, 100) | 0;
 _FgtInitArmsJNNum();
 return;
}

function _bayeGetArmType($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 $4 = 186276 + ($3 * 19 | 0) | 0;
 $5 = _GetArmType($4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _FgtLoadToMem3($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 & 255;
 $6 = $3;
 _ResLoadToMem(1, $5, $6) | 0;
 STACKTOP = sp;
 return;
}

function _FgtLoadToMem($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 & 255;
 $6 = $3;
 _ResLoadToMem(1, $5, $6) | 0;
 STACKTOP = sp;
 return;
}

function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 $3 = _vsprintf($0, $1, $2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _gam_fclose($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1;
 $5 = FUNCTION_TABLE_ii[$3 & 31]($4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 $3 = _vsscanf($0, $1, $2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _rand_r($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = Math_imul($1, 1103515245) | 0;
 $3 = $2 + 12345 | 0;
 HEAP32[$0 >> 2] = $3;
 $4 = _temper($3) | 0;
 $5 = $4 >>> 1;
 return $5 | 0;
}

function _Field_get_type($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _FgtLoadConsts() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _ResItemGetN(2, 17, 173640, 6) | 0;
 _ResItemGetN(2, 18, 2056, 144) | 0;
 _ResItemGetN(2, 19, 2200, 24) | 0;
 _ResItemGetN(2, 20, 2224, 24) | 0;
 _ResItemGetN(2, 21, 2248, 32) | 0;
 _FgtLoadJNConsts();
 return;
}

function _rom_ftell($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = $4 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _AddGoods($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = _AddGoodsEx($4, $5, 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _baye_get_u16_value($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
 $4 = $3 & 65535;
 STACKTOP = sp;
 return $4 | 0;
}

function _mbsinit($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = ($0 | 0) == (0 | 0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0 >> 2] | 0;
  $3 = ($2 | 0) == 0;
  $5 = $3;
 }
 $4 = $5 & 1;
 return $4 | 0;
}

function _call_hook_a($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 70928 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _bayeOrderComsumeMoney($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _OrderConsumeMoney($4, $5);
 STACKTOP = sp;
 return;
}

function _SysMemInit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 _gam_timer_init();
 _gam_timer_set_callback(10);
 _gam_timer2_open(3, 11);
 STACKTOP = sp;
 return;
}

function _rom_fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;
 return 0;
}

function _Value_get_addr($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4;
 STACKTOP = sp;
 return $5 | 0;
}

function _main($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 187760 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _gam_sem_signal($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 + 1 | 0;
 HEAP32[$2 >> 2] = $4;
 STACKTOP = sp;
 return;
}

function _PlcExtract($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 65535;
 $4 = _sqrt32($3) | 0;
 $5 = $4 & 255;
 STACKTOP = sp;
 return $5 | 0;
}

function _SysLine($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 STACKTOP = sp;
 return;
}

function _GuiInit() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _gam_sem_create() | 0;
 HEAP32[179316 >> 2] = $0;
 $1 = _gam_lock_create() | 0;
 HEAP32[179320 >> 2] = $1;
 HEAP32[179312 >> 2] = 179308;
 HEAP32[44827] = 179308;
 return 1;
}

function _baye_set_u8_value($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP8[$5 >> 0] = $4;
 STACKTOP = sp;
 return;
}

function _ValueDef_get_array_subdef($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _bayeLevelUp($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 $4 = 186276 + ($3 * 19 | 0) | 0;
 _LevelUp($4);
 STACKTOP = sp;
 return;
}

function _out_671($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0 >> 2] | 0;
 $4 = $3 & 32;
 $5 = ($4 | 0) == 0;
 if ($5) {
  ___fwritex($1, $2, $0) | 0;
 }
 return;
}

function _bayeGetCityName($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 HEAP8[18e4] = 0;
 $2 = $1;
 $3 = $2 & 255;
 _GetCityName($3, 18e4);
 STACKTOP = sp;
 return 18e4 | 0;
}

function _Value_get_type($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _GamVarRst() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[44299] | 0;
 _free($0);
 $1 = HEAP32[44298] | 0;
 _free($1);
 $2 = HEAP32[44300] | 0;
 _free($2);
 $3 = HEAP32[44301] | 0;
 _free($3);
 return;
}

function ___DOUBLE_BITS_678($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 $2 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 tempRet0 = $2;
 return $1 | 0;
}

function ___DOUBLE_BITS_564($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 $2 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 tempRet0 = $2;
 return $1 | 0;
}

function _ValueDef_get_size($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _bayeFgtGetGenTer($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = _FgtGetGenTer($2) | 0;
 $4 = $3 & 255;
 STACKTOP = sp;
 return $4 | 0;
}

function _baye_get_u8_value($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $3 & 255;
 STACKTOP = sp;
 return $4 | 0;
}

function _OrderNeedMoney($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = _needMoney($2) | 0;
 $4 = $3 & 65535;
 STACKTOP = sp;
 return $4 | 0;
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = ($0 | 0) == (0 | 0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = _wcrtomb($0, $1, 0) | 0;
  $$0 = $3;
 }
 return $$0 | 0;
}

function _gam_sem_create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = _calloc(1, 4) | 0;
 $0 = $1;
 $2 = $0;
 HEAP32[$2 >> 2] = 0;
 $3 = $0;
 STACKTOP = sp;
 return $3 | 0;
}

function _strerror($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = ___pthread_self_86() | 0;
 $2 = $1 + 188 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = ___strerror_l($0, $3) | 0;
 return $4 | 0;
}

function _bayeGetToolName($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 HEAP8[179936] = 0;
 $2 = $1;
 _GetGoodsName($2, 179936);
 STACKTOP = sp;
 return 179936 | 0;
}

function _has_hook($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = _emscripten_asm_const_ii(9, $2 | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _GamSetAltLibPath($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = ___strdup($2) | 0;
 HEAP32[44290] = $3;
 STACKTOP = sp;
 return;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a - c >>> 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function _rom_fnew() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = _calloc(1, 32) | 0;
 $0 = $1;
 $2 = $0;
 _rom_finit($2);
 $3 = $0;
 STACKTOP = sp;
 return $3 | 0;
}

function __lcd_flush_cb($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = _emscripten_asm_const_ii(0, $2 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _DataBankSwitch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;
 return;
}

function _GamSetDataDir($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = ___strdup($2) | 0;
 HEAP32[44293] = $3;
 STACKTOP = sp;
 return;
}

function _bayeOrderNeedMoney($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = _OrderNeedMoney($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _bind_skill_num($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 _ObjectDef_addFieldArray($2, 3806, 0, 3710, 6);
 STACKTOP = sp;
 return;
}

function _isspace($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $1 = ($0 | 0) == 32;
 $2 = $0 + -9 | 0;
 $3 = $2 >>> 0 < 5;
 $4 = $1 | $3;
 $5 = $4 & 1;
 return $5 | 0;
}

function _gam_timer_open($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP32[2032 >> 2] = $2;
 __timer_open(2024);
 STACKTOP = sp;
 return;
}

function _ValueDef_get_type($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _SysTimer1Open($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 _gam_timer_open($3);
 STACKTOP = sp;
 return;
}

function _Field_get_name($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _bayeSetDebug($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 & 255;
 _GamSetDebug($3);
 STACKTOP = sp;
 return;
}

function _bayeGetPersonName($0) {
 $0 = $0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 188048 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _Value_get_def($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _GamGetPersonCount() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAPU8[242655 >> 0] | HEAPU8[242655 + 1 >> 0] << 8 | HEAPU8[242655 + 2 >> 0] << 16 | HEAPU8[242655 + 3 >> 0] << 24;
 return $0 | 0;
}

function _bayeAlloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = _calloc(1, $2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _baye_init_for_js() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _GamSetResourcePath(3540, 8942);
 _GamSetAltLibPath(3553);
 _GamSetDataDir(3567);
 _GamSetLcdFlushCallback(6);
 _GamConInit() | 0;
 return;
}

function _bayeStrLen($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = _strlen($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _GamSaveRcd($0) {
 $0 = $0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 151300 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _Field_get_value($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 $3 = $2 + 4 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = ($1 | 0) == 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0;
 $$ = $2 ? $0 : $3;
 return $$ | 0;
}

function _gam_timer_set_callback($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP32[2036 >> 2] = $2;
 STACKTOP = sp;
 return;
}

function _GetCitySet($0) {
 $0 = $0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 20564 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _GamSetLcdFlushCallback($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP32[44831] = $2;
 STACKTOP = sp;
 return;
}

function _bayeSetCustomData($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 _gam_setcustomdata($2);
 STACKTOP = sp;
 return;
}

function _GuiPushMsg($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 _msg_queue_put(179308, $2);
 STACKTOP = sp;
 return 1;
}

function _GetDataBankNumber($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;
 return;
}

function _bayeSaveGame($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 _GamSaveRcd($2) | 0;
 STACKTOP = sp;
 return;
}

function _GamShowFrame($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 _SysCopyScreen($2);
 STACKTOP = sp;
 return;
}

function _GamSetDebug($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP8[180040] = $2;
 STACKTOP = sp;
 return;
}

function _DelOrder($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP8[$2 >> 0] = -1;
 STACKTOP = sp;
 return 1;
}

function _gam_srand($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 HEAP32[44291] = $2;
 STACKTOP = sp;
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function _strcat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = _strlen($0) | 0;
 $3 = $0 + $2 | 0;
 _strcpy($3, $1) | 0;
 return $0 | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _bayeSRand($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 _gam_srand($2);
 STACKTOP = sp;
 return;
}

function _bind_get_global() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[44320] | 0;
 $1 = ($0 | 0) == (0 | 0);
 if ($1) {
  _bind_init();
 }
 return 177280 | 0;
}

function _rom_fclose($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;
 return 0;
}

function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0;
 return $3 | 0;
}

function _SysRestoreScreen() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[504] | 0;
 $1 = HEAP32[505] | 0;
 _memcpy($0 | 0, 1039591 | 0, $1 | 0) | 0;
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a + c >>> 0;
 h = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function _SysSaveScreen() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[504] | 0;
 $1 = HEAP32[505] | 0;
 _memcpy(1039591 | 0, $0 | 0, $1 | 0) | 0;
 return;
}

function __timercb() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP8[$0 >> 0] = 6;
 _GuiPushMsg($0) | 0;
 STACKTOP = sp;
 return;
}

function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $3 = ___string_read($0, $1, $2) | 0;
 return $3 | 0;
}

function _FgtMoveBack($0) {
 $0 = $0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 186988 | 0);
}

function _FgtAllRight($0) {
 $0 = $0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 187316 | 0);
}

function _FgtCmdBack($0) {
 $0 = $0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 187092 | 0);
}

function __timer_cb($0) {
 $0 = $0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 185844 | 0);
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _GuiTranslateMsg($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 STACKTOP = sp;
 return 1;
}

function _GuiSetInputFilter($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 STACKTOP = sp;
 return;
}

function _gam_lock_unlock($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 STACKTOP = sp;
 return;
}

function _RealienateDrv($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 STACKTOP = sp;
 return 1;
}

function _SysSetKeySound($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 STACKTOP = sp;
 return;
}

function _GuiSetKbdState($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 STACKTOP = sp;
 return;
}

function _gam_lock_lock($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 STACKTOP = sp;
 return;
}

function _SysGetSecond() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _emscripten_asm_const_ii(10, 0) | 0;
 $1 = $0 & 255;
 return $1 | 0;
}

function _GuiSetKbdType($0) {
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $0;
 STACKTOP = sp;
 return;
}

function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = ___lctrans_impl($0, $1) | 0;
 return $2 | 0;
}

function _bayeGetPersonCount() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _GamGetPersonCount() | 0;
 $1 = $0 & 65535;
 return $1 | 0;
}

function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ___pthread_self_85() | 0;
 $1 = $0 + 64 | 0;
 return $1 | 0;
}

function _SysGetTimer1Number() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _gam_timer_interval() | 0;
 $1 = $0 & 255;
 return $1 | 0;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function _bayeGetCurrentPeriod() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[186275] | 0;
 $1 = $0 & 255;
 return $1 | 0;
}

function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = +_copysign($0, $1);
 return +$2;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $2 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = +_scalbn($0, $1);
 return +$2;
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $2 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = +_frexp($0, $1);
 return +$2;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 ___stpcpy($0, $1) | 0;
 return $0 | 0;
}

function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = +_fmod($0, $1);
 return +$2;
}

function _FgtShowFrame() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[44297] | 0;
 _GamShowFrame($0);
 return;
}

function _bayeGetCustomData() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _gam_getcustomdata() | 0;
 return $0 | 0;
}

function _gam_timer_interval() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[2032 >> 2] | 0;
 return $0 | 0;
}

function _timed_flush_lcd() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 186604 | 0);
}

function ___pthread_self_912() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _pthread_self() | 0;
 return $0 | 0;
}

function ___pthread_self_909() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _pthread_self() | 0;
 return $0 | 0;
}

function ___pthread_self_86() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _pthread_self() | 0;
 return $0 | 0;
}

function ___pthread_self_85() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _pthread_self() | 0;
 return $0 | 0;
}

function _GamChooseCity() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _GetCitySet(241748) | 0;
 return $0 | 0;
}

function _bayeGetGlobal() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _bind_get_global() | 0;
 return $0 | 0;
}

function _gam_getcustomdata() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[44292] | 0;
 return $0 | 0;
}

function _bayeGameEnvInit() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _baye_init_for_js();
 _GamVarInit() | 0;
 return;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function _gam_rand() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _rand_r(177164) | 0;
 return $0 | 0;
}

function _bayeGetSeed() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _gam_seed() | 0;
 return $0 | 0;
}

function _gam_seed() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[44291] | 0;
 return $0 | 0;
}

function _bayeRand() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _gam_rand() | 0;
 return $0 | 0;
}

function _bind_clear_error_string() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[253029] = 0;
 return;
}

function ___ofl_lock() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 ___lock(179392 | 0);
 return 179400 | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0;
}

function _gam_timer_close() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[2028 >> 2] = 0;
 return;
}

function _bayeRestoreScreen() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _SysRestoreScreen();
 return;
}

function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 179328 | 0;
}

function ___ofl_unlock() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 ___unlock(179392 | 0);
 return;
}

function _SysTimer1Close() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _gam_timer_close();
 return;
}

function _GamClearLastMsg() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[180033] = 0;
 return;
}

function _bayeSaveScreen() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _SysSaveScreen();
 return;
}

function b3(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(3);
 return 0;
}

function _bind_get_error_string() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 253029 | 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 31](a1 | 0);
}

function _bayeScriptInit() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _script_init();
 return;
}

function _dummy($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return $0 | 0;
}

function ___unlockfile($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return;
}

function ___lockfile($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0;
}

function _bayeGetGBKBuffer() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 242789 | 0;
}

function _FlashInit() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 __shm_init();
 return;
}

function _pthread_self() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 2640 | 0;
}

function _gam_lock_create() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0 | 0;
}

function _SysGetKeySound() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0;
}

function _GuiGetKbdState() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0;
}

function _SysIconAllClear() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1);
 return 0;
}

function _gam_timer_init() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return;
}

function _bayeGCCheckAll() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return;
}

function _bayePrintGC() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15]();
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function emtStackRestore(x) {
 x = x | 0;
 EMTSTACKTOP = x;
}

function setAsyncState(x) {
 x = x | 0;
 asyncState = x;
}

function b0(p0) {
 p0 = p0 | 0;
 abort(0);
 return 0;
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b2(p0) {
 p0 = p0 | 0;
 abort(2);
}

function b4() {
 abort(4);
}

// EMSCRIPTEN_END_FUNCS

var FUNCTION_TABLE_ii = [b0,___stdio_close,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_sav_fclose,_sav_fclose_w,b0,_rom_fclose,b0,b0,b0,_rom_ftell,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,___stdio_read,___stdio_seek,___stdout_write,_sn_write,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_rom_fseek,b1,b1,b1,b1,___stdio_write,_do_read,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,__lcd_flush_cb,_FgtAllRight,_FgtMoveBack,_FgtCmdBack,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__timer_cb,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_sav_fwrite,b3,b3,_rom_fread,_rom_fwrite,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_v = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__timercb,_timed_flush_lcd,b4,b4,b4,b4];

  return { _bayeLcdRevertRect: _bayeLcdRevertRect, _Field_get_value: _Field_get_value, _baye_set_u16_value: _baye_set_u16_value, _baye_get_u16_value: _baye_get_u16_value, _bayeSendTouchEvent: _bayeSendTouchEvent, _bayeSRand: _bayeSRand, _bayeRand: _bayeRand, _bayeGetArmType: _bayeGetArmType, _sbrk: _sbrk, _memcpy: _memcpy, _bayeLcdDrawImage: _bayeLcdDrawImage, _bayeSetLcdSize: _bayeSetLcdSize, _bayeDeleteToolInCity: _bayeDeleteToolInCity, ___udivmoddi4: ___udivmoddi4, _bayeGetPersonName: _bayeGetPersonName, _emscripten_get_global_libc: _emscripten_get_global_libc, _bayeSaveScreen: _bayeSaveScreen, _baye_set_u32_value: _baye_set_u32_value, _free: _free, _bayeGetCustomData: _bayeGetCustomData, _Object_get_field_by_index: _Object_get_field_by_index, _bayeGetToolName: _bayeGetToolName, _ValueDef_get_array_subdef: _ValueDef_get_array_subdef, _bayeSendKey: _bayeSendKey, _bayeGCCheckAll: _bayeGCCheckAll, _baye_get_u32_value: _baye_get_u32_value, _bayeDeletePersonInCity: _bayeDeletePersonInCity, _Value_get_addr: _Value_get_addr, _bayeGetSeed: _bayeGetSeed, _Value_get_u8_value: _Value_get_u8_value, _bayeFgtGetGenTer: _bayeFgtGetGenTer, _llvm_cttz_i32: _llvm_cttz_i32, _bayeLcdDrawRect: _bayeLcdDrawRect, _bayeOrderNeedMoney: _bayeOrderNeedMoney, _bitshift64Lshr: _bitshift64Lshr, _bayeGetGlobal: _bayeGetGlobal, _bayeLcdClearRect: _bayeLcdClearRect, _bayeGameEnvInit: _bayeGameEnvInit, _bayeSetDebug: _bayeSetDebug, _baye_set_u8_value: _baye_set_u8_value, _llvm_bswap_i32: _llvm_bswap_i32, _bayeAlloc: _bayeAlloc, _Value_get_u32_value: _Value_get_u32_value, _Value_set_u8_value: _Value_set_u8_value, _bayeRestoreScreen: _bayeRestoreScreen, _ValueDef_get_size: _ValueDef_get_size, _bayePutPersonInCity: _bayePutPersonInCity, _main: _main, _bayeLcdDrawLine: _bayeLcdDrawLine, _bayeStrLen: _bayeStrLen, _memset: _memset, _Value_get_type: _Value_get_type, _ValueDef_get_field_count: _ValueDef_get_field_count, _ValueDef_get_array_length: _ValueDef_get_array_length, _i64Subtract: _i64Subtract, _Value_set_u32_value: _Value_set_u32_value, _bayeLcdDrawText: _bayeLcdDrawText, _bayeGetCityName: _bayeGetCityName, _Value_get_def: _Value_get_def, _bayeSaveGame: _bayeSaveGame, _bayeGetGBKBuffer: _bayeGetGBKBuffer, _bayeCityDelGoods: _bayeCityDelGoods, ___muldsi3: ___muldsi3, _bayeGetPersonCount: _bayeGetPersonCount, _bayeSetCustomData: _bayeSetCustomData, _Value_get_u16_value: _Value_get_u16_value, _bayeCityAddGoods: _bayeCityAddGoods, _malloc: _malloc, _Value_set_u16_value: _Value_set_u16_value, _Field_get_name: _Field_get_name, _bayeLevelUp: _bayeLevelUp, ___udivdi3: ___udivdi3, _bayePutToolInCity: _bayePutToolInCity, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _baye_get_u8_value: _baye_get_u8_value, ___muldi3: ___muldi3, _ValueDef_get_field_by_index: _ValueDef_get_field_by_index, _bayeGetSkillName: _bayeGetSkillName, _bayeOrderComsumeMoney: _bayeOrderComsumeMoney, ___uremdi3: ___uremdi3, _bayeScriptInit: _bayeScriptInit, _Field_get_type: _Field_get_type, _i64Add: _i64Add, _bayePrintGC: _bayePrintGC, _bayeLcdDot: _bayeLcdDot, _ValueDef_get_type: _ValueDef_get_type, ___errno_location: ___errno_location, _Object_get_field_count: _Object_get_field_count, _bayeGetCurrentPeriod: _bayeGetCurrentPeriod, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, emterpret: emterpret, setAsyncState: setAsyncState, emtStackSave: emtStackSave, emtStackRestore: emtStackRestore, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _bayeLcdRevertRect = Module["_bayeLcdRevertRect"] = asm["_bayeLcdRevertRect"];
var _Field_get_value = Module["_Field_get_value"] = asm["_Field_get_value"];
var _baye_set_u16_value = Module["_baye_set_u16_value"] = asm["_baye_set_u16_value"];
var _baye_get_u16_value = Module["_baye_get_u16_value"] = asm["_baye_get_u16_value"];
var _Value_get_u8_value = Module["_Value_get_u8_value"] = asm["_Value_get_u8_value"];
var _bayeSRand = Module["_bayeSRand"] = asm["_bayeSRand"];
var _bayeRand = Module["_bayeRand"] = asm["_bayeRand"];
var _bayeGetArmType = Module["_bayeGetArmType"] = asm["_bayeGetArmType"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bayeLcdDrawImage = Module["_bayeLcdDrawImage"] = asm["_bayeLcdDrawImage"];
var _bayeSetLcdSize = Module["_bayeSetLcdSize"] = asm["_bayeSetLcdSize"];
var _bayeDeleteToolInCity = Module["_bayeDeleteToolInCity"] = asm["_bayeDeleteToolInCity"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _bayeGetPersonName = Module["_bayeGetPersonName"] = asm["_bayeGetPersonName"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _bayeSaveScreen = Module["_bayeSaveScreen"] = asm["_bayeSaveScreen"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var _baye_set_u32_value = Module["_baye_set_u32_value"] = asm["_baye_set_u32_value"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _bayeGetCustomData = Module["_bayeGetCustomData"] = asm["_bayeGetCustomData"];
var _Object_get_field_by_index = Module["_Object_get_field_by_index"] = asm["_Object_get_field_by_index"];
var _bayeGetToolName = Module["_bayeGetToolName"] = asm["_bayeGetToolName"];
var _ValueDef_get_array_subdef = Module["_ValueDef_get_array_subdef"] = asm["_ValueDef_get_array_subdef"];
var _bayeSendKey = Module["_bayeSendKey"] = asm["_bayeSendKey"];
var _bayeGCCheckAll = Module["_bayeGCCheckAll"] = asm["_bayeGCCheckAll"];
var _baye_get_u32_value = Module["_baye_get_u32_value"] = asm["_baye_get_u32_value"];
var _bayeDeletePersonInCity = Module["_bayeDeletePersonInCity"] = asm["_bayeDeletePersonInCity"];
var _Value_get_addr = Module["_Value_get_addr"] = asm["_Value_get_addr"];
var _bayeGetSeed = Module["_bayeGetSeed"] = asm["_bayeGetSeed"];
var _bayeSendTouchEvent = Module["_bayeSendTouchEvent"] = asm["_bayeSendTouchEvent"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bayeFgtGetGenTer = Module["_bayeFgtGetGenTer"] = asm["_bayeFgtGetGenTer"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _bayeLcdDrawRect = Module["_bayeLcdDrawRect"] = asm["_bayeLcdDrawRect"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _bayeOrderNeedMoney = Module["_bayeOrderNeedMoney"] = asm["_bayeOrderNeedMoney"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bayeGetGlobal = Module["_bayeGetGlobal"] = asm["_bayeGetGlobal"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _bayeLcdClearRect = Module["_bayeLcdClearRect"] = asm["_bayeLcdClearRect"];
var _bayeGameEnvInit = Module["_bayeGameEnvInit"] = asm["_bayeGameEnvInit"];
var _bayeSetDebug = Module["_bayeSetDebug"] = asm["_bayeSetDebug"];
var _baye_set_u8_value = Module["_baye_set_u8_value"] = asm["_baye_set_u8_value"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bayeAlloc = Module["_bayeAlloc"] = asm["_bayeAlloc"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _Value_get_u32_value = Module["_Value_get_u32_value"] = asm["_Value_get_u32_value"];
var _Value_set_u8_value = Module["_Value_set_u8_value"] = asm["_Value_set_u8_value"];
var _bayeRestoreScreen = Module["_bayeRestoreScreen"] = asm["_bayeRestoreScreen"];
var _ValueDef_get_size = Module["_ValueDef_get_size"] = asm["_ValueDef_get_size"];
var _bayePutPersonInCity = Module["_bayePutPersonInCity"] = asm["_bayePutPersonInCity"];
var _main = Module["_main"] = asm["_main"];
var _bayeLcdDrawLine = Module["_bayeLcdDrawLine"] = asm["_bayeLcdDrawLine"];
var _bayeStrLen = Module["_bayeStrLen"] = asm["_bayeStrLen"];
var _memset = Module["_memset"] = asm["_memset"];
var _Value_get_type = Module["_Value_get_type"] = asm["_Value_get_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _ValueDef_get_array_length = Module["_ValueDef_get_array_length"] = asm["_ValueDef_get_array_length"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _Value_set_u32_value = Module["_Value_set_u32_value"] = asm["_Value_set_u32_value"];
var _bayeLcdDrawText = Module["_bayeLcdDrawText"] = asm["_bayeLcdDrawText"];
var _bayeGetCityName = Module["_bayeGetCityName"] = asm["_bayeGetCityName"];
var _Value_get_def = Module["_Value_get_def"] = asm["_Value_get_def"];
var _bayeSaveGame = Module["_bayeSaveGame"] = asm["_bayeSaveGame"];
var _bayeGetGBKBuffer = Module["_bayeGetGBKBuffer"] = asm["_bayeGetGBKBuffer"];
var _bayeCityDelGoods = Module["_bayeCityDelGoods"] = asm["_bayeCityDelGoods"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _bayeGetPersonCount = Module["_bayeGetPersonCount"] = asm["_bayeGetPersonCount"];
var _bayeSetCustomData = Module["_bayeSetCustomData"] = asm["_bayeSetCustomData"];
var _Value_get_u16_value = Module["_Value_get_u16_value"] = asm["_Value_get_u16_value"];
var _bayeCityAddGoods = Module["_bayeCityAddGoods"] = asm["_bayeCityAddGoods"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _Value_set_u16_value = Module["_Value_set_u16_value"] = asm["_Value_set_u16_value"];
var _Field_get_name = Module["_Field_get_name"] = asm["_Field_get_name"];
var _bayeLevelUp = Module["_bayeLevelUp"] = asm["_bayeLevelUp"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bayePutToolInCity = Module["_bayePutToolInCity"] = asm["_bayePutToolInCity"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _baye_get_u8_value = Module["_baye_get_u8_value"] = asm["_baye_get_u8_value"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _ValueDef_get_field_by_index = Module["_ValueDef_get_field_by_index"] = asm["_ValueDef_get_field_by_index"];
var _bayeGetSkillName = Module["_bayeGetSkillName"] = asm["_bayeGetSkillName"];
var _bayeOrderComsumeMoney = Module["_bayeOrderComsumeMoney"] = asm["_bayeOrderComsumeMoney"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bayeScriptInit = Module["_bayeScriptInit"] = asm["_bayeScriptInit"];
var _Field_get_type = Module["_Field_get_type"] = asm["_Field_get_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _bayePrintGC = Module["_bayePrintGC"] = asm["_bayePrintGC"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _bayeLcdDot = Module["_bayeLcdDot"] = asm["_bayeLcdDot"];
var _ValueDef_get_type = Module["_ValueDef_get_type"] = asm["_ValueDef_get_type"];
var _ValueDef_get_field_count = Module["_ValueDef_get_field_count"] = asm["_ValueDef_get_field_count"];
var _Object_get_field_count = Module["_Object_get_field_count"] = asm["_Object_get_field_count"];
var _bayeGetCurrentPeriod = Module["_bayeGetCurrentPeriod"] = asm["_bayeGetCurrentPeriod"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  var initialEmtStackTop = Module['asm'].emtStackSave();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['asm'].emtStackRestore(initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}








